
MX90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800d190  0800d190  0001d190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5e8  0800d5e8  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5e8  0800d5e8  0001d5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f0  0800d5f0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5f4  0800d5f4  0001d5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d5f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d4  200001e8  0800d7e0  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022bc  0800d7e0  000222bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162d9  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f06  00000000  00000000  00036534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00039440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f99  00000000  00000000  0003a858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e45  00000000  00000000  0003b7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183ad  00000000  00000000  0005e636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de228  00000000  00000000  000769e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069a0  00000000  00000000  00154c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015b5ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d174 	.word	0x0800d174

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d174 	.word	0x0800d174

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_I2C_IsActiveFlag_TXE+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	2b20      	cmp	r3, #32
 8001032:	d101      	bne.n	8001038 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	2b40      	cmp	r3, #64	; 0x40
 8001058:	d101      	bne.n	800105e <LL_I2C_IsActiveFlag_TC+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_I2C_IsActiveFlag_TC+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_I2C_IsActiveFlag_TCR>:
  * @rmtoll ISR          TCR           LL_I2C_IsActiveFlag_TCR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TCR(const I2C_TypeDef *I2Cx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107c:	2b80      	cmp	r3, #128	; 0x80
 800107e:	d101      	bne.n	8001084 <LL_I2C_IsActiveFlag_TCR+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_I2C_IsActiveFlag_TCR+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010a6:	d101      	bne.n	80010ac <LL_I2C_IsActiveFlag_BUSY+0x1a>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <LL_I2C_IsActiveFlag_BUSY+0x1c>
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f043 0210 	orr.w	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	61da      	str	r2, [r3, #28]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80010da:	b480      	push	{r7}
 80010dc:	b083      	sub	sp, #12
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f043 0220 	orr.w	r2, r3, #32
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	61da      	str	r2, [r3, #28]
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001116:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	041b      	lsls	r3, r3, #16
 800111c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001120:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 8001126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001128:	4313      	orrs	r3, r2
 800112a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800112e:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	0d5b      	lsrs	r3, r3, #21
 8001138:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <LL_I2C_HandleTransfer+0x5c>)
 800113e:	430b      	orrs	r3, r1
 8001140:	43db      	mvns	r3, r3
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	431a      	orrs	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 800114c:	bf00      	nop
 800114e:	371c      	adds	r7, #28
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	03ff7bff 	.word	0x03ff7bff

0800115c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	b2db      	uxtb	r3, r3
}
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001182:	78fa      	ldrb	r2, [r7, #3]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <MLX90640_I2CInit>:
#include "main.h"

//I2C_HandleTypeDef _hi2c;

void MLX90640_I2CInit(/*I2C_HandleTypeDef hi2c*/)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
//	_hi2c = hi2c;
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <MLX90640_I2CReadWord>:

uint16_t MLX90640_I2CReadWord(uint8_t slaveAddress, uint16_t start_address)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	4603      	mov	r3, r0
 80011ac:	460a      	mov	r2, r1
 80011ae:	71fb      	strb	r3, [r7, #7]
 80011b0:	4613      	mov	r3, r2
 80011b2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&_hi2c, slaveAddress, start_address, 2, buf, 2, 100);
	return ((buf[0] << 8) | (buf[1] & 0xFF));
*/
	volatile uint8_t reg_m,reg_l,dat_m,dat_l;

	reg_m = (uint8_t) ((start_address & 0xFF00) >> 8);	//Address MSB
 80011b4:	88bb      	ldrh	r3, [r7, #4]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (start_address & 0x00FF); 	    //Address LSB
 80011be:	88bb      	ldrh	r3, [r7, #4]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	73bb      	strb	r3, [r7, #14]


	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {
 80011c4:	bf00      	nop
 80011c6:	483a      	ldr	r0, [pc, #232]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 80011c8:	f7ff ff63 	bl	8001092 <LL_I2C_IsActiveFlag_BUSY>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <MLX90640_I2CReadWord+0x22>
	}

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 80011d2:	79f9      	ldrb	r1, [r7, #7]
 80011d4:	4b37      	ldr	r3, [pc, #220]	; (80012b4 <MLX90640_I2CReadWord+0x110>)
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	2300      	movs	r3, #0
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2302      	movs	r3, #2
 80011de:	2200      	movs	r2, #0
 80011e0:	4833      	ldr	r0, [pc, #204]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 80011e2:	f7ff ff8b 	bl	80010fc <LL_I2C_HandleTransfer>
    		LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXE(I2C1)){};
 80011e6:	bf00      	nop
 80011e8:	4831      	ldr	r0, [pc, #196]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 80011ea:	f7ff fef3 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f9      	beq.n	80011e8 <MLX90640_I2CReadWord+0x44>

    LL_I2C_TransmitData8(I2C1, reg_m);
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	482d      	ldr	r0, [pc, #180]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 80011fc:	f7ff ffbb 	bl	8001176 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 8001200:	bf00      	nop
 8001202:	482b      	ldr	r0, [pc, #172]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001204:	f7ff fee6 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f9      	beq.n	8001202 <MLX90640_I2CReadWord+0x5e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4619      	mov	r1, r3
 8001214:	4826      	ldr	r0, [pc, #152]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001216:	f7ff ffae 	bl	8001176 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TC(I2C1)) {};
 800121a:	bf00      	nop
 800121c:	4824      	ldr	r0, [pc, #144]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800121e:	f7ff ff12 	bl	8001046 <LL_I2C_IsActiveFlag_TC>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f9      	beq.n	800121c <MLX90640_I2CReadWord+0x78>

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 8001228:	79f9      	ldrb	r1, [r7, #7]
 800122a:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <MLX90640_I2CReadWord+0x114>)
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	2200      	movs	r2, #0
 8001238:	481d      	ldr	r0, [pc, #116]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800123a:	f7ff ff5f 	bl	80010fc <LL_I2C_HandleTransfer>
                              I2C_CR2_AUTOEND ,LL_I2C_GENERATE_START_READ);

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 800123e:	bf00      	nop
 8001240:	481b      	ldr	r0, [pc, #108]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001242:	f7ff feda 	bl	8000ffa <LL_I2C_IsActiveFlag_RXNE>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f9      	beq.n	8001240 <MLX90640_I2CReadWord+0x9c>

    dat_m = LL_I2C_ReceiveData8(I2C1);
 800124c:	4818      	ldr	r0, [pc, #96]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800124e:	f7ff ff85 	bl	800115c <LL_I2C_ReceiveData8>
 8001252:	4603      	mov	r3, r0
 8001254:	737b      	strb	r3, [r7, #13]

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 8001256:	bf00      	nop
 8001258:	4815      	ldr	r0, [pc, #84]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800125a:	f7ff fece 	bl	8000ffa <LL_I2C_IsActiveFlag_RXNE>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f9      	beq.n	8001258 <MLX90640_I2CReadWord+0xb4>

    dat_l = LL_I2C_ReceiveData8(I2C1);
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001266:	f7ff ff79 	bl	800115c <LL_I2C_ReceiveData8>
 800126a:	4603      	mov	r3, r0
 800126c:	733b      	strb	r3, [r7, #12]

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 800126e:	bf00      	nop
 8001270:	480f      	ldr	r0, [pc, #60]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001272:	f7ff fed5 	bl	8001020 <LL_I2C_IsActiveFlag_STOP>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f9      	beq.n	8001270 <MLX90640_I2CReadWord+0xcc>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 800127c:	480c      	ldr	r0, [pc, #48]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800127e:	f7ff ff1c 	bl	80010ba <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 8001284:	f7ff ff29 	bl	80010da <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	4908      	ldr	r1, [pc, #32]	; (80012b0 <MLX90640_I2CReadWord+0x10c>)
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <MLX90640_I2CReadWord+0x118>)
 8001290:	4013      	ands	r3, r2
 8001292:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));

	return ((uint16_t) (dat_m << 8)) | ((uint16_t)((dat_l) & 0x00FF));
 8001294:	7b7b      	ldrb	r3, [r7, #13]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	b29b      	uxth	r3, r3
 800129a:	021b      	lsls	r3, r3, #8
 800129c:	b29a      	uxth	r2, r3
 800129e:	7b3b      	ldrb	r3, [r7, #12]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	b29b      	uxth	r3, r3
 80012a4:	4313      	orrs	r3, r2
 80012a6:	b29b      	uxth	r3, r3

}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40005400 	.word	0x40005400
 80012b4:	80002000 	.word	0x80002000
 80012b8:	80002400 	.word	0x80002400
 80012bc:	fe00e800 	.word	0xfe00e800

080012c0 <MLX90640_I2CRead>:
{
	return 0;
}

int MLX90640_I2CRead(uint8_t slaveAddr,uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]
 80012cc:	460b      	mov	r3, r1
 80012ce:	81bb      	strh	r3, [r7, #12]
 80012d0:	4613      	mov	r3, r2
 80012d2:	817b      	strh	r3, [r7, #10]
	slaveAddr <<= 1;
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]

	uint16_t temp_address = startAddress;
 80012da:	89bb      	ldrh	r3, [r7, #12]
 80012dc:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_data;
	for(int i=0; i < nMemAddressRead; i++){
 80012de:	2300      	movs	r3, #0
 80012e0:	61bb      	str	r3, [r7, #24]
 80012e2:	e013      	b.n	800130c <MLX90640_I2CRead+0x4c>

		temp_data = MLX90640_I2CReadWord(slaveAddr,temp_address);
 80012e4:	8bfa      	ldrh	r2, [r7, #30]
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4611      	mov	r1, r2
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff ff5a 	bl	80011a4 <MLX90640_I2CReadWord>
 80012f0:	4603      	mov	r3, r0
 80012f2:	82fb      	strh	r3, [r7, #22]
		temp_address++;
 80012f4:	8bfb      	ldrh	r3, [r7, #30]
 80012f6:	3301      	adds	r3, #1
 80012f8:	83fb      	strh	r3, [r7, #30]
		*(data + i) = temp_data;
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	8afa      	ldrh	r2, [r7, #22]
 8001304:	801a      	strh	r2, [r3, #0]
	for(int i=0; i < nMemAddressRead; i++){
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	3301      	adds	r3, #1
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	897b      	ldrh	r3, [r7, #10]
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbe7      	blt.n	80012e4 <MLX90640_I2CRead+0x24>

	}
	return 0;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
	...

08001320 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr,uint16_t writeAddress, uint16_t data)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	460b      	mov	r3, r1
 800132c:	80bb      	strh	r3, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	807b      	strh	r3, [r7, #2]
	buf[0] = (data >> 8) & 0xFF;
	slaveAddr <<= 1;
	HAL_I2C_Mem_Write(&_hi2c, slaveAddr, writeAddress, 2, buf, 2, 100);
	return 0;
*/
	slaveAddr <<= 1;
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_m,reg_l,dat_m,dat_l;
	reg_m = (uint8_t) ((writeAddress & 0xFF00) >> 8);			//Address MSB
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	0a1b      	lsrs	r3, r3, #8
 800133c:	b29b      	uxth	r3, r3
 800133e:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (writeAddress & 0x00FF); 				//Address LSB
 8001340:	88bb      	ldrh	r3, [r7, #4]
 8001342:	73bb      	strb	r3, [r7, #14]
	dat_m = (uint8_t) ((data & 0xFF00) >> 8);	// Data MSB
 8001344:	887b      	ldrh	r3, [r7, #2]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29b      	uxth	r3, r3
 800134a:	737b      	strb	r3, [r7, #13]
	dat_l = (uint8_t) (data & 0x00FF);			//Data LSB
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	733b      	strb	r3, [r7, #12]

	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {
 8001350:	bf00      	nop
 8001352:	4835      	ldr	r0, [pc, #212]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001354:	f7ff fe9d 	bl	8001092 <LL_I2C_IsActiveFlag_BUSY>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f9      	bne.n	8001352 <MLX90640_I2CWrite+0x32>
	}

    LL_I2C_HandleTransfer(I2C1, slaveAddr, LL_I2C_ADDRSLAVE_7BIT, 2,
 800135e:	79f9      	ldrb	r1, [r7, #7]
 8001360:	4b32      	ldr	r3, [pc, #200]	; (800142c <MLX90640_I2CWrite+0x10c>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2302      	movs	r3, #2
 800136c:	2200      	movs	r2, #0
 800136e:	482e      	ldr	r0, [pc, #184]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001370:	f7ff fec4 	bl	80010fc <LL_I2C_HandleTransfer>
    		I2C_CR2_RELOAD, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXE(I2C1)){};
 8001374:	bf00      	nop
 8001376:	482c      	ldr	r0, [pc, #176]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001378:	f7ff fe2c 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f9      	beq.n	8001376 <MLX90640_I2CWrite+0x56>

    LL_I2C_TransmitData8(I2C1, reg_m);
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	4619      	mov	r1, r3
 8001386:	4828      	ldr	r0, [pc, #160]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001388:	f7ff fef5 	bl	8001176 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 800138c:	bf00      	nop
 800138e:	4826      	ldr	r0, [pc, #152]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001390:	f7ff fe20 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f9      	beq.n	800138e <MLX90640_I2CWrite+0x6e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	4619      	mov	r1, r3
 800139e:	4822      	ldr	r0, [pc, #136]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013a0:	f7ff fee9 	bl	8001176 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TCR(I2C1)) {};
 80013a4:	bf00      	nop
 80013a6:	4820      	ldr	r0, [pc, #128]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013a8:	f7ff fe60 	bl	800106c <LL_I2C_IsActiveFlag_TCR>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d0f9      	beq.n	80013a6 <MLX90640_I2CWrite+0x86>

    LL_I2C_HandleTransfer(I2C1, slaveAddr, LL_I2C_ADDRSLAVE_7BIT, 2,
 80013b2:	79f9      	ldrb	r1, [r7, #7]
 80013b4:	2300      	movs	r3, #0
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2302      	movs	r3, #2
 80013c0:	2200      	movs	r2, #0
 80013c2:	4819      	ldr	r0, [pc, #100]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013c4:	f7ff fe9a 	bl	80010fc <LL_I2C_HandleTransfer>
                              I2C_CR2_AUTOEND ,LL_I2C_GENERATE_NOSTARTSTOP);

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 80013c8:	bf00      	nop
 80013ca:	4817      	ldr	r0, [pc, #92]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013cc:	f7ff fe02 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <MLX90640_I2CWrite+0xaa>

    LL_I2C_TransmitData8(I2C1, dat_m);
 80013d6:	7b7b      	ldrb	r3, [r7, #13]
 80013d8:	4619      	mov	r1, r3
 80013da:	4813      	ldr	r0, [pc, #76]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013dc:	f7ff fecb 	bl	8001176 <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 80013e0:	bf00      	nop
 80013e2:	4811      	ldr	r0, [pc, #68]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013e4:	f7ff fdf6 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f9      	beq.n	80013e2 <MLX90640_I2CWrite+0xc2>

    LL_I2C_TransmitData8(I2C1, dat_l);
 80013ee:	7b3b      	ldrb	r3, [r7, #12]
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013f4:	f7ff febf 	bl	8001176 <LL_I2C_TransmitData8>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 80013f8:	bf00      	nop
 80013fa:	480b      	ldr	r0, [pc, #44]	; (8001428 <MLX90640_I2CWrite+0x108>)
 80013fc:	f7ff fe10 	bl	8001020 <LL_I2C_IsActiveFlag_STOP>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0f9      	beq.n	80013fa <MLX90640_I2CWrite+0xda>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001408:	f7ff fe57 	bl	80010ba <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 800140c:	4806      	ldr	r0, [pc, #24]	; (8001428 <MLX90640_I2CWrite+0x108>)
 800140e:	f7ff fe64 	bl	80010da <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	4904      	ldr	r1, [pc, #16]	; (8001428 <MLX90640_I2CWrite+0x108>)
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <MLX90640_I2CWrite+0x110>)
 800141a:	4013      	ands	r3, r2
 800141c:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));


	return 0;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40005400 	.word	0x40005400
 800142c:	80002000 	.word	0x80002000
 8001430:	fe00e800 	.word	0xfe00e800

08001434 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	6039      	str	r1, [r7, #0]
 800143e:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8001440:	79f8      	ldrb	r0, [r7, #7]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	f44f 7250 	mov.w	r2, #832	; 0x340
 8001448:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 800144c:	f7ff ff38 	bl	80012c0 <MLX90640_I2CRead>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b0a6      	sub	sp, #152	; 0x98
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	6039      	str	r1, [r7, #0]
 8001464:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

    while(dataReady == 0)
 8001478:	e016      	b.n	80014a8 <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 800147a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800147e:	79f8      	ldrb	r0, [r7, #7]
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001486:	f7ff ff1b 	bl	80012c0 <MLX90640_I2CRead>
 800148a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if(error != MLX90640_NO_ERROR)
 800148e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <MLX90640_GetFrameData+0x42>
        {
            return error;
 8001496:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800149a:	e093      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 800149c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80014a0:	f003 0308 	and.w	r3, r3, #8
 80014a4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    while(dataReady == 0)
 80014a8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0e4      	beq.n	800147a <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2230      	movs	r2, #48	; 0x30
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff31 	bl	8001320 <MLX90640_I2CWrite>
 80014be:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 80014c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ca:	d102      	bne.n	80014d2 <MLX90640_GetFrameData+0x78>
    {
        return error;
 80014cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014d0:	e078      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 80014d2:	79f8      	ldrb	r0, [r7, #7]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014de:	f7ff feef 	bl	80012c0 <MLX90640_I2CRead>
 80014e2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 80014e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d002      	beq.n	80014f4 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 80014ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014f2:	e067      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 80014f4:	f107 030c 	add.w	r3, r7, #12
 80014f8:	79f8      	ldrb	r0, [r7, #7]
 80014fa:	2240      	movs	r2, #64	; 0x40
 80014fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001500:	f7ff fede 	bl	80012c0 <MLX90640_I2CRead>
 8001504:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 8001508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8001510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001514:	e056      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001516:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 800151a:	79f8      	ldrb	r0, [r7, #7]
 800151c:	2201      	movs	r2, #1
 800151e:	f248 010d 	movw	r1, #32781	; 0x800d
 8001522:	f7ff fecd 	bl	80012c0 <MLX90640_I2CRead>
 8001526:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    frameData[832] = controlRegister1;
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001530:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001534:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 8001536:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001540:	f002 0201 	and.w	r2, r2, #1
 8001544:	b292      	uxth	r2, r2
 8001546:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 8001548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8001550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001554:	e036      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f867 	bl	800162e <ValidateAuxData>
 8001560:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == MLX90640_NO_ERROR)
 8001564:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001568:	2b00      	cmp	r3, #0
 800156a:	d11b      	bne.n	80015a4 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001572:	e013      	b.n	800159c <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8001574:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001578:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 800157c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001580:	0052      	lsls	r2, r2, #1
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	440a      	add	r2, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	3398      	adds	r3, #152	; 0x98
 800158a:	443b      	add	r3, r7
 800158c:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8001590:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001592:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001596:	3301      	adds	r3, #1
 8001598:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800159c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80015a0:	2b3f      	cmp	r3, #63	; 0x3f
 80015a2:	d9e7      	bls.n	8001574 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f000 f811 	bl	80015cc <ValidateFrameData>
 80015aa:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (error != MLX90640_NO_ERROR)
 80015ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <MLX90640_GetFrameData+0x162>
    {
        return error;
 80015b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ba:	e003      	b.n	80015c4 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80015c2:	881b      	ldrh	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3798      	adds	r7, #152	; 0x98
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	e01c      	b.n	8001618 <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d10d      	bne.n	800160c <ValidateFrameData+0x40>
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f003 0301 	and.w	r3, r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d102      	bne.n	800160c <ValidateFrameData+0x40>
 8001606:	f06f 0307 	mvn.w	r3, #7
 800160a:	e00a      	b.n	8001622 <ValidateFrameData+0x56>
        line = line + 1;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	3301      	adds	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3320      	adds	r3, #32
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800161e:	dbde      	blt.n	80015de <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 800162e:	b480      	push	{r7}
 8001630:	b089      	sub	sp, #36	; 0x24
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	881b      	ldrh	r3, [r3, #0]
 800163a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <ValidateAuxData+0x1a>
 8001642:	f06f 0307 	mvn.w	r3, #7
 8001646:	e07e      	b.n	8001746 <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 8001648:	2308      	movs	r3, #8
 800164a:	61fb      	str	r3, [r7, #28]
 800164c:	e00e      	b.n	800166c <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	881b      	ldrh	r3, [r3, #0]
 8001658:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800165c:	4293      	cmp	r3, r2
 800165e:	d102      	bne.n	8001666 <ValidateAuxData+0x38>
 8001660:	f06f 0307 	mvn.w	r3, #7
 8001664:	e06f      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3301      	adds	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b12      	cmp	r3, #18
 8001670:	dded      	ble.n	800164e <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 8001672:	2314      	movs	r3, #20
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	e00e      	b.n	8001696 <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	4413      	add	r3, r2
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001686:	4293      	cmp	r3, r2
 8001688:	d102      	bne.n	8001690 <ValidateAuxData+0x62>
 800168a:	f06f 0307 	mvn.w	r3, #7
 800168e:	e05a      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	3301      	adds	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b16      	cmp	r3, #22
 800169a:	dded      	ble.n	8001678 <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 800169c:	2318      	movs	r3, #24
 800169e:	617b      	str	r3, [r7, #20]
 80016a0:	e00e      	b.n	80016c0 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d102      	bne.n	80016ba <ValidateAuxData+0x8c>
 80016b4:	f06f 0307 	mvn.w	r3, #7
 80016b8:	e045      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2b20      	cmp	r3, #32
 80016c4:	dded      	ble.n	80016a2 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 80016c6:	2328      	movs	r3, #40	; 0x28
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	e00e      	b.n	80016ea <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016da:	4293      	cmp	r3, r2
 80016dc:	d102      	bne.n	80016e4 <ValidateAuxData+0xb6>
 80016de:	f06f 0307 	mvn.w	r3, #7
 80016e2:	e030      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	3301      	adds	r3, #1
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	2b32      	cmp	r3, #50	; 0x32
 80016ee:	dded      	ble.n	80016cc <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 80016f0:	2334      	movs	r3, #52	; 0x34
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	e00e      	b.n	8001714 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001704:	4293      	cmp	r3, r2
 8001706:	d102      	bne.n	800170e <ValidateAuxData+0xe0>
 8001708:	f06f 0307 	mvn.w	r3, #7
 800170c:	e01b      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	3301      	adds	r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2b36      	cmp	r3, #54	; 0x36
 8001718:	dded      	ble.n	80016f6 <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 800171a:	2338      	movs	r3, #56	; 0x38
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	e00e      	b.n	800173e <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	4413      	add	r3, r2
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800172e:	4293      	cmp	r3, r2
 8001730:	d102      	bne.n	8001738 <ValidateAuxData+0x10a>
 8001732:	f06f 0307 	mvn.w	r3, #7
 8001736:	e006      	b.n	8001746 <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	3301      	adds	r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2b3f      	cmp	r3, #63	; 0x3f
 8001742:	dded      	ble.n	8001720 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 8001744:	2300      	movs	r3, #0

}
 8001746:	4618      	mov	r0, r3
 8001748:	3724      	adds	r7, #36	; 0x24
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b084      	sub	sp, #16
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
    int error = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f001 f972 	bl	8002a4c <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 8001768:	6839      	ldr	r1, [r7, #0]
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f001 f99a 	bl	8002aa4 <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8001770:	6839      	ldr	r1, [r7, #0]
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f001 fa22 	bl	8002bbc <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f001 fa30 	bl	8002be0 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f001 fa48 	bl	8002c18 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 8001788:	6839      	ldr	r1, [r7, #0]
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f001 fa5c 	bl	8002c48 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8001790:	6839      	ldr	r1, [r7, #0]
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f001 fa76 	bl	8002c84 <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 8001798:	6839      	ldr	r1, [r7, #0]
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f002 fd44 	bl	8004228 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f001 fb2c 	bl	8002e00 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80017a8:	6839      	ldr	r1, [r7, #0]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f001 feb0 	bl	8003510 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80017b0:	6839      	ldr	r1, [r7, #0]
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f002 f8e8 	bl	8003988 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80017b8:	6839      	ldr	r1, [r7, #0]
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f002 fb2c 	bl	8003e18 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 80017c0:	6839      	ldr	r1, [r7, #0]
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f002 fe6c 	bl	80044a0 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 80017c8:	6839      	ldr	r1, [r7, #0]
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f002 ff08 	bl	80045e0 <ExtractDeviatingPixels>
 80017d0:	60f8      	str	r0, [r7, #12]

    return error;
 80017d2:	68fb      	ldr	r3, [r7, #12]

}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	460a      	mov	r2, r1
 80017e6:	71fb      	strb	r3, [r7, #7]
 80017e8:	4613      	mov	r3, r2
 80017ea:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	01db      	lsls	r3, r3, #7
 80017f2:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80017fa:	817b      	strh	r3, [r7, #10]

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	79f8      	ldrb	r0, [r7, #7]
 8001802:	2201      	movs	r2, #1
 8001804:	f248 010d 	movw	r1, #32781	; 0x800d
 8001808:	f7ff fd5a 	bl	80012c0 <MLX90640_I2CRead>
 800180c:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10e      	bne.n	8001832 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 8001814:	893b      	ldrh	r3, [r7, #8]
 8001816:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800181a:	b29a      	uxth	r2, r3
 800181c:	897b      	ldrh	r3, [r7, #10]
 800181e:	4313      	orrs	r3, r2
 8001820:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 8001822:	897a      	ldrh	r2, [r7, #10]
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	f248 010d 	movw	r1, #32781	; 0x800d
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fd78 	bl	8001320 <MLX90640_I2CWrite>
 8001830:	60f8      	str	r0, [r7, #12]
    }

    return error;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <MLX90640_GetCurMode>:
}

//------------------------------------------------------------------------------

int MLX90640_GetCurMode(uint8_t slaveAddr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int modeRAM;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001846:	f107 030e 	add.w	r3, r7, #14
 800184a:	79f8      	ldrb	r0, [r7, #7]
 800184c:	2201      	movs	r2, #1
 800184e:	f248 010d 	movw	r1, #32781	; 0x800d
 8001852:	f7ff fd35 	bl	80012c0 <MLX90640_I2CRead>
 8001856:	6178      	str	r0, [r7, #20]
    if(error != 0)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MLX90640_GetCurMode+0x26>
    {
        return error;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	e005      	b.n	800186e <MLX90640_GetCurMode+0x32>
    }
    modeRAM = (controlRegister1 & MLX90640_CTRL_MEAS_MODE_MASK) >> MLX90640_CTRL_MEAS_MODE_SHIFT;
 8001862:	89fb      	ldrh	r3, [r7, #14]
 8001864:	0b1b      	lsrs	r3, r3, #12
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	613b      	str	r3, [r7, #16]

    return modeRAM;
 800186c:	693b      	ldr	r3, [r7, #16]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <MLX90640_CalculateTo>:

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8001878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800187c:	b0a0      	sub	sp, #128	; 0x80
 800187e:	af00      	add	r7, sp, #0
 8001880:	6178      	str	r0, [r7, #20]
 8001882:	6139      	str	r1, [r7, #16]
 8001884:	ed87 0a03 	vstr	s0, [r7, #12]
 8001888:	edc7 0a02 	vstr	s1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 8001894:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001898:	6939      	ldr	r1, [r7, #16]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f000 fd04 	bl	80022a8 <MLX90640_GetVdd>
 80018a0:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
    ta = MLX90640_GetTa(frameData, params);
 80018a4:	6939      	ldr	r1, [r7, #16]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f000 fd76 	bl	8002398 <MLX90640_GetTa>
 80018ac:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    ta4 = (ta + 273.15);
 80018b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80018b2:	f7fe fe71 	bl	8000598 <__aeabi_f2d>
 80018b6:	a3e6      	add	r3, pc, #920	; (adr r3, 8001c50 <MLX90640_CalculateTo+0x3d8>)
 80018b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018bc:	f7fe fd0e 	bl	80002dc <__adddf3>
 80018c0:	4602      	mov	r2, r0
 80018c2:	460b      	mov	r3, r1
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	f7ff f9b6 	bl	8000c38 <__aeabi_d2f>
 80018cc:	4603      	mov	r3, r0
 80018ce:	667b      	str	r3, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 80018d0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80018d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018d8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 80018dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80018e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    tr4 = (tr + 273.15);
 80018e8:	68b8      	ldr	r0, [r7, #8]
 80018ea:	f7fe fe55 	bl	8000598 <__aeabi_f2d>
 80018ee:	a3d8      	add	r3, pc, #864	; (adr r3, 8001c50 <MLX90640_CalculateTo+0x3d8>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fcf2 	bl	80002dc <__adddf3>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f99a 	bl	8000c38 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	663b      	str	r3, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 8001908:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800190c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001910:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 8001914:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800191c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001920:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001924:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001928:	ee77 6a67 	vsub.f32	s13, s14, s15
 800192c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001934:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001938:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    ktaScale = POW2(params->ktaScale);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 8001946:	4618      	mov	r0, r3
 8001948:	f7fe fe04 	bl	8000554 <__aeabi_ui2d>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b11 	vmov	d1, r2, r3
 8001954:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8001c38 <MLX90640_CalculateTo+0x3c0>
 8001958:	f00a fca6 	bl	800c2a8 <pow>
 800195c:	ec53 2b10 	vmov	r2, r3, d0
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f968 	bl	8000c38 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	65bb      	str	r3, [r7, #88]	; 0x58
    kvScale = POW2(params->kvScale);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001972:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fdec 	bl	8000554 <__aeabi_ui2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ec43 2b11 	vmov	d1, r2, r3
 8001984:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8001c38 <MLX90640_CalculateTo+0x3c0>
 8001988:	f00a fc8e 	bl	800c2a8 <pow>
 800198c:	ec53 2b10 	vmov	r2, r3, d0
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7ff f950 	bl	8000c38 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	657b      	str	r3, [r7, #84]	; 0x54
    alphaScale = POW2(params->alphaScale);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fdd6 	bl	8000554 <__aeabi_ui2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b11 	vmov	d1, r2, r3
 80019b0:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8001c38 <MLX90640_CalculateTo+0x3c0>
 80019b4:	f00a fc78 	bl	800c2a8 <pow>
 80019b8:	ec53 2b10 	vmov	r2, r3, d0
 80019bc:	4610      	mov	r0, r2
 80019be:	4619      	mov	r1, r3
 80019c0:	f7ff f93a 	bl	8000c38 <__aeabi_d2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	653b      	str	r3, [r7, #80]	; 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019ce:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001c48 <MLX90640_CalculateTo+0x3d0>
 80019d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80019de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e6:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 80019ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019ee:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a10:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8001a14:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001a24:	461a      	mov	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a6e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a98:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aa0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab6:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abe:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fd67 	bl	8000598 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad4:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8001ad8:	ee07 3a90 	vmov	s15, r3
 8001adc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ae6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001aea:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001aee:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b02:	ee17 0a90 	vmov	r0, s15
 8001b06:	f7fe fd47 	bl	8000598 <__aeabi_f2d>
 8001b0a:	4680      	mov	r8, r0
 8001b0c:	4689      	mov	r9, r1
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd40 	bl	8000598 <__aeabi_f2d>
 8001b18:	4682      	mov	sl, r0
 8001b1a:	468b      	mov	fp, r1
 8001b1c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001b1e:	f7fe fd3b 	bl	8000598 <__aeabi_f2d>
 8001b22:	a347      	add	r3, pc, #284	; (adr r3, 8001c40 <MLX90640_CalculateTo+0x3c8>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fbd6 	bl	80002d8 <__aeabi_dsub>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4650      	mov	r0, sl
 8001b32:	4659      	mov	r1, fp
 8001b34:	f7fe fd88 	bl	8000648 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <MLX90640_CalculateTo+0x3d4>)
 8001b46:	f7fe fbc9 	bl	80002dc <__adddf3>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4640      	mov	r0, r8
 8001b50:	4649      	mov	r1, r9
 8001b52:	f7fe fd79 	bl	8000648 <__aeabi_dmul>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4620      	mov	r0, r4
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	f7fe fbbb 	bl	80002d8 <__aeabi_dsub>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f865 	bl	8000c38 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( mode ==  params->calibrationModeEE)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b78:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d16b      	bne.n	8001c58 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fd08 	bl	8000598 <__aeabi_f2d>
 8001b88:	4604      	mov	r4, r0
 8001b8a:	460d      	mov	r5, r1
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b92:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001b96:	ee07 3a90 	vmov	s15, r3
 8001b9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ba4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ba8:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001bac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bc0:	ee17 0a90 	vmov	r0, s15
 8001bc4:	f7fe fce8 	bl	8000598 <__aeabi_f2d>
 8001bc8:	4680      	mov	r8, r0
 8001bca:	4689      	mov	r9, r1
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fce1 	bl	8000598 <__aeabi_f2d>
 8001bd6:	4682      	mov	sl, r0
 8001bd8:	468b      	mov	fp, r1
 8001bda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001bdc:	f7fe fcdc 	bl	8000598 <__aeabi_f2d>
 8001be0:	a317      	add	r3, pc, #92	; (adr r3, 8001c40 <MLX90640_CalculateTo+0x3c8>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe fb77 	bl	80002d8 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4650      	mov	r0, sl
 8001bf0:	4659      	mov	r1, fp
 8001bf2:	f7fe fd29 	bl	8000648 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <MLX90640_CalculateTo+0x3d4>)
 8001c04:	f7fe fb6a 	bl	80002dc <__adddf3>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4640      	mov	r0, r8
 8001c0e:	4649      	mov	r1, r9
 8001c10:	f7fe fd1a 	bl	8000648 <__aeabi_dmul>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4620      	mov	r0, r4
 8001c1a:	4629      	mov	r1, r5
 8001c1c:	f7fe fb5c 	bl	80002d8 <__aeabi_dsub>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	f7ff f806 	bl	8000c38 <__aeabi_d2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
 8001c30:	e071      	b.n	8001d16 <MLX90640_CalculateTo+0x49e>
 8001c32:	bf00      	nop
 8001c34:	f3af 8000 	nop.w
 8001c38:	00000000 	.word	0x00000000
 8001c3c:	40000000 	.word	0x40000000
 8001c40:	66666666 	.word	0x66666666
 8001c44:	400a6666 	.word	0x400a6666
 8001c48:	42200000 	.word	0x42200000
 8001c4c:	3ff00000 	.word	0x3ff00000
 8001c50:	66666666 	.word	0x66666666
 8001c54:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fc9c 	bl	8000598 <__aeabi_f2d>
 8001c60:	4604      	mov	r4, r0
 8001c62:	460d      	mov	r5, r1
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c6a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001c6e:	ee07 3a90 	vmov	s15, r3
 8001c72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c7c:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c8a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c8e:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001c92:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	ee17 0a90 	vmov	r0, s15
 8001caa:	f7fe fc75 	bl	8000598 <__aeabi_f2d>
 8001cae:	4680      	mov	r8, r0
 8001cb0:	4689      	mov	r9, r1
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc6e 	bl	8000598 <__aeabi_f2d>
 8001cbc:	4682      	mov	sl, r0
 8001cbe:	468b      	mov	fp, r1
 8001cc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cc2:	f7fe fc69 	bl	8000598 <__aeabi_f2d>
 8001cc6:	a33e      	add	r3, pc, #248	; (adr r3, 8001dc0 <MLX90640_CalculateTo+0x548>)
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	f7fe fb04 	bl	80002d8 <__aeabi_dsub>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4650      	mov	r0, sl
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	f7fe fcb6 	bl	8000648 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <MLX90640_CalculateTo+0x550>)
 8001cea:	f7fe faf7 	bl	80002dc <__adddf3>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4640      	mov	r0, r8
 8001cf4:	4649      	mov	r1, r9
 8001cf6:	f7fe fca7 	bl	8000648 <__aeabi_dmul>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	4620      	mov	r0, r4
 8001d00:	4629      	mov	r1, r5
 8001d02:	f7fe fae9 	bl	80002d8 <__aeabi_dsub>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff93 	bl	8000c38 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	633b      	str	r3, [r7, #48]	; 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001d16:	2300      	movs	r3, #0
 8001d18:	677b      	str	r3, [r7, #116]	; 0x74
 8001d1a:	e2b5      	b.n	8002288 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001d1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	da00      	bge.n	8001d24 <MLX90640_CalculateTo+0x4ac>
 8001d22:	331f      	adds	r3, #31
 8001d24:	115b      	asrs	r3, r3, #5
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	da00      	bge.n	8001d30 <MLX90640_CalculateTo+0x4b8>
 8001d2e:	333f      	adds	r3, #63	; 0x3f
 8001d30:	119b      	asrs	r3, r3, #6
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	bfb8      	it	lt
 8001d4a:	425b      	neglt	r3, r3
 8001d4c:	b25a      	sxtb	r2, r3
 8001d4e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d52:	4053      	eors	r3, r2
 8001d54:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001d58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d5a:	3302      	adds	r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	da00      	bge.n	8001d62 <MLX90640_CalculateTo+0x4ea>
 8001d60:	3303      	adds	r3, #3
 8001d62:	109b      	asrs	r3, r3, #2
 8001d64:	461a      	mov	r2, r3
 8001d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d68:	3303      	adds	r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	da00      	bge.n	8001d70 <MLX90640_CalculateTo+0x4f8>
 8001d6e:	3303      	adds	r3, #3
 8001d70:	109b      	asrs	r3, r3, #2
 8001d72:	425b      	negs	r3, r3
 8001d74:	441a      	add	r2, r3
 8001d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d78:	3301      	adds	r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da00      	bge.n	8001d80 <MLX90640_CalculateTo+0x508>
 8001d7e:	3303      	adds	r3, #3
 8001d80:	109b      	asrs	r3, r3, #2
 8001d82:	441a      	add	r2, r3
 8001d84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	da00      	bge.n	8001d8c <MLX90640_CalculateTo+0x514>
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	109b      	asrs	r3, r3, #2
 8001d8e:	425b      	negs	r3, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	f1c3 0301 	rsb	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	fb12 f303 	smulbb	r3, r2, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(mode == 0)
 8001daa:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10c      	bne.n	8001dcc <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 8001db2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001db6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001dba:	e00b      	b.n	8001dd4 <MLX90640_CalculateTo+0x55c>
 8001dbc:	f3af 8000 	nop.w
 8001dc0:	66666666 	.word	0x66666666
 8001dc4:	400a6666 	.word	0x400a6666
 8001dc8:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 8001dcc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001dd0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        }

        if(pattern == frameData[833])
 8001dd4:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8001dde:	8812      	ldrh	r2, [r2, #0]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	f040 824e 	bne.w	8002282 <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 8001de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	b21b      	sxth	r3, r3
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e02:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001e10:	f993 3000 	ldrsb.w	r3, [r3]
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e1c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e24:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001e32:	f993 3000 	ldrsb.w	r3, [r3]
 8001e36:	ee07 3a90 	vmov	s15, r3
 8001e3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e3e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e46:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 8001e4a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e4c:	f7fe fba4 	bl	8000598 <__aeabi_f2d>
 8001e50:	4604      	mov	r4, r0
 8001e52:	460d      	mov	r5, r1
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e58:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e70:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001e74:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001e78:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8c:	ee17 0a90 	vmov	r0, s15
 8001e90:	f7fe fb82 	bl	8000598 <__aeabi_f2d>
 8001e94:	4680      	mov	r8, r0
 8001e96:	4689      	mov	r9, r1
 8001e98:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e9a:	f7fe fb7d 	bl	8000598 <__aeabi_f2d>
 8001e9e:	4682      	mov	sl, r0
 8001ea0:	468b      	mov	fp, r1
 8001ea2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ea4:	f7fe fb78 	bl	8000598 <__aeabi_f2d>
 8001ea8:	a3c4      	add	r3, pc, #784	; (adr r3, 80021bc <MLX90640_CalculateTo+0x944>)
 8001eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eae:	f7fe fa13 	bl	80002d8 <__aeabi_dsub>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4650      	mov	r0, sl
 8001eb8:	4659      	mov	r1, fp
 8001eba:	f7fe fbc5 	bl	8000648 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	4bbb      	ldr	r3, [pc, #748]	; (80021b8 <MLX90640_CalculateTo+0x940>)
 8001ecc:	f7fe fa06 	bl	80002dc <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4640      	mov	r0, r8
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	f7fe fbb6 	bl	8000648 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	4629      	mov	r1, r5
 8001ee4:	f7fe f9f8 	bl	80002d8 <__aeabi_dsub>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fea2 	bl	8000c38 <__aeabi_d2f>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	67fb      	str	r3, [r7, #124]	; 0x7c

            if(mode !=  params->calibrationModeEE)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001efe:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d023      	beq.n	8001f4e <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f0c:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8001f10:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	3b01      	subs	r3, #1
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f24:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f32:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8001f36:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f4a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f54:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	3380      	adds	r3, #128	; 0x80
 8001f5c:	443b      	add	r3, r7
 8001f5e:	3b54      	subs	r3, #84	; 0x54
 8001f60:	edd3 7a00 	vldr	s15, [r3]
 8001f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f68:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f70:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            irData = irData / emissivity;
 8001f74:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001f78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001f84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f86:	f7fe fb07 	bl	8000598 <__aeabi_f2d>
 8001f8a:	a387      	add	r3, pc, #540	; (adr r3, 80021a8 <MLX90640_CalculateTo+0x930>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fb5a 	bl	8000648 <__aeabi_dmul>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4614      	mov	r4, r2
 8001f9a:	461d      	mov	r5, r3
 8001f9c:	693a      	ldr	r2, [r7, #16]
 8001f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fa0:	3324      	adds	r3, #36	; 0x24
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	4413      	add	r3, r2
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fae3 	bl	8000574 <__aeabi_i2d>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	4629      	mov	r1, r5
 8001fb6:	f7fe fc71 	bl	800089c <__aeabi_ddiv>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	4610      	mov	r0, r2
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	f7fe fe39 	bl	8000c38 <__aeabi_d2f>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001fd0:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001fd4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001fd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fe8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001ff4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ff8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001ffc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002000:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002004:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002008:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800200c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002010:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8002020:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002022:	f7fe fab9 	bl	8000598 <__aeabi_f2d>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	ec43 2b10 	vmov	d0, r2, r3
 800202e:	f00a f9ab 	bl	800c388 <sqrt>
 8002032:	eeb0 7a40 	vmov.f32	s14, s0
 8002036:	eef0 7a60 	vmov.f32	s15, s1
 800203a:	eeb0 0a47 	vmov.f32	s0, s14
 800203e:	eef0 0a67 	vmov.f32	s1, s15
 8002042:	f00a f9a1 	bl	800c388 <sqrt>
 8002046:	ec55 4b10 	vmov	r4, r5, d0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe faa2 	bl	8000598 <__aeabi_f2d>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4620      	mov	r0, r4
 800205a:	4629      	mov	r1, r5
 800205c:	f7fe faf4 	bl	8000648 <__aeabi_dmul>
 8002060:	4602      	mov	r2, r0
 8002062:	460b      	mov	r3, r1
 8002064:	4610      	mov	r0, r2
 8002066:	4619      	mov	r1, r3
 8002068:	f7fe fde6 	bl	8000c38 <__aeabi_d2f>
 800206c:	4603      	mov	r3, r0
 800206e:	63bb      	str	r3, [r7, #56]	; 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8002070:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002072:	f7fe fa91 	bl	8000598 <__aeabi_f2d>
 8002076:	4604      	mov	r4, r0
 8002078:	460d      	mov	r5, r1
 800207a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800207c:	f7fe fa8c 	bl	8000598 <__aeabi_f2d>
 8002080:	4680      	mov	r8, r0
 8002082:	4689      	mov	r9, r1
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa85 	bl	8000598 <__aeabi_f2d>
 800208e:	a348      	add	r3, pc, #288	; (adr r3, 80021b0 <MLX90640_CalculateTo+0x938>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fad8 	bl	8000648 <__aeabi_dmul>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	f04f 0000 	mov.w	r0, #0
 80020a0:	4945      	ldr	r1, [pc, #276]	; (80021b8 <MLX90640_CalculateTo+0x940>)
 80020a2:	f7fe f919 	bl	80002d8 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4640      	mov	r0, r8
 80020ac:	4649      	mov	r1, r9
 80020ae:	f7fe facb 	bl	8000648 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4690      	mov	r8, r2
 80020b8:	4699      	mov	r9, r3
 80020ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020bc:	f7fe fa6c 	bl	8000598 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4640      	mov	r0, r8
 80020c6:	4649      	mov	r1, r9
 80020c8:	f7fe f908 	bl	80002dc <__adddf3>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4620      	mov	r0, r4
 80020d2:	4629      	mov	r1, r5
 80020d4:	f7fe fbe2 	bl	800089c <__aeabi_ddiv>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80020e2:	f7fe fa59 	bl	8000598 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	4620      	mov	r0, r4
 80020ec:	4629      	mov	r1, r5
 80020ee:	f7fe f8f5 	bl	80002dc <__adddf3>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	ec43 2b17 	vmov	d7, r2, r3
 80020fa:	eeb0 0a47 	vmov.f32	s0, s14
 80020fe:	eef0 0a67 	vmov.f32	s1, s15
 8002102:	f00a f941 	bl	800c388 <sqrt>
 8002106:	eeb0 7a40 	vmov.f32	s14, s0
 800210a:	eef0 7a60 	vmov.f32	s15, s1
 800210e:	eeb0 0a47 	vmov.f32	s0, s14
 8002112:	eef0 0a67 	vmov.f32	s1, s15
 8002116:	f00a f937 	bl	800c388 <sqrt>
 800211a:	ec51 0b10 	vmov	r0, r1, d0
 800211e:	a324      	add	r3, pc, #144	; (adr r3, 80021b0 <MLX90640_CalculateTo+0x938>)
 8002120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002124:	f7fe f8d8 	bl	80002d8 <__aeabi_dsub>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fd82 	bl	8000c38 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	637b      	str	r3, [r7, #52]	; 0x34

            if(To < params->ct[1])
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800214a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d503      	bpl.n	800215c <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 800215a:	e036      	b.n	80021ca <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800216e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002176:	d503      	bpl.n	8002180 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8002178:	2301      	movs	r3, #1
 800217a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 800217e:	e024      	b.n	80021ca <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002192:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d513      	bpl.n	80021c4 <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80021a2:	e012      	b.n	80021ca <MLX90640_CalculateTo+0x952>
 80021a4:	f3af 8000 	nop.w
 80021a8:	a0b5ed8d 	.word	0xa0b5ed8d
 80021ac:	3eb0c6f7 	.word	0x3eb0c6f7
 80021b0:	66666666 	.word	0x66666666
 80021b4:	40711266 	.word	0x40711266
 80021b8:	3ff00000 	.word	0x3ff00000
 80021bc:	66666666 	.word	0x66666666
 80021c0:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 80021c4:	2303      	movs	r3, #3
 80021c6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 80021ca:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3380      	adds	r3, #128	; 0x80
 80021d2:	443b      	add	r3, r7
 80021d4:	3b64      	subs	r3, #100	; 0x64
 80021d6:	ed93 7a00 	vldr	s14, [r3]
 80021da:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	330a      	adds	r3, #10
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	3304      	adds	r3, #4
 80021f0:	edd3 6a00 	vldr	s13, [r3]
 80021f4:	f997 207a 	ldrsb.w	r2, [r7, #122]	; 0x7a
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3220      	adds	r2, #32
 80021fc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 800220c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002210:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002218:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800221c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002220:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8002224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002228:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800222c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002230:	ee17 0a90 	vmov	r0, s15
 8002234:	f7fe f9b0 	bl	8000598 <__aeabi_f2d>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	ec43 2b10 	vmov	d0, r2, r3
 8002240:	f00a f8a2 	bl	800c388 <sqrt>
 8002244:	eeb0 7a40 	vmov.f32	s14, s0
 8002248:	eef0 7a60 	vmov.f32	s15, s1
 800224c:	eeb0 0a47 	vmov.f32	s0, s14
 8002250:	eef0 0a67 	vmov.f32	s1, s15
 8002254:	f00a f898 	bl	800c388 <sqrt>
 8002258:	ec51 0b10 	vmov	r0, r1, d0
 800225c:	a310      	add	r3, pc, #64	; (adr r3, 80022a0 <MLX90640_CalculateTo+0xa28>)
 800225e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002262:	f7fe f839 	bl	80002d8 <__aeabi_dsub>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f7fe fce3 	bl	8000c38 <__aeabi_d2f>
 8002272:	4603      	mov	r3, r0
 8002274:	637b      	str	r3, [r7, #52]	; 0x34

            result[pixelNumber] = To;
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002280:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8002282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002284:	3301      	adds	r3, #1
 8002286:	677b      	str	r3, [r7, #116]	; 0x74
 8002288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800228e:	f6ff ad45 	blt.w	8001d1c <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	3780      	adds	r7, #128	; 0x80
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229e:	bf00      	nop
 80022a0:	66666666 	.word	0x66666666
 80022a4:	40711266 	.word	0x40711266

080022a8 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	0a9b      	lsrs	r3, r3, #10
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f942 	bl	8000554 <__aeabi_ui2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	ec43 2b11 	vmov	d1, r2, r3
 80022d8:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8002388 <MLX90640_GetVdd+0xe0>
 80022dc:	f009 ffe4 	bl	800c2a8 <pow>
 80022e0:	ec55 4b10 	vmov	r4, r5, d0
 80022e4:	8afb      	ldrh	r3, [r7, #22]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f934 	bl	8000554 <__aeabi_ui2d>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	ec43 2b11 	vmov	d1, r2, r3
 80022f4:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8002388 <MLX90640_GetVdd+0xe0>
 80022f8:	f009 ffd6 	bl	800c2a8 <pow>
 80022fc:	ec53 2b10 	vmov	r2, r3, d0
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fe faca 	bl	800089c <__aeabi_ddiv>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4610      	mov	r0, r2
 800230e:	4619      	mov	r1, r3
 8002310:	f7fe fc92 	bl	8000c38 <__aeabi_d2f>
 8002314:	4603      	mov	r3, r0
 8002316:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f203 6354 	addw	r3, r3, #1620	; 0x654
 800231e:	881b      	ldrh	r3, [r3, #0]
 8002320:	b21b      	sxth	r3, r3
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232a:	edd7 7a04 	vldr	s15, [r7, #16]
 800232e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002338:	ee07 3a90 	vmov	s15, r3
 800233c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002340:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002352:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002356:	ee16 0a90 	vmov	r0, s13
 800235a:	f7fe f91d 	bl	8000598 <__aeabi_f2d>
 800235e:	a30c      	add	r3, pc, #48	; (adr r3, 8002390 <MLX90640_GetVdd+0xe8>)
 8002360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002364:	f7fd ffba 	bl	80002dc <__adddf3>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	f7fe fc62 	bl	8000c38 <__aeabi_d2f>
 8002374:	4603      	mov	r3, r0
 8002376:	60fb      	str	r3, [r7, #12]

    return vdd;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	ee07 3a90 	vmov	s15, r3
}
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bdb0      	pop	{r4, r5, r7, pc}
 8002388:	00000000 	.word	0x00000000
 800238c:	40000000 	.word	0x40000000
 8002390:	66666666 	.word	0x66666666
 8002394:	400a6666 	.word	0x400a6666

08002398 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8002398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800239c:	b086      	sub	sp, #24
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 80023a4:	6839      	ldr	r1, [r7, #0]
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff ff7e 	bl	80022a8 <MLX90640_GetVdd>
 80023ac:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 80023ba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80023d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023f6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80024b8 <MLX90640_GetTa+0x120>
 80023fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023fe:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f7fe f8c8 	bl	8000598 <__aeabi_f2d>
 8002408:	4604      	mov	r4, r0
 800240a:	460d      	mov	r5, r1
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f8c1 	bl	8000598 <__aeabi_f2d>
 8002416:	4680      	mov	r8, r0
 8002418:	4689      	mov	r9, r1
 800241a:	6978      	ldr	r0, [r7, #20]
 800241c:	f7fe f8bc 	bl	8000598 <__aeabi_f2d>
 8002420:	a323      	add	r3, pc, #140	; (adr r3, 80024b0 <MLX90640_GetTa+0x118>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	f7fd ff57 	bl	80002d8 <__aeabi_dsub>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4640      	mov	r0, r8
 8002430:	4649      	mov	r1, r9
 8002432:	f7fe f909 	bl	8000648 <__aeabi_dmul>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <MLX90640_GetTa+0x124>)
 8002444:	f7fd ff4a 	bl	80002dc <__adddf3>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	f7fe fa24 	bl	800089c <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4614      	mov	r4, r2
 800245a:	461d      	mov	r5, r3
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	899b      	ldrh	r3, [r3, #12]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe f887 	bl	8000574 <__aeabi_i2d>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd ff33 	bl	80002d8 <__aeabi_dsub>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fbdd 	bl	8000c38 <__aeabi_d2f>
 800247e:	4603      	mov	r3, r0
 8002480:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	ed93 7a02 	vldr	s14, [r3, #8]
 8002488:	edd7 6a02 	vldr	s13, [r7, #8]
 800248c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002490:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8002494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002498:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	ee07 3a90 	vmov	s15, r3
}
 80024a2:	eeb0 0a67 	vmov.f32	s0, s15
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ae:	bf00      	nop
 80024b0:	66666666 	.word	0x66666666
 80024b4:	400a6666 	.word	0x400a6666
 80024b8:	48800000 	.word	0x48800000
 80024bc:	3ff00000 	.word	0x3ff00000

080024c0 <MLX90640_BadPixelsCorrection>:

}

//------------------------------------------------------------------------------
void MLX90640_BadPixelsCorrection(uint16_t *pixels, float *to, int mode, paramsMLX90640 *params)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
    float ap[4];
    uint8_t pix;
    uint8_t line;
    uint8_t column;

    pix = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 80024d4:	e2aa      	b.n	8002a2c <MLX90640_BadPixelsCorrection+0x56c>
    {
        line = pixels[pix]>>5;
 80024d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        column = pixels[pix] - (line<<5);
 80024ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024fc:	015b      	lsls	r3, r3, #5
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if(mode == 1)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 8152 	bne.w	80027b2 <MLX90640_BadPixelsCorrection+0x2f2>
        {
            if(line == 0)
 800250e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002512:	2b00      	cmp	r3, #0
 8002514:	d14d      	bne.n	80025b2 <MLX90640_BadPixelsCorrection+0xf2>
            {
                if(column == 0)
 8002516:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <MLX90640_BadPixelsCorrection+0x7a>
                {
                    to[pixels[pix]] = to[33];
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4413      	add	r3, r2
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	4413      	add	r3, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	e273      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 800253a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800253e:	2b1f      	cmp	r3, #31
 8002540:	d10d      	bne.n	800255e <MLX90640_BadPixelsCorrection+0x9e>
                {
                    to[pixels[pix]] = to[62];
 8002542:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	4413      	add	r3, r2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e261      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]+31] + to[pixels[pix]+33])/2.0;
 800255e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	331f      	adds	r3, #31
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	4413      	add	r3, r2
 8002572:	ed93 7a00 	vldr	s14, [r3]
 8002576:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	3321      	adds	r3, #33	; 0x21
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4413      	add	r3, r2
 800258a:	edd3 7a00 	vldr	s15, [r3]
 800258e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002592:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	4413      	add	r3, r2
 80025a4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ac:	edc3 7a00 	vstr	s15, [r3]
 80025b0:	e237      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(line == 23)
 80025b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025b6:	2b17      	cmp	r3, #23
 80025b8:	d153      	bne.n	8002662 <MLX90640_BadPixelsCorrection+0x1a2>
            {
                if(column == 0)
 80025ba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10e      	bne.n	80025e0 <MLX90640_BadPixelsCorrection+0x120>
                {
                    to[pixels[pix]] = to[705];
 80025c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	4413      	add	r3, r2
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	f602 3204 	addw	r2, r2, #2820	; 0xb04
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e220      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 80025e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025e4:	2b1f      	cmp	r3, #31
 80025e6:	d10e      	bne.n	8002606 <MLX90640_BadPixelsCorrection+0x146>
                {
                    to[pixels[pix]] = to[734];
 80025e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	4413      	add	r3, r2
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	f602 3278 	addw	r2, r2, #2936	; 0xb78
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e20d      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]-31])/2.0;
 8002606:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002616:	3b21      	subs	r3, #33	; 0x21
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	4413      	add	r3, r2
 800261e:	ed93 7a00 	vldr	s14, [r3]
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002632:	3b1f      	subs	r3, #31
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002642:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	4413      	add	r3, r2
 8002654:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800265c:	edc3 7a00 	vstr	s15, [r3]
 8002660:	e1df      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(column == 0)
 8002662:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002666:	2b00      	cmp	r3, #0
 8002668:	d12b      	bne.n	80026c2 <MLX90640_BadPixelsCorrection+0x202>
            {
                to[pixels[pix]] = (to[pixels[pix]-31] + to[pixels[pix]+33])/2.0;
 800266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800267a:	3b1f      	subs	r3, #31
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4413      	add	r3, r2
 8002682:	ed93 7a00 	vldr	s14, [r3]
 8002686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	3321      	adds	r3, #33	; 0x21
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	4413      	add	r3, r2
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	4413      	add	r3, r2
 80026b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026bc:	edc3 7a00 	vstr	s15, [r3]
 80026c0:	e1af      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 80026c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026c6:	2b1f      	cmp	r3, #31
 80026c8:	d12b      	bne.n	8002722 <MLX90640_BadPixelsCorrection+0x262>
            {
                to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]+31])/2.0;
 80026ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026da:	3b21      	subs	r3, #33	; 0x21
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4413      	add	r3, r2
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4413      	add	r3, r2
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	331f      	adds	r3, #31
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	edd3 7a00 	vldr	s15, [r3]
 80026fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	4413      	add	r3, r2
 8002714:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800271c:	edc3 7a00 	vstr	s15, [r3]
 8002720:	e17f      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                ap[0] = to[pixels[pix]-33];
 8002722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4413      	add	r3, r2
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002732:	3b21      	subs	r3, #33	; 0x21
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	4413      	add	r3, r2
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	617b      	str	r3, [r7, #20]
                ap[1] = to[pixels[pix]-31];
 800273e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800274e:	3b1f      	subs	r3, #31
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	68ba      	ldr	r2, [r7, #8]
 8002754:	4413      	add	r3, r2
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
                ap[2] = to[pixels[pix]+31];
 800275a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	881b      	ldrh	r3, [r3, #0]
 8002766:	331f      	adds	r3, #31
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	4413      	add	r3, r2
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	61fb      	str	r3, [r7, #28]
                ap[3] = to[pixels[pix]+33];
 8002772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3321      	adds	r3, #33	; 0x21
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	4413      	add	r3, r2
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	623b      	str	r3, [r7, #32]
                to[pixels[pix]] = GetMedian(ap,4);
 800278a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	18d4      	adds	r4, r2, r3
 800279c:	f107 0314 	add.w	r3, r7, #20
 80027a0:	2104      	movs	r1, #4
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 f851 	bl	800484a <GetMedian>
 80027a8:	eef0 7a40 	vmov.f32	s15, s0
 80027ac:	edc4 7a00 	vstr	s15, [r4]
 80027b0:	e137      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
        }
        else
        {
            if(column == 0)
 80027b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <MLX90640_BadPixelsCorrection+0x326>
            {
                to[pixels[pix]] = to[pixels[pix]+1];
 80027ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	881b      	ldrh	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	441a      	add	r2, r3
 80027ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	440b      	add	r3, r1
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	440b      	add	r3, r1
 80027e0:	6812      	ldr	r2, [r2, #0]
 80027e2:	601a      	str	r2, [r3, #0]
 80027e4:	e11d      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 1 || column == 30)
 80027e6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d003      	beq.n	80027f6 <MLX90640_BadPixelsCorrection+0x336>
 80027ee:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027f2:	2b1e      	cmp	r3, #30
 80027f4:	d12b      	bne.n	800284e <MLX90640_BadPixelsCorrection+0x38e>
            {
                to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002806:	3b01      	subs	r3, #1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	68ba      	ldr	r2, [r7, #8]
 800280c:	4413      	add	r3, r2
 800280e:	ed93 7a00 	vldr	s14, [r3]
 8002812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	4413      	add	r3, r2
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800282e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	4413      	add	r3, r2
 8002840:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002844:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002848:	edc3 7a00 	vstr	s15, [r3]
 800284c:	e0e9      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 800284e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002852:	2b1f      	cmp	r3, #31
 8002854:	d117      	bne.n	8002886 <MLX90640_BadPixelsCorrection+0x3c6>
            {
                to[pixels[pix]] = to[pixels[pix]-1];
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002866:	3b01      	subs	r3, #1
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	441a      	add	r2, r3
 800286e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	440b      	add	r3, r1
 8002878:	881b      	ldrh	r3, [r3, #0]
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	440b      	add	r3, r1
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	e0cd      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                if(IsPixelBad(pixels[pix]-2,params) == 0 && IsPixelBad(pixels[pix]+2,params) == 0)
 8002886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	3b02      	subs	r3, #2
 8002894:	b29b      	uxth	r3, r3
 8002896:	6839      	ldr	r1, [r7, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f002 f849 	bl	8004930 <IsPixelBad>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 8093 	bne.w	80029cc <MLX90640_BadPixelsCorrection+0x50c>
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	68fa      	ldr	r2, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	3302      	adds	r3, #2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	6839      	ldr	r1, [r7, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 f839 	bl	8004930 <IsPixelBad>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 8083 	bne.w	80029cc <MLX90640_BadPixelsCorrection+0x50c>
                {
                    ap[0] = to[pixels[pix]+1] - to[pixels[pix]+2];
 80028c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	4413      	add	r3, r2
 80028da:	ed93 7a00 	vldr	s14, [r3]
 80028de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4413      	add	r3, r2
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	3302      	adds	r3, #2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	4413      	add	r3, r2
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fa:	edc7 7a05 	vstr	s15, [r7, #20]
                    ap[1] = to[pixels[pix]-1] - to[pixels[pix]-2];
 80028fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800290e:	3b01      	subs	r3, #1
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	68ba      	ldr	r2, [r7, #8]
 8002914:	4413      	add	r3, r2
 8002916:	ed93 7a00 	vldr	s14, [r3]
 800291a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	881b      	ldrh	r3, [r3, #0]
 8002926:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800292a:	3b02      	subs	r3, #2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4413      	add	r3, r2
 8002932:	edd3 7a00 	vldr	s15, [r3]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	edc7 7a06 	vstr	s15, [r7, #24]
                    if(fabs(ap[0]) > fabs(ap[1]))
 800293e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002942:	eeb0 7ae7 	vabs.f32	s14, s15
 8002946:	edd7 7a06 	vldr	s15, [r7, #24]
 800294a:	eef0 7ae7 	vabs.f32	s15, s15
 800294e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002956:	dd1d      	ble.n	8002994 <MLX90640_BadPixelsCorrection+0x4d4>
                    {
                        to[pixels[pix]] = to[pixels[pix]-1] + ap[1];
 8002958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002968:	3b01      	subs	r3, #1
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	68ba      	ldr	r2, [r7, #8]
 800296e:	4413      	add	r3, r2
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	edd7 7a06 	vldr	s15, [r7, #24]
 8002978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	4413      	add	r3, r2
 8002982:	881b      	ldrh	r3, [r3, #0]
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	4413      	add	r3, r2
 800298a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298e:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 8002992:	e046      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                    }
                    else
                    {
                        to[pixels[pix]] = to[pixels[pix]+1] + ap[0];
 8002994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	4413      	add	r3, r2
 80029a8:	ed93 7a00 	vldr	s14, [r3]
 80029ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80029b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	4413      	add	r3, r2
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4413      	add	r3, r2
 80029c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c6:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 80029ca:	e02a      	b.n	8002a22 <MLX90640_BadPixelsCorrection+0x562>
                    }
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029dc:	3b01      	subs	r3, #1
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	4413      	add	r3, r2
 80029e4:	ed93 7a00 	vldr	s14, [r3]
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ec:	005b      	lsls	r3, r3, #1
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	4413      	add	r3, r2
 80029fc:	edd3 7a00 	vldr	s15, [r3]
 8002a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	68ba      	ldr	r2, [r7, #8]
 8002a14:	4413      	add	r3, r2
 8002a16:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a1e:	edc3 7a00 	vstr	s15, [r3]
                }
            }
        }
        pix = pix + 1;
 8002a22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a26:	3301      	adds	r3, #1
 8002a28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	f47f ad4a 	bne.w	80024d6 <MLX90640_BadPixelsCorrection+0x16>
    }
}
 8002a42:	bf00      	nop
 8002a44:	bf00      	nop
 8002a46:	372c      	adds	r7, #44	; 0x2c
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd90      	pop	{r4, r7, pc}

08002a4c <ExtractVDDParameters>:

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3366      	adds	r3, #102	; 0x66
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3366      	adds	r3, #102	; 0x66
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b21b      	sxth	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8002a6e:	89bb      	ldrh	r3, [r7, #12]
 8002a70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	015b      	lsls	r3, r3, #5
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	015b      	lsls	r3, r3, #5
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	89ba      	ldrh	r2, [r7, #12]
 8002a96:	805a      	strh	r2, [r3, #2]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3364      	adds	r3, #100	; 0x64
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	0a9b      	lsrs	r3, r3, #10
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8002ac4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ac8:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	dd07      	ble.n	8002ae6 <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8002ad6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ada:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002ba4 <ExtractPTATParameters+0x100>
 8002ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ae2:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8002ae6:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aea:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002ba8 <ExtractPTATParameters+0x104>
 8002aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af2:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3364      	adds	r3, #100	; 0x64
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b08:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8002b0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b10:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002bac <ExtractPTATParameters+0x108>
 8002b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	dd07      	ble.n	8002b2e <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8002b1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b22:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002bb0 <ExtractPTATParameters+0x10c>
 8002b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b2a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8002b2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b32:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002b36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b3a:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3362      	adds	r3, #98	; 0x62
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3320      	adds	r3, #32
 8002b4a:	881b      	ldrh	r3, [r3, #0]
 8002b4c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fd0f 	bl	8000574 <__aeabi_i2d>
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	4b16      	ldr	r3, [pc, #88]	; (8002bb4 <ExtractPTATParameters+0x110>)
 8002b5c:	f7fd fe9e 	bl	800089c <__aeabi_ddiv>
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4610      	mov	r0, r2
 8002b66:	4619      	mov	r1, r3
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <ExtractPTATParameters+0x114>)
 8002b6e:	f7fd fbb5 	bl	80002dc <__adddf3>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f7fe f85d 	bl	8000c38 <__aeabi_d2f>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8002b8e:	89fa      	ldrh	r2, [r7, #14]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	611a      	str	r2, [r3, #16]
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	42800000 	.word	0x42800000
 8002ba8:	45800000 	.word	0x45800000
 8002bac:	43ff8000 	.word	0x43ff8000
 8002bb0:	44800000 	.word	0x44800000
 8002bb4:	40d00000 	.word	0x40d00000
 8002bb8:	40200000 	.word	0x40200000

08002bbc <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3360      	adds	r3, #96	; 0x60
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b21a      	sxth	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	829a      	strh	r2, [r3, #20]
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3378      	adds	r3, #120	; 0x78
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bfa:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002c14 <ExtractTgcParameters+0x34>
 8002bfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	42000000 	.word	0x42000000

08002c18 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3370      	adds	r3, #112	; 0x70
 8002c26:	881b      	ldrh	r3, [r3, #0]
 8002c28:	131b      	asrs	r3, r3, #12
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	f003 0303 	and.w	r3, r3, #3
 8002c30:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7bfa      	ldrb	r2, [r7, #15]
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3378      	adds	r3, #120	; 0x78
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	0a1b      	lsrs	r3, r3, #8
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c66:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002c80 <ExtractKsTaParameters+0x38>
 8002c6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	46000000 	.word	0x46000000

08002c84 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	337e      	adds	r3, #126	; 0x7e
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	131b      	asrs	r3, r3, #12
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8002cb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	337e      	adds	r3, #126	; 0x7e
 8002cc0:	881b      	ldrh	r3, [r3, #0]
 8002cc2:	111b      	asrs	r3, r3, #4
 8002cc4:	b21b      	sxth	r3, r3
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	b21a      	sxth	r2, r3
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	337e      	adds	r3, #126	; 0x7e
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	121b      	asrs	r3, r3, #8
 8002cda:	b21b      	sxth	r3, r3
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002cee:	b29a      	uxth	r2, r3
 8002cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	fb12 f303 	smulbb	r3, r2, r3
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002d12:	b299      	uxth	r1, r3
 8002d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	fb11 f303 	smulbb	r3, r1, r3
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	337e      	adds	r3, #126	; 0x7e
 8002d3a:	881b      	ldrh	r3, [r3, #0]
 8002d3c:	f003 030f 	and.w	r3, r3, #15
 8002d40:	3308      	adds	r3, #8
 8002d42:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002d44:	2201      	movs	r2, #1
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	337a      	adds	r3, #122	; 0x7a
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b25b      	sxtb	r3, r3
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	337a      	adds	r3, #122	; 0x7a
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	0a1b      	lsrs	r3, r3, #8
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	337c      	adds	r3, #124	; 0x7c
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b25b      	sxtb	r3, r3
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	ee07 3a90 	vmov	s15, r3
 8002db0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	337c      	adds	r3, #124	; 0x7c
 8002dc2:	881b      	ldrh	r3, [r3, #0]
 8002dc4:	0a1b      	lsrs	r3, r3, #8
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    mlx90640->ksTo[4] = -0.0002;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	4a03      	ldr	r2, [pc, #12]	; (8002df8 <ExtractKsToParameters+0x174>)
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	b951b717 	.word	0xb951b717
 8002dfc:	00000000 	.word	0x00000000

08002e00 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002e00:	b5b0      	push	{r4, r5, r7, lr}
 8002e02:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e0c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e10:	6018      	str	r0, [r3, #0]
 8002e12:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e16:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002e1a:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 8002e22:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e26:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 8002e3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e3e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3340      	adds	r3, #64	; 0x40
 8002e46:	881b      	ldrh	r3, [r3, #0]
 8002e48:	111b      	asrs	r3, r3, #4
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 030f 	and.w	r3, r3, #15
 8002e50:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 8002e54:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e58:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3340      	adds	r3, #64	; 0x40
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	121b      	asrs	r3, r3, #8
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 8002e6e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e72:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3340      	adds	r3, #64	; 0x40
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	0b1b      	lsrs	r3, r3, #12
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	331e      	adds	r3, #30
 8002e84:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8002e88:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e8c:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3342      	adds	r3, #66	; 0x42
 8002e94:	881b      	ldrh	r3, [r3, #0]
 8002e96:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec

    for(int i = 0; i < 6; i++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002ea0:	e062      	b.n	8002f68 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8002ea2:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 8002eac:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002eb0:	3322      	adds	r3, #34	; 0x22
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002eb8:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	881b      	ldrh	r3, [r3, #0]
 8002ec2:	f003 020f 	and.w	r2, r3, #15
 8002ec6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002ed0:	443b      	add	r3, r7
 8002ed2:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8002ed6:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002eda:	3322      	adds	r3, #34	; 0x22
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002ee2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	4413      	add	r3, r2
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	111a      	asrs	r2, r3, #4
 8002eee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f002 020f 	and.w	r2, r2, #15
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002efe:	443b      	add	r3, r7
 8002f00:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 8002f04:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f08:	3322      	adds	r3, #34	; 0x22
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f10:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f14:	6812      	ldr	r2, [r2, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	881b      	ldrh	r3, [r3, #0]
 8002f1a:	121a      	asrs	r2, r3, #8
 8002f1c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f20:	3302      	adds	r3, #2
 8002f22:	f002 020f 	and.w	r2, r2, #15
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f2c:	443b      	add	r3, r7
 8002f2e:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 8002f32:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f36:	3322      	adds	r3, #34	; 0x22
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f3e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	4413      	add	r3, r2
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	0b1b      	lsrs	r3, r3, #12
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f50:	3303      	adds	r3, #3
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f58:	443b      	add	r3, r7
 8002f5a:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8002f5e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f62:	3301      	adds	r3, #1
 8002f64:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002f68:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f6c:	2b05      	cmp	r3, #5
 8002f6e:	dd98      	ble.n	8002ea2 <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002f76:	e020      	b.n	8002fba <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002f78:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f82:	443b      	add	r3, r7
 8002f84:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002f88:	2b07      	cmp	r3, #7
 8002f8a:	dd11      	ble.n	8002fb0 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 8002f8c:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f96:	443b      	add	r3, r7
 8002f98:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002f9c:	f1a3 0210 	sub.w	r2, r3, #16
 8002fa0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002faa:	443b      	add	r3, r7
 8002fac:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002fb0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002fba:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fbe:	2b17      	cmp	r3, #23
 8002fc0:	ddda      	ble.n	8002f78 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8002fc8:	e062      	b.n	8003090 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 8002fca:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8002fd4:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002fd8:	3328      	adds	r3, #40	; 0x28
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002fe0:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	f003 010f 	and.w	r1, r3, #15
 8002fee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002ff2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ff6:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8002ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 8002ffe:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003002:	3328      	adds	r3, #40	; 0x28
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800300a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800300e:	6812      	ldr	r2, [r2, #0]
 8003010:	4413      	add	r3, r2
 8003012:	881b      	ldrh	r3, [r3, #0]
 8003014:	111b      	asrs	r3, r3, #4
 8003016:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 800301a:	3201      	adds	r2, #1
 800301c:	f003 010f 	and.w	r1, r3, #15
 8003020:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003024:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 800302c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003030:	3328      	adds	r3, #40	; 0x28
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003038:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4413      	add	r3, r2
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	121b      	asrs	r3, r3, #8
 8003044:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8003048:	3202      	adds	r2, #2
 800304a:	f003 010f 	and.w	r1, r3, #15
 800304e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003052:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 800305a:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800305e:	3328      	adds	r3, #40	; 0x28
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003066:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800306a:	6812      	ldr	r2, [r2, #0]
 800306c:	4413      	add	r3, r2
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	0b1b      	lsrs	r3, r3, #12
 8003072:	b299      	uxth	r1, r3
 8003074:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003078:	1cda      	adds	r2, r3, #3
 800307a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800307e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8003086:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800308a:	3301      	adds	r3, #1
 800308c:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8003090:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003094:	2b07      	cmp	r3, #7
 8003096:	dd98      	ble.n	8002fca <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 800309e:	e020      	b.n	80030e2 <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 80030a0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030a4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030a8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	2b07      	cmp	r3, #7
 80030b2:	dd11      	ble.n	80030d8 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 80030b4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030bc:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c4:	f1a3 0110 	sub.w	r1, r3, #16
 80030c8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030d0:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 80030d8:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80030dc:	3301      	adds	r3, #1
 80030de:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 80030e2:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 80030e6:	2b1f      	cmp	r3, #31
 80030e8:	ddda      	ble.n	80030a0 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80030f0:	e13e      	b.n	8003370 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80030f8:	e130      	b.n	800335c <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80030fa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80030fe:	015b      	lsls	r3, r3, #5
 8003100:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 8003104:	4413      	add	r3, r2
 8003106:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 800310a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800310e:	3340      	adds	r3, #64	; 0x40
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003116:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800311a:	6812      	ldr	r2, [r2, #0]
 800311c:	4413      	add	r3, r2
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	111b      	asrs	r3, r3, #4
 8003122:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800312e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003132:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003136:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 8003142:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003146:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800314a:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800315a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	dd17      	ble.n	8003194 <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 8003164:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003168:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800316c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	4413      	add	r3, r2
 8003174:	edd3 7a00 	vldr	s15, [r3]
 8003178:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 8003508 <ExtractAlphaParameters+0x708>
 800317c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003180:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003184:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003188:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 8003194:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003198:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800319c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	ed93 7a00 	vldr	s14, [r3]
 80031a8:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031be:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031c2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031c6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4413      	add	r3, r2
 80031ce:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80031d2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 80031dc:	443b      	add	r3, r7
 80031de:	f853 2c94 	ldr.w	r2, [r3, #-148]
 80031e2:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80031ec:	441a      	add	r2, r3
 80031ee:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031f2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031f6:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80031fa:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80031fe:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 8003202:	fa01 f303 	lsl.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	ee07 3a90 	vmov	s15, r3
 800320c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003210:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003214:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003218:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	edd3 7a00 	vldr	s15, [r3]
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800322c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003230:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 800323c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003240:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003244:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4618      	mov	r0, r3
 8003250:	f7fd f9a2 	bl	8000598 <__aeabi_f2d>
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
 8003258:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f979 	bl	8000554 <__aeabi_ui2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	ec43 2b11 	vmov	d1, r2, r3
 800326a:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 80034f0 <ExtractAlphaParameters+0x6f0>
 800326e:	f009 f81b 	bl	800c2a8 <pow>
 8003272:	ec53 2b10 	vmov	r2, r3, d0
 8003276:	4620      	mov	r0, r4
 8003278:	4629      	mov	r1, r5
 800327a:	f7fd fb0f 	bl	800089c <__aeabi_ddiv>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4610      	mov	r0, r2
 8003284:	4619      	mov	r1, r3
 8003286:	f7fd fcd7 	bl	8000c38 <__aeabi_d2f>
 800328a:	4601      	mov	r1, r0
 800328c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003290:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003294:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 800329e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032a2:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80032a6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4413      	add	r3, r2
 80032ae:	ed93 7a00 	vldr	s14, [r3]
 80032b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032b6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	edd3 6a06 	vldr	s13, [r3, #24]
 80032c0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032c4:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ce:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 80032d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032d6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032e0:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 80032e4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80032e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032ec:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80032f0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032fc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003300:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 800330c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003310:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003314:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f93a 	bl	8000598 <__aeabi_f2d>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	a173      	add	r1, pc, #460	; (adr r1, 80034f8 <ExtractAlphaParameters+0x6f8>)
 800332a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800332e:	f7fd fab5 	bl	800089c <__aeabi_ddiv>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4610      	mov	r0, r2
 8003338:	4619      	mov	r1, r3
 800333a:	f7fd fc7d 	bl	8000c38 <__aeabi_d2f>
 800333e:	4601      	mov	r1, r0
 8003340:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003344:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003348:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4413      	add	r3, r2
 8003350:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003352:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8003356:	3301      	adds	r3, #1
 8003358:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 800335c:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8003360:	2b1f      	cmp	r3, #31
 8003362:	f77f aeca 	ble.w	80030fa <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003366:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800336a:	3301      	adds	r3, #1
 800336c:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8003370:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8003374:	2b17      	cmp	r3, #23
 8003376:	f77f aebc 	ble.w	80030f2 <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 800337a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800337e:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8003388:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800338a:	2301      	movs	r3, #1
 800338c:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8003390:	e023      	b.n	80033da <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 8003392:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003396:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800339a:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033aa:	ed93 7a00 	vldr	s14, [r3]
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d50b      	bpl.n	80033d0 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 80033b8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80033bc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80033c0:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80033ce:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80033d0:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033d4:	3301      	adds	r3, #1
 80033d6:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80033da:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033e2:	dbd6      	blt.n	8003392 <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 80033ea:	e00e      	b.n	800340a <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 80033ec:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033f8:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033fc:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8003400:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8003404:	3301      	adds	r3, #1
 8003406:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 800340a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800340e:	6818      	ldr	r0, [r3, #0]
 8003410:	f7fd f8c2 	bl	8000598 <__aeabi_f2d>
 8003414:	a33a      	add	r3, pc, #232	; (adr r3, 8003500 <ExtractAlphaParameters+0x700>)
 8003416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341a:	f7fd fb87 	bl	8000b2c <__aeabi_dcmplt>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e3      	bne.n	80033ec <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 800342a:	e04d      	b.n	80034c8 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 800342c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003430:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003434:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	4604      	mov	r4, r0
 8003446:	460d      	mov	r5, r1
 8003448:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f881 	bl	8000554 <__aeabi_ui2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	ec43 2b11 	vmov	d1, r2, r3
 800345a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80034f0 <ExtractAlphaParameters+0x6f0>
 800345e:	f008 ff23 	bl	800c2a8 <pow>
 8003462:	ec53 2b10 	vmov	r2, r3, d0
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fd f8ed 	bl	8000648 <__aeabi_dmul>
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4610      	mov	r0, r2
 8003474:	4619      	mov	r1, r3
 8003476:	f7fd fbdf 	bl	8000c38 <__aeabi_d2f>
 800347a:	4603      	mov	r3, r0
 800347c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8003480:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 8003482:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	f7fd f886 	bl	8000598 <__aeabi_f2d>
 800348c:	f04f 0200 	mov.w	r2, #0
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <ExtractAlphaParameters+0x70c>)
 8003492:	f7fc ff23 	bl	80002dc <__adddf3>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fbab 	bl	8000bf8 <__aeabi_d2uiz>
 80034a2:	4603      	mov	r3, r0
 80034a4:	b299      	uxth	r1, r3
 80034a6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80034aa:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034b4:	3324      	adds	r3, #36	; 0x24
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	4413      	add	r3, r2
 80034ba:	460a      	mov	r2, r1
 80034bc:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80034be:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034c2:	3301      	adds	r3, #1
 80034c4:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80034c8:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d0:	dbac      	blt.n	800342c <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 80034d2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80034d6:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 80034e0:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a

}
 80034e4:	bf00      	nop
 80034e6:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bdb0      	pop	{r4, r5, r7, pc}
 80034ee:	bf00      	nop
 80034f0:	00000000 	.word	0x00000000
 80034f4:	40000000 	.word	0x40000000
 80034f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80034fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8003500:	9999999a 	.word	0x9999999a
 8003504:	40dfffd9 	.word	0x40dfffd9
 8003508:	42800000 	.word	0x42800000
 800350c:	3fe00000 	.word	0x3fe00000

08003510 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003510:	b480      	push	{r7}
 8003512:	b0c5      	sub	sp, #276	; 0x114
 8003514:	af00      	add	r7, sp, #0
 8003516:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800351a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800351e:	6018      	str	r0, [r3, #0]
 8003520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003524:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003528:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 8003530:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003534:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3320      	adds	r3, #32
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8003548:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800354c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	3320      	adds	r3, #32
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	111b      	asrs	r3, r3, #4
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 8003562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003566:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3320      	adds	r3, #32
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	121b      	asrs	r3, r3, #8
 8003572:	b2db      	uxtb	r3, r3
 8003574:	f003 030f 	and.w	r3, r3, #15
 8003578:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = (int16_t)eeData[17];
 800357c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003580:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3322      	adds	r3, #34	; 0x22
 8003588:	881b      	ldrh	r3, [r3, #0]
 800358a:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

    for(int i = 0; i < 6; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003594:	e062      	b.n	800365c <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 8003596:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 80035a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a4:	3312      	adds	r3, #18
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035ac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	881b      	ldrh	r3, [r3, #0]
 80035b6:	f003 020f 	and.w	r2, r3, #15
 80035ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80035c4:	443b      	add	r3, r7
 80035c6:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 80035ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035ce:	3312      	adds	r3, #18
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035d6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	4413      	add	r3, r2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	111a      	asrs	r2, r3, #4
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	3301      	adds	r3, #1
 80035e8:	f002 020f 	and.w	r2, r2, #15
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80035f2:	443b      	add	r3, r7
 80035f4:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 80035f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035fc:	3312      	adds	r3, #18
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003604:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003608:	6812      	ldr	r2, [r2, #0]
 800360a:	4413      	add	r3, r2
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	121a      	asrs	r2, r3, #8
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	3302      	adds	r3, #2
 8003616:	f002 020f 	and.w	r2, r2, #15
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003620:	443b      	add	r3, r7
 8003622:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 8003626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362a:	3312      	adds	r3, #18
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003632:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	4413      	add	r3, r2
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	0b1b      	lsrs	r3, r3, #12
 800363e:	b29a      	uxth	r2, r3
 8003640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003644:	3303      	adds	r3, #3
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800364c:	443b      	add	r3, r7
 800364e:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8003652:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003656:	3301      	adds	r3, #1
 8003658:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800365c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003660:	2b05      	cmp	r3, #5
 8003662:	dd98      	ble.n	8003596 <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003664:	2300      	movs	r3, #0
 8003666:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800366a:	e020      	b.n	80036ae <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 800366c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003676:	443b      	add	r3, r7
 8003678:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800367c:	2b07      	cmp	r3, #7
 800367e:	dd11      	ble.n	80036a4 <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8003680:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800368a:	443b      	add	r3, r7
 800368c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8003690:	f1a3 0210 	sub.w	r2, r3, #16
 8003694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800369e:	443b      	add	r3, r7
 80036a0:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80036a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036a8:	3301      	adds	r3, #1
 80036aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036ae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036b2:	2b17      	cmp	r3, #23
 80036b4:	ddda      	ble.n	800366c <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036bc:	e062      	b.n	8003784 <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 80036be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 80036c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036cc:	3318      	adds	r3, #24
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80036d8:	6812      	ldr	r2, [r2, #0]
 80036da:	4413      	add	r3, r2
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	f003 010f 	and.w	r1, r3, #15
 80036e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80036ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 80036f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f6:	3318      	adds	r3, #24
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036fe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	111b      	asrs	r3, r3, #4
 800370a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800370e:	3201      	adds	r2, #1
 8003710:	f003 010f 	and.w	r1, r3, #15
 8003714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800371c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8003720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003724:	3318      	adds	r3, #24
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800372c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	881b      	ldrh	r3, [r3, #0]
 8003736:	121b      	asrs	r3, r3, #8
 8003738:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800373c:	3202      	adds	r2, #2
 800373e:	f003 010f 	and.w	r1, r3, #15
 8003742:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800374a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003752:	3318      	adds	r3, #24
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800375a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	4413      	add	r3, r2
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	0b1b      	lsrs	r3, r3, #12
 8003766:	b299      	uxth	r1, r3
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800376c:	1cda      	adds	r2, r3, #3
 800376e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003772:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800377a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377e:	3301      	adds	r3, #1
 8003780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003788:	2b07      	cmp	r3, #7
 800378a:	dd98      	ble.n	80036be <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 800378c:	2300      	movs	r3, #0
 800378e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003792:	e020      	b.n	80037d6 <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 8003794:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003798:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037a4:	2b07      	cmp	r3, #7
 80037a6:	dd11      	ble.n	80037cc <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 80037a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037b0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	f1a3 0110 	sub.w	r1, r3, #16
 80037bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037c4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 80037cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037d0:	3301      	adds	r3, #1
 80037d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037da:	2b1f      	cmp	r3, #31
 80037dc:	ddda      	ble.n	8003794 <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80037e4:	e0c0      	b.n	8003968 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80037ec:	e0b2      	b.n	8003954 <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 80037ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037f2:	015b      	lsls	r3, r3, #5
 80037f4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80037f8:	4413      	add	r3, r2
 80037fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003802:	3340      	adds	r3, #64	; 0x40
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800380a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	4413      	add	r3, r2
 8003812:	881b      	ldrh	r3, [r3, #0]
 8003814:	0a9b      	lsrs	r3, r3, #10
 8003816:	b29b      	uxth	r3, r3
 8003818:	b219      	sxth	r1, r3
 800381a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800381e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003828:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4413      	add	r3, r2
 8003830:	460a      	mov	r2, r1
 8003832:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8003834:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003838:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003842:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	4413      	add	r3, r2
 800384a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800384e:	2b1f      	cmp	r3, #31
 8003850:	dd1d      	ble.n	800388e <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8003852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003856:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4413      	add	r3, r2
 8003868:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b40      	subs	r3, #64	; 0x40
 8003870:	b29b      	uxth	r3, r3
 8003872:	b219      	sxth	r1, r3
 8003874:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003878:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003882:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	460a      	mov	r2, r1
 800388c:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 800388e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003892:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	4413      	add	r3, r2
 80038a4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038a8:	461a      	mov	r2, r3
 80038aa:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	b219      	sxth	r1, r3
 80038b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038b8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c2:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4413      	add	r3, r2
 80038ca:	460a      	mov	r2, r1
 80038cc:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80038ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80038d8:	443b      	add	r3, r7
 80038da:	f853 2c84 	ldr.w	r2, [r3, #-132]
 80038de:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80038ec:	4413      	add	r3, r2
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038f8:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80038fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003900:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	4413      	add	r3, r2
 800390c:	b29a      	uxth	r2, r3
 800390e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003912:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003916:	6819      	ldr	r1, [r3, #0]
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	440b      	add	r3, r1
 8003924:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003928:	b29b      	uxth	r3, r3
 800392a:	4413      	add	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	b219      	sxth	r1, r3
 8003930:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003934:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800393e:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	4413      	add	r3, r2
 8003946:	460a      	mov	r2, r1
 8003948:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800394a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800394e:	3301      	adds	r3, #1
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003954:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003958:	2b1f      	cmp	r3, #31
 800395a:	f77f af48 	ble.w	80037ee <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800395e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003962:	3301      	adds	r3, #1
 8003964:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396c:	2b17      	cmp	r3, #23
 800396e:	f77f af3a 	ble.w	80037e6 <ExtractOffsetParameters+0x2d6>
        }
    }
}
 8003972:	bf00      	nop
 8003974:	bf00      	nop
 8003976:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	0000      	movs	r0, r0
 8003984:	0000      	movs	r0, r0
	...

08003988 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003988:	b5b0      	push	{r4, r5, r7, lr}
 800398a:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 800398e:	af00      	add	r7, sp, #0
 8003990:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003994:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003998:	6018      	str	r0, [r3, #0]
 800399a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800399e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80039a2:	6019      	str	r1, [r3, #0]
    int p = 0;
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 80039aa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039ae:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	336c      	adds	r3, #108	; 0x6c
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	0a1b      	lsrs	r3, r3, #8
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	f887 3c0c 	strb.w	r3, [r7, #3084]	; 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 80039c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039c6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	336c      	adds	r3, #108	; 0x6c
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	b25b      	sxtb	r3, r3
 80039d2:	f887 3c0e 	strb.w	r3, [r7, #3086]	; 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 80039d6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039da:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	336e      	adds	r3, #110	; 0x6e
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	b25b      	sxtb	r3, r3
 80039ea:	f887 3c0d 	strb.w	r3, [r7, #3085]	; 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 80039ee:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039f2:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	336e      	adds	r3, #110	; 0x6e
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8003a02:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a06:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3370      	adds	r3, #112	; 0x70
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	111b      	asrs	r3, r3, #4
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8003a20:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a24:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3370      	adds	r3, #112	; 0x70
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003a3e:	e0ed      	b.n	8003c1c <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003a46:	e0df      	b.n	8003c08 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8003a48:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003a4c:	015b      	lsls	r3, r3, #5
 8003a4e:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	; 0xc20
 8003a52:	4413      	add	r3, r2
 8003a54:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003a58:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	da00      	bge.n	8003a62 <ExtractKtaPixelParameters+0xda>
 8003a60:	331f      	adds	r3, #31
 8003a62:	115b      	asrs	r3, r3, #5
 8003a64:	461a      	mov	r2, r3
 8003a66:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da00      	bge.n	8003a70 <ExtractKtaPixelParameters+0xe8>
 8003a6e:	333f      	adds	r3, #63	; 0x3f
 8003a70:	119b      	asrs	r3, r3, #6
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	bfb8      	it	lt
 8003a88:	425b      	neglt	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8003a92:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a96:	3340      	adds	r3, #64	; 0x40
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8003a9e:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8003aa2:	6812      	ldr	r2, [r2, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	881b      	ldrh	r3, [r3, #0]
 8003aa8:	105b      	asrs	r3, r3, #1
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ab6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003aba:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003abe:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8003aca:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ace:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ad2:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	edd3 7a00 	vldr	s15, [r3]
 8003ade:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ae2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aea:	dd17      	ble.n	8003b1c <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8003aec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003af0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003af4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	4413      	add	r3, r2
 8003afc:	edd3 7a00 	vldr	s15, [r3]
 8003b00:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003b04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b08:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b0c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b10:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003b1c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b20:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b24:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	ed93 7a00 	vldr	s14, [r3]
 8003b30:	f897 3c13 	ldrb.w	r3, [r7, #3091]	; 0xc13
 8003b34:	2201      	movs	r2, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b46:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b4a:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b4e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003b5a:	f897 3c12 	ldrb.w	r3, [r7, #3090]	; 0xc12
 8003b5e:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003b62:	443b      	add	r3, r7
 8003b64:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b70:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b74:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b78:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	edd3 7a00 	vldr	s15, [r3]
 8003b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b88:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b8c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b90:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8003b9c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ba0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ba4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4413      	add	r3, r2
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fc fcf2 	bl	8000598 <__aeabi_f2d>
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	460d      	mov	r5, r1
 8003bb8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fcc9 	bl	8000554 <__aeabi_ui2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	ec43 2b11 	vmov	d1, r2, r3
 8003bca:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8003e00 <ExtractKtaPixelParameters+0x478>
 8003bce:	f008 fb6b 	bl	800c2a8 <pow>
 8003bd2:	ec53 2b10 	vmov	r2, r3, d0
 8003bd6:	4620      	mov	r0, r4
 8003bd8:	4629      	mov	r1, r5
 8003bda:	f7fc fe5f 	bl	800089c <__aeabi_ddiv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	460b      	mov	r3, r1
 8003be2:	4610      	mov	r0, r2
 8003be4:	4619      	mov	r1, r3
 8003be6:	f7fd f827 	bl	8000c38 <__aeabi_d2f>
 8003bea:	4601      	mov	r1, r0
 8003bec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003bf0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003bf4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003bfe:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003c02:	3301      	adds	r3, #1
 8003c04:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003c08:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003c0c:	2b1f      	cmp	r3, #31
 8003c0e:	f77f af1b 	ble.w	8003a48 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003c12:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003c16:	3301      	adds	r3, #1
 8003c18:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003c1c:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003c20:	2b17      	cmp	r3, #23
 8003c22:	f77f af0d 	ble.w	8003a40 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 8003c26:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c2a:	f6a3 4324 	subw	r3, r3, #3108	; 0xc24
 8003c2e:	edd3 7a00 	vldr	s15, [r3]
 8003c32:	eef0 7ae7 	vabs.f32	s15, s15
 8003c36:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c3a:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003c44:	e029      	b.n	8003c9a <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8003c46:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c4a:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c4e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003c5e:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c62:	ed93 7a00 	vldr	s14, [r3]
 8003c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6e:	d50f      	bpl.n	8003c90 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003c70:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c74:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c78:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	eef0 7ae7 	vabs.f32	s15, s15
 8003c88:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c8c:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003c90:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c94:	3301      	adds	r3, #1
 8003c96:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003c9a:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca2:	dbd0      	blt.n	8003c46 <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003caa:	e00e      	b.n	8003cca <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 8003cac:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cb0:	edd3 7a00 	vldr	s15, [r3]
 8003cb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003cb8:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cbc:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8003cc0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003cca:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	f7fc fc62 	bl	8000598 <__aeabi_f2d>
 8003cd4:	a34d      	add	r3, pc, #308	; (adr r3, 8003e0c <ExtractKtaPixelParameters+0x484>)
 8003cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cda:	f7fc ff27 	bl	8000b2c <__aeabi_dcmplt>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e3      	bne.n	8003cac <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003cea:	e075      	b.n	8003dd8 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 8003cec:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003cf0:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003cf4:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7fc fc4a 	bl	8000598 <__aeabi_f2d>
 8003d04:	4604      	mov	r4, r0
 8003d06:	460d      	mov	r5, r1
 8003d08:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fc21 	bl	8000554 <__aeabi_ui2d>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	ec43 2b11 	vmov	d1, r2, r3
 8003d1a:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8003e00 <ExtractKtaPixelParameters+0x478>
 8003d1e:	f008 fac3 	bl	800c2a8 <pow>
 8003d22:	ec53 2b10 	vmov	r2, r3, d0
 8003d26:	4620      	mov	r0, r4
 8003d28:	4629      	mov	r1, r5
 8003d2a:	f7fc fc8d 	bl	8000648 <__aeabi_dmul>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	4610      	mov	r0, r2
 8003d34:	4619      	mov	r1, r3
 8003d36:	f7fc ff7f 	bl	8000c38 <__aeabi_d2f>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 8003d40:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003d42:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d46:	edd3 7a00 	vldr	s15, [r3]
 8003d4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d52:	d51e      	bpl.n	8003d92 <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8003d54:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	f7fc fc1d 	bl	8000598 <__aeabi_f2d>
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	4b29      	ldr	r3, [pc, #164]	; (8003e08 <ExtractKtaPixelParameters+0x480>)
 8003d64:	f7fc fab8 	bl	80002d8 <__aeabi_dsub>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f7fc ff1a 	bl	8000ba8 <__aeabi_d2iz>
 8003d74:	4603      	mov	r3, r0
 8003d76:	b259      	sxtb	r1, r3
 8003d78:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003d7c:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d86:	4413      	add	r3, r2
 8003d88:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003d8c:	460a      	mov	r2, r1
 8003d8e:	701a      	strb	r2, [r3, #0]
 8003d90:	e01d      	b.n	8003dce <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8003d92:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f7fc fbfe 	bl	8000598 <__aeabi_f2d>
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <ExtractKtaPixelParameters+0x480>)
 8003da2:	f7fc fa9b 	bl	80002dc <__adddf3>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	f7fc fefb 	bl	8000ba8 <__aeabi_d2iz>
 8003db2:	4603      	mov	r3, r0
 8003db4:	b259      	sxtb	r1, r3
 8003db6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003dba:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003dca:	460a      	mov	r2, r1
 8003dcc:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003dce:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003dd8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003de0:	db84      	blt.n	8003cec <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 8003de2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003de6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	; 0xc2f
 8003df0:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8003df4:	bf00      	nop
 8003df6:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	00000000 	.word	0x00000000
 8003e04:	40000000 	.word	0x40000000
 8003e08:	3fe00000 	.word	0x3fe00000
 8003e0c:	33333333 	.word	0x33333333
 8003e10:	404fb333 	.word	0x404fb333
 8003e14:	00000000 	.word	0x00000000

08003e18 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e24:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e28:	6018      	str	r0, [r3, #0]
 8003e2a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e2e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003e32:	6019      	str	r1, [r3, #0]
    int p = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 8003e3a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e3e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3368      	adds	r3, #104	; 0x68
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	0b1b      	lsrs	r3, r3, #12
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    if (KvRoCo > 7)
 8003e50:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	; 0xc2f
 8003e54:	2b07      	cmp	r3, #7
 8003e56:	dd05      	ble.n	8003e64 <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003e58:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e5c:	3b10      	subs	r3, #16
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    }
    KvT[0] = KvRoCo;
 8003e64:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e68:	f887 3c08 	strb.w	r3, [r7, #3080]	; 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 8003e6c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e70:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3368      	adds	r3, #104	; 0x68
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	121b      	asrs	r3, r3, #8
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    if (KvReCo > 7)
 8003e86:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
 8003e8a:	2b07      	cmp	r3, #7
 8003e8c:	dd05      	ble.n	8003e9a <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 8003e8e:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003e92:	3b10      	subs	r3, #16
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    }
    KvT[2] = KvReCo;
 8003e9a:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003e9e:	f887 3c0a 	strb.w	r3, [r7, #3082]	; 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8003ea2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ea6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3368      	adds	r3, #104	; 0x68
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	111b      	asrs	r3, r3, #4
 8003eb2:	b25b      	sxtb	r3, r3
 8003eb4:	f003 030f 	and.w	r3, r3, #15
 8003eb8:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    if (KvRoCe > 7)
 8003ebc:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	; 0xc2e
 8003ec0:	2b07      	cmp	r3, #7
 8003ec2:	dd05      	ble.n	8003ed0 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8003ec4:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003ec8:	3b10      	subs	r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    }
    KvT[1] = KvRoCe;
 8003ed0:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003ed4:	f887 3c09 	strb.w	r3, [r7, #3081]	; 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8003ed8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003edc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3368      	adds	r3, #104	; 0x68
 8003ee4:	881b      	ldrh	r3, [r3, #0]
 8003ee6:	b25b      	sxtb	r3, r3
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    if (KvReCe > 7)
 8003ef0:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
 8003ef4:	2b07      	cmp	r3, #7
 8003ef6:	dd05      	ble.n	8003f04 <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 8003ef8:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003efc:	3b10      	subs	r3, #16
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    }
    KvT[3] = KvReCe;
 8003f04:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003f08:	f887 3c0b 	strb.w	r3, [r7, #3083]	; 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003f0c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f10:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3370      	adds	r3, #112	; 0x70
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	121b      	asrs	r3, r3, #8
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003f26:	2300      	movs	r3, #0
 8003f28:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003f2c:	e07c      	b.n	8004028 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003f34:	e06f      	b.n	8004016 <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 8003f36:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8003f40:	4413      	add	r3, r2
 8003f42:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003f46:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	da00      	bge.n	8003f50 <ExtractKvPixelParameters+0x138>
 8003f4e:	331f      	adds	r3, #31
 8003f50:	115b      	asrs	r3, r3, #5
 8003f52:	461a      	mov	r2, r3
 8003f54:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	da00      	bge.n	8003f5e <ExtractKvPixelParameters+0x146>
 8003f5c:	333f      	adds	r3, #63	; 0x3f
 8003f5e:	119b      	asrs	r3, r3, #6
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	bfb8      	it	lt
 8003f76:	425b      	neglt	r3, r3
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f
            kvTemp[p] = KvT[split];
 8003f80:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	; 0xc0f
 8003f84:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003f88:	443b      	add	r3, r7
 8003f8a:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f96:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f9a:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003f9e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 8003faa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003fae:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003fb2:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc faeb 	bl	8000598 <__aeabi_f2d>
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	460d      	mov	r5, r1
 8003fc6:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fc fac2 	bl	8000554 <__aeabi_ui2d>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	ec43 2b11 	vmov	d1, r2, r3
 8003fd8:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8004210 <ExtractKvPixelParameters+0x3f8>
 8003fdc:	f008 f964 	bl	800c2a8 <pow>
 8003fe0:	ec53 2b10 	vmov	r2, r3, d0
 8003fe4:	4620      	mov	r0, r4
 8003fe6:	4629      	mov	r1, r5
 8003fe8:	f7fc fc58 	bl	800089c <__aeabi_ddiv>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	f7fc fe20 	bl	8000c38 <__aeabi_d2f>
 8003ff8:	4601      	mov	r1, r0
 8003ffa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ffe:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004002:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800400c:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8004010:	3301      	adds	r3, #1
 8004012:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8004016:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 800401a:	2b1f      	cmp	r3, #31
 800401c:	dd8b      	ble.n	8003f36 <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800401e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8004022:	3301      	adds	r3, #1
 8004024:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8004028:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800402c:	2b17      	cmp	r3, #23
 800402e:	f77f af7e 	ble.w	8003f2e <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 8004032:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004036:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	eef0 7ae7 	vabs.f32	s15, s15
 8004042:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004046:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800404a:	2301      	movs	r3, #1
 800404c:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8004050:	e029      	b.n	80040a6 <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 8004052:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004056:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800405a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	eef0 7ae7 	vabs.f32	s15, s15
 800406a:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800406e:	ed93 7a00 	vldr	s14, [r3]
 8004072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d50f      	bpl.n	800409c <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 800407c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004080:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004084:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	edd3 7a00 	vldr	s15, [r3]
 8004090:	eef0 7ae7 	vabs.f32	s15, s15
 8004094:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004098:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 800409c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80040a0:	3301      	adds	r3, #1
 80040a2:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 80040a6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80040aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ae:	dbd0      	blt.n	8004052 <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 80040b0:	2300      	movs	r3, #0
 80040b2:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 80040b6:	e00e      	b.n	80040d6 <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 80040b8:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040bc:	edd3 7a00 	vldr	s15, [r3]
 80040c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040c4:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040c8:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80040cc:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80040d0:	3301      	adds	r3, #1
 80040d2:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 80040d6:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	f7fc fa5c 	bl	8000598 <__aeabi_f2d>
 80040e0:	a34e      	add	r3, pc, #312	; (adr r3, 800421c <ExtractKvPixelParameters+0x404>)
 80040e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e6:	f7fc fd21 	bl	8000b2c <__aeabi_dcmplt>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1e3      	bne.n	80040b8 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80040f6:	e075      	b.n	80041e4 <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80040f8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80040fc:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004100:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f7fc fa44 	bl	8000598 <__aeabi_f2d>
 8004110:	4604      	mov	r4, r0
 8004112:	460d      	mov	r5, r1
 8004114:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8004118:	4618      	mov	r0, r3
 800411a:	f7fc fa1b 	bl	8000554 <__aeabi_ui2d>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	ec43 2b11 	vmov	d1, r2, r3
 8004126:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8004210 <ExtractKvPixelParameters+0x3f8>
 800412a:	f008 f8bd 	bl	800c2a8 <pow>
 800412e:	ec53 2b10 	vmov	r2, r3, d0
 8004132:	4620      	mov	r0, r4
 8004134:	4629      	mov	r1, r5
 8004136:	f7fc fa87 	bl	8000648 <__aeabi_dmul>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4610      	mov	r0, r2
 8004140:	4619      	mov	r1, r3
 8004142:	f7fc fd79 	bl	8000c38 <__aeabi_d2f>
 8004146:	4603      	mov	r3, r0
 8004148:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 800414c:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 800414e:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d51e      	bpl.n	800419e <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8004160:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f7fc fa17 	bl	8000598 <__aeabi_f2d>
 800416a:	f04f 0200 	mov.w	r2, #0
 800416e:	4b2a      	ldr	r3, [pc, #168]	; (8004218 <ExtractKvPixelParameters+0x400>)
 8004170:	f7fc f8b2 	bl	80002d8 <__aeabi_dsub>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	4610      	mov	r0, r2
 800417a:	4619      	mov	r1, r3
 800417c:	f7fc fd14 	bl	8000ba8 <__aeabi_d2iz>
 8004180:	4603      	mov	r3, r0
 8004182:	b259      	sxtb	r1, r3
 8004184:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004188:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004192:	4413      	add	r3, r2
 8004194:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8004198:	460a      	mov	r2, r1
 800419a:	701a      	strb	r2, [r3, #0]
 800419c:	e01d      	b.n	80041da <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 800419e:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	f7fc f9f8 	bl	8000598 <__aeabi_f2d>
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <ExtractKvPixelParameters+0x400>)
 80041ae:	f7fc f895 	bl	80002dc <__adddf3>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f7fc fcf5 	bl	8000ba8 <__aeabi_d2iz>
 80041be:	4603      	mov	r3, r0
 80041c0:	b259      	sxtb	r1, r3
 80041c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041c6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041d0:	4413      	add	r3, r2
 80041d2:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80041d6:	460a      	mov	r2, r1
 80041d8:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80041da:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041de:	3301      	adds	r3, #1
 80041e0:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80041e4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041ec:	db84      	blt.n	80040f8 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 80041ee:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041f2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041fc:	461a      	mov	r2, r3
 80041fe:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8004202:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 8004206:	bf00      	nop
 8004208:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 800420c:	46bd      	mov	sp, r7
 800420e:	bdb0      	pop	{r4, r5, r7, pc}
 8004210:	00000000 	.word	0x00000000
 8004214:	40000000 	.word	0x40000000
 8004218:	3fe00000 	.word	0x3fe00000
 800421c:	33333333 	.word	0x33333333
 8004220:	404fb333 	.word	0x404fb333
 8004224:	00000000 	.word	0x00000000

08004228 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8004228:	b5b0      	push	{r4, r5, r7, lr}
 800422a:	b08a      	sub	sp, #40	; 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3340      	adds	r3, #64	; 0x40
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	0b1b      	lsrs	r3, r3, #12
 800423a:	b29b      	uxth	r3, r3
 800423c:	b2db      	uxtb	r3, r3
 800423e:	331b      	adds	r3, #27
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3374      	adds	r3, #116	; 0x74
 8004248:	881b      	ldrh	r3, [r3, #0]
 800424a:	b21b      	sxth	r3, r3
 800424c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004250:	b21b      	sxth	r3, r3
 8004252:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 8004254:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800425c:	db07      	blt.n	800426e <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 800425e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004262:	b29b      	uxth	r3, r3
 8004264:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004268:	b29b      	uxth	r3, r3
 800426a:	b21b      	sxth	r3, r3
 800426c:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3374      	adds	r3, #116	; 0x74
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	0a9b      	lsrs	r3, r3, #10
 8004276:	b29b      	uxth	r3, r3
 8004278:	b21b      	sxth	r3, r3
 800427a:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 800427c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004280:	2b1f      	cmp	r3, #31
 8004282:	dd06      	ble.n	8004292 <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 8004284:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004288:	b29b      	uxth	r3, r3
 800428a:	3b40      	subs	r3, #64	; 0x40
 800428c:	b29b      	uxth	r3, r3
 800428e:	b21b      	sxth	r3, r3
 8004290:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 8004292:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004296:	b29a      	uxth	r2, r3
 8004298:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800429c:	b29b      	uxth	r3, r3
 800429e:	4413      	add	r3, r2
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	b21b      	sxth	r3, r3
 80042a4:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3372      	adds	r3, #114	; 0x72
 80042aa:	881b      	ldrh	r3, [r3, #0]
 80042ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b0:	ee07 3a90 	vmov	s15, r3
 80042b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80042bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80042c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004490 <ExtractCPParameters+0x268>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	dd07      	ble.n	80042de <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80042ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80042d2:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004494 <ExtractCPParameters+0x26c>
 80042d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042da:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f959 	bl	8000598 <__aeabi_f2d>
 80042e6:	4604      	mov	r4, r0
 80042e8:	460d      	mov	r5, r1
 80042ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fc f930 	bl	8000554 <__aeabi_ui2d>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	ec43 2b11 	vmov	d1, r2, r3
 80042fc:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8004488 <ExtractCPParameters+0x260>
 8004300:	f007 ffd2 	bl	800c2a8 <pow>
 8004304:	ec53 2b10 	vmov	r2, r3, d0
 8004308:	4620      	mov	r0, r4
 800430a:	4629      	mov	r1, r5
 800430c:	f7fc fac6 	bl	800089c <__aeabi_ddiv>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f7fc fc8e 	bl	8000c38 <__aeabi_d2f>
 800431c:	4603      	mov	r3, r0
 800431e:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3372      	adds	r3, #114	; 0x72
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	0a9b      	lsrs	r3, r3, #10
 8004328:	b29b      	uxth	r3, r3
 800432a:	ee07 3a90 	vmov	s15, r3
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 8004336:	edd7 7a04 	vldr	s15, [r7, #16]
 800433a:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800433e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004346:	dd07      	ble.n	8004358 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8004348:	edd7 7a04 	vldr	s15, [r7, #16]
 800434c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004498 <ExtractCPParameters+0x270>
 8004350:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004354:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8004358:	ed97 7a04 	vldr	s14, [r7, #16]
 800435c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800449c <ExtractCPParameters+0x274>
 8004360:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004368:	ee37 7a87 	vadd.f32	s14, s15, s14
 800436c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004374:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3376      	adds	r3, #118	; 0x76
 800437c:	881b      	ldrh	r3, [r3, #0]
 800437e:	b25b      	sxtb	r3, r3
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004388:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3370      	adds	r3, #112	; 0x70
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	111b      	asrs	r3, r3, #4
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	b2db      	uxtb	r3, r3
 800439c:	3308      	adds	r3, #8
 800439e:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 80043a0:	6a38      	ldr	r0, [r7, #32]
 80043a2:	f7fc f8f9 	bl	8000598 <__aeabi_f2d>
 80043a6:	4604      	mov	r4, r0
 80043a8:	460d      	mov	r5, r1
 80043aa:	7ffb      	ldrb	r3, [r7, #31]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f8d1 	bl	8000554 <__aeabi_ui2d>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	ec43 2b11 	vmov	d1, r2, r3
 80043ba:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8004488 <ExtractCPParameters+0x260>
 80043be:	f007 ff73 	bl	800c2a8 <pow>
 80043c2:	ec53 2b10 	vmov	r2, r3, d0
 80043c6:	4620      	mov	r0, r4
 80043c8:	4629      	mov	r1, r5
 80043ca:	f7fc fa67 	bl	800089c <__aeabi_ddiv>
 80043ce:	4602      	mov	r2, r0
 80043d0:	460b      	mov	r3, r1
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7fc fc2f 	bl	8000c38 <__aeabi_d2f>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3376      	adds	r3, #118	; 0x76
 80043e4:	881b      	ldrh	r3, [r3, #0]
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	b25b      	sxtb	r3, r3
 80043ec:	ee07 3a90 	vmov	s15, r3
 80043f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f4:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3370      	adds	r3, #112	; 0x70
 80043fc:	881b      	ldrh	r3, [r3, #0]
 80043fe:	121b      	asrs	r3, r3, #8
 8004400:	b2db      	uxtb	r3, r3
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 8004408:	69b8      	ldr	r0, [r7, #24]
 800440a:	f7fc f8c5 	bl	8000598 <__aeabi_f2d>
 800440e:	4604      	mov	r4, r0
 8004410:	460d      	mov	r5, r1
 8004412:	7dfb      	ldrb	r3, [r7, #23]
 8004414:	4618      	mov	r0, r3
 8004416:	f7fc f89d 	bl	8000554 <__aeabi_ui2d>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	ec43 2b11 	vmov	d1, r2, r3
 8004422:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8004488 <ExtractCPParameters+0x260>
 8004426:	f007 ff3f 	bl	800c2a8 <pow>
 800442a:	ec53 2b10 	vmov	r2, r3, d0
 800442e:	4620      	mov	r0, r4
 8004430:	4629      	mov	r1, r5
 8004432:	f7fc fa33 	bl	800089c <__aeabi_ddiv>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4610      	mov	r0, r2
 800443c:	4619      	mov	r1, r3
 800443e:	f7fc fbfb 	bl	8000c38 <__aeabi_d2f>
 8004442:	4602      	mov	r2, r0
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004450:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800445c:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8004460:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 800446e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004478:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 800447c:	bf00      	nop
 800447e:	3728      	adds	r7, #40	; 0x28
 8004480:	46bd      	mov	sp, r7
 8004482:	bdb0      	pop	{r4, r5, r7, pc}
 8004484:	f3af 8000 	nop.w
 8004488:	00000000 	.word	0x00000000
 800448c:	40000000 	.word	0x40000000
 8004490:	43ff8000 	.word	0x43ff8000
 8004494:	44800000 	.word	0x44800000
 8004498:	42800000 	.word	0x42800000
 800449c:	43000000 	.word	0x43000000

080044a0 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3314      	adds	r3, #20
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	111b      	asrs	r3, r3, #4
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044b8:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80044ba:	7dfb      	ldrb	r3, [r7, #23]
 80044bc:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80044c0:	43db      	mvns	r3, r3
 80044c2:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	336a      	adds	r3, #106	; 0x6a
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ce:	ee07 3a90 	vmov	s15, r3
 80044d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d6:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 80044da:	edd7 7a02 	vldr	s15, [r7, #8]
 80044de:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80044e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ea:	dd07      	ble.n	80044fc <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 80044ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f0:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80045d8 <ExtractCILCParameters+0x138>
 80044f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044f8:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 80044fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004500:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8004504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004508:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	336a      	adds	r3, #106	; 0x6a
 8004510:	881b      	ldrh	r3, [r3, #0]
 8004512:	119b      	asrs	r3, r3, #6
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 8004524:	edd7 7a03 	vldr	s15, [r7, #12]
 8004528:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800452c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	dd07      	ble.n	8004546 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 8004536:	edd7 7a03 	vldr	s15, [r7, #12]
 800453a:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80045dc <ExtractCILCParameters+0x13c>
 800453e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004542:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 8004546:	ed97 7a03 	vldr	s14, [r7, #12]
 800454a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800454e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004552:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	336a      	adds	r3, #106	; 0x6a
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	0adb      	lsrs	r3, r3, #11
 800455e:	b29b      	uxth	r3, r3
 8004560:	ee07 3a90 	vmov	s15, r3
 8004564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004568:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 800456c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004570:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	dd07      	ble.n	800458e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 800457e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004582:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80045dc <ExtractCILCParameters+0x13c>
 8004586:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800458a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 800458e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004592:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8004596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459a:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	7dfa      	ldrb	r2, [r7, #23]
 80045a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	683a      	ldr	r2, [r7, #0]
 80045aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ae:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ba:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045c6:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80045ca:	bf00      	nop
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	42800000 	.word	0x42800000
 80045dc:	42000000 	.word	0x42000000

080045e0 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 80045ea:	2300      	movs	r3, #0
 80045ec:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 80045ee:	2300      	movs	r3, #0
 80045f0:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	82fb      	strh	r3, [r7, #22]
 80045fe:	e013      	b.n	8004628 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8004600:	8afa      	ldrh	r2, [r7, #22]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004608:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800460c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8004610:	8afb      	ldrh	r3, [r7, #22]
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	4413      	add	r3, r2
 800461c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004620:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8004622:	8afb      	ldrh	r3, [r7, #22]
 8004624:	3301      	adds	r3, #1
 8004626:	82fb      	strh	r3, [r7, #22]
 8004628:	8afb      	ldrh	r3, [r7, #22]
 800462a:	2b04      	cmp	r3, #4
 800462c:	d9e8      	bls.n	8004600 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 800462e:	2300      	movs	r3, #0
 8004630:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8004632:	e02a      	b.n	800468a <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 8004634:	8afb      	ldrh	r3, [r7, #22]
 8004636:	3340      	adds	r3, #64	; 0x40
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10a      	bne.n	800465a <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 8004644:	8aba      	ldrh	r2, [r7, #20]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800464c:	8af9      	ldrh	r1, [r7, #22]
 800464e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 8004652:	8abb      	ldrh	r3, [r7, #20]
 8004654:	3301      	adds	r3, #1
 8004656:	82bb      	strh	r3, [r7, #20]
 8004658:	e014      	b.n	8004684 <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 800465a:	8afb      	ldrh	r3, [r7, #22]
 800465c:	3340      	adds	r3, #64	; 0x40
 800465e:	005b      	lsls	r3, r3, #1
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4413      	add	r3, r2
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 800466e:	8a7b      	ldrh	r3, [r7, #18]
 8004670:	683a      	ldr	r2, [r7, #0]
 8004672:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	4413      	add	r3, r2
 800467a:	8afa      	ldrh	r2, [r7, #22]
 800467c:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 800467e:	8a7b      	ldrh	r3, [r7, #18]
 8004680:	3301      	adds	r3, #1
 8004682:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 8004684:	8afb      	ldrh	r3, [r7, #22]
 8004686:	3301      	adds	r3, #1
 8004688:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004690:	d205      	bcs.n	800469e <ExtractDeviatingPixels+0xbe>
 8004692:	8abb      	ldrh	r3, [r7, #20]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d802      	bhi.n	800469e <ExtractDeviatingPixels+0xbe>
 8004698:	8a7b      	ldrh	r3, [r7, #18]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d9ca      	bls.n	8004634 <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 800469e:	8abb      	ldrh	r3, [r7, #20]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d903      	bls.n	80046ac <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 80046a4:	f06f 0302 	mvn.w	r3, #2
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	e08f      	b.n	80047cc <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 80046ac:	8a7b      	ldrh	r3, [r7, #18]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d903      	bls.n	80046ba <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 80046b2:	f06f 0303 	mvn.w	r3, #3
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e088      	b.n	80047cc <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 80046ba:	8aba      	ldrh	r2, [r7, #20]
 80046bc:	8a7b      	ldrh	r3, [r7, #18]
 80046be:	4413      	add	r3, r2
 80046c0:	2b04      	cmp	r3, #4
 80046c2:	dd03      	ble.n	80046cc <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 80046c4:	f06f 0304 	mvn.w	r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
 80046ca:	e07f      	b.n	80047cc <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	82fb      	strh	r3, [r7, #22]
 80046d0:	e022      	b.n	8004718 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80046d2:	8afb      	ldrh	r3, [r7, #22]
 80046d4:	3301      	adds	r3, #1
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	e017      	b.n	800470a <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 80046da:	8afa      	ldrh	r2, [r7, #22]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80046e2:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80046ee:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80046f2:	4619      	mov	r1, r3
 80046f4:	f000 f86f 	bl	80047d6 <CheckAdjacentPixels>
 80046f8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	e064      	b.n	80047ce <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	3301      	adds	r3, #1
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	8abb      	ldrh	r3, [r7, #20]
 800470c:	68ba      	ldr	r2, [r7, #8]
 800470e:	429a      	cmp	r2, r3
 8004710:	dbe3      	blt.n	80046da <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8004712:	8afb      	ldrh	r3, [r7, #22]
 8004714:	3301      	adds	r3, #1
 8004716:	82fb      	strh	r3, [r7, #22]
 8004718:	8afa      	ldrh	r2, [r7, #22]
 800471a:	8abb      	ldrh	r3, [r7, #20]
 800471c:	429a      	cmp	r2, r3
 800471e:	d3d8      	bcc.n	80046d2 <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8004720:	2300      	movs	r3, #0
 8004722:	82fb      	strh	r3, [r7, #22]
 8004724:	e024      	b.n	8004770 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	3301      	adds	r3, #1
 800472a:	60bb      	str	r3, [r7, #8]
 800472c:	e019      	b.n	8004762 <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 800472e:	8afb      	ldrh	r3, [r7, #22]
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	4413      	add	r3, r2
 800473a:	8858      	ldrh	r0, [r3, #2]
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4413      	add	r3, r2
 8004748:	885b      	ldrh	r3, [r3, #2]
 800474a:	4619      	mov	r1, r3
 800474c:	f000 f843 	bl	80047d6 <CheckAdjacentPixels>
 8004750:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d001      	beq.n	800475c <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	e038      	b.n	80047ce <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3301      	adds	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	8a7b      	ldrh	r3, [r7, #18]
 8004764:	68ba      	ldr	r2, [r7, #8]
 8004766:	429a      	cmp	r2, r3
 8004768:	dbe1      	blt.n	800472e <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 800476a:	8afb      	ldrh	r3, [r7, #22]
 800476c:	3301      	adds	r3, #1
 800476e:	82fb      	strh	r3, [r7, #22]
 8004770:	8afa      	ldrh	r2, [r7, #22]
 8004772:	8a7b      	ldrh	r3, [r7, #18]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3d6      	bcc.n	8004726 <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8004778:	2300      	movs	r3, #0
 800477a:	82fb      	strh	r3, [r7, #22]
 800477c:	e022      	b.n	80047c4 <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 800477e:	2300      	movs	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
 8004782:	e018      	b.n	80047b6 <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 8004784:	8afa      	ldrh	r2, [r7, #22]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800478c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	4413      	add	r3, r2
 800479c:	885b      	ldrh	r3, [r3, #2]
 800479e:	4619      	mov	r1, r3
 80047a0:	f000 f819 	bl	80047d6 <CheckAdjacentPixels>
 80047a4:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e00e      	b.n	80047ce <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	3301      	adds	r3, #1
 80047b4:	60bb      	str	r3, [r7, #8]
 80047b6:	8a7b      	ldrh	r3, [r7, #18]
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	dbe2      	blt.n	8004784 <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80047be:	8afb      	ldrh	r3, [r7, #22]
 80047c0:	3301      	adds	r3, #1
 80047c2:	82fb      	strh	r3, [r7, #22]
 80047c4:	8afa      	ldrh	r2, [r7, #22]
 80047c6:	8abb      	ldrh	r3, [r7, #20]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d3d8      	bcc.n	800477e <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 80047cc:	68fb      	ldr	r3, [r7, #12]

}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 80047d6:	b480      	push	{r7}
 80047d8:	b087      	sub	sp, #28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	460a      	mov	r2, r1
 80047e0:	80fb      	strh	r3, [r7, #6]
 80047e2:	4613      	mov	r3, r2
 80047e4:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 80047e6:	88fb      	ldrh	r3, [r7, #6]
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 80047ec:	88bb      	ldrh	r3, [r7, #4]
 80047ee:	095b      	lsrs	r3, r3, #5
 80047f0:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 80047f2:	8afb      	ldrh	r3, [r7, #22]
 80047f4:	015b      	lsls	r3, r3, #5
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 80047fe:	8abb      	ldrh	r3, [r7, #20]
 8004800:	015b      	lsls	r3, r3, #5
 8004802:	b29b      	uxth	r3, r3
 8004804:	88ba      	ldrh	r2, [r7, #4]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 800480a:	8afa      	ldrh	r2, [r7, #22]
 800480c:	8abb      	ldrh	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004818:	db10      	blt.n	800483c <CheckAdjacentPixels+0x66>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	dc0d      	bgt.n	800483c <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8004820:	8a7a      	ldrh	r2, [r7, #18]
 8004822:	8a3b      	ldrh	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482e:	db05      	blt.n	800483c <CheckAdjacentPixels+0x66>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b01      	cmp	r3, #1
 8004834:	dc02      	bgt.n	800483c <CheckAdjacentPixels+0x66>
        {
            return -6;
 8004836:	f06f 0305 	mvn.w	r3, #5
 800483a:	e000      	b.n	800483e <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 800483c:	2300      	movs	r3, #0
 }
 800483e:	4618      	mov	r0, r3
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <GetMedian>:

//------------------------------------------------------------------------------

static float GetMedian(float *values, int n)
 {
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
    float temp;

    for(int i=0; i<n-1; i++)
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e034      	b.n	80048c4 <GetMedian+0x7a>
    {
        for(int j=i+1; j<n; j++)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	3301      	adds	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e029      	b.n	80048b6 <GetMedian+0x6c>
        {
            if(values[j] < values[i])
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	ed93 7a00 	vldr	s14, [r3]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	edd3 7a00 	vldr	s15, [r3]
 800487a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800487e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004882:	d515      	bpl.n	80048b0 <GetMedian+0x66>
            {
                temp = values[i];
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60fb      	str	r3, [r7, #12]
                values[i] = values[j];
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	441a      	add	r2, r3
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	440b      	add	r3, r1
 80048a0:	6812      	ldr	r2, [r2, #0]
 80048a2:	601a      	str	r2, [r3, #0]
                values[j] = temp;
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	601a      	str	r2, [r3, #0]
        for(int j=i+1; j<n; j++)
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	3301      	adds	r3, #1
 80048b4:	613b      	str	r3, [r7, #16]
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	dbd1      	blt.n	8004862 <GetMedian+0x18>
    for(int i=0; i<n-1; i++)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	3301      	adds	r3, #1
 80048c2:	617b      	str	r3, [r7, #20]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	dbc5      	blt.n	800485a <GetMedian+0x10>
            }
        }
    }

    if(n%2==0)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11b      	bne.n	8004910 <GetMedian+0xc6>
    {
        return ((values[n/2] + values[n/2 - 1]) / 2.0);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	0fda      	lsrs	r2, r3, #31
 80048dc:	4413      	add	r3, r2
 80048de:	105b      	asrs	r3, r3, #1
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	ed93 7a00 	vldr	s14, [r3]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	0fda      	lsrs	r2, r3, #31
 80048ee:	4413      	add	r3, r2
 80048f0:	105b      	asrs	r3, r3, #1
 80048f2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048f6:	3b01      	subs	r3, #1
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	4413      	add	r3, r2
 80048fe:	edd3 7a00 	vldr	s15, [r3]
 8004902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004906:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800490a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490e:	e008      	b.n	8004922 <GetMedian+0xd8>

    }
    else
    {
        return values[n/2];
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	0fda      	lsrs	r2, r3, #31
 8004914:	4413      	add	r3, r2
 8004916:	105b      	asrs	r3, r3, #1
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	edd3 7a00 	vldr	s15, [r3]
    }

 }
 8004922:	eeb0 0a67 	vmov.f32	s0, s15
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <IsPixelBad>:

//------------------------------------------------------------------------------

static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	4603      	mov	r3, r0
 8004938:	6039      	str	r1, [r7, #0]
 800493a:	80fb      	strh	r3, [r7, #6]
    for(int i=0; i<5; i++)
 800493c:	2300      	movs	r3, #0
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	e017      	b.n	8004972 <IsPixelBad+0x42>
    {
        if(pixel == params->outlierPixels[i] || pixel == params->brokenPixels[i])
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	885b      	ldrh	r3, [r3, #2]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	429a      	cmp	r2, r3
 8004954:	d008      	beq.n	8004968 <IsPixelBad+0x38>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800495e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	429a      	cmp	r2, r3
 8004966:	d101      	bne.n	800496c <IsPixelBad+0x3c>
        {
            return 1;
 8004968:	2301      	movs	r3, #1
 800496a:	e006      	b.n	800497a <IsPixelBad+0x4a>
    for(int i=0; i<5; i++)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b04      	cmp	r3, #4
 8004976:	dde4      	ble.n	8004942 <IsPixelBad+0x12>
        }
    }

    return 0;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_I2C_EnableClockStretching>:
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <LL_I2C_DisableGeneralCall>:
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <LL_I2C_SetOwnAddress2>:
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80049da:	f023 0306 	bic.w	r3, r3, #6
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	431a      	orrs	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	60da      	str	r2, [r3, #12]
}
 80049ea:	bf00      	nop
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_I2C_DisableOwnAddress2>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	b083      	sub	sp, #12
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <LL_I2C_EnableAutoEndMode>:
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a40:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a44:	4907      	ldr	r1, [pc, #28]	; (8004a64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a4c:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	bf00      	nop
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	40021000 	.word	0x40021000

08004a68 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a74:	4907      	ldr	r1, [pc, #28]	; (8004a94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a7c:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4013      	ands	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a86:	68fb      	ldr	r3, [r7, #12]
}
 8004a88:	bf00      	nop
 8004a8a:	3714      	adds	r7, #20
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	40021000 	.word	0x40021000

08004a98 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004aa0:	1d39      	adds	r1, r7, #4
 8004aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	4803      	ldr	r0, [pc, #12]	; (8004ab8 <__io_putchar+0x20>)
 8004aaa:	f002 fb5d 	bl	8007168 <HAL_UART_Transmit>
	return ch;
 8004aae:	687b      	ldr	r3, [r7, #4]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000250 	.word	0x20000250

08004abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004abc:	b5b0      	push	{r4, r5, r7, lr}
 8004abe:	f5ad 6d53 	sub.w	sp, sp, #3376	; 0xd30
 8004ac2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ac4:	f000 fcc9 	bl	800545a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004ac8:	f000 f8f2 	bl	8004cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004acc:	f000 fa52 	bl	8004f74 <MX_GPIO_Init>
  MX_I2C1_Init();
 8004ad0:	f000 f93a 	bl	8004d48 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004ad4:	f000 f9fa 	bl	8004ecc <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8004ad8:	f000 f9be 	bl	8004e58 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8004adc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ae0:	f000 fd2c 	bl	800553c <HAL_Delay>
  MLX90640_I2CInit(/*hi2c1*/);
 8004ae4:	f7fc fb56 	bl	8001194 <MLX90640_I2CInit>
  int status;
  uint16_t eeMLX90640[832];

  status = MLX90640_DumpEE(mlx_addr, eeMLX90640);
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <main+0x1c0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8004af2:	4611      	mov	r1, r2
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fc fc9d 	bl	8001434 <MLX90640_DumpEE>
 8004afa:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004afe:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d002      	beq.n	8004b0c <main+0x50>
	  printf("Failed to load system parameters of MLX90640\n");
 8004b06:	485e      	ldr	r0, [pc, #376]	; (8004c80 <main+0x1c4>)
 8004b08:	f005 fc30 	bl	800a36c <puts>

  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8004b0c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004b10:	495c      	ldr	r1, [pc, #368]	; (8004c84 <main+0x1c8>)
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fe1d 	bl	8001752 <MLX90640_ExtractParameters>
 8004b18:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004b1c:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <main+0x72>
	  printf("Number of pixel errors: %d\n", status);
 8004b24:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004b28:	4857      	ldr	r0, [pc, #348]	; (8004c88 <main+0x1cc>)
 8004b2a:	f005 fbb9 	bl	800a2a0 <iprintf>
  MLX90640_SetRefreshRate(mlx_addr, 0x05);
 8004b2e:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <main+0x1c0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2105      	movs	r1, #5
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fc fe50 	bl	80017dc <MLX90640_SetRefreshRate>

  status = MLX90640_GetCurMode(mlx_addr);
 8004b3c:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <main+0x1c0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc fe7a 	bl	800183c <MLX90640_GetCurMode>
 8004b48:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  	  printf("Current mode: %d\n", status);
 8004b4c:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004b50:	484e      	ldr	r0, [pc, #312]	; (8004c8c <main+0x1d0>)
 8004b52:	f005 fba5 	bl	800a2a0 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004b56:	4b4e      	ldr	r3, [pc, #312]	; (8004c90 <main+0x1d4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b60:	d359      	bcc.n	8004c16 <main+0x15a>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8004b62:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <main+0x1d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2200      	movs	r2, #0
 8004b68:	625a      	str	r2, [r3, #36]	; 0x24
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004b70:	e04d      	b.n	8004c0e <main+0x152>
		  {
		    uint16_t mlx90640Frame[834];
		    int status = MLX90640_GetFrameData(mlx_addr, mlx90640Frame);
 8004b72:	4b42      	ldr	r3, [pc, #264]	; (8004c7c <main+0x1c0>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	1d3a      	adds	r2, r7, #4
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fc fc6c 	bl	800145a <MLX90640_GetFrameData>
 8004b82:	f8c7 0d20 	str.w	r0, [r7, #3360]	; 0xd20
		    if (status < 0)
 8004b86:	f8d7 3d20 	ldr.w	r3, [r7, #3360]	; 0xd20
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	da04      	bge.n	8004b98 <main+0xdc>
		    {
		    	printf("GetFrame Error: %d\n", status);
 8004b8e:	f8d7 1d20 	ldr.w	r1, [r7, #3360]	; 0xd20
 8004b92:	4840      	ldr	r0, [pc, #256]	; (8004c94 <main+0x1d8>)
 8004b94:	f005 fb84 	bl	800a2a0 <iprintf>
		    };
		    float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);
 8004b98:	1d3b      	adds	r3, r7, #4
 8004b9a:	493a      	ldr	r1, [pc, #232]	; (8004c84 <main+0x1c8>)
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fd fbfb 	bl	8002398 <MLX90640_GetTa>
 8004ba2:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004ba6:	ed83 0a00 	vstr	s0, [r3]

		    float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8004baa:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004bae:	edd3 7a00 	vldr	s15, [r3]
 8004bb2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004bba:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8004bbe:	edc3 7a00 	vstr	s15, [r3]
		    float emissivity = MLX90640_CONFIG_EMISSIVITY;
 8004bc2:	4b35      	ldr	r3, [pc, #212]	; (8004c98 <main+0x1dc>)
 8004bc4:	f607 5214 	addw	r2, r7, #3348	; 0xd14
 8004bc8:	6013      	str	r3, [r2, #0]

		    MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 8004bca:	1d3b      	adds	r3, r7, #4
 8004bcc:	4a33      	ldr	r2, [pc, #204]	; (8004c9c <main+0x1e0>)
 8004bce:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8004bd2:	edd1 0a00 	vldr	s1, [r1]
 8004bd6:	f607 5114 	addw	r1, r7, #3348	; 0xd14
 8004bda:	ed91 0a00 	vldr	s0, [r1]
 8004bde:	4929      	ldr	r1, [pc, #164]	; (8004c84 <main+0x1c8>)
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fc fe49 	bl	8001878 <MLX90640_CalculateTo>
		    int mode = MLX90640_GetCurMode(mlx_addr);
 8004be6:	4b25      	ldr	r3, [pc, #148]	; (8004c7c <main+0x1c0>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fc fe25 	bl	800183c <MLX90640_GetCurMode>
 8004bf2:	f8c7 0d10 	str.w	r0, [r7, #3344]	; 0xd10
		    MLX90640_BadPixelsCorrection(mlx90640.brokenPixels, mlx90640To, mode, &mlx90640);
 8004bf6:	4b23      	ldr	r3, [pc, #140]	; (8004c84 <main+0x1c8>)
 8004bf8:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	; 0xd10
 8004bfc:	4927      	ldr	r1, [pc, #156]	; (8004c9c <main+0x1e0>)
 8004bfe:	4828      	ldr	r0, [pc, #160]	; (8004ca0 <main+0x1e4>)
 8004c00:	f7fd fc5e 	bl	80024c0 <MLX90640_BadPixelsCorrection>
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004c04:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004c0e:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	ddad      	ble.n	8004b72 <main+0xb6>
		  }

	  }

	  if (send_usart == 1)
 8004c16:	4b23      	ldr	r3, [pc, #140]	; (8004ca4 <main+0x1e8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d19b      	bne.n	8004b56 <main+0x9a>
	  {
		  send_usart = 0;
 8004c1e:	4b21      	ldr	r3, [pc, #132]	; (8004ca4 <main+0x1e8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 768; i++)
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004c2a:	e021      	b.n	8004c70 <main+0x1b4>
		  {
			  int64_t data = (int)(mlx90640To[i] * 100);
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <main+0x1e0>)
 8004c2e:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	edd3 7a00 	vldr	s15, [r3]
 8004c3a:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004ca8 <main+0x1ec>
 8004c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c46:	ee17 2a90 	vmov	r2, s15
 8004c4a:	17d3      	asrs	r3, r2, #31
 8004c4c:	4614      	mov	r4, r2
 8004c4e:	461d      	mov	r5, r3
 8004c50:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004c54:	e943 4502 	strd	r4, r5, [r3, #-8]
			  HAL_UART_Transmit(&huart2, (uint8_t*)&data, 8, 100);
 8004c58:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8004c5c:	2364      	movs	r3, #100	; 0x64
 8004c5e:	2208      	movs	r2, #8
 8004c60:	4812      	ldr	r0, [pc, #72]	; (8004cac <main+0x1f0>)
 8004c62:	f002 fa81 	bl	8007168 <HAL_UART_Transmit>
		  for (int i = 0; i < 768; i++)
 8004c66:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004c70:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c78:	dbd8      	blt.n	8004c2c <main+0x170>
	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004c7a:	e76c      	b.n	8004b56 <main+0x9a>
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	0800d190 	.word	0x0800d190
 8004c84:	20000ee4 	.word	0x20000ee4
 8004c88:	0800d1c0 	.word	0x0800d1c0
 8004c8c:	0800d1dc 	.word	0x0800d1dc
 8004c90:	20000204 	.word	0x20000204
 8004c94:	0800d1f0 	.word	0x0800d1f0
 8004c98:	3f733333 	.word	0x3f733333
 8004c9c:	200002e4 	.word	0x200002e4
 8004ca0:	2000214c 	.word	0x2000214c
 8004ca4:	20002164 	.word	0x20002164
 8004ca8:	42c80000 	.word	0x42c80000
 8004cac:	20000250 	.word	0x20000250

08004cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b094      	sub	sp, #80	; 0x50
 8004cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cb6:	f107 0318 	add.w	r3, r7, #24
 8004cba:	2238      	movs	r2, #56	; 0x38
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f005 fc34 	bl	800a52c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cc4:	1d3b      	adds	r3, r7, #4
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	605a      	str	r2, [r3, #4]
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	f000 ffe2 	bl	8005c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ce0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004ce2:	2340      	movs	r3, #64	; 0x40
 8004ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004cea:	2302      	movs	r3, #2
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004cf2:	2355      	movs	r3, #85	; 0x55
 8004cf4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cfe:	2302      	movs	r3, #2
 8004d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d02:	f107 0318 	add.w	r3, r7, #24
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 f87c 	bl	8005e04 <HAL_RCC_OscConfig>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004d12:	f000 f9bb 	bl	800508c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d16:	230f      	movs	r3, #15
 8004d18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d22:	2300      	movs	r3, #0
 8004d24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d26:	2300      	movs	r3, #0
 8004d28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d2a:	1d3b      	adds	r3, r7, #4
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fb7a 	bl	8006428 <HAL_RCC_ClockConfig>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004d3a:	f000 f9a7 	bl	800508c <Error_Handler>
  }
}
 8004d3e:	bf00      	nop
 8004d40:	3750      	adds	r7, #80	; 0x50
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
	...

08004d48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b0a2      	sub	sp, #136	; 0x88
 8004d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004d4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	605a      	str	r2, [r3, #4]
 8004d58:	609a      	str	r2, [r3, #8]
 8004d5a:	60da      	str	r2, [r3, #12]
 8004d5c:	611a      	str	r2, [r3, #16]
 8004d5e:	615a      	str	r2, [r3, #20]
 8004d60:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	605a      	str	r2, [r3, #4]
 8004d6c:	609a      	str	r2, [r3, #8]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	611a      	str	r2, [r3, #16]
 8004d72:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d74:	1d3b      	adds	r3, r7, #4
 8004d76:	2250      	movs	r2, #80	; 0x50
 8004d78:	2100      	movs	r1, #0
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f005 fbd6 	bl	800a52c <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d80:	2340      	movs	r3, #64	; 0x40
 8004d82:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d84:	2300      	movs	r3, #0
 8004d86:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d88:	1d3b      	adds	r3, r7, #4
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fd68 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 8004d96:	f000 f979 	bl	800508c <Error_Handler>
  }

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	f7ff fe4c 	bl	8004a38 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8-BOOT0   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004da4:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004da6:	2302      	movs	r3, #2
 8004da8:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004daa:	2300      	movs	r3, #0
 8004dac:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004dae:	2301      	movs	r3, #1
 8004db0:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004db2:	2300      	movs	r3, #0
 8004db4:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004db6:	2304      	movs	r3, #4
 8004db8:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4822      	ldr	r0, [pc, #136]	; (8004e4c <MX_I2C1_Init+0x104>)
 8004dc2:	f004 fbf8 	bl	80095b6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dca:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004dcc:	2302      	movs	r3, #2
 8004dce:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004ddc:	2304      	movs	r3, #4
 8004dde:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004de4:	4619      	mov	r1, r3
 8004de6:	4819      	ldr	r0, [pc, #100]	; (8004e4c <MX_I2C1_Init+0x104>)
 8004de8:	f004 fbe5 	bl	80095b6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8004dec:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004df0:	f7ff fe3a 	bl	8004a68 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004df4:	2300      	movs	r3, #0
 8004df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  I2C_InitStruct.Timing = 0x10802D9B;
 8004df8:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <MX_I2C1_Init+0x108>)
 8004dfa:	673b      	str	r3, [r7, #112]	; 0x70
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	677b      	str	r3, [r7, #116]	; 0x74
  I2C_InitStruct.DigitalFilter = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	67bb      	str	r3, [r7, #120]	; 0x78
  I2C_InitStruct.OwnAddress1 = 0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	67fb      	str	r3, [r7, #124]	; 0x7c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8004e14:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004e18:	4619      	mov	r1, r3
 8004e1a:	480e      	ldr	r0, [pc, #56]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e1c:	f004 fcdc 	bl	80097d8 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8004e20:	480c      	ldr	r0, [pc, #48]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e22:	f7ff fdf8 	bl	8004a16 <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8004e26:	2200      	movs	r2, #0
 8004e28:	2100      	movs	r1, #0
 8004e2a:	480a      	ldr	r0, [pc, #40]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e2c:	f7ff fdcb 	bl	80049c6 <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8004e30:	4808      	ldr	r0, [pc, #32]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e32:	f7ff fde0 	bl	80049f6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8004e36:	4807      	ldr	r0, [pc, #28]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e38:	f7ff fdb5 	bl	80049a6 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8004e3c:	4805      	ldr	r0, [pc, #20]	; (8004e54 <MX_I2C1_Init+0x10c>)
 8004e3e:	f7ff fda2 	bl	8004986 <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e42:	bf00      	nop
 8004e44:	3788      	adds	r7, #136	; 0x88
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	48000400 	.word	0x48000400
 8004e50:	10802d9b 	.word	0x10802d9b
 8004e54:	40005400 	.word	0x40005400

08004e58 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e5e:	1d3b      	adds	r3, r7, #4
 8004e60:	2200      	movs	r2, #0
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	605a      	str	r2, [r3, #4]
 8004e66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e6a:	4a17      	ldr	r2, [pc, #92]	; (8004ec8 <MX_TIM7_Init+0x70>)
 8004e6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e70:	f244 2267 	movw	r2, #16999	; 0x4267
 8004e74:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e76:	4b13      	ldr	r3, [pc, #76]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e7e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004e82:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e84:	4b0f      	ldr	r3, [pc, #60]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e8a:	480e      	ldr	r0, [pc, #56]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004e8c:	f001 ff24 	bl	8006cd8 <HAL_TIM_Base_Init>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004e96:	f000 f8f9 	bl	800508c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4807      	ldr	r0, [pc, #28]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004ea8:	f002 f880 	bl	8006fac <HAL_TIMEx_MasterConfigSynchronization>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004eb2:	f000 f8eb 	bl	800508c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 8004eb6:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <MX_TIM7_Init+0x6c>)
 8004eb8:	f001 ff66 	bl	8006d88 <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20000204 	.word	0x20000204
 8004ec8:	40001400 	.word	0x40001400

08004ecc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ed0:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ed2:	4a25      	ldr	r2, [pc, #148]	; (8004f68 <MX_USART2_UART_Init+0x9c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8004ed6:	4b23      	ldr	r3, [pc, #140]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ed8:	4a24      	ldr	r2, [pc, #144]	; (8004f6c <MX_USART2_UART_Init+0xa0>)
 8004eda:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004edc:	4b21      	ldr	r3, [pc, #132]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ee8:	4b1e      	ldr	r3, [pc, #120]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004eee:	4b1d      	ldr	r3, [pc, #116]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ef0:	220c      	movs	r2, #12
 8004ef2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004efa:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f00:	4b18      	ldr	r3, [pc, #96]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f06:	4b17      	ldr	r3, [pc, #92]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f0e:	2200      	movs	r2, #0
 8004f10:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f12:	4814      	ldr	r0, [pc, #80]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f14:	f002 f8d8 	bl	80070c8 <HAL_UART_Init>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004f1e:	f000 f8b5 	bl	800508c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f22:	2100      	movs	r1, #0
 8004f24:	480f      	ldr	r0, [pc, #60]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f26:	f004 f930 	bl	800918a <HAL_UARTEx_SetTxFifoThreshold>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004f30:	f000 f8ac 	bl	800508c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f34:	2100      	movs	r1, #0
 8004f36:	480b      	ldr	r0, [pc, #44]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f38:	f004 f965 	bl	8009206 <HAL_UARTEx_SetRxFifoThreshold>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004f42:	f000 f8a3 	bl	800508c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f46:	4807      	ldr	r0, [pc, #28]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f48:	f004 f8e6 	bl	8009118 <HAL_UARTEx_DisableFifoMode>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004f52:	f000 f89b 	bl	800508c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &usart1Buf, 1); 	//Enable interrupt
 8004f56:	2201      	movs	r2, #1
 8004f58:	4905      	ldr	r1, [pc, #20]	; (8004f70 <MX_USART2_UART_Init+0xa4>)
 8004f5a:	4802      	ldr	r0, [pc, #8]	; (8004f64 <MX_USART2_UART_Init+0x98>)
 8004f5c:	f002 f992 	bl	8007284 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8004f60:	bf00      	nop
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	20000250 	.word	0x20000250
 8004f68:	40004400 	.word	0x40004400
 8004f6c:	0007a120 	.word	0x0007a120
 8004f70:	20002160 	.word	0x20002160

08004f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f7a:	f107 0314 	add.w	r3, r7, #20
 8004f7e:	2200      	movs	r2, #0
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	605a      	str	r2, [r3, #4]
 8004f84:	609a      	str	r2, [r3, #8]
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f8a:	4b2f      	ldr	r3, [pc, #188]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004f90:	f043 0304 	orr.w	r3, r3, #4
 8004f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f96:	4b2c      	ldr	r3, [pc, #176]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fa2:	4b29      	ldr	r3, [pc, #164]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa6:	4a28      	ldr	r2, [pc, #160]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fa8:	f043 0320 	orr.w	r3, r3, #32
 8004fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fae:	4b26      	ldr	r3, [pc, #152]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fbe:	4a22      	ldr	r2, [pc, #136]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fc0:	f043 0301 	orr.w	r3, r3, #1
 8004fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd6:	4a1c      	ldr	r2, [pc, #112]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fd8:	f043 0302 	orr.w	r3, r3, #2
 8004fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fde:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <MX_GPIO_Init+0xd4>)
 8004fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	607b      	str	r3, [r7, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004fea:	2200      	movs	r2, #0
 8004fec:	2120      	movs	r1, #32
 8004fee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff2:	f000 fe17 	bl	8005c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ffc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4619      	mov	r1, r3
 800500c:	480f      	ldr	r0, [pc, #60]	; (800504c <MX_GPIO_Init+0xd8>)
 800500e:	f000 fc87 	bl	8005920 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8005012:	2320      	movs	r3, #32
 8005014:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005016:	2301      	movs	r3, #1
 8005018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501e:	2300      	movs	r3, #0
 8005020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800502c:	f000 fc78 	bl	8005920 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005030:	2200      	movs	r2, #0
 8005032:	2100      	movs	r1, #0
 8005034:	2028      	movs	r0, #40	; 0x28
 8005036:	f000 fb7e 	bl	8005736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800503a:	2028      	movs	r0, #40	; 0x28
 800503c:	f000 fb95 	bl	800576a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005040:	bf00      	nop
 8005042:	3728      	adds	r7, #40	; 0x28
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	48000800 	.word	0x48000800

08005050 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a07      	ldr	r2, [pc, #28]	; (800507c <HAL_UART_RxCpltCallback+0x2c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d107      	bne.n	8005072 <HAL_UART_RxCpltCallback+0x22>
	{
		send_usart = 1;
 8005062:	4b07      	ldr	r3, [pc, #28]	; (8005080 <HAL_UART_RxCpltCallback+0x30>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &usart1Buf, 1);
 8005068:	2201      	movs	r2, #1
 800506a:	4906      	ldr	r1, [pc, #24]	; (8005084 <HAL_UART_RxCpltCallback+0x34>)
 800506c:	4806      	ldr	r0, [pc, #24]	; (8005088 <HAL_UART_RxCpltCallback+0x38>)
 800506e:	f002 f909 	bl	8007284 <HAL_UART_Receive_IT>
	}
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	40004400 	.word	0x40004400
 8005080:	20002164 	.word	0x20002164
 8005084:	20002160 	.word	0x20002160
 8005088:	20000250 	.word	0x20000250

0800508c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005090:	b672      	cpsid	i
}
 8005092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005094:	e7fe      	b.n	8005094 <Error_Handler+0x8>
	...

08005098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800509e:	4b0f      	ldr	r3, [pc, #60]	; (80050dc <HAL_MspInit+0x44>)
 80050a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a2:	4a0e      	ldr	r2, [pc, #56]	; (80050dc <HAL_MspInit+0x44>)
 80050a4:	f043 0301 	orr.w	r3, r3, #1
 80050a8:	6613      	str	r3, [r2, #96]	; 0x60
 80050aa:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <HAL_MspInit+0x44>)
 80050ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	607b      	str	r3, [r7, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050b6:	4b09      	ldr	r3, [pc, #36]	; (80050dc <HAL_MspInit+0x44>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	4a08      	ldr	r2, [pc, #32]	; (80050dc <HAL_MspInit+0x44>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6593      	str	r3, [r2, #88]	; 0x58
 80050c2:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_MspInit+0x44>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80050ce:	f000 fe89 	bl	8005de4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050d2:	bf00      	nop
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	40021000 	.word	0x40021000

080050e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <HAL_TIM_Base_MspInit+0x38>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d10b      	bne.n	800510a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050f2:	4b0a      	ldr	r3, [pc, #40]	; (800511c <HAL_TIM_Base_MspInit+0x3c>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a09      	ldr	r2, [pc, #36]	; (800511c <HAL_TIM_Base_MspInit+0x3c>)
 80050f8:	f043 0320 	orr.w	r3, r3, #32
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
 80050fe:	4b07      	ldr	r3, [pc, #28]	; (800511c <HAL_TIM_Base_MspInit+0x3c>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40001400 	.word	0x40001400
 800511c:	40021000 	.word	0x40021000

08005120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b09e      	sub	sp, #120	; 0x78
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005128:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	605a      	str	r2, [r3, #4]
 8005132:	609a      	str	r2, [r3, #8]
 8005134:	60da      	str	r2, [r3, #12]
 8005136:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005138:	f107 0314 	add.w	r3, r7, #20
 800513c:	2250      	movs	r2, #80	; 0x50
 800513e:	2100      	movs	r1, #0
 8005140:	4618      	mov	r0, r3
 8005142:	f005 f9f3 	bl	800a52c <memset>
  if(huart->Instance==USART2)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a23      	ldr	r2, [pc, #140]	; (80051d8 <HAL_UART_MspInit+0xb8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d13e      	bne.n	80051ce <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005150:	2302      	movs	r3, #2
 8005152:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005154:	2300      	movs	r3, #0
 8005156:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4618      	mov	r0, r3
 800515e:	f001 fb7f 	bl	8006860 <HAL_RCCEx_PeriphCLKConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005168:	f7ff ff90 	bl	800508c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_UART_MspInit+0xbc>)
 800516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005170:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_UART_MspInit+0xbc>)
 8005172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005176:	6593      	str	r3, [r2, #88]	; 0x58
 8005178:	4b18      	ldr	r3, [pc, #96]	; (80051dc <HAL_UART_MspInit+0xbc>)
 800517a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005180:	613b      	str	r3, [r7, #16]
 8005182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005184:	4b15      	ldr	r3, [pc, #84]	; (80051dc <HAL_UART_MspInit+0xbc>)
 8005186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005188:	4a14      	ldr	r2, [pc, #80]	; (80051dc <HAL_UART_MspInit+0xbc>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005190:	4b12      	ldr	r3, [pc, #72]	; (80051dc <HAL_UART_MspInit+0xbc>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	60fb      	str	r3, [r7, #12]
 800519a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800519c:	230c      	movs	r3, #12
 800519e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	2302      	movs	r3, #2
 80051a2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	2300      	movs	r3, #0
 80051aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051ac:	2307      	movs	r3, #7
 80051ae:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051b4:	4619      	mov	r1, r3
 80051b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ba:	f000 fbb1 	bl	8005920 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051be:	2200      	movs	r2, #0
 80051c0:	2100      	movs	r1, #0
 80051c2:	2026      	movs	r0, #38	; 0x26
 80051c4:	f000 fab7 	bl	8005736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051c8:	2026      	movs	r0, #38	; 0x26
 80051ca:	f000 face 	bl	800576a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051ce:	bf00      	nop
 80051d0:	3778      	adds	r7, #120	; 0x78
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40004400 	.word	0x40004400
 80051dc:	40021000 	.word	0x40021000

080051e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80051e4:	e7fe      	b.n	80051e4 <NMI_Handler+0x4>

080051e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051e6:	b480      	push	{r7}
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051ea:	e7fe      	b.n	80051ea <HardFault_Handler+0x4>

080051ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051f0:	e7fe      	b.n	80051f0 <MemManage_Handler+0x4>

080051f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051f6:	e7fe      	b.n	80051f6 <BusFault_Handler+0x4>

080051f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051fc:	e7fe      	b.n	80051fc <UsageFault_Handler+0x4>

080051fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005202:	bf00      	nop
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005210:	bf00      	nop
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800521a:	b480      	push	{r7}
 800521c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800521e:	bf00      	nop
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800522c:	f000 f968 	bl	8005500 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005230:	bf00      	nop
 8005232:	bd80      	pop	{r7, pc}

08005234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005238:	4802      	ldr	r0, [pc, #8]	; (8005244 <USART2_IRQHandler+0x10>)
 800523a:	f002 f86f 	bl	800731c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800523e:	bf00      	nop
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000250 	.word	0x20000250

08005248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800524c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005250:	f000 fd00 	bl	8005c54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005254:	bf00      	nop
 8005256:	bd80      	pop	{r7, pc}

08005258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return 1;
 800525c:	2301      	movs	r3, #1
}
 800525e:	4618      	mov	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <_kill>:

int _kill(int pid, int sig)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005272:	f005 f9ad 	bl	800a5d0 <__errno>
 8005276:	4603      	mov	r3, r0
 8005278:	2216      	movs	r2, #22
 800527a:	601a      	str	r2, [r3, #0]
  return -1;
 800527c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005280:	4618      	mov	r0, r3
 8005282:	3708      	adds	r7, #8
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <_exit>:

void _exit (int status)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005290:	f04f 31ff 	mov.w	r1, #4294967295
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ffe7 	bl	8005268 <_kill>
  while (1) {}    /* Make sure we hang here */
 800529a:	e7fe      	b.n	800529a <_exit+0x12>

0800529c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	e00a      	b.n	80052c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052ae:	f3af 8000 	nop.w
 80052b2:	4601      	mov	r1, r0
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	60ba      	str	r2, [r7, #8]
 80052ba:	b2ca      	uxtb	r2, r1
 80052bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	3301      	adds	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	dbf0      	blt.n	80052ae <_read+0x12>
  }

  return len;
 80052cc:	687b      	ldr	r3, [r7, #4]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b086      	sub	sp, #24
 80052da:	af00      	add	r7, sp, #0
 80052dc:	60f8      	str	r0, [r7, #12]
 80052de:	60b9      	str	r1, [r7, #8]
 80052e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e2:	2300      	movs	r3, #0
 80052e4:	617b      	str	r3, [r7, #20]
 80052e6:	e009      	b.n	80052fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	60ba      	str	r2, [r7, #8]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fbd1 	bl	8004a98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	3301      	adds	r3, #1
 80052fa:	617b      	str	r3, [r7, #20]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	dbf1      	blt.n	80052e8 <_write+0x12>
  }
  return len;
 8005304:	687b      	ldr	r3, [r7, #4]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <_close>:

int _close(int file)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800531a:	4618      	mov	r0, r3
 800531c:	370c      	adds	r7, #12
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
 800532e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005336:	605a      	str	r2, [r3, #4]
  return 0;
 8005338:	2300      	movs	r3, #0
}
 800533a:	4618      	mov	r0, r3
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <_isatty>:

int _isatty(int file)
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800534e:	2301      	movs	r3, #1
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
	...

08005378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005380:	4a14      	ldr	r2, [pc, #80]	; (80053d4 <_sbrk+0x5c>)
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <_sbrk+0x60>)
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800538c:	4b13      	ldr	r3, [pc, #76]	; (80053dc <_sbrk+0x64>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d102      	bne.n	800539a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <_sbrk+0x64>)
 8005396:	4a12      	ldr	r2, [pc, #72]	; (80053e0 <_sbrk+0x68>)
 8005398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800539a:	4b10      	ldr	r3, [pc, #64]	; (80053dc <_sbrk+0x64>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4413      	add	r3, r2
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d207      	bcs.n	80053b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053a8:	f005 f912 	bl	800a5d0 <__errno>
 80053ac:	4603      	mov	r3, r0
 80053ae:	220c      	movs	r2, #12
 80053b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
 80053b6:	e009      	b.n	80053cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <_sbrk+0x64>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <_sbrk+0x64>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4413      	add	r3, r2
 80053c6:	4a05      	ldr	r2, [pc, #20]	; (80053dc <_sbrk+0x64>)
 80053c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053ca:	68fb      	ldr	r3, [r7, #12]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	2001c000 	.word	0x2001c000
 80053d8:	00000400 	.word	0x00000400
 80053dc:	20002168 	.word	0x20002168
 80053e0:	200022c0 	.word	0x200022c0

080053e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <SystemInit+0x20>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <SystemInit+0x20>)
 80053f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053f8:	bf00      	nop
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	e000ed00 	.word	0xe000ed00

08005408 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005408:	480d      	ldr	r0, [pc, #52]	; (8005440 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800540a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800540c:	f7ff ffea 	bl	80053e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005410:	480c      	ldr	r0, [pc, #48]	; (8005444 <LoopForever+0x6>)
  ldr r1, =_edata
 8005412:	490d      	ldr	r1, [pc, #52]	; (8005448 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005414:	4a0d      	ldr	r2, [pc, #52]	; (800544c <LoopForever+0xe>)
  movs r3, #0
 8005416:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005418:	e002      	b.n	8005420 <LoopCopyDataInit>

0800541a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800541a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800541c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800541e:	3304      	adds	r3, #4

08005420 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005420:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005422:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005424:	d3f9      	bcc.n	800541a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005426:	4a0a      	ldr	r2, [pc, #40]	; (8005450 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005428:	4c0a      	ldr	r4, [pc, #40]	; (8005454 <LoopForever+0x16>)
  movs r3, #0
 800542a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800542c:	e001      	b.n	8005432 <LoopFillZerobss>

0800542e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800542e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005430:	3204      	adds	r2, #4

08005432 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005432:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005434:	d3fb      	bcc.n	800542e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005436:	f005 f8d1 	bl	800a5dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800543a:	f7ff fb3f 	bl	8004abc <main>

0800543e <LoopForever>:

LoopForever:
    b LoopForever
 800543e:	e7fe      	b.n	800543e <LoopForever>
  ldr   r0, =_estack
 8005440:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005448:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800544c:	0800d5f8 	.word	0x0800d5f8
  ldr r2, =_sbss
 8005450:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005454:	200022bc 	.word	0x200022bc

08005458 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005458:	e7fe      	b.n	8005458 <ADC1_2_IRQHandler>

0800545a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b082      	sub	sp, #8
 800545e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005464:	2003      	movs	r0, #3
 8005466:	f000 f95b 	bl	8005720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800546a:	2000      	movs	r0, #0
 800546c:	f000 f80e 	bl	800548c <HAL_InitTick>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	71fb      	strb	r3, [r7, #7]
 800547a:	e001      	b.n	8005480 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800547c:	f7ff fe0c 	bl	8005098 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005480:	79fb      	ldrb	r3, [r7, #7]

}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005494:	2300      	movs	r3, #0
 8005496:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005498:	4b16      	ldr	r3, [pc, #88]	; (80054f4 <HAL_InitTick+0x68>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d022      	beq.n	80054e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054a0:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <HAL_InitTick+0x6c>)
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <HAL_InitTick+0x68>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f966 	bl	8005786 <HAL_SYSTICK_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d10f      	bne.n	80054e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b0f      	cmp	r3, #15
 80054c4:	d809      	bhi.n	80054da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054c6:	2200      	movs	r2, #0
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	f04f 30ff 	mov.w	r0, #4294967295
 80054ce:	f000 f932 	bl	8005736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054d2:	4a0a      	ldr	r2, [pc, #40]	; (80054fc <HAL_InitTick+0x70>)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	e007      	b.n	80054ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	e004      	b.n	80054ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	73fb      	strb	r3, [r7, #15]
 80054e4:	e001      	b.n	80054ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	2000000c 	.word	0x2000000c
 80054f8:	20000004 	.word	0x20000004
 80054fc:	20000008 	.word	0x20000008

08005500 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005504:	4b05      	ldr	r3, [pc, #20]	; (800551c <HAL_IncTick+0x1c>)
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	4b05      	ldr	r3, [pc, #20]	; (8005520 <HAL_IncTick+0x20>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4413      	add	r3, r2
 800550e:	4a03      	ldr	r2, [pc, #12]	; (800551c <HAL_IncTick+0x1c>)
 8005510:	6013      	str	r3, [r2, #0]
}
 8005512:	bf00      	nop
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr
 800551c:	2000216c 	.word	0x2000216c
 8005520:	2000000c 	.word	0x2000000c

08005524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
  return uwTick;
 8005528:	4b03      	ldr	r3, [pc, #12]	; (8005538 <HAL_GetTick+0x14>)
 800552a:	681b      	ldr	r3, [r3, #0]
}
 800552c:	4618      	mov	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	2000216c 	.word	0x2000216c

0800553c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005544:	f7ff ffee 	bl	8005524 <HAL_GetTick>
 8005548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005554:	d004      	beq.n	8005560 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <HAL_Delay+0x40>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4413      	add	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005560:	bf00      	nop
 8005562:	f7ff ffdf 	bl	8005524 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	429a      	cmp	r2, r3
 8005570:	d8f7      	bhi.n	8005562 <HAL_Delay+0x26>
  {
  }
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	2000000c 	.word	0x2000000c

08005580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800559c:	4013      	ands	r3, r2
 800559e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055b2:	4a04      	ldr	r2, [pc, #16]	; (80055c4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	60d3      	str	r3, [r2, #12]
}
 80055b8:	bf00      	nop
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055c8:	b480      	push	{r7}
 80055ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <__NVIC_GetPriorityGrouping+0x18>)
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	0a1b      	lsrs	r3, r3, #8
 80055d2:	f003 0307 	and.w	r3, r3, #7
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	4603      	mov	r3, r0
 80055ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	db0b      	blt.n	800560e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	f003 021f 	and.w	r2, r3, #31
 80055fc:	4907      	ldr	r1, [pc, #28]	; (800561c <__NVIC_EnableIRQ+0x38>)
 80055fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005602:	095b      	lsrs	r3, r3, #5
 8005604:	2001      	movs	r0, #1
 8005606:	fa00 f202 	lsl.w	r2, r0, r2
 800560a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	e000e100 	.word	0xe000e100

08005620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	6039      	str	r1, [r7, #0]
 800562a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800562c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db0a      	blt.n	800564a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	b2da      	uxtb	r2, r3
 8005638:	490c      	ldr	r1, [pc, #48]	; (800566c <__NVIC_SetPriority+0x4c>)
 800563a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800563e:	0112      	lsls	r2, r2, #4
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	440b      	add	r3, r1
 8005644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005648:	e00a      	b.n	8005660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	b2da      	uxtb	r2, r3
 800564e:	4908      	ldr	r1, [pc, #32]	; (8005670 <__NVIC_SetPriority+0x50>)
 8005650:	79fb      	ldrb	r3, [r7, #7]
 8005652:	f003 030f 	and.w	r3, r3, #15
 8005656:	3b04      	subs	r3, #4
 8005658:	0112      	lsls	r2, r2, #4
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	440b      	add	r3, r1
 800565e:	761a      	strb	r2, [r3, #24]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	e000e100 	.word	0xe000e100
 8005670:	e000ed00 	.word	0xe000ed00

08005674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005674:	b480      	push	{r7}
 8005676:	b089      	sub	sp, #36	; 0x24
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f003 0307 	and.w	r3, r3, #7
 8005686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	f1c3 0307 	rsb	r3, r3, #7
 800568e:	2b04      	cmp	r3, #4
 8005690:	bf28      	it	cs
 8005692:	2304      	movcs	r3, #4
 8005694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	3304      	adds	r3, #4
 800569a:	2b06      	cmp	r3, #6
 800569c:	d902      	bls.n	80056a4 <NVIC_EncodePriority+0x30>
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	3b03      	subs	r3, #3
 80056a2:	e000      	b.n	80056a6 <NVIC_EncodePriority+0x32>
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43da      	mvns	r2, r3
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	401a      	ands	r2, r3
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056bc:	f04f 31ff 	mov.w	r1, #4294967295
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	fa01 f303 	lsl.w	r3, r1, r3
 80056c6:	43d9      	mvns	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056cc:	4313      	orrs	r3, r2
         );
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3724      	adds	r7, #36	; 0x24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056ec:	d301      	bcc.n	80056f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056ee:	2301      	movs	r3, #1
 80056f0:	e00f      	b.n	8005712 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056f2:	4a0a      	ldr	r2, [pc, #40]	; (800571c <SysTick_Config+0x40>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3b01      	subs	r3, #1
 80056f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056fa:	210f      	movs	r1, #15
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	f7ff ff8e 	bl	8005620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005704:	4b05      	ldr	r3, [pc, #20]	; (800571c <SysTick_Config+0x40>)
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <SysTick_Config+0x40>)
 800570c:	2207      	movs	r2, #7
 800570e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	e000e010 	.word	0xe000e010

08005720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f7ff ff29 	bl	8005580 <__NVIC_SetPriorityGrouping>
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b086      	sub	sp, #24
 800573a:	af00      	add	r7, sp, #0
 800573c:	4603      	mov	r3, r0
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005744:	f7ff ff40 	bl	80055c8 <__NVIC_GetPriorityGrouping>
 8005748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	68b9      	ldr	r1, [r7, #8]
 800574e:	6978      	ldr	r0, [r7, #20]
 8005750:	f7ff ff90 	bl	8005674 <NVIC_EncodePriority>
 8005754:	4602      	mov	r2, r0
 8005756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800575a:	4611      	mov	r1, r2
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff ff5f 	bl	8005620 <__NVIC_SetPriority>
}
 8005762:	bf00      	nop
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b082      	sub	sp, #8
 800576e:	af00      	add	r7, sp, #0
 8005770:	4603      	mov	r3, r0
 8005772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff33 	bl	80055e4 <__NVIC_EnableIRQ>
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff ffa4 	bl	80056dc <SysTick_Config>
 8005794:	4603      	mov	r3, r0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3708      	adds	r7, #8
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800579e:	b480      	push	{r7}
 80057a0:	b085      	sub	sp, #20
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a6:	2300      	movs	r3, #0
 80057a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d005      	beq.n	80057c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2204      	movs	r2, #4
 80057ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	73fb      	strb	r3, [r7, #15]
 80057c0:	e037      	b.n	8005832 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 020e 	bic.w	r2, r2, #14
 80057d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 0201 	bic.w	r2, r2, #1
 80057f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	f003 021f 	and.w	r2, r3, #31
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fe:	2101      	movs	r1, #1
 8005800:	fa01 f202 	lsl.w	r2, r1, r2
 8005804:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800580e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00c      	beq.n	8005832 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005826:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582c:	687a      	ldr	r2, [r7, #4]
 800582e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005830:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005842:	7bfb      	ldrb	r3, [r7, #15]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d00d      	beq.n	8005884 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2204      	movs	r2, #4
 800586c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	73fb      	strb	r3, [r7, #15]
 8005882:	e047      	b.n	8005914 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 020e 	bic.w	r2, r2, #14
 8005892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	f003 021f 	and.w	r2, r3, #31
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	2101      	movs	r1, #1
 80058c2:	fa01 f202 	lsl.w	r2, r1, r2
 80058c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005908:	2b00      	cmp	r3, #0
 800590a:	d003      	beq.n	8005914 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	4798      	blx	r3
    }
  }
  return status;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800592a:	2300      	movs	r3, #0
 800592c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800592e:	e15a      	b.n	8005be6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	2101      	movs	r1, #1
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	fa01 f303 	lsl.w	r3, r1, r3
 800593c:	4013      	ands	r3, r2
 800593e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 814c 	beq.w	8005be0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d005      	beq.n	8005960 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800595c:	2b02      	cmp	r3, #2
 800595e:	d130      	bne.n	80059c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	2203      	movs	r2, #3
 800596c:	fa02 f303 	lsl.w	r3, r2, r3
 8005970:	43db      	mvns	r3, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fa02 f303 	lsl.w	r3, r2, r3
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4313      	orrs	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005996:	2201      	movs	r2, #1
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	fa02 f303 	lsl.w	r3, r2, r3
 800599e:	43db      	mvns	r3, r3
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4013      	ands	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	091b      	lsrs	r3, r3, #4
 80059ac:	f003 0201 	and.w	r2, r3, #1
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	fa02 f303 	lsl.w	r3, r2, r3
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	2b03      	cmp	r3, #3
 80059cc:	d017      	beq.n	80059fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	005b      	lsls	r3, r3, #1
 80059d8:	2203      	movs	r2, #3
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	fa02 f303 	lsl.w	r3, r2, r3
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d123      	bne.n	8005a52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	08da      	lsrs	r2, r3, #3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	3208      	adds	r2, #8
 8005a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	220f      	movs	r2, #15
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691a      	ldr	r2, [r3, #16]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f003 0307 	and.w	r3, r3, #7
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	08da      	lsrs	r2, r3, #3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3208      	adds	r2, #8
 8005a4c:	6939      	ldr	r1, [r7, #16]
 8005a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	2203      	movs	r2, #3
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	43db      	mvns	r3, r3
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4013      	ands	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	f003 0203 	and.w	r2, r3, #3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 80a6 	beq.w	8005be0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a94:	4b5b      	ldr	r3, [pc, #364]	; (8005c04 <HAL_GPIO_Init+0x2e4>)
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	4a5a      	ldr	r2, [pc, #360]	; (8005c04 <HAL_GPIO_Init+0x2e4>)
 8005a9a:	f043 0301 	orr.w	r3, r3, #1
 8005a9e:	6613      	str	r3, [r2, #96]	; 0x60
 8005aa0:	4b58      	ldr	r3, [pc, #352]	; (8005c04 <HAL_GPIO_Init+0x2e4>)
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005aac:	4a56      	ldr	r2, [pc, #344]	; (8005c08 <HAL_GPIO_Init+0x2e8>)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	220f      	movs	r2, #15
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4013      	ands	r3, r2
 8005ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ad6:	d01f      	beq.n	8005b18 <HAL_GPIO_Init+0x1f8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a4c      	ldr	r2, [pc, #304]	; (8005c0c <HAL_GPIO_Init+0x2ec>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d019      	beq.n	8005b14 <HAL_GPIO_Init+0x1f4>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a4b      	ldr	r2, [pc, #300]	; (8005c10 <HAL_GPIO_Init+0x2f0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_GPIO_Init+0x1f0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <HAL_GPIO_Init+0x2f4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00d      	beq.n	8005b0c <HAL_GPIO_Init+0x1ec>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a49      	ldr	r2, [pc, #292]	; (8005c18 <HAL_GPIO_Init+0x2f8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d007      	beq.n	8005b08 <HAL_GPIO_Init+0x1e8>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a48      	ldr	r2, [pc, #288]	; (8005c1c <HAL_GPIO_Init+0x2fc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d101      	bne.n	8005b04 <HAL_GPIO_Init+0x1e4>
 8005b00:	2305      	movs	r3, #5
 8005b02:	e00a      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b04:	2306      	movs	r3, #6
 8005b06:	e008      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b08:	2304      	movs	r3, #4
 8005b0a:	e006      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	e004      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e002      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b14:	2301      	movs	r3, #1
 8005b16:	e000      	b.n	8005b1a <HAL_GPIO_Init+0x1fa>
 8005b18:	2300      	movs	r3, #0
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	f002 0203 	and.w	r2, r2, #3
 8005b20:	0092      	lsls	r2, r2, #2
 8005b22:	4093      	lsls	r3, r2
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b2a:	4937      	ldr	r1, [pc, #220]	; (8005c08 <HAL_GPIO_Init+0x2e8>)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b38:	4b39      	ldr	r3, [pc, #228]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	43db      	mvns	r3, r3
 8005b42:	693a      	ldr	r2, [r7, #16]
 8005b44:	4013      	ands	r3, r2
 8005b46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b54:	693a      	ldr	r2, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b5c:	4a30      	ldr	r2, [pc, #192]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b62:	4b2f      	ldr	r3, [pc, #188]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	43db      	mvns	r3, r3
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b86:	4a26      	ldr	r2, [pc, #152]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b8c:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	4013      	ands	r3, r2
 8005b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bb0:	4a1b      	ldr	r2, [pc, #108]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bb6:	4b1a      	ldr	r3, [pc, #104]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005bda:	4a11      	ldr	r2, [pc, #68]	; (8005c20 <HAL_GPIO_Init+0x300>)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	3301      	adds	r3, #1
 8005be4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f47f ae9d 	bne.w	8005930 <HAL_GPIO_Init+0x10>
  }
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	40021000 	.word	0x40021000
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	48000400 	.word	0x48000400
 8005c10:	48000800 	.word	0x48000800
 8005c14:	48000c00 	.word	0x48000c00
 8005c18:	48001000 	.word	0x48001000
 8005c1c:	48001400 	.word	0x48001400
 8005c20:	40010400 	.word	0x40010400

08005c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	807b      	strh	r3, [r7, #2]
 8005c30:	4613      	mov	r3, r2
 8005c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c34:	787b      	ldrb	r3, [r7, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d003      	beq.n	8005c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c3a:	887a      	ldrh	r2, [r7, #2]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c40:	e002      	b.n	8005c48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c42:	887a      	ldrh	r2, [r7, #2]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c5e:	4b08      	ldr	r3, [pc, #32]	; (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	4013      	ands	r3, r2
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d006      	beq.n	8005c78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c6a:	4a05      	ldr	r2, [pc, #20]	; (8005c80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c6c:	88fb      	ldrh	r3, [r7, #6]
 8005c6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	4618      	mov	r0, r3
 8005c74:	f000 f806 	bl	8005c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40010400 	.word	0x40010400

08005c84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d141      	bne.n	8005d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005caa:	4b4b      	ldr	r3, [pc, #300]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cb6:	d131      	bne.n	8005d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cb8:	4b47      	ldr	r3, [pc, #284]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cbe:	4a46      	ldr	r2, [pc, #280]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cc8:	4b43      	ldr	r3, [pc, #268]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cd0:	4a41      	ldr	r2, [pc, #260]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005cd8:	4b40      	ldr	r3, [pc, #256]	; (8005ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2232      	movs	r2, #50	; 0x32
 8005cde:	fb02 f303 	mul.w	r3, r2, r3
 8005ce2:	4a3f      	ldr	r2, [pc, #252]	; (8005de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce8:	0c9b      	lsrs	r3, r3, #18
 8005cea:	3301      	adds	r3, #1
 8005cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cee:	e002      	b.n	8005cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	3b01      	subs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cf6:	4b38      	ldr	r3, [pc, #224]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d02:	d102      	bne.n	8005d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1f2      	bne.n	8005cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d0a:	4b33      	ldr	r3, [pc, #204]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d158      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	e057      	b.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d1c:	4b2e      	ldr	r3, [pc, #184]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d22:	4a2d      	ldr	r2, [pc, #180]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d2c:	e04d      	b.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d34:	d141      	bne.n	8005dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d42:	d131      	bne.n	8005da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b24      	ldr	r3, [pc, #144]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	4a23      	ldr	r2, [pc, #140]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d54:	4b20      	ldr	r3, [pc, #128]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d5c:	4a1e      	ldr	r2, [pc, #120]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d64:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2232      	movs	r2, #50	; 0x32
 8005d6a:	fb02 f303 	mul.w	r3, r2, r3
 8005d6e:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d70:	fba2 2303 	umull	r2, r3, r2, r3
 8005d74:	0c9b      	lsrs	r3, r3, #18
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d7a:	e002      	b.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8e:	d102      	bne.n	8005d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1f2      	bne.n	8005d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d96:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005da2:	d112      	bne.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e011      	b.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dae:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005db8:	e007      	b.n	8005dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	40007000 	.word	0x40007000
 8005ddc:	20000004 	.word	0x20000004
 8005de0:	431bde83 	.word	0x431bde83

08005de4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005de4:	b480      	push	{r7}
 8005de6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005de8:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005dee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df2:	6093      	str	r3, [r2, #8]
}
 8005df4:	bf00      	nop
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40007000 	.word	0x40007000

08005e04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b088      	sub	sp, #32
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e2fe      	b.n	8006414 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0301 	and.w	r3, r3, #1
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d075      	beq.n	8005f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e22:	4b97      	ldr	r3, [pc, #604]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
 8005e2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e2c:	4b94      	ldr	r3, [pc, #592]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f003 0303 	and.w	r3, r3, #3
 8005e34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d102      	bne.n	8005e42 <HAL_RCC_OscConfig+0x3e>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d002      	beq.n	8005e48 <HAL_RCC_OscConfig+0x44>
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d10b      	bne.n	8005e60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e48:	4b8d      	ldr	r3, [pc, #564]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d05b      	beq.n	8005f0c <HAL_RCC_OscConfig+0x108>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d157      	bne.n	8005f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e2d9      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e68:	d106      	bne.n	8005e78 <HAL_RCC_OscConfig+0x74>
 8005e6a:	4b85      	ldr	r3, [pc, #532]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a84      	ldr	r2, [pc, #528]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0x98>
 8005e82:	4b7f      	ldr	r3, [pc, #508]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a7e      	ldr	r2, [pc, #504]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b7c      	ldr	r3, [pc, #496]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a7b      	ldr	r2, [pc, #492]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xb0>
 8005e9c:	4b78      	ldr	r3, [pc, #480]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a77      	ldr	r2, [pc, #476]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b75      	ldr	r3, [pc, #468]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a74      	ldr	r2, [pc, #464]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ebc:	f7ff fb32 	bl	8005524 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7ff fb2e 	bl	8005524 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e29e      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ed6:	4b6a      	ldr	r3, [pc, #424]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xc0>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7ff fb1e 	bl	8005524 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7ff fb1a 	bl	8005524 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e28a      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005efe:	4b60      	ldr	r3, [pc, #384]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0xe8>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d075      	beq.n	8006006 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f1a:	4b59      	ldr	r3, [pc, #356]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f24:	4b56      	ldr	r3, [pc, #344]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	2b0c      	cmp	r3, #12
 8005f32:	d102      	bne.n	8005f3a <HAL_RCC_OscConfig+0x136>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	2b02      	cmp	r3, #2
 8005f38:	d002      	beq.n	8005f40 <HAL_RCC_OscConfig+0x13c>
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b04      	cmp	r3, #4
 8005f3e:	d11f      	bne.n	8005f80 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f40:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_RCC_OscConfig+0x154>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d101      	bne.n	8005f58 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e25d      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f58:	4b49      	ldr	r3, [pc, #292]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	061b      	lsls	r3, r3, #24
 8005f66:	4946      	ldr	r1, [pc, #280]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f6c:	4b45      	ldr	r3, [pc, #276]	; (8006084 <HAL_RCC_OscConfig+0x280>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff fa8b 	bl	800548c <HAL_InitTick>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d043      	beq.n	8006004 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e249      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	68db      	ldr	r3, [r3, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d023      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f88:	4b3d      	ldr	r3, [pc, #244]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3c      	ldr	r2, [pc, #240]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005f8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7ff fac6 	bl	8005524 <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7ff fac2 	bl	8005524 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e232      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fae:	4b34      	ldr	r3, [pc, #208]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d0f0      	beq.n	8005f9c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fba:	4b31      	ldr	r3, [pc, #196]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	061b      	lsls	r3, r3, #24
 8005fc8:	492d      	ldr	r1, [pc, #180]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	604b      	str	r3, [r1, #4]
 8005fce:	e01a      	b.n	8006006 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005fd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fdc:	f7ff faa2 	bl	8005524 <HAL_GetTick>
 8005fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fe2:	e008      	b.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fe4:	f7ff fa9e 	bl	8005524 <HAL_GetTick>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d901      	bls.n	8005ff6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ff2:	2303      	movs	r3, #3
 8005ff4:	e20e      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ff6:	4b22      	ldr	r3, [pc, #136]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f0      	bne.n	8005fe4 <HAL_RCC_OscConfig+0x1e0>
 8006002:	e000      	b.n	8006006 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006004:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d041      	beq.n	8006096 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01c      	beq.n	8006054 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800601a:	4b19      	ldr	r3, [pc, #100]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006020:	4a17      	ldr	r2, [pc, #92]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602a:	f7ff fa7b 	bl	8005524 <HAL_GetTick>
 800602e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006030:	e008      	b.n	8006044 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006032:	f7ff fa77 	bl	8005524 <HAL_GetTick>
 8006036:	4602      	mov	r2, r0
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	1ad3      	subs	r3, r2, r3
 800603c:	2b02      	cmp	r3, #2
 800603e:	d901      	bls.n	8006044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e1e7      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006044:	4b0e      	ldr	r3, [pc, #56]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0ef      	beq.n	8006032 <HAL_RCC_OscConfig+0x22e>
 8006052:	e020      	b.n	8006096 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006054:	4b0a      	ldr	r3, [pc, #40]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 8006056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800605a:	4a09      	ldr	r2, [pc, #36]	; (8006080 <HAL_RCC_OscConfig+0x27c>)
 800605c:	f023 0301 	bic.w	r3, r3, #1
 8006060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006064:	f7ff fa5e 	bl	8005524 <HAL_GetTick>
 8006068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800606a:	e00d      	b.n	8006088 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800606c:	f7ff fa5a 	bl	8005524 <HAL_GetTick>
 8006070:	4602      	mov	r2, r0
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	2b02      	cmp	r3, #2
 8006078:	d906      	bls.n	8006088 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e1ca      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
 800607e:	bf00      	nop
 8006080:	40021000 	.word	0x40021000
 8006084:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006088:	4b8c      	ldr	r3, [pc, #560]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800608a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1ea      	bne.n	800606c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f000 80a6 	beq.w	80061f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060a4:	2300      	movs	r3, #0
 80060a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060a8:	4b84      	ldr	r3, [pc, #528]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d101      	bne.n	80060b8 <HAL_RCC_OscConfig+0x2b4>
 80060b4:	2301      	movs	r3, #1
 80060b6:	e000      	b.n	80060ba <HAL_RCC_OscConfig+0x2b6>
 80060b8:	2300      	movs	r3, #0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060be:	4b7f      	ldr	r3, [pc, #508]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	4a7e      	ldr	r2, [pc, #504]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c8:	6593      	str	r3, [r2, #88]	; 0x58
 80060ca:	4b7c      	ldr	r3, [pc, #496]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80060cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060d6:	2301      	movs	r3, #1
 80060d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060da:	4b79      	ldr	r3, [pc, #484]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d118      	bne.n	8006118 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e6:	4b76      	ldr	r3, [pc, #472]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a75      	ldr	r2, [pc, #468]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 80060ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060f2:	f7ff fa17 	bl	8005524 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060fa:	f7ff fa13 	bl	8005524 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e183      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800610c:	4b6c      	ldr	r3, [pc, #432]	; (80062c0 <HAL_RCC_OscConfig+0x4bc>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0f0      	beq.n	80060fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d108      	bne.n	8006132 <HAL_RCC_OscConfig+0x32e>
 8006120:	4b66      	ldr	r3, [pc, #408]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006126:	4a65      	ldr	r2, [pc, #404]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006128:	f043 0301 	orr.w	r3, r3, #1
 800612c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006130:	e024      	b.n	800617c <HAL_RCC_OscConfig+0x378>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d110      	bne.n	800615c <HAL_RCC_OscConfig+0x358>
 800613a:	4b60      	ldr	r3, [pc, #384]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800613c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006140:	4a5e      	ldr	r2, [pc, #376]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006142:	f043 0304 	orr.w	r3, r3, #4
 8006146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800614a:	4b5c      	ldr	r3, [pc, #368]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800614c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006150:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006152:	f043 0301 	orr.w	r3, r3, #1
 8006156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800615a:	e00f      	b.n	800617c <HAL_RCC_OscConfig+0x378>
 800615c:	4b57      	ldr	r3, [pc, #348]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800615e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006162:	4a56      	ldr	r2, [pc, #344]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800616c:	4b53      	ldr	r3, [pc, #332]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800616e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006172:	4a52      	ldr	r2, [pc, #328]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006174:	f023 0304 	bic.w	r3, r3, #4
 8006178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d016      	beq.n	80061b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006184:	f7ff f9ce 	bl	8005524 <HAL_GetTick>
 8006188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800618a:	e00a      	b.n	80061a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618c:	f7ff f9ca 	bl	8005524 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	4293      	cmp	r3, r2
 800619c:	d901      	bls.n	80061a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	e138      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061a2:	4b46      	ldr	r3, [pc, #280]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0ed      	beq.n	800618c <HAL_RCC_OscConfig+0x388>
 80061b0:	e015      	b.n	80061de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061b2:	f7ff f9b7 	bl	8005524 <HAL_GetTick>
 80061b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061b8:	e00a      	b.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ba:	f7ff f9b3 	bl	8005524 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d901      	bls.n	80061d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061cc:	2303      	movs	r3, #3
 80061ce:	e121      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061d0:	4b3a      	ldr	r3, [pc, #232]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d6:	f003 0302 	and.w	r3, r3, #2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ed      	bne.n	80061ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061de:	7ffb      	ldrb	r3, [r7, #31]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d105      	bne.n	80061f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061e4:	4b35      	ldr	r3, [pc, #212]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e8:	4a34      	ldr	r2, [pc, #208]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 80061ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f003 0320 	and.w	r3, r3, #32
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d03c      	beq.n	8006276 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01c      	beq.n	800623e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006204:	4b2d      	ldr	r3, [pc, #180]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006206:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800620a:	4a2c      	ldr	r2, [pc, #176]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006214:	f7ff f986 	bl	8005524 <HAL_GetTick>
 8006218:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800621c:	f7ff f982 	bl	8005524 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e0f2      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800622e:	4b23      	ldr	r3, [pc, #140]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0ef      	beq.n	800621c <HAL_RCC_OscConfig+0x418>
 800623c:	e01b      	b.n	8006276 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800623e:	4b1f      	ldr	r3, [pc, #124]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006244:	4a1d      	ldr	r2, [pc, #116]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800624e:	f7ff f969 	bl	8005524 <HAL_GetTick>
 8006252:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006254:	e008      	b.n	8006268 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006256:	f7ff f965 	bl	8005524 <HAL_GetTick>
 800625a:	4602      	mov	r2, r0
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	2b02      	cmp	r3, #2
 8006262:	d901      	bls.n	8006268 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006264:	2303      	movs	r3, #3
 8006266:	e0d5      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006268:	4b14      	ldr	r3, [pc, #80]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800626a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800626e:	f003 0302 	and.w	r3, r3, #2
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1ef      	bne.n	8006256 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	69db      	ldr	r3, [r3, #28]
 800627a:	2b00      	cmp	r3, #0
 800627c:	f000 80c9 	beq.w	8006412 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006280:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b0c      	cmp	r3, #12
 800628a:	f000 8083 	beq.w	8006394 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	2b02      	cmp	r3, #2
 8006294:	d15e      	bne.n	8006354 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <HAL_RCC_OscConfig+0x4b8>)
 800629c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a2:	f7ff f93f 	bl	8005524 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062a8:	e00c      	b.n	80062c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062aa:	f7ff f93b 	bl	8005524 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d905      	bls.n	80062c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e0ab      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
 80062bc:	40021000 	.word	0x40021000
 80062c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062c4:	4b55      	ldr	r3, [pc, #340]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1ec      	bne.n	80062aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062d0:	4b52      	ldr	r3, [pc, #328]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	4b52      	ldr	r3, [pc, #328]	; (8006420 <HAL_RCC_OscConfig+0x61c>)
 80062d6:	4013      	ands	r3, r2
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	6a11      	ldr	r1, [r2, #32]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80062e0:	3a01      	subs	r2, #1
 80062e2:	0112      	lsls	r2, r2, #4
 80062e4:	4311      	orrs	r1, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062ea:	0212      	lsls	r2, r2, #8
 80062ec:	4311      	orrs	r1, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062f2:	0852      	lsrs	r2, r2, #1
 80062f4:	3a01      	subs	r2, #1
 80062f6:	0552      	lsls	r2, r2, #21
 80062f8:	4311      	orrs	r1, r2
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062fe:	0852      	lsrs	r2, r2, #1
 8006300:	3a01      	subs	r2, #1
 8006302:	0652      	lsls	r2, r2, #25
 8006304:	4311      	orrs	r1, r2
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800630a:	06d2      	lsls	r2, r2, #27
 800630c:	430a      	orrs	r2, r1
 800630e:	4943      	ldr	r1, [pc, #268]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006310:	4313      	orrs	r3, r2
 8006312:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006314:	4b41      	ldr	r3, [pc, #260]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a40      	ldr	r2, [pc, #256]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800631a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800631e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006320:	4b3e      	ldr	r3, [pc, #248]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4a3d      	ldr	r2, [pc, #244]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800632a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800632c:	f7ff f8fa 	bl	8005524 <HAL_GetTick>
 8006330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006332:	e008      	b.n	8006346 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006334:	f7ff f8f6 	bl	8005524 <HAL_GetTick>
 8006338:	4602      	mov	r2, r0
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	1ad3      	subs	r3, r2, r3
 800633e:	2b02      	cmp	r3, #2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e066      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0f0      	beq.n	8006334 <HAL_RCC_OscConfig+0x530>
 8006352:	e05e      	b.n	8006412 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006354:	4b31      	ldr	r3, [pc, #196]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a30      	ldr	r2, [pc, #192]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800635a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800635e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006360:	f7ff f8e0 	bl	8005524 <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006368:	f7ff f8dc 	bl	8005524 <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e04c      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800637a:	4b28      	ldr	r3, [pc, #160]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006386:	4b25      	ldr	r3, [pc, #148]	; (800641c <HAL_RCC_OscConfig+0x618>)
 8006388:	68da      	ldr	r2, [r3, #12]
 800638a:	4924      	ldr	r1, [pc, #144]	; (800641c <HAL_RCC_OscConfig+0x618>)
 800638c:	4b25      	ldr	r3, [pc, #148]	; (8006424 <HAL_RCC_OscConfig+0x620>)
 800638e:	4013      	ands	r3, r2
 8006390:	60cb      	str	r3, [r1, #12]
 8006392:	e03e      	b.n	8006412 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e039      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063a0:	4b1e      	ldr	r3, [pc, #120]	; (800641c <HAL_RCC_OscConfig+0x618>)
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f003 0203 	and.w	r2, r3, #3
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d12c      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	3b01      	subs	r3, #1
 80063c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d123      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d11b      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d113      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f0:	085b      	lsrs	r3, r3, #1
 80063f2:	3b01      	subs	r3, #1
 80063f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d109      	bne.n	800640e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006404:	085b      	lsrs	r3, r3, #1
 8006406:	3b01      	subs	r3, #1
 8006408:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d001      	beq.n	8006412 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	3720      	adds	r7, #32
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40021000 	.word	0x40021000
 8006420:	019f800c 	.word	0x019f800c
 8006424:	feeefffc 	.word	0xfeeefffc

08006428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e11e      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	4b91      	ldr	r3, [pc, #580]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d910      	bls.n	8006470 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b8e      	ldr	r3, [pc, #568]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 020f 	bic.w	r2, r3, #15
 8006456:	498c      	ldr	r1, [pc, #560]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b8a      	ldr	r3, [pc, #552]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 030f 	and.w	r3, r3, #15
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e106      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b00      	cmp	r3, #0
 800647a:	d073      	beq.n	8006564 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	2b03      	cmp	r3, #3
 8006482:	d129      	bne.n	80064d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006484:	4b81      	ldr	r3, [pc, #516]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e0f4      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006494:	f000 f99e 	bl	80067d4 <RCC_GetSysClockFreqFromPLLSource>
 8006498:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4a7c      	ldr	r2, [pc, #496]	; (8006690 <HAL_RCC_ClockConfig+0x268>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d93f      	bls.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064a2:	4b7a      	ldr	r3, [pc, #488]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d033      	beq.n	8006522 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d12f      	bne.n	8006522 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064c2:	4b72      	ldr	r3, [pc, #456]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ca:	4a70      	ldr	r2, [pc, #448]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064d2:	2380      	movs	r3, #128	; 0x80
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e024      	b.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d107      	bne.n	80064f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80064e0:	4b6a      	ldr	r3, [pc, #424]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d109      	bne.n	8006500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e0c6      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064f0:	4b66      	ldr	r3, [pc, #408]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e0be      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006500:	f000 f8ce 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8006504:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	4a61      	ldr	r2, [pc, #388]	; (8006690 <HAL_RCC_ClockConfig+0x268>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d909      	bls.n	8006522 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800650e:	4b5f      	ldr	r3, [pc, #380]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006516:	4a5d      	ldr	r2, [pc, #372]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800651e:	2380      	movs	r3, #128	; 0x80
 8006520:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006522:	4b5a      	ldr	r3, [pc, #360]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	f023 0203 	bic.w	r2, r3, #3
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	4957      	ldr	r1, [pc, #348]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006530:	4313      	orrs	r3, r2
 8006532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006534:	f7fe fff6 	bl	8005524 <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800653a:	e00a      	b.n	8006552 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800653c:	f7fe fff2 	bl	8005524 <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f241 3288 	movw	r2, #5000	; 0x1388
 800654a:	4293      	cmp	r3, r2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e095      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006552:	4b4e      	ldr	r3, [pc, #312]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f003 020c 	and.w	r2, r3, #12
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	429a      	cmp	r2, r3
 8006562:	d1eb      	bne.n	800653c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d023      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0304 	and.w	r3, r3, #4
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800657c:	4b43      	ldr	r3, [pc, #268]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	4a42      	ldr	r2, [pc, #264]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006586:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006594:	4b3d      	ldr	r3, [pc, #244]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800659c:	4a3b      	ldr	r2, [pc, #236]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800659e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065a4:	4b39      	ldr	r3, [pc, #228]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	4936      	ldr	r1, [pc, #216]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	e008      	b.n	80065ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b80      	cmp	r3, #128	; 0x80
 80065bc:	d105      	bne.n	80065ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065be:	4b33      	ldr	r3, [pc, #204]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	4a32      	ldr	r2, [pc, #200]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 80065c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065ca:	4b2f      	ldr	r3, [pc, #188]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f003 030f 	and.w	r3, r3, #15
 80065d2:	683a      	ldr	r2, [r7, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d21d      	bcs.n	8006614 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d8:	4b2b      	ldr	r3, [pc, #172]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f023 020f 	bic.w	r2, r3, #15
 80065e0:	4929      	ldr	r1, [pc, #164]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065e8:	f7fe ff9c 	bl	8005524 <HAL_GetTick>
 80065ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ee:	e00a      	b.n	8006606 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f0:	f7fe ff98 	bl	8005524 <HAL_GetTick>
 80065f4:	4602      	mov	r2, r0
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	1ad3      	subs	r3, r2, r3
 80065fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80065fe:	4293      	cmp	r3, r2
 8006600:	d901      	bls.n	8006606 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e03b      	b.n	800667e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006606:	4b20      	ldr	r3, [pc, #128]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	429a      	cmp	r2, r3
 8006612:	d1ed      	bne.n	80065f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d008      	beq.n	8006632 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006620:	4b1a      	ldr	r3, [pc, #104]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4917      	ldr	r1, [pc, #92]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800662e:	4313      	orrs	r3, r2
 8006630:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0308 	and.w	r3, r3, #8
 800663a:	2b00      	cmp	r3, #0
 800663c:	d009      	beq.n	8006652 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800663e:	4b13      	ldr	r3, [pc, #76]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	490f      	ldr	r1, [pc, #60]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800664e:	4313      	orrs	r3, r2
 8006650:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006652:	f000 f825 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8006656:	4602      	mov	r2, r0
 8006658:	4b0c      	ldr	r3, [pc, #48]	; (800668c <HAL_RCC_ClockConfig+0x264>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	091b      	lsrs	r3, r3, #4
 800665e:	f003 030f 	and.w	r3, r3, #15
 8006662:	490c      	ldr	r1, [pc, #48]	; (8006694 <HAL_RCC_ClockConfig+0x26c>)
 8006664:	5ccb      	ldrb	r3, [r1, r3]
 8006666:	f003 031f 	and.w	r3, r3, #31
 800666a:	fa22 f303 	lsr.w	r3, r2, r3
 800666e:	4a0a      	ldr	r2, [pc, #40]	; (8006698 <HAL_RCC_ClockConfig+0x270>)
 8006670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006672:	4b0a      	ldr	r3, [pc, #40]	; (800669c <HAL_RCC_ClockConfig+0x274>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe ff08 	bl	800548c <HAL_InitTick>
 800667c:	4603      	mov	r3, r0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40022000 	.word	0x40022000
 800668c:	40021000 	.word	0x40021000
 8006690:	04c4b400 	.word	0x04c4b400
 8006694:	0800d204 	.word	0x0800d204
 8006698:	20000004 	.word	0x20000004
 800669c:	20000008 	.word	0x20000008

080066a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066a6:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d102      	bne.n	80066b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066b2:	4b2a      	ldr	r3, [pc, #168]	; (800675c <HAL_RCC_GetSysClockFreq+0xbc>)
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e047      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066b8:	4b27      	ldr	r3, [pc, #156]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b08      	cmp	r3, #8
 80066c2:	d102      	bne.n	80066ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066c4:	4b26      	ldr	r3, [pc, #152]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066c6:	613b      	str	r3, [r7, #16]
 80066c8:	e03e      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066ca:	4b23      	ldr	r3, [pc, #140]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f003 030c 	and.w	r3, r3, #12
 80066d2:	2b0c      	cmp	r3, #12
 80066d4:	d136      	bne.n	8006744 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066d6:	4b20      	ldr	r3, [pc, #128]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	f003 0303 	and.w	r3, r3, #3
 80066de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066e0:	4b1d      	ldr	r3, [pc, #116]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	091b      	lsrs	r3, r3, #4
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	3301      	adds	r3, #1
 80066ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2b03      	cmp	r3, #3
 80066f2:	d10c      	bne.n	800670e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066f4:	4a1a      	ldr	r2, [pc, #104]	; (8006760 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fc:	4a16      	ldr	r2, [pc, #88]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066fe:	68d2      	ldr	r2, [r2, #12]
 8006700:	0a12      	lsrs	r2, r2, #8
 8006702:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	617b      	str	r3, [r7, #20]
      break;
 800670c:	e00c      	b.n	8006728 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800670e:	4a13      	ldr	r2, [pc, #76]	; (800675c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	fbb2 f3f3 	udiv	r3, r2, r3
 8006716:	4a10      	ldr	r2, [pc, #64]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006718:	68d2      	ldr	r2, [r2, #12]
 800671a:	0a12      	lsrs	r2, r2, #8
 800671c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006720:	fb02 f303 	mul.w	r3, r2, r3
 8006724:	617b      	str	r3, [r7, #20]
      break;
 8006726:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <HAL_RCC_GetSysClockFreq+0xb8>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	0e5b      	lsrs	r3, r3, #25
 800672e:	f003 0303 	and.w	r3, r3, #3
 8006732:	3301      	adds	r3, #1
 8006734:	005b      	lsls	r3, r3, #1
 8006736:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006740:	613b      	str	r3, [r7, #16]
 8006742:	e001      	b.n	8006748 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006748:	693b      	ldr	r3, [r7, #16]
}
 800674a:	4618      	mov	r0, r3
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
 8006756:	bf00      	nop
 8006758:	40021000 	.word	0x40021000
 800675c:	00f42400 	.word	0x00f42400
 8006760:	016e3600 	.word	0x016e3600

08006764 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006768:	4b03      	ldr	r3, [pc, #12]	; (8006778 <HAL_RCC_GetHCLKFreq+0x14>)
 800676a:	681b      	ldr	r3, [r3, #0]
}
 800676c:	4618      	mov	r0, r3
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	20000004 	.word	0x20000004

0800677c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006780:	f7ff fff0 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 8006784:	4602      	mov	r2, r0
 8006786:	4b06      	ldr	r3, [pc, #24]	; (80067a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	0a1b      	lsrs	r3, r3, #8
 800678c:	f003 0307 	and.w	r3, r3, #7
 8006790:	4904      	ldr	r1, [pc, #16]	; (80067a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800679c:	4618      	mov	r0, r3
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40021000 	.word	0x40021000
 80067a4:	0800d214 	.word	0x0800d214

080067a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067ac:	f7ff ffda 	bl	8006764 <HAL_RCC_GetHCLKFreq>
 80067b0:	4602      	mov	r2, r0
 80067b2:	4b06      	ldr	r3, [pc, #24]	; (80067cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	0adb      	lsrs	r3, r3, #11
 80067b8:	f003 0307 	and.w	r3, r3, #7
 80067bc:	4904      	ldr	r1, [pc, #16]	; (80067d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067be:	5ccb      	ldrb	r3, [r1, r3]
 80067c0:	f003 031f 	and.w	r3, r3, #31
 80067c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40021000 	.word	0x40021000
 80067d0:	0800d214 	.word	0x0800d214

080067d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067da:	4b1e      	ldr	r3, [pc, #120]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0303 	and.w	r3, r3, #3
 80067e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067e4:	4b1b      	ldr	r3, [pc, #108]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	3301      	adds	r3, #1
 80067f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d10c      	bne.n	8006812 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067f8:	4a17      	ldr	r2, [pc, #92]	; (8006858 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	4a14      	ldr	r2, [pc, #80]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006802:	68d2      	ldr	r2, [r2, #12]
 8006804:	0a12      	lsrs	r2, r2, #8
 8006806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800680a:	fb02 f303 	mul.w	r3, r2, r3
 800680e:	617b      	str	r3, [r7, #20]
    break;
 8006810:	e00c      	b.n	800682c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	4a0e      	ldr	r2, [pc, #56]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800681c:	68d2      	ldr	r2, [r2, #12]
 800681e:	0a12      	lsrs	r2, r2, #8
 8006820:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	617b      	str	r3, [r7, #20]
    break;
 800682a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	0e5b      	lsrs	r3, r3, #25
 8006832:	f003 0303 	and.w	r3, r3, #3
 8006836:	3301      	adds	r3, #1
 8006838:	005b      	lsls	r3, r3, #1
 800683a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	fbb2 f3f3 	udiv	r3, r2, r3
 8006844:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006846:	687b      	ldr	r3, [r7, #4]
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40021000 	.word	0x40021000
 8006858:	016e3600 	.word	0x016e3600
 800685c:	00f42400 	.word	0x00f42400

08006860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006868:	2300      	movs	r3, #0
 800686a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800686c:	2300      	movs	r3, #0
 800686e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8098 	beq.w	80069ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006882:	4b43      	ldr	r3, [pc, #268]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10d      	bne.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006892:	4a3f      	ldr	r2, [pc, #252]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006898:	6593      	str	r3, [r2, #88]	; 0x58
 800689a:	4b3d      	ldr	r3, [pc, #244]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800689c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800689e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a2:	60bb      	str	r3, [r7, #8]
 80068a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068a6:	2301      	movs	r3, #1
 80068a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068aa:	4b3a      	ldr	r3, [pc, #232]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a39      	ldr	r2, [pc, #228]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068b6:	f7fe fe35 	bl	8005524 <HAL_GetTick>
 80068ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068bc:	e009      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068be:	f7fe fe31 	bl	8005524 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d902      	bls.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	74fb      	strb	r3, [r7, #19]
        break;
 80068d0:	e005      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0ef      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80068de:	7cfb      	ldrb	r3, [r7, #19]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d159      	bne.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d01e      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d019      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006900:	4b23      	ldr	r3, [pc, #140]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800690a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800690c:	4b20      	ldr	r3, [pc, #128]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	4a1f      	ldr	r2, [pc, #124]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800691c:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800691e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006922:	4a1b      	ldr	r2, [pc, #108]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d016      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693e:	f7fe fdf1 	bl	8005524 <HAL_GetTick>
 8006942:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006944:	e00b      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006946:	f7fe fded 	bl	8005524 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	f241 3288 	movw	r2, #5000	; 0x1388
 8006954:	4293      	cmp	r3, r2
 8006956:	d902      	bls.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	74fb      	strb	r3, [r7, #19]
            break;
 800695c:	e006      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006964:	f003 0302 	and.w	r3, r3, #2
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0ec      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800696c:	7cfb      	ldrb	r3, [r7, #19]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006972:	4b07      	ldr	r3, [pc, #28]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006978:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006980:	4903      	ldr	r1, [pc, #12]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006988:	e008      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800698a:	7cfb      	ldrb	r3, [r7, #19]
 800698c:	74bb      	strb	r3, [r7, #18]
 800698e:	e005      	b.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006990:	40021000 	.word	0x40021000
 8006994:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800699c:	7c7b      	ldrb	r3, [r7, #17]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d105      	bne.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a2:	4ba7      	ldr	r3, [pc, #668]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a6:	4aa6      	ldr	r2, [pc, #664]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069ba:	4ba1      	ldr	r3, [pc, #644]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c0:	f023 0203 	bic.w	r2, r3, #3
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	499d      	ldr	r1, [pc, #628]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80069dc:	4b98      	ldr	r3, [pc, #608]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e2:	f023 020c 	bic.w	r2, r3, #12
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	4995      	ldr	r1, [pc, #596]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 0304 	and.w	r3, r3, #4
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069fe:	4b90      	ldr	r3, [pc, #576]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	498c      	ldr	r1, [pc, #560]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0308 	and.w	r3, r3, #8
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d00a      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a20:	4b87      	ldr	r3, [pc, #540]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	4984      	ldr	r1, [pc, #528]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a30:	4313      	orrs	r3, r2
 8006a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0310 	and.w	r3, r3, #16
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00a      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a42:	4b7f      	ldr	r3, [pc, #508]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	497b      	ldr	r1, [pc, #492]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0320 	and.w	r3, r3, #32
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d00a      	beq.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a64:	4b76      	ldr	r3, [pc, #472]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	4973      	ldr	r1, [pc, #460]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a86:	4b6e      	ldr	r3, [pc, #440]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	496a      	ldr	r1, [pc, #424]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006aa8:	4b65      	ldr	r3, [pc, #404]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	4962      	ldr	r1, [pc, #392]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006aca:	4b5d      	ldr	r3, [pc, #372]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad8:	4959      	ldr	r1, [pc, #356]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aec:	4b54      	ldr	r3, [pc, #336]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afa:	4951      	ldr	r1, [pc, #324]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d015      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b0e:	4b4c      	ldr	r3, [pc, #304]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4948      	ldr	r1, [pc, #288]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b2c:	d105      	bne.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b2e:	4b44      	ldr	r3, [pc, #272]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	4a43      	ldr	r2, [pc, #268]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b38:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d015      	beq.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b46:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b54:	493a      	ldr	r1, [pc, #232]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b64:	d105      	bne.n	8006b72 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b66:	4b36      	ldr	r3, [pc, #216]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	4a35      	ldr	r2, [pc, #212]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b70:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d015      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b7e:	4b30      	ldr	r3, [pc, #192]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8c:	492c      	ldr	r1, [pc, #176]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b9c:	d105      	bne.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b9e:	4b28      	ldr	r3, [pc, #160]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	4a27      	ldr	r2, [pc, #156]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ba8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d015      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	491e      	ldr	r1, [pc, #120]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd4:	d105      	bne.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bd6:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	4a19      	ldr	r2, [pc, #100]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006be0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d015      	beq.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006bee:	4b14      	ldr	r3, [pc, #80]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bfc:	4910      	ldr	r1, [pc, #64]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c0c:	d105      	bne.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c0e:	4b0c      	ldr	r3, [pc, #48]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	4a0b      	ldr	r2, [pc, #44]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d018      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c26:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	4902      	ldr	r1, [pc, #8]	; (8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	e001      	b.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c40:	40021000 	.word	0x40021000
 8006c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c4a:	d105      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c4c:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	4a20      	ldr	r2, [pc, #128]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c56:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d015      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c64:	4b1b      	ldr	r3, [pc, #108]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c6a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c72:	4918      	ldr	r1, [pc, #96]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c74:	4313      	orrs	r3, r2
 8006c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c82:	d105      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c84:	4b13      	ldr	r3, [pc, #76]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	4a12      	ldr	r2, [pc, #72]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c8e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d015      	beq.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ca2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006caa:	490a      	ldr	r1, [pc, #40]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cba:	d105      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cc6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cc8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3718      	adds	r7, #24
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40021000 	.word	0x40021000

08006cd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e049      	b.n	8006d7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d106      	bne.n	8006d04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7fe f9ee 	bl	80050e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f000 f89e 	bl	8006e58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
	...

08006d88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d001      	beq.n	8006da0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e047      	b.n	8006e30 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a23      	ldr	r2, [pc, #140]	; (8006e3c <HAL_TIM_Base_Start+0xb4>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d01d      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dba:	d018      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a1f      	ldr	r2, [pc, #124]	; (8006e40 <HAL_TIM_Base_Start+0xb8>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d013      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a1e      	ldr	r2, [pc, #120]	; (8006e44 <HAL_TIM_Base_Start+0xbc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d00e      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <HAL_TIM_Base_Start+0xc0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d009      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <HAL_TIM_Base_Start+0xc4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d004      	beq.n	8006dee <HAL_TIM_Base_Start+0x66>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a19      	ldr	r2, [pc, #100]	; (8006e50 <HAL_TIM_Base_Start+0xc8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d115      	bne.n	8006e1a <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_TIM_Base_Start+0xcc>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2b06      	cmp	r3, #6
 8006dfe:	d015      	beq.n	8006e2c <HAL_TIM_Base_Start+0xa4>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e06:	d011      	beq.n	8006e2c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681a      	ldr	r2, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f042 0201 	orr.w	r2, r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e18:	e008      	b.n	8006e2c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f042 0201 	orr.w	r2, r2, #1
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e000      	b.n	8006e2e <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	40012c00 	.word	0x40012c00
 8006e40:	40000400 	.word	0x40000400
 8006e44:	40000800 	.word	0x40000800
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40015000 	.word	0x40015000
 8006e54:	00010007 	.word	0x00010007

08006e58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a48      	ldr	r2, [pc, #288]	; (8006f8c <TIM_Base_SetConfig+0x134>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d013      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e76:	d00f      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a45      	ldr	r2, [pc, #276]	; (8006f90 <TIM_Base_SetConfig+0x138>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d00b      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a44      	ldr	r2, [pc, #272]	; (8006f94 <TIM_Base_SetConfig+0x13c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d007      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a43      	ldr	r2, [pc, #268]	; (8006f98 <TIM_Base_SetConfig+0x140>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d003      	beq.n	8006e98 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a42      	ldr	r2, [pc, #264]	; (8006f9c <TIM_Base_SetConfig+0x144>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d108      	bne.n	8006eaa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a37      	ldr	r2, [pc, #220]	; (8006f8c <TIM_Base_SetConfig+0x134>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d01f      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb8:	d01b      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a34      	ldr	r2, [pc, #208]	; (8006f90 <TIM_Base_SetConfig+0x138>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d017      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a33      	ldr	r2, [pc, #204]	; (8006f94 <TIM_Base_SetConfig+0x13c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a32      	ldr	r2, [pc, #200]	; (8006f98 <TIM_Base_SetConfig+0x140>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d00f      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <TIM_Base_SetConfig+0x148>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00b      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a31      	ldr	r2, [pc, #196]	; (8006fa4 <TIM_Base_SetConfig+0x14c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d007      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a30      	ldr	r2, [pc, #192]	; (8006fa8 <TIM_Base_SetConfig+0x150>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d003      	beq.n	8006ef2 <TIM_Base_SetConfig+0x9a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2b      	ldr	r2, [pc, #172]	; (8006f9c <TIM_Base_SetConfig+0x144>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d108      	bne.n	8006f04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	4313      	orrs	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a18      	ldr	r2, [pc, #96]	; (8006f8c <TIM_Base_SetConfig+0x134>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d013      	beq.n	8006f58 <TIM_Base_SetConfig+0x100>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a19      	ldr	r2, [pc, #100]	; (8006f98 <TIM_Base_SetConfig+0x140>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d00f      	beq.n	8006f58 <TIM_Base_SetConfig+0x100>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <TIM_Base_SetConfig+0x148>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d00b      	beq.n	8006f58 <TIM_Base_SetConfig+0x100>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a18      	ldr	r2, [pc, #96]	; (8006fa4 <TIM_Base_SetConfig+0x14c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d007      	beq.n	8006f58 <TIM_Base_SetConfig+0x100>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a17      	ldr	r2, [pc, #92]	; (8006fa8 <TIM_Base_SetConfig+0x150>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d003      	beq.n	8006f58 <TIM_Base_SetConfig+0x100>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a12      	ldr	r2, [pc, #72]	; (8006f9c <TIM_Base_SetConfig+0x144>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d103      	bne.n	8006f60 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0301 	and.w	r3, r3, #1
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d105      	bne.n	8006f7e <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	40012c00 	.word	0x40012c00
 8006f90:	40000400 	.word	0x40000400
 8006f94:	40000800 	.word	0x40000800
 8006f98:	40013400 	.word	0x40013400
 8006f9c:	40015000 	.word	0x40015000
 8006fa0:	40014000 	.word	0x40014000
 8006fa4:	40014400 	.word	0x40014400
 8006fa8:	40014800 	.word	0x40014800

08006fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e06f      	b.n	80070a4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2202      	movs	r2, #2
 8006fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a31      	ldr	r2, [pc, #196]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a30      	ldr	r2, [pc, #192]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a2e      	ldr	r2, [pc, #184]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d108      	bne.n	8007014 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007008:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	4313      	orrs	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1e      	ldr	r2, [pc, #120]	; (80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d01d      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d018      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1c      	ldr	r2, [pc, #112]	; (80070bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d013      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a1a      	ldr	r2, [pc, #104]	; (80070c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00e      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a15      	ldr	r2, [pc, #84]	; (80070b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d009      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a16      	ldr	r2, [pc, #88]	; (80070c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d004      	beq.n	8007078 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a11      	ldr	r2, [pc, #68]	; (80070b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d10c      	bne.n	8007092 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800707e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	4313      	orrs	r3, r2
 8007088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3714      	adds	r7, #20
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr
 80070b0:	40012c00 	.word	0x40012c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40015000 	.word	0x40015000
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800
 80070c4:	40014000 	.word	0x40014000

080070c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e042      	b.n	8007160 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d106      	bne.n	80070f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fe f817 	bl	8005120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2224      	movs	r2, #36	; 0x24
 80070f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	2b00      	cmp	r3, #0
 8007110:	d002      	beq.n	8007118 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 ff42 	bl	8007f9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fc43 	bl	80079a4 <UART_SetConfig>
 800711e:	4603      	mov	r3, r0
 8007120:	2b01      	cmp	r3, #1
 8007122:	d101      	bne.n	8007128 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e01b      	b.n	8007160 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007136:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007146:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f042 0201 	orr.w	r2, r2, #1
 8007156:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f000 ffc1 	bl	80080e0 <UART_CheckIdleState>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b08a      	sub	sp, #40	; 0x28
 800716c:	af02      	add	r7, sp, #8
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	603b      	str	r3, [r7, #0]
 8007174:	4613      	mov	r3, r2
 8007176:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	2b20      	cmp	r3, #32
 8007180:	d17b      	bne.n	800727a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_UART_Transmit+0x26>
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e074      	b.n	800727c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2221      	movs	r2, #33	; 0x21
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071a2:	f7fe f9bf 	bl	8005524 <HAL_GetTick>
 80071a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	88fa      	ldrh	r2, [r7, #6]
 80071ac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c0:	d108      	bne.n	80071d4 <HAL_UART_Transmit+0x6c>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d104      	bne.n	80071d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	e003      	b.n	80071dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071dc:	e030      	b.n	8007240 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 f823 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2220      	movs	r2, #32
 80071f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e03d      	b.n	800727c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d10b      	bne.n	800721e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	881b      	ldrh	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007214:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	3302      	adds	r3, #2
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	e007      	b.n	800722e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007234:	b29b      	uxth	r3, r3
 8007236:	3b01      	subs	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1c8      	bne.n	80071de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2200      	movs	r2, #0
 8007254:	2140      	movs	r1, #64	; 0x40
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 ffec 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d005      	beq.n	800726e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e006      	b.n	800727c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	e000      	b.n	800727c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
  }
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	; 0x28
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007298:	2b20      	cmp	r3, #32
 800729a:	d137      	bne.n	800730c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_UART_Receive_IT+0x24>
 80072a2:	88fb      	ldrh	r3, [r7, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	e030      	b.n	800730e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a18      	ldr	r2, [pc, #96]	; (8007318 <HAL_UART_Receive_IT+0x94>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d01f      	beq.n	80072fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d018      	beq.n	80072fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	613b      	str	r3, [r7, #16]
   return(result);
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072de:	627b      	str	r3, [r7, #36]	; 0x24
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	461a      	mov	r2, r3
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	623b      	str	r3, [r7, #32]
 80072ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	69f9      	ldr	r1, [r7, #28]
 80072ee:	6a3a      	ldr	r2, [r7, #32]
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e6      	bne.n	80072ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072fc:	88fb      	ldrh	r3, [r7, #6]
 80072fe:	461a      	mov	r2, r3
 8007300:	68b9      	ldr	r1, [r7, #8]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f001 f804 	bl	8008310 <UART_Start_Receive_IT>
 8007308:	4603      	mov	r3, r0
 800730a:	e000      	b.n	800730e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800730c:	2302      	movs	r3, #2
  }
}
 800730e:	4618      	mov	r0, r3
 8007310:	3728      	adds	r7, #40	; 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	40008000 	.word	0x40008000

0800731c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b0ba      	sub	sp, #232	; 0xe8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007342:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007346:	f640 030f 	movw	r3, #2063	; 0x80f
 800734a:	4013      	ands	r3, r2
 800734c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007350:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11b      	bne.n	8007390 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d015      	beq.n	8007390 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007370:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d009      	beq.n	8007390 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 82e3 	beq.w	800794c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	4798      	blx	r3
      }
      return;
 800738e:	e2dd      	b.n	800794c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007390:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8123 	beq.w	80075e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800739a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800739e:	4b8d      	ldr	r3, [pc, #564]	; (80075d4 <HAL_UART_IRQHandler+0x2b8>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d106      	bne.n	80073b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073aa:	4b8b      	ldr	r3, [pc, #556]	; (80075d8 <HAL_UART_IRQHandler+0x2bc>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 8116 	beq.w	80075e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073b8:	f003 0301 	and.w	r3, r3, #1
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d011      	beq.n	80073e4 <HAL_UART_IRQHandler+0xc8>
 80073c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00b      	beq.n	80073e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2201      	movs	r2, #1
 80073d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073da:	f043 0201 	orr.w	r2, r3, #1
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e8:	f003 0302 	and.w	r3, r3, #2
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d011      	beq.n	8007414 <HAL_UART_IRQHandler+0xf8>
 80073f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073f4:	f003 0301 	and.w	r3, r3, #1
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00b      	beq.n	8007414 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2202      	movs	r2, #2
 8007402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800740a:	f043 0204 	orr.w	r2, r3, #4
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007414:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d011      	beq.n	8007444 <HAL_UART_IRQHandler+0x128>
 8007420:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007424:	f003 0301 	and.w	r3, r3, #1
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00b      	beq.n	8007444 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2204      	movs	r2, #4
 8007432:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743a:	f043 0202 	orr.w	r2, r3, #2
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007448:	f003 0308 	and.w	r3, r3, #8
 800744c:	2b00      	cmp	r3, #0
 800744e:	d017      	beq.n	8007480 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d105      	bne.n	8007468 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800745c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007460:	4b5c      	ldr	r3, [pc, #368]	; (80075d4 <HAL_UART_IRQHandler+0x2b8>)
 8007462:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00b      	beq.n	8007480 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	2208      	movs	r2, #8
 800746e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007476:	f043 0208 	orr.w	r2, r3, #8
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007488:	2b00      	cmp	r3, #0
 800748a:	d012      	beq.n	80074b2 <HAL_UART_IRQHandler+0x196>
 800748c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007490:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00c      	beq.n	80074b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f043 0220 	orr.w	r2, r3, #32
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f000 8249 	beq.w	8007950 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d013      	beq.n	80074f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007506:	2b40      	cmp	r3, #64	; 0x40
 8007508:	d005      	beq.n	8007516 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800750a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800750e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007512:	2b00      	cmp	r3, #0
 8007514:	d054      	beq.n	80075c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f001 f81c 	bl	8008554 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007526:	2b40      	cmp	r3, #64	; 0x40
 8007528:	d146      	bne.n	80075b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3308      	adds	r3, #8
 8007530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007544:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007548:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007556:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800755a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007562:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800756e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1d9      	bne.n	800752a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800757c:	2b00      	cmp	r3, #0
 800757e:	d017      	beq.n	80075b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007586:	4a15      	ldr	r2, [pc, #84]	; (80075dc <HAL_UART_IRQHandler+0x2c0>)
 8007588:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007590:	4618      	mov	r0, r3
 8007592:	f7fe f95d 	bl	8005850 <HAL_DMA_Abort_IT>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d019      	beq.n	80075d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80075aa:	4610      	mov	r0, r2
 80075ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ae:	e00f      	b.n	80075d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f9e1 	bl	8007978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b6:	e00b      	b.n	80075d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 f9dd 	bl	8007978 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075be:	e007      	b.n	80075d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f9d9 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80075ce:	e1bf      	b.n	8007950 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d0:	bf00      	nop
    return;
 80075d2:	e1bd      	b.n	8007950 <HAL_UART_IRQHandler+0x634>
 80075d4:	10000001 	.word	0x10000001
 80075d8:	04000120 	.word	0x04000120
 80075dc:	08008621 	.word	0x08008621

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	f040 8153 	bne.w	8007890 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ee:	f003 0310 	and.w	r3, r3, #16
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 814c 	beq.w	8007890 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075fc:	f003 0310 	and.w	r3, r3, #16
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 8145 	beq.w	8007890 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2210      	movs	r2, #16
 800760c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007618:	2b40      	cmp	r3, #64	; 0x40
 800761a:	f040 80bb 	bne.w	8007794 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800762c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 818f 	beq.w	8007954 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800763c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007640:	429a      	cmp	r2, r3
 8007642:	f080 8187 	bcs.w	8007954 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800764c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0320 	and.w	r3, r3, #32
 800765e:	2b00      	cmp	r3, #0
 8007660:	f040 8087 	bne.w	8007772 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800767c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007680:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800768e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007692:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800769a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1da      	bne.n	8007664 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80076da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80076e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e1      	bne.n	80076ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800770e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007710:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007712:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007714:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007716:	e841 2300 	strex	r3, r2, [r1]
 800771a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800771c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800771e:	2b00      	cmp	r3, #0
 8007720:	d1e3      	bne.n	80076ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2220      	movs	r2, #32
 8007726:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2200      	movs	r2, #0
 800772e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007736:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007738:	e853 3f00 	ldrex	r3, [r3]
 800773c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800773e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007740:	f023 0310 	bic.w	r3, r3, #16
 8007744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007752:	65bb      	str	r3, [r7, #88]	; 0x58
 8007754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800775a:	e841 2300 	strex	r3, r2, [r1]
 800775e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007762:	2b00      	cmp	r3, #0
 8007764:	d1e4      	bne.n	8007730 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe f816 	bl	800579e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007784:	b29b      	uxth	r3, r3
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	b29b      	uxth	r3, r3
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8fd 	bl	800798c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007792:	e0df      	b.n	8007954 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 80d1 	beq.w	8007958 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80077b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f000 80cc 	beq.w	8007958 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	e853 3f00 	ldrex	r3, [r3]
 80077cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80077e2:	647b      	str	r3, [r7, #68]	; 0x44
 80077e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077ea:	e841 2300 	strex	r3, r2, [r1]
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1e4      	bne.n	80077c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	3308      	adds	r3, #8
 80077fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	623b      	str	r3, [r7, #32]
   return(result);
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800780c:	f023 0301 	bic.w	r3, r3, #1
 8007810:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3308      	adds	r3, #8
 800781a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800781e:	633a      	str	r2, [r7, #48]	; 0x30
 8007820:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e1      	bne.n	80077f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	60fb      	str	r3, [r7, #12]
   return(result);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f023 0310 	bic.w	r3, r3, #16
 800785a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	461a      	mov	r2, r3
 8007864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007868:	61fb      	str	r3, [r7, #28]
 800786a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	69b9      	ldr	r1, [r7, #24]
 800786e:	69fa      	ldr	r2, [r7, #28]
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	617b      	str	r3, [r7, #20]
   return(result);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e4      	bne.n	8007846 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007882:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007886:	4619      	mov	r1, r3
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f87f 	bl	800798c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800788e:	e063      	b.n	8007958 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00e      	beq.n	80078ba <HAL_UART_IRQHandler+0x59e>
 800789c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d008      	beq.n	80078ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f001 fc12 	bl	80090dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078b8:	e051      	b.n	800795e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d014      	beq.n	80078f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d105      	bne.n	80078de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d008      	beq.n	80078f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d03a      	beq.n	800795c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	4798      	blx	r3
    }
    return;
 80078ee:	e035      	b.n	800795c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d009      	beq.n	8007910 <HAL_UART_IRQHandler+0x5f4>
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fe9f 	bl	800864c <UART_EndTransmit_IT>
    return;
 800790e:	e026      	b.n	800795e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_UART_IRQHandler+0x614>
 800791c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007920:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fbeb 	bl	8009104 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800792e:	e016      	b.n	800795e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d010      	beq.n	800795e <HAL_UART_IRQHandler+0x642>
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007940:	2b00      	cmp	r3, #0
 8007942:	da0c      	bge.n	800795e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fbd3 	bl	80090f0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800794a:	e008      	b.n	800795e <HAL_UART_IRQHandler+0x642>
      return;
 800794c:	bf00      	nop
 800794e:	e006      	b.n	800795e <HAL_UART_IRQHandler+0x642>
    return;
 8007950:	bf00      	nop
 8007952:	e004      	b.n	800795e <HAL_UART_IRQHandler+0x642>
      return;
 8007954:	bf00      	nop
 8007956:	e002      	b.n	800795e <HAL_UART_IRQHandler+0x642>
      return;
 8007958:	bf00      	nop
 800795a:	e000      	b.n	800795e <HAL_UART_IRQHandler+0x642>
    return;
 800795c:	bf00      	nop
  }
}
 800795e:	37e8      	adds	r7, #232	; 0xe8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007980:	bf00      	nop
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a8:	b08c      	sub	sp, #48	; 0x30
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	431a      	orrs	r2, r3
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	431a      	orrs	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4baa      	ldr	r3, [pc, #680]	; (8007c7c <UART_SetConfig+0x2d8>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079dc:	430b      	orrs	r3, r1
 80079de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	68da      	ldr	r2, [r3, #12]
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a9f      	ldr	r2, [pc, #636]	; (8007c80 <UART_SetConfig+0x2dc>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d004      	beq.n	8007a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a1a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a2e:	f023 010f 	bic.w	r1, r3, #15
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a90      	ldr	r2, [pc, #576]	; (8007c84 <UART_SetConfig+0x2e0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d125      	bne.n	8007a94 <UART_SetConfig+0xf0>
 8007a48:	4b8f      	ldr	r3, [pc, #572]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d81a      	bhi.n	8007a8c <UART_SetConfig+0xe8>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <UART_SetConfig+0xb8>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a6d 	.word	0x08007a6d
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a75 	.word	0x08007a75
 8007a68:	08007a85 	.word	0x08007a85
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a72:	e116      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007a74:	2302      	movs	r3, #2
 8007a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a7a:	e112      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a82:	e10e      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a8a:	e10a      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a92:	e106      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a7c      	ldr	r2, [pc, #496]	; (8007c8c <UART_SetConfig+0x2e8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d138      	bne.n	8007b10 <UART_SetConfig+0x16c>
 8007a9e:	4b7a      	ldr	r3, [pc, #488]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa4:	f003 030c 	and.w	r3, r3, #12
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d82d      	bhi.n	8007b08 <UART_SetConfig+0x164>
 8007aac:	a201      	add	r2, pc, #4	; (adr r2, 8007ab4 <UART_SetConfig+0x110>)
 8007aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab2:	bf00      	nop
 8007ab4:	08007ae9 	.word	0x08007ae9
 8007ab8:	08007b09 	.word	0x08007b09
 8007abc:	08007b09 	.word	0x08007b09
 8007ac0:	08007b09 	.word	0x08007b09
 8007ac4:	08007af9 	.word	0x08007af9
 8007ac8:	08007b09 	.word	0x08007b09
 8007acc:	08007b09 	.word	0x08007b09
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007af1 	.word	0x08007af1
 8007ad8:	08007b09 	.word	0x08007b09
 8007adc:	08007b09 	.word	0x08007b09
 8007ae0:	08007b09 	.word	0x08007b09
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aee:	e0d8      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007af0:	2302      	movs	r3, #2
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007af6:	e0d4      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afe:	e0d0      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b06:	e0cc      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0e:	e0c8      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a5e      	ldr	r2, [pc, #376]	; (8007c90 <UART_SetConfig+0x2ec>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d125      	bne.n	8007b66 <UART_SetConfig+0x1c2>
 8007b1a:	4b5b      	ldr	r3, [pc, #364]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b20:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b24:	2b30      	cmp	r3, #48	; 0x30
 8007b26:	d016      	beq.n	8007b56 <UART_SetConfig+0x1b2>
 8007b28:	2b30      	cmp	r3, #48	; 0x30
 8007b2a:	d818      	bhi.n	8007b5e <UART_SetConfig+0x1ba>
 8007b2c:	2b20      	cmp	r3, #32
 8007b2e:	d00a      	beq.n	8007b46 <UART_SetConfig+0x1a2>
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d814      	bhi.n	8007b5e <UART_SetConfig+0x1ba>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <UART_SetConfig+0x19a>
 8007b38:	2b10      	cmp	r3, #16
 8007b3a:	d008      	beq.n	8007b4e <UART_SetConfig+0x1aa>
 8007b3c:	e00f      	b.n	8007b5e <UART_SetConfig+0x1ba>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b44:	e0ad      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b46:	2302      	movs	r3, #2
 8007b48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4c:	e0a9      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b4e:	2304      	movs	r3, #4
 8007b50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b54:	e0a5      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b56:	2308      	movs	r3, #8
 8007b58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5c:	e0a1      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b5e:	2310      	movs	r3, #16
 8007b60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b64:	e09d      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a4a      	ldr	r2, [pc, #296]	; (8007c94 <UART_SetConfig+0x2f0>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d125      	bne.n	8007bbc <UART_SetConfig+0x218>
 8007b70:	4b45      	ldr	r3, [pc, #276]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b7c:	d016      	beq.n	8007bac <UART_SetConfig+0x208>
 8007b7e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b80:	d818      	bhi.n	8007bb4 <UART_SetConfig+0x210>
 8007b82:	2b80      	cmp	r3, #128	; 0x80
 8007b84:	d00a      	beq.n	8007b9c <UART_SetConfig+0x1f8>
 8007b86:	2b80      	cmp	r3, #128	; 0x80
 8007b88:	d814      	bhi.n	8007bb4 <UART_SetConfig+0x210>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <UART_SetConfig+0x1f0>
 8007b8e:	2b40      	cmp	r3, #64	; 0x40
 8007b90:	d008      	beq.n	8007ba4 <UART_SetConfig+0x200>
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x210>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9a:	e082      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba2:	e07e      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007baa:	e07a      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	e076      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bba:	e072      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a35      	ldr	r2, [pc, #212]	; (8007c98 <UART_SetConfig+0x2f4>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d12a      	bne.n	8007c1c <UART_SetConfig+0x278>
 8007bc6:	4b30      	ldr	r3, [pc, #192]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bd4:	d01a      	beq.n	8007c0c <UART_SetConfig+0x268>
 8007bd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bda:	d81b      	bhi.n	8007c14 <UART_SetConfig+0x270>
 8007bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be0:	d00c      	beq.n	8007bfc <UART_SetConfig+0x258>
 8007be2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007be6:	d815      	bhi.n	8007c14 <UART_SetConfig+0x270>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <UART_SetConfig+0x250>
 8007bec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bf0:	d008      	beq.n	8007c04 <UART_SetConfig+0x260>
 8007bf2:	e00f      	b.n	8007c14 <UART_SetConfig+0x270>
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfa:	e052      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007bfc:	2302      	movs	r3, #2
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e04e      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c0a:	e04a      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e046      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e042      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4a17      	ldr	r2, [pc, #92]	; (8007c80 <UART_SetConfig+0x2dc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d13a      	bne.n	8007c9c <UART_SetConfig+0x2f8>
 8007c26:	4b18      	ldr	r3, [pc, #96]	; (8007c88 <UART_SetConfig+0x2e4>)
 8007c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c34:	d01a      	beq.n	8007c6c <UART_SetConfig+0x2c8>
 8007c36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c3a:	d81b      	bhi.n	8007c74 <UART_SetConfig+0x2d0>
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	d00c      	beq.n	8007c5c <UART_SetConfig+0x2b8>
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c46:	d815      	bhi.n	8007c74 <UART_SetConfig+0x2d0>
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d003      	beq.n	8007c54 <UART_SetConfig+0x2b0>
 8007c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c50:	d008      	beq.n	8007c64 <UART_SetConfig+0x2c0>
 8007c52:	e00f      	b.n	8007c74 <UART_SetConfig+0x2d0>
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e022      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e01e      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c64:	2304      	movs	r3, #4
 8007c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c6a:	e01a      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c72:	e016      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c74:	2310      	movs	r3, #16
 8007c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c7a:	e012      	b.n	8007ca2 <UART_SetConfig+0x2fe>
 8007c7c:	cfff69f3 	.word	0xcfff69f3
 8007c80:	40008000 	.word	0x40008000
 8007c84:	40013800 	.word	0x40013800
 8007c88:	40021000 	.word	0x40021000
 8007c8c:	40004400 	.word	0x40004400
 8007c90:	40004800 	.word	0x40004800
 8007c94:	40004c00 	.word	0x40004c00
 8007c98:	40005000 	.word	0x40005000
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4aae      	ldr	r2, [pc, #696]	; (8007f60 <UART_SetConfig+0x5bc>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	f040 8097 	bne.w	8007ddc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cb2:	2b08      	cmp	r3, #8
 8007cb4:	d823      	bhi.n	8007cfe <UART_SetConfig+0x35a>
 8007cb6:	a201      	add	r2, pc, #4	; (adr r2, 8007cbc <UART_SetConfig+0x318>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007ce1 	.word	0x08007ce1
 8007cc0:	08007cff 	.word	0x08007cff
 8007cc4:	08007ce9 	.word	0x08007ce9
 8007cc8:	08007cff 	.word	0x08007cff
 8007ccc:	08007cef 	.word	0x08007cef
 8007cd0:	08007cff 	.word	0x08007cff
 8007cd4:	08007cff 	.word	0x08007cff
 8007cd8:	08007cff 	.word	0x08007cff
 8007cdc:	08007cf7 	.word	0x08007cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ce0:	f7fe fd4c 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ce6:	e010      	b.n	8007d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce8:	4b9e      	ldr	r3, [pc, #632]	; (8007f64 <UART_SetConfig+0x5c0>)
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cec:	e00d      	b.n	8007d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007cee:	f7fe fcd7 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cf4:	e009      	b.n	8007d0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cfc:	e005      	b.n	8007d0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 8130 	beq.w	8007f72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d16:	4a94      	ldr	r2, [pc, #592]	; (8007f68 <UART_SetConfig+0x5c4>)
 8007d18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d20:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	685a      	ldr	r2, [r3, #4]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	4413      	add	r3, r2
 8007d30:	69ba      	ldr	r2, [r7, #24]
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d305      	bcc.n	8007d42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d903      	bls.n	8007d4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d48:	e113      	b.n	8007f72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	60bb      	str	r3, [r7, #8]
 8007d50:	60fa      	str	r2, [r7, #12]
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d56:	4a84      	ldr	r2, [pc, #528]	; (8007f68 <UART_SetConfig+0x5c4>)
 8007d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	2200      	movs	r2, #0
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d6c:	f7f8 ffb4 	bl	8000cd8 <__aeabi_uldivmod>
 8007d70:	4602      	mov	r2, r0
 8007d72:	460b      	mov	r3, r1
 8007d74:	4610      	mov	r0, r2
 8007d76:	4619      	mov	r1, r3
 8007d78:	f04f 0200 	mov.w	r2, #0
 8007d7c:	f04f 0300 	mov.w	r3, #0
 8007d80:	020b      	lsls	r3, r1, #8
 8007d82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d86:	0202      	lsls	r2, r0, #8
 8007d88:	6979      	ldr	r1, [r7, #20]
 8007d8a:	6849      	ldr	r1, [r1, #4]
 8007d8c:	0849      	lsrs	r1, r1, #1
 8007d8e:	2000      	movs	r0, #0
 8007d90:	460c      	mov	r4, r1
 8007d92:	4605      	mov	r5, r0
 8007d94:	eb12 0804 	adds.w	r8, r2, r4
 8007d98:	eb43 0905 	adc.w	r9, r3, r5
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	469a      	mov	sl, r3
 8007da4:	4693      	mov	fp, r2
 8007da6:	4652      	mov	r2, sl
 8007da8:	465b      	mov	r3, fp
 8007daa:	4640      	mov	r0, r8
 8007dac:	4649      	mov	r1, r9
 8007dae:	f7f8 ff93 	bl	8000cd8 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4613      	mov	r3, r2
 8007db8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dc0:	d308      	bcc.n	8007dd4 <UART_SetConfig+0x430>
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc8:	d204      	bcs.n	8007dd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	6a3a      	ldr	r2, [r7, #32]
 8007dd0:	60da      	str	r2, [r3, #12]
 8007dd2:	e0ce      	b.n	8007f72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007dda:	e0ca      	b.n	8007f72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007de4:	d166      	bne.n	8007eb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007de6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d827      	bhi.n	8007e3e <UART_SetConfig+0x49a>
 8007dee:	a201      	add	r2, pc, #4	; (adr r2, 8007df4 <UART_SetConfig+0x450>)
 8007df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e21 	.word	0x08007e21
 8007dfc:	08007e29 	.word	0x08007e29
 8007e00:	08007e3f 	.word	0x08007e3f
 8007e04:	08007e2f 	.word	0x08007e2f
 8007e08:	08007e3f 	.word	0x08007e3f
 8007e0c:	08007e3f 	.word	0x08007e3f
 8007e10:	08007e3f 	.word	0x08007e3f
 8007e14:	08007e37 	.word	0x08007e37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e18:	f7fe fcb0 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8007e1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e1e:	e014      	b.n	8007e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e20:	f7fe fcc2 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 8007e24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e26:	e010      	b.n	8007e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e28:	4b4e      	ldr	r3, [pc, #312]	; (8007f64 <UART_SetConfig+0x5c0>)
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e2c:	e00d      	b.n	8007e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e2e:	f7fe fc37 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8007e32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e34:	e009      	b.n	8007e4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e3c:	e005      	b.n	8007e4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8090 	beq.w	8007f72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	4a44      	ldr	r2, [pc, #272]	; (8007f68 <UART_SetConfig+0x5c4>)
 8007e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e5c:	461a      	mov	r2, r3
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e64:	005a      	lsls	r2, r3, #1
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	085b      	lsrs	r3, r3, #1
 8007e6c:	441a      	add	r2, r3
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e78:	6a3b      	ldr	r3, [r7, #32]
 8007e7a:	2b0f      	cmp	r3, #15
 8007e7c:	d916      	bls.n	8007eac <UART_SetConfig+0x508>
 8007e7e:	6a3b      	ldr	r3, [r7, #32]
 8007e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e84:	d212      	bcs.n	8007eac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	f023 030f 	bic.w	r3, r3, #15
 8007e8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	b29a      	uxth	r2, r3
 8007e9c:	8bfb      	ldrh	r3, [r7, #30]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	8bfa      	ldrh	r2, [r7, #30]
 8007ea8:	60da      	str	r2, [r3, #12]
 8007eaa:	e062      	b.n	8007f72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007eac:	2301      	movs	r3, #1
 8007eae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eb2:	e05e      	b.n	8007f72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007eb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eb8:	2b08      	cmp	r3, #8
 8007eba:	d828      	bhi.n	8007f0e <UART_SetConfig+0x56a>
 8007ebc:	a201      	add	r2, pc, #4	; (adr r2, 8007ec4 <UART_SetConfig+0x520>)
 8007ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec2:	bf00      	nop
 8007ec4:	08007ee9 	.word	0x08007ee9
 8007ec8:	08007ef1 	.word	0x08007ef1
 8007ecc:	08007ef9 	.word	0x08007ef9
 8007ed0:	08007f0f 	.word	0x08007f0f
 8007ed4:	08007eff 	.word	0x08007eff
 8007ed8:	08007f0f 	.word	0x08007f0f
 8007edc:	08007f0f 	.word	0x08007f0f
 8007ee0:	08007f0f 	.word	0x08007f0f
 8007ee4:	08007f07 	.word	0x08007f07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ee8:	f7fe fc48 	bl	800677c <HAL_RCC_GetPCLK1Freq>
 8007eec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eee:	e014      	b.n	8007f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ef0:	f7fe fc5a 	bl	80067a8 <HAL_RCC_GetPCLK2Freq>
 8007ef4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ef6:	e010      	b.n	8007f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <UART_SetConfig+0x5c0>)
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007efc:	e00d      	b.n	8007f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007efe:	f7fe fbcf 	bl	80066a0 <HAL_RCC_GetSysClockFreq>
 8007f02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f04:	e009      	b.n	8007f1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f0c:	e005      	b.n	8007f1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f18:	bf00      	nop
    }

    if (pclk != 0U)
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d028      	beq.n	8007f72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	4a10      	ldr	r2, [pc, #64]	; (8007f68 <UART_SetConfig+0x5c4>)
 8007f26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f2a:	461a      	mov	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	441a      	add	r2, r3
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	2b0f      	cmp	r3, #15
 8007f48:	d910      	bls.n	8007f6c <UART_SetConfig+0x5c8>
 8007f4a:	6a3b      	ldr	r3, [r7, #32]
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f50:	d20c      	bcs.n	8007f6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	b29a      	uxth	r2, r3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60da      	str	r2, [r3, #12]
 8007f5c:	e009      	b.n	8007f72 <UART_SetConfig+0x5ce>
 8007f5e:	bf00      	nop
 8007f60:	40008000 	.word	0x40008000
 8007f64:	00f42400 	.word	0x00f42400
 8007f68:	0800d21c 	.word	0x0800d21c
      }
      else
      {
        ret = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2201      	movs	r2, #1
 8007f76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3730      	adds	r7, #48	; 0x30
 8007f96:	46bd      	mov	sp, r7
 8007f98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa8:	f003 0308 	and.w	r3, r3, #8
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00a      	beq.n	8007fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	f003 0301 	and.w	r3, r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00a      	beq.n	8007fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	430a      	orrs	r2, r1
 8007fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fec:	f003 0302 	and.w	r3, r3, #2
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00a      	beq.n	800802c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	430a      	orrs	r2, r1
 800802a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008030:	f003 0310 	and.w	r3, r3, #16
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00a      	beq.n	800804e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00a      	beq.n	8008070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008078:	2b00      	cmp	r3, #0
 800807a:	d01a      	beq.n	80080b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800809a:	d10a      	bne.n	80080b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	605a      	str	r2, [r3, #4]
  }
}
 80080d4:	bf00      	nop
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b098      	sub	sp, #96	; 0x60
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080f0:	f7fd fa18 	bl	8005524 <HAL_GetTick>
 80080f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f003 0308 	and.w	r3, r3, #8
 8008100:	2b08      	cmp	r3, #8
 8008102:	d12f      	bne.n	8008164 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008108:	9300      	str	r3, [sp, #0]
 800810a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800810c:	2200      	movs	r2, #0
 800810e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 f88e 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d022      	beq.n	8008164 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800812c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800812e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008132:	653b      	str	r3, [r7, #80]	; 0x50
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813c:	647b      	str	r3, [r7, #68]	; 0x44
 800813e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800814a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e6      	bne.n	800811e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2220      	movs	r2, #32
 8008154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e063      	b.n	800822c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b04      	cmp	r3, #4
 8008170:	d149      	bne.n	8008206 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008172:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800817a:	2200      	movs	r2, #0
 800817c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f857 	bl	8008234 <UART_WaitOnFlagUntilTimeout>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d03c      	beq.n	8008206 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	e853 3f00 	ldrex	r3, [r3]
 8008198:	623b      	str	r3, [r7, #32]
   return(result);
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081aa:	633b      	str	r3, [r7, #48]	; 0x30
 80081ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b2:	e841 2300 	strex	r3, r2, [r1]
 80081b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e6      	bne.n	800818c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	e853 3f00 	ldrex	r3, [r3]
 80081cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f023 0301 	bic.w	r3, r3, #1
 80081d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	3308      	adds	r3, #8
 80081dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081de:	61fa      	str	r2, [r7, #28]
 80081e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e2:	69b9      	ldr	r1, [r7, #24]
 80081e4:	69fa      	ldr	r2, [r7, #28]
 80081e6:	e841 2300 	strex	r3, r2, [r1]
 80081ea:	617b      	str	r3, [r7, #20]
   return(result);
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1e5      	bne.n	80081be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008202:	2303      	movs	r3, #3
 8008204:	e012      	b.n	800822c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2220      	movs	r2, #32
 800820a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3758      	adds	r7, #88	; 0x58
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	603b      	str	r3, [r7, #0]
 8008240:	4613      	mov	r3, r2
 8008242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008244:	e04f      	b.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800824c:	d04b      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800824e:	f7fd f969 	bl	8005524 <HAL_GetTick>
 8008252:	4602      	mov	r2, r0
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	429a      	cmp	r2, r3
 800825c:	d302      	bcc.n	8008264 <UART_WaitOnFlagUntilTimeout+0x30>
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e04e      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0304 	and.w	r3, r3, #4
 8008272:	2b00      	cmp	r3, #0
 8008274:	d037      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b80      	cmp	r3, #128	; 0x80
 800827a:	d034      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b40      	cmp	r3, #64	; 0x40
 8008280:	d031      	beq.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f003 0308 	and.w	r3, r3, #8
 800828c:	2b08      	cmp	r3, #8
 800828e:	d110      	bne.n	80082b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2208      	movs	r2, #8
 8008296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008298:	68f8      	ldr	r0, [r7, #12]
 800829a:	f000 f95b 	bl	8008554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2208      	movs	r2, #8
 80082a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	e029      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c0:	d111      	bne.n	80082e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f941 	bl	8008554 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2220      	movs	r2, #32
 80082d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e00f      	b.n	8008306 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69da      	ldr	r2, [r3, #28]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	4013      	ands	r3, r2
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	bf0c      	ite	eq
 80082f6:	2301      	moveq	r3, #1
 80082f8:	2300      	movne	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	461a      	mov	r2, r3
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	429a      	cmp	r2, r3
 8008302:	d0a0      	beq.n	8008246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
	...

08008310 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008310:	b480      	push	{r7}
 8008312:	b0a3      	sub	sp, #140	; 0x8c
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	4613      	mov	r3, r2
 800831c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	88fa      	ldrh	r2, [r7, #6]
 8008328:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	88fa      	ldrh	r2, [r7, #6]
 8008330:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2200      	movs	r2, #0
 8008338:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008342:	d10e      	bne.n	8008362 <UART_Start_Receive_IT+0x52>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d105      	bne.n	8008358 <UART_Start_Receive_IT+0x48>
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008352:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008356:	e02d      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	22ff      	movs	r2, #255	; 0xff
 800835c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008360:	e028      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10d      	bne.n	8008386 <UART_Start_Receive_IT+0x76>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d104      	bne.n	800837c <UART_Start_Receive_IT+0x6c>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	22ff      	movs	r2, #255	; 0xff
 8008376:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800837a:	e01b      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	227f      	movs	r2, #127	; 0x7f
 8008380:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008384:	e016      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838e:	d10d      	bne.n	80083ac <UART_Start_Receive_IT+0x9c>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d104      	bne.n	80083a2 <UART_Start_Receive_IT+0x92>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	227f      	movs	r2, #127	; 0x7f
 800839c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083a0:	e008      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	223f      	movs	r2, #63	; 0x3f
 80083a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083aa:	e003      	b.n	80083b4 <UART_Start_Receive_IT+0xa4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2200      	movs	r2, #0
 80083b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2222      	movs	r2, #34	; 0x22
 80083c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083ce:	e853 3f00 	ldrex	r3, [r3]
 80083d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	3308      	adds	r3, #8
 80083e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083e8:	673a      	str	r2, [r7, #112]	; 0x70
 80083ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80083ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083f0:	e841 2300 	strex	r3, r2, [r1]
 80083f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80083f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1e3      	bne.n	80083c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008404:	d14f      	bne.n	80084a6 <UART_Start_Receive_IT+0x196>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800840c:	88fa      	ldrh	r2, [r7, #6]
 800840e:	429a      	cmp	r2, r3
 8008410:	d349      	bcc.n	80084a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800841a:	d107      	bne.n	800842c <UART_Start_Receive_IT+0x11c>
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	691b      	ldr	r3, [r3, #16]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d103      	bne.n	800842c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a47      	ldr	r2, [pc, #284]	; (8008544 <UART_Start_Receive_IT+0x234>)
 8008428:	675a      	str	r2, [r3, #116]	; 0x74
 800842a:	e002      	b.n	8008432 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a46      	ldr	r2, [pc, #280]	; (8008548 <UART_Start_Receive_IT+0x238>)
 8008430:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d01a      	beq.n	8008470 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008442:	e853 3f00 	ldrex	r3, [r3]
 8008446:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008448:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800844a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800844e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	461a      	mov	r2, r3
 8008458:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800845c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800845e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008460:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008464:	e841 2300 	strex	r3, r2, [r1]
 8008468:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800846a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1e4      	bne.n	800843a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	3308      	adds	r3, #8
 8008476:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008486:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	3308      	adds	r3, #8
 800848e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008490:	64ba      	str	r2, [r7, #72]	; 0x48
 8008492:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800849e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e5      	bne.n	8008470 <UART_Start_Receive_IT+0x160>
 80084a4:	e046      	b.n	8008534 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ae:	d107      	bne.n	80084c0 <UART_Start_Receive_IT+0x1b0>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d103      	bne.n	80084c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	4a24      	ldr	r2, [pc, #144]	; (800854c <UART_Start_Receive_IT+0x23c>)
 80084bc:	675a      	str	r2, [r3, #116]	; 0x74
 80084be:	e002      	b.n	80084c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4a23      	ldr	r2, [pc, #140]	; (8008550 <UART_Start_Receive_IT+0x240>)
 80084c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d019      	beq.n	8008502 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d6:	e853 3f00 	ldrex	r3, [r3]
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80084e2:	677b      	str	r3, [r7, #116]	; 0x74
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
 80084ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084f4:	e841 2300 	strex	r3, r2, [r1]
 80084f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d1e6      	bne.n	80084ce <UART_Start_Receive_IT+0x1be>
 8008500:	e018      	b.n	8008534 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	e853 3f00 	ldrex	r3, [r3]
 800850e:	613b      	str	r3, [r7, #16]
   return(result);
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	f043 0320 	orr.w	r3, r3, #32
 8008516:	67bb      	str	r3, [r7, #120]	; 0x78
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008520:	623b      	str	r3, [r7, #32]
 8008522:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008524:	69f9      	ldr	r1, [r7, #28]
 8008526:	6a3a      	ldr	r2, [r7, #32]
 8008528:	e841 2300 	strex	r3, r2, [r1]
 800852c:	61bb      	str	r3, [r7, #24]
   return(result);
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e6      	bne.n	8008502 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008534:	2300      	movs	r3, #0
}
 8008536:	4618      	mov	r0, r3
 8008538:	378c      	adds	r7, #140	; 0x8c
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	08008d75 	.word	0x08008d75
 8008548:	08008a15 	.word	0x08008a15
 800854c:	0800885d 	.word	0x0800885d
 8008550:	080086a5 	.word	0x080086a5

08008554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008554:	b480      	push	{r7}
 8008556:	b095      	sub	sp, #84	; 0x54
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008570:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	461a      	mov	r2, r3
 8008578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857a:	643b      	str	r3, [r7, #64]	; 0x40
 800857c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008580:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008582:	e841 2300 	strex	r3, r2, [r1]
 8008586:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800858a:	2b00      	cmp	r3, #0
 800858c:	d1e6      	bne.n	800855c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3308      	adds	r3, #8
 8008594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	e853 3f00 	ldrex	r3, [r3]
 800859c:	61fb      	str	r3, [r7, #28]
   return(result);
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085a4:	f023 0301 	bic.w	r3, r3, #1
 80085a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3308      	adds	r3, #8
 80085b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085ba:	e841 2300 	strex	r3, r2, [r1]
 80085be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1e3      	bne.n	800858e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d118      	bne.n	8008600 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	60bb      	str	r3, [r7, #8]
   return(result);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	647b      	str	r3, [r7, #68]	; 0x44
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	461a      	mov	r2, r3
 80085ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085ec:	61bb      	str	r3, [r7, #24]
 80085ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f0:	6979      	ldr	r1, [r7, #20]
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	e841 2300 	strex	r3, r2, [r1]
 80085f8:	613b      	str	r3, [r7, #16]
   return(result);
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1e6      	bne.n	80085ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2220      	movs	r2, #32
 8008604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008614:	bf00      	nop
 8008616:	3754      	adds	r7, #84	; 0x54
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800862c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2200      	movs	r2, #0
 800863a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	f7ff f99a 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	e853 3f00 	ldrex	r3, [r3]
 8008660:	60bb      	str	r3, [r7, #8]
   return(result);
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008668:	61fb      	str	r3, [r7, #28]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	461a      	mov	r2, r3
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	61bb      	str	r3, [r7, #24]
 8008674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6979      	ldr	r1, [r7, #20]
 8008678:	69ba      	ldr	r2, [r7, #24]
 800867a:	e841 2300 	strex	r3, r2, [r1]
 800867e:	613b      	str	r3, [r7, #16]
   return(result);
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1e6      	bne.n	8008654 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2220      	movs	r2, #32
 800868a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f7ff f965 	bl	8007964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800869a:	bf00      	nop
 800869c:	3720      	adds	r7, #32
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
	...

080086a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b09c      	sub	sp, #112	; 0x70
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086bc:	2b22      	cmp	r3, #34	; 0x22
 80086be:	f040 80be 	bne.w	800883e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086d0:	b2d9      	uxtb	r1, r3
 80086d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086dc:	400a      	ands	r2, r1
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e6:	1c5a      	adds	r2, r3, #1
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 80a1 	bne.w	800884e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800871a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800871c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008720:	66bb      	str	r3, [r7, #104]	; 0x68
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800872a:	65bb      	str	r3, [r7, #88]	; 0x58
 800872c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008730:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008732:	e841 2300 	strex	r3, r2, [r1]
 8008736:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008738:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1e6      	bne.n	800870c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3308      	adds	r3, #8
 8008744:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800874e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008750:	f023 0301 	bic.w	r3, r3, #1
 8008754:	667b      	str	r3, [r7, #100]	; 0x64
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3308      	adds	r3, #8
 800875c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800875e:	647a      	str	r2, [r7, #68]	; 0x44
 8008760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008764:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e5      	bne.n	800873e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2220      	movs	r2, #32
 8008776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a33      	ldr	r2, [pc, #204]	; (8008858 <UART_RxISR_8BIT+0x1b4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d01f      	beq.n	80087d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800879a:	2b00      	cmp	r3, #0
 800879c:	d018      	beq.n	80087d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	e853 3f00 	ldrex	r3, [r3]
 80087aa:	623b      	str	r3, [r7, #32]
   return(result);
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087b2:	663b      	str	r3, [r7, #96]	; 0x60
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	461a      	mov	r2, r3
 80087ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087bc:	633b      	str	r3, [r7, #48]	; 0x30
 80087be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087c4:	e841 2300 	strex	r3, r2, [r1]
 80087c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1e6      	bne.n	800879e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d12e      	bne.n	8008836 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	e853 3f00 	ldrex	r3, [r3]
 80087ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f023 0310 	bic.w	r3, r3, #16
 80087f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	461a      	mov	r2, r3
 80087fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087fc:	61fb      	str	r3, [r7, #28]
 80087fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008800:	69b9      	ldr	r1, [r7, #24]
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	e841 2300 	strex	r3, r2, [r1]
 8008808:	617b      	str	r3, [r7, #20]
   return(result);
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e6      	bne.n	80087de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	69db      	ldr	r3, [r3, #28]
 8008816:	f003 0310 	and.w	r3, r3, #16
 800881a:	2b10      	cmp	r3, #16
 800881c:	d103      	bne.n	8008826 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2210      	movs	r2, #16
 8008824:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800882c:	4619      	mov	r1, r3
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7ff f8ac 	bl	800798c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008834:	e00b      	b.n	800884e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f7fc fc0a 	bl	8005050 <HAL_UART_RxCpltCallback>
}
 800883c:	e007      	b.n	800884e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	699a      	ldr	r2, [r3, #24]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0208 	orr.w	r2, r2, #8
 800884c:	619a      	str	r2, [r3, #24]
}
 800884e:	bf00      	nop
 8008850:	3770      	adds	r7, #112	; 0x70
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
 8008856:	bf00      	nop
 8008858:	40008000 	.word	0x40008000

0800885c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b09c      	sub	sp, #112	; 0x70
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800886a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008874:	2b22      	cmp	r3, #34	; 0x22
 8008876:	f040 80be 	bne.w	80089f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008880:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008888:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800888a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800888e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8008892:	4013      	ands	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008898:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889e:	1c9a      	adds	r2, r3, #2
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	3b01      	subs	r3, #1
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f040 80a1 	bne.w	8008a06 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088cc:	e853 3f00 	ldrex	r3, [r3]
 80088d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d8:	667b      	str	r3, [r7, #100]	; 0x64
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088e2:	657b      	str	r3, [r7, #84]	; 0x54
 80088e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ea:	e841 2300 	strex	r3, r2, [r1]
 80088ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1e6      	bne.n	80088c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	3308      	adds	r3, #8
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	f023 0301 	bic.w	r3, r3, #1
 800890c:	663b      	str	r3, [r7, #96]	; 0x60
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	3308      	adds	r3, #8
 8008914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008916:	643a      	str	r2, [r7, #64]	; 0x40
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800891a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800891c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800891e:	e841 2300 	strex	r3, r2, [r1]
 8008922:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	2b00      	cmp	r3, #0
 8008928:	d1e5      	bne.n	80088f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2220      	movs	r2, #32
 800892e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2200      	movs	r2, #0
 800893c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a33      	ldr	r2, [pc, #204]	; (8008a10 <UART_RxISR_16BIT+0x1b4>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01f      	beq.n	8008988 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	61fb      	str	r3, [r7, #28]
   return(result);
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800896a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008976:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800897a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800898c:	2b01      	cmp	r3, #1
 800898e:	d12e      	bne.n	80089ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	e853 3f00 	ldrex	r3, [r3]
 80089a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0310 	bic.w	r3, r3, #16
 80089aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	461a      	mov	r2, r3
 80089b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b8:	6979      	ldr	r1, [r7, #20]
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	e841 2300 	strex	r3, r2, [r1]
 80089c0:	613b      	str	r3, [r7, #16]
   return(result);
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d1e6      	bne.n	8008996 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	69db      	ldr	r3, [r3, #28]
 80089ce:	f003 0310 	and.w	r3, r3, #16
 80089d2:	2b10      	cmp	r3, #16
 80089d4:	d103      	bne.n	80089de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2210      	movs	r2, #16
 80089dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089e4:	4619      	mov	r1, r3
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f7fe ffd0 	bl	800798c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089ec:	e00b      	b.n	8008a06 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7fc fb2e 	bl	8005050 <HAL_UART_RxCpltCallback>
}
 80089f4:	e007      	b.n	8008a06 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	699a      	ldr	r2, [r3, #24]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f042 0208 	orr.w	r2, r2, #8
 8008a04:	619a      	str	r2, [r3, #24]
}
 8008a06:	bf00      	nop
 8008a08:	3770      	adds	r7, #112	; 0x70
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	40008000 	.word	0x40008000

08008a14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b0ac      	sub	sp, #176	; 0xb0
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a4a:	2b22      	cmp	r3, #34	; 0x22
 8008a4c:	f040 8182 	bne.w	8008d54 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a56:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a5a:	e125      	b.n	8008ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a62:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a66:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008a6a:	b2d9      	uxtb	r1, r3
 8008a6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a76:	400a      	ands	r2, r1
 8008a78:	b2d2      	uxtb	r2, r2
 8008a7a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	b29a      	uxth	r2, r3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d053      	beq.n	8008b56 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ab2:	f003 0301 	and.w	r3, r3, #1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d011      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0xca>
 8008aba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00b      	beq.n	8008ade <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2201      	movs	r2, #1
 8008acc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ad4:	f043 0201 	orr.w	r2, r3, #1
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ae2:	f003 0302 	and.w	r3, r3, #2
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d011      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00b      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2202      	movs	r2, #2
 8008afc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b04:	f043 0204 	orr.w	r2, r3, #4
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d011      	beq.n	8008b3e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2204      	movs	r2, #4
 8008b2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b34:	f043 0202 	orr.w	r2, r3, #2
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d006      	beq.n	8008b56 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7fe ff15 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f040 80a2 	bne.w	8008ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b88:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008b8c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008b94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e4      	bne.n	8008b64 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba4:	e853 3f00 	ldrex	r3, [r3]
 8008ba8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008baa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb0:	f023 0301 	bic.w	r3, r3, #1
 8008bb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3308      	adds	r3, #8
 8008bbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bc2:	66ba      	str	r2, [r7, #104]	; 0x68
 8008bc4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bca:	e841 2300 	strex	r3, r2, [r1]
 8008bce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1e1      	bne.n	8008b9a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2200      	movs	r2, #0
 8008be2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a5f      	ldr	r2, [pc, #380]	; (8008d6c <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d021      	beq.n	8008c38 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d01a      	beq.n	8008c38 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0a:	e853 3f00 	ldrex	r3, [r3]
 8008c0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c24:	657b      	str	r3, [r7, #84]	; 0x54
 8008c26:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e4      	bne.n	8008c02 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d130      	bne.n	8008ca2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c4e:	e853 3f00 	ldrex	r3, [r3]
 8008c52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c56:	f023 0310 	bic.w	r3, r3, #16
 8008c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c68:	643b      	str	r3, [r7, #64]	; 0x40
 8008c6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c70:	e841 2300 	strex	r3, r2, [r1]
 8008c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1e4      	bne.n	8008c46 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	69db      	ldr	r3, [r3, #28]
 8008c82:	f003 0310 	and.w	r3, r3, #16
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d103      	bne.n	8008c92 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	2210      	movs	r2, #16
 8008c90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7fe fe76 	bl	800798c <HAL_UARTEx_RxEventCallback>
 8008ca0:	e002      	b.n	8008ca8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fc f9d4 	bl	8005050 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ca8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cb4:	f003 0320 	and.w	r3, r3, #32
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f47f aecf 	bne.w	8008a5c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cc8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d049      	beq.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0x350>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cd6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d242      	bcs.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	e853 3f00 	ldrex	r3, [r3]
 8008cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	3308      	adds	r3, #8
 8008cfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e3      	bne.n	8008cde <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a15      	ldr	r2, [pc, #84]	; (8008d70 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f043 0320 	orr.w	r3, r3, #32
 8008d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	461a      	mov	r2, r3
 8008d3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6979      	ldr	r1, [r7, #20]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e4      	bne.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d52:	e007      	b.n	8008d64 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	699a      	ldr	r2, [r3, #24]
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f042 0208 	orr.w	r2, r2, #8
 8008d62:	619a      	str	r2, [r3, #24]
}
 8008d64:	bf00      	nop
 8008d66:	37b0      	adds	r7, #176	; 0xb0
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	40008000 	.word	0x40008000
 8008d70:	080086a5 	.word	0x080086a5

08008d74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b0ae      	sub	sp, #184	; 0xb8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69db      	ldr	r3, [r3, #28]
 8008d8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008daa:	2b22      	cmp	r3, #34	; 0x22
 8008dac:	f040 8186 	bne.w	80090bc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008db6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008dba:	e129      	b.n	8009010 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008dce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008dd2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de4:	1c9a      	adds	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d053      	beq.n	8008eba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e16:	f003 0301 	and.w	r3, r3, #1
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d011      	beq.n	8008e42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d00b      	beq.n	8008e42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e38:	f043 0201 	orr.w	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d011      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d00b      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e68:	f043 0204 	orr.w	r2, r3, #4
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e76:	f003 0304 	and.w	r3, r3, #4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d011      	beq.n	8008ea2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008e7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e82:	f003 0301 	and.w	r3, r3, #1
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2204      	movs	r2, #4
 8008e90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e98:	f043 0202 	orr.w	r2, r3, #2
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d006      	beq.n	8008eba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7fe fd63 	bl	8007978 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 80a4 	bne.w	8009010 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ed0:	e853 3f00 	ldrex	r3, [r3]
 8008ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008edc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008eee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ef6:	e841 2300 	strex	r3, r2, [r1]
 8008efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1e2      	bne.n	8008ec8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	3308      	adds	r3, #8
 8008f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f0c:	e853 3f00 	ldrex	r3, [r3]
 8008f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3308      	adds	r3, #8
 8008f26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f32:	e841 2300 	strex	r3, r2, [r1]
 8008f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1e1      	bne.n	8008f02 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2220      	movs	r2, #32
 8008f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a5f      	ldr	r2, [pc, #380]	; (80090d4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d021      	beq.n	8008fa0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d01a      	beq.n	8008fa0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	461a      	mov	r2, r3
 8008f88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f94:	e841 2300 	strex	r3, r2, [r1]
 8008f98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1e4      	bne.n	8008f6a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d130      	bne.n	800900a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	e853 3f00 	ldrex	r3, [r3]
 8008fba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fbe:	f023 0310 	bic.w	r3, r3, #16
 8008fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	461a      	mov	r2, r3
 8008fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fd8:	e841 2300 	strex	r3, r2, [r1]
 8008fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d1e4      	bne.n	8008fae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	f003 0310 	and.w	r3, r3, #16
 8008fee:	2b10      	cmp	r3, #16
 8008ff0:	d103      	bne.n	8008ffa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	2210      	movs	r2, #16
 8008ff8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009000:	4619      	mov	r1, r3
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f7fe fcc2 	bl	800798c <HAL_UARTEx_RxEventCallback>
 8009008:	e002      	b.n	8009010 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f7fc f820 	bl	8005050 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009010:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009014:	2b00      	cmp	r3, #0
 8009016:	d006      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009018:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800901c:	f003 0320 	and.w	r3, r3, #32
 8009020:	2b00      	cmp	r3, #0
 8009022:	f47f aecb 	bne.w	8008dbc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800902c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009030:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009034:	2b00      	cmp	r3, #0
 8009036:	d049      	beq.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800903e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009042:	429a      	cmp	r2, r3
 8009044:	d242      	bcs.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	3308      	adds	r3, #8
 800904c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	e853 3f00 	ldrex	r3, [r3]
 8009054:	623b      	str	r3, [r7, #32]
   return(result);
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800905c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800906a:	633a      	str	r2, [r7, #48]	; 0x30
 800906c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009072:	e841 2300 	strex	r3, r2, [r1]
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1e3      	bne.n	8009046 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a15      	ldr	r2, [pc, #84]	; (80090d8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009082:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	60fb      	str	r3, [r7, #12]
   return(result);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	f043 0320 	orr.w	r3, r3, #32
 8009098:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090a6:	61fb      	str	r3, [r7, #28]
 80090a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	69b9      	ldr	r1, [r7, #24]
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	617b      	str	r3, [r7, #20]
   return(result);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090ba:	e007      	b.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f042 0208 	orr.w	r2, r2, #8
 80090ca:	619a      	str	r2, [r3, #24]
}
 80090cc:	bf00      	nop
 80090ce:	37b8      	adds	r7, #184	; 0xb8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}
 80090d4:	40008000 	.word	0x40008000
 80090d8:	0800885d 	.word	0x0800885d

080090dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090f8:	bf00      	nop
 80090fa:	370c      	adds	r7, #12
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009126:	2b01      	cmp	r3, #1
 8009128:	d101      	bne.n	800912e <HAL_UARTEx_DisableFifoMode+0x16>
 800912a:	2302      	movs	r3, #2
 800912c:	e027      	b.n	800917e <HAL_UARTEx_DisableFifoMode+0x66>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2201      	movs	r2, #1
 8009132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2224      	movs	r2, #36	; 0x24
 800913a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0201 	bic.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800915c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2220      	movs	r2, #32
 8009170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800919a:	2b01      	cmp	r3, #1
 800919c:	d101      	bne.n	80091a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800919e:	2302      	movs	r3, #2
 80091a0:	e02d      	b.n	80091fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2201      	movs	r2, #1
 80091a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2224      	movs	r2, #36	; 0x24
 80091ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f022 0201 	bic.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	430a      	orrs	r2, r1
 80091dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f850 	bl	8009284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68fa      	ldr	r2, [r7, #12]
 80091ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2220      	movs	r2, #32
 80091f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3710      	adds	r7, #16
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b084      	sub	sp, #16
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009216:	2b01      	cmp	r3, #1
 8009218:	d101      	bne.n	800921e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800921a:	2302      	movs	r3, #2
 800921c:	e02d      	b.n	800927a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2224      	movs	r2, #36	; 0x24
 800922a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	681a      	ldr	r2, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f022 0201 	bic.w	r2, r2, #1
 8009244:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f812 	bl	8009284 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3710      	adds	r7, #16
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}
	...

08009284 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009290:	2b00      	cmp	r3, #0
 8009292:	d108      	bne.n	80092a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092a4:	e031      	b.n	800930a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092a6:	2308      	movs	r3, #8
 80092a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092aa:	2308      	movs	r3, #8
 80092ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	0e5b      	lsrs	r3, r3, #25
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	f003 0307 	and.w	r3, r3, #7
 80092bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	0f5b      	lsrs	r3, r3, #29
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092ce:	7bbb      	ldrb	r3, [r7, #14]
 80092d0:	7b3a      	ldrb	r2, [r7, #12]
 80092d2:	4911      	ldr	r1, [pc, #68]	; (8009318 <UARTEx_SetNbDataToProcess+0x94>)
 80092d4:	5c8a      	ldrb	r2, [r1, r2]
 80092d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80092da:	7b3a      	ldrb	r2, [r7, #12]
 80092dc:	490f      	ldr	r1, [pc, #60]	; (800931c <UARTEx_SetNbDataToProcess+0x98>)
 80092de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092ec:	7bfb      	ldrb	r3, [r7, #15]
 80092ee:	7b7a      	ldrb	r2, [r7, #13]
 80092f0:	4909      	ldr	r1, [pc, #36]	; (8009318 <UARTEx_SetNbDataToProcess+0x94>)
 80092f2:	5c8a      	ldrb	r2, [r1, r2]
 80092f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092f8:	7b7a      	ldrb	r2, [r7, #13]
 80092fa:	4908      	ldr	r1, [pc, #32]	; (800931c <UARTEx_SetNbDataToProcess+0x98>)
 80092fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800930a:	bf00      	nop
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	0800d234 	.word	0x0800d234
 800931c:	0800d23c 	.word	0x0800d23c

08009320 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009320:	b480      	push	{r7}
 8009322:	b08b      	sub	sp, #44	; 0x2c
 8009324:	af00      	add	r7, sp, #0
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	60b9      	str	r1, [r7, #8]
 800932a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	fa93 f3a3 	rbit	r3, r3
 800933a:	613b      	str	r3, [r7, #16]
  return result;
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009340:	69bb      	ldr	r3, [r7, #24]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d101      	bne.n	800934a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8009346:	2320      	movs	r3, #32
 8009348:	e003      	b.n	8009352 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	fab3 f383 	clz	r3, r3
 8009350:	b2db      	uxtb	r3, r3
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	2103      	movs	r1, #3
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	43db      	mvns	r3, r3
 800935c:	401a      	ands	r2, r3
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	fa93 f3a3 	rbit	r3, r3
 8009368:	61fb      	str	r3, [r7, #28]
  return result;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800936e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8009374:	2320      	movs	r3, #32
 8009376:	e003      	b.n	8009380 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	fab3 f383 	clz	r3, r3
 800937e:	b2db      	uxtb	r3, r3
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	601a      	str	r2, [r3, #0]
}
 800938e:	bf00      	nop
 8009390:	372c      	adds	r7, #44	; 0x2c
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr

0800939a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800939a:	b480      	push	{r7}
 800939c:	b085      	sub	sp, #20
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685a      	ldr	r2, [r3, #4]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	43db      	mvns	r3, r3
 80093ae:	401a      	ands	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6879      	ldr	r1, [r7, #4]
 80093b4:	fb01 f303 	mul.w	r3, r1, r3
 80093b8:	431a      	orrs	r2, r3
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	605a      	str	r2, [r3, #4]
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80093ca:	b480      	push	{r7}
 80093cc:	b08b      	sub	sp, #44	; 0x2c
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60f8      	str	r0, [r7, #12]
 80093d2:	60b9      	str	r1, [r7, #8]
 80093d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	689a      	ldr	r2, [r3, #8]
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	fa93 f3a3 	rbit	r3, r3
 80093e4:	613b      	str	r3, [r7, #16]
  return result;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80093f0:	2320      	movs	r3, #32
 80093f2:	e003      	b.n	80093fc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	fab3 f383 	clz	r3, r3
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	2103      	movs	r1, #3
 8009400:	fa01 f303 	lsl.w	r3, r1, r3
 8009404:	43db      	mvns	r3, r3
 8009406:	401a      	ands	r2, r3
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800940c:	6a3b      	ldr	r3, [r7, #32]
 800940e:	fa93 f3a3 	rbit	r3, r3
 8009412:	61fb      	str	r3, [r7, #28]
  return result;
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800941a:	2b00      	cmp	r3, #0
 800941c:	d101      	bne.n	8009422 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800941e:	2320      	movs	r3, #32
 8009420:	e003      	b.n	800942a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	fab3 f383 	clz	r3, r3
 8009428:	b2db      	uxtb	r3, r3
 800942a:	005b      	lsls	r3, r3, #1
 800942c:	6879      	ldr	r1, [r7, #4]
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	431a      	orrs	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009438:	bf00      	nop
 800943a:	372c      	adds	r7, #44	; 0x2c
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8009444:	b480      	push	{r7}
 8009446:	b08b      	sub	sp, #44	; 0x2c
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	68da      	ldr	r2, [r3, #12]
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	fa93 f3a3 	rbit	r3, r3
 800945e:	613b      	str	r3, [r7, #16]
  return result;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800946a:	2320      	movs	r3, #32
 800946c:	e003      	b.n	8009476 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	fab3 f383 	clz	r3, r3
 8009474:	b2db      	uxtb	r3, r3
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	2103      	movs	r1, #3
 800947a:	fa01 f303 	lsl.w	r3, r1, r3
 800947e:	43db      	mvns	r3, r3
 8009480:	401a      	ands	r2, r3
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	fa93 f3a3 	rbit	r3, r3
 800948c:	61fb      	str	r3, [r7, #28]
  return result;
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	d101      	bne.n	800949c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009498:	2320      	movs	r3, #32
 800949a:	e003      	b.n	80094a4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800949c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949e:	fab3 f383 	clz	r3, r3
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	005b      	lsls	r3, r3, #1
 80094a6:	6879      	ldr	r1, [r7, #4]
 80094a8:	fa01 f303 	lsl.w	r3, r1, r3
 80094ac:	431a      	orrs	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	60da      	str	r2, [r3, #12]
}
 80094b2:	bf00      	nop
 80094b4:	372c      	adds	r7, #44	; 0x2c
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80094be:	b480      	push	{r7}
 80094c0:	b08b      	sub	sp, #44	; 0x2c
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a1a      	ldr	r2, [r3, #32]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	fa93 f3a3 	rbit	r3, r3
 80094d8:	613b      	str	r3, [r7, #16]
  return result;
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094de:	69bb      	ldr	r3, [r7, #24]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d101      	bne.n	80094e8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80094e4:	2320      	movs	r3, #32
 80094e6:	e003      	b.n	80094f0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80094e8:	69bb      	ldr	r3, [r7, #24]
 80094ea:	fab3 f383 	clz	r3, r3
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	210f      	movs	r1, #15
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	43db      	mvns	r3, r3
 80094fa:	401a      	ands	r2, r3
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009500:	6a3b      	ldr	r3, [r7, #32]
 8009502:	fa93 f3a3 	rbit	r3, r3
 8009506:	61fb      	str	r3, [r7, #28]
  return result;
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800950c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950e:	2b00      	cmp	r3, #0
 8009510:	d101      	bne.n	8009516 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009512:	2320      	movs	r3, #32
 8009514:	e003      	b.n	800951e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	fab3 f383 	clz	r3, r3
 800951c:	b2db      	uxtb	r3, r3
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	fa01 f303 	lsl.w	r3, r1, r3
 8009526:	431a      	orrs	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800952c:	bf00      	nop
 800952e:	372c      	adds	r7, #44	; 0x2c
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009538:	b480      	push	{r7}
 800953a:	b08b      	sub	sp, #44	; 0x2c
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	0a1b      	lsrs	r3, r3, #8
 800954c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	fa93 f3a3 	rbit	r3, r3
 8009554:	613b      	str	r3, [r7, #16]
  return result;
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009560:	2320      	movs	r3, #32
 8009562:	e003      	b.n	800956c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	fab3 f383 	clz	r3, r3
 800956a:	b2db      	uxtb	r3, r3
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	210f      	movs	r1, #15
 8009570:	fa01 f303 	lsl.w	r3, r1, r3
 8009574:	43db      	mvns	r3, r3
 8009576:	401a      	ands	r2, r3
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	0a1b      	lsrs	r3, r3, #8
 800957c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800957e:	6a3b      	ldr	r3, [r7, #32]
 8009580:	fa93 f3a3 	rbit	r3, r3
 8009584:	61fb      	str	r3, [r7, #28]
  return result;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009590:	2320      	movs	r3, #32
 8009592:	e003      	b.n	800959c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8009594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009596:	fab3 f383 	clz	r3, r3
 800959a:	b2db      	uxtb	r3, r3
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	fa01 f303 	lsl.w	r3, r1, r3
 80095a4:	431a      	orrs	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80095aa:	bf00      	nop
 80095ac:	372c      	adds	r7, #44	; 0x2c
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b088      	sub	sp, #32
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	fa93 f3a3 	rbit	r3, r3
 80095cc:	60fb      	str	r3, [r7, #12]
  return result;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d101      	bne.n	80095dc <LL_GPIO_Init+0x26>
    return 32U;
 80095d8:	2320      	movs	r3, #32
 80095da:	e003      	b.n	80095e4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	fab3 f383 	clz	r3, r3
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80095e6:	e048      	b.n	800967a <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	2101      	movs	r1, #1
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	fa01 f303 	lsl.w	r3, r1, r3
 80095f4:	4013      	ands	r3, r2
 80095f6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d03a      	beq.n	8009674 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	2b01      	cmp	r3, #1
 8009604:	d003      	beq.n	800960e <LL_GPIO_Init+0x58>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d10e      	bne.n	800962c <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	461a      	mov	r2, r3
 8009614:	69b9      	ldr	r1, [r7, #24]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f7ff fed7 	bl	80093ca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	461a      	mov	r2, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff feb7 	bl	800939a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	461a      	mov	r2, r3
 8009632:	69b9      	ldr	r1, [r7, #24]
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f7ff ff05 	bl	8009444 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d111      	bne.n	8009666 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2bff      	cmp	r3, #255	; 0xff
 8009646:	d807      	bhi.n	8009658 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	461a      	mov	r2, r3
 800964e:	69b9      	ldr	r1, [r7, #24]
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff ff34 	bl	80094be <LL_GPIO_SetAFPin_0_7>
 8009656:	e006      	b.n	8009666 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	695b      	ldr	r3, [r3, #20]
 800965c:	461a      	mov	r2, r3
 800965e:	69b9      	ldr	r1, [r7, #24]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f7ff ff69 	bl	8009538 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	461a      	mov	r2, r3
 800966c:	69b9      	ldr	r1, [r7, #24]
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f7ff fe56 	bl	8009320 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	3301      	adds	r3, #1
 8009678:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	fa22 f303 	lsr.w	r3, r2, r3
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1af      	bne.n	80095e8 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3720      	adds	r7, #32
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <LL_I2C_Enable>:
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f043 0201 	orr.w	r2, r3, #1
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	601a      	str	r2, [r3, #0]
}
 80096a6:	bf00      	nop
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <LL_I2C_Disable>:
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f023 0201 	bic.w	r2, r3, #1
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	601a      	str	r2, [r3, #0]
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <LL_I2C_ConfigFilters>:
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	60f8      	str	r0, [r7, #12]
 80096da:	60b9      	str	r1, [r7, #8]
 80096dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	0219      	lsls	r1, r3, #8
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	430b      	orrs	r3, r1
 80096ee:	431a      	orrs	r2, r3
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <LL_I2C_SetOwnAddress1>:
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009714:	f023 0307 	bic.w	r3, r3, #7
 8009718:	68b9      	ldr	r1, [r7, #8]
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	430a      	orrs	r2, r1
 800971e:	431a      	orrs	r2, r3
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	609a      	str	r2, [r3, #8]
}
 8009724:	bf00      	nop
 8009726:	3714      	adds	r7, #20
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <LL_I2C_EnableOwnAddress1>:
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	609a      	str	r2, [r3, #8]
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <LL_I2C_DisableOwnAddress1>:
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	609a      	str	r2, [r3, #8]
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <LL_I2C_SetTiming>:
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	611a      	str	r2, [r3, #16]
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <LL_I2C_SetMode>:
{
 800978c:	b480      	push	{r7}
 800978e:	b083      	sub	sp, #12
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	431a      	orrs	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	601a      	str	r2, [r3, #0]
}
 80097a6:	bf00      	nop
 80097a8:	370c      	adds	r7, #12
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <LL_I2C_AcknowledgeNextData>:
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	431a      	orrs	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	605a      	str	r2, [r3, #4]
}
 80097cc:	bf00      	nop
 80097ce:	370c      	adds	r7, #12
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f7ff ff65 	bl	80096b2 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	6899      	ldr	r1, [r3, #8]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	461a      	mov	r2, r3
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f7ff ff6d 	bl	80096d2 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	4619      	mov	r1, r3
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f7ff ffb6 	bl	8009770 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff ff44 	bl	8009692 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ffa0 	bl	8009750 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6919      	ldr	r1, [r3, #16]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	461a      	mov	r2, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff70 	bl	8009700 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	691b      	ldr	r3, [r3, #16]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f7ff ff81 	bl	8009730 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff ffa9 	bl	800978c <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	695b      	ldr	r3, [r3, #20]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f7ff ffb6 	bl	80097b2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8009846:	2300      	movs	r3, #0
}
 8009848:	4618      	mov	r0, r3
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <__cvt>:
 8009850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	ec55 4b10 	vmov	r4, r5, d0
 8009858:	2d00      	cmp	r5, #0
 800985a:	460e      	mov	r6, r1
 800985c:	4619      	mov	r1, r3
 800985e:	462b      	mov	r3, r5
 8009860:	bfbb      	ittet	lt
 8009862:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009866:	461d      	movlt	r5, r3
 8009868:	2300      	movge	r3, #0
 800986a:	232d      	movlt	r3, #45	; 0x2d
 800986c:	700b      	strb	r3, [r1, #0]
 800986e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009870:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009874:	4691      	mov	r9, r2
 8009876:	f023 0820 	bic.w	r8, r3, #32
 800987a:	bfbc      	itt	lt
 800987c:	4622      	movlt	r2, r4
 800987e:	4614      	movlt	r4, r2
 8009880:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009884:	d005      	beq.n	8009892 <__cvt+0x42>
 8009886:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800988a:	d100      	bne.n	800988e <__cvt+0x3e>
 800988c:	3601      	adds	r6, #1
 800988e:	2102      	movs	r1, #2
 8009890:	e000      	b.n	8009894 <__cvt+0x44>
 8009892:	2103      	movs	r1, #3
 8009894:	ab03      	add	r3, sp, #12
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	ab02      	add	r3, sp, #8
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	ec45 4b10 	vmov	d0, r4, r5
 80098a0:	4653      	mov	r3, sl
 80098a2:	4632      	mov	r2, r6
 80098a4:	f000 ff4c 	bl	800a740 <_dtoa_r>
 80098a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098ac:	4607      	mov	r7, r0
 80098ae:	d102      	bne.n	80098b6 <__cvt+0x66>
 80098b0:	f019 0f01 	tst.w	r9, #1
 80098b4:	d022      	beq.n	80098fc <__cvt+0xac>
 80098b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098ba:	eb07 0906 	add.w	r9, r7, r6
 80098be:	d110      	bne.n	80098e2 <__cvt+0x92>
 80098c0:	783b      	ldrb	r3, [r7, #0]
 80098c2:	2b30      	cmp	r3, #48	; 0x30
 80098c4:	d10a      	bne.n	80098dc <__cvt+0x8c>
 80098c6:	2200      	movs	r2, #0
 80098c8:	2300      	movs	r3, #0
 80098ca:	4620      	mov	r0, r4
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7f7 f923 	bl	8000b18 <__aeabi_dcmpeq>
 80098d2:	b918      	cbnz	r0, 80098dc <__cvt+0x8c>
 80098d4:	f1c6 0601 	rsb	r6, r6, #1
 80098d8:	f8ca 6000 	str.w	r6, [sl]
 80098dc:	f8da 3000 	ldr.w	r3, [sl]
 80098e0:	4499      	add	r9, r3
 80098e2:	2200      	movs	r2, #0
 80098e4:	2300      	movs	r3, #0
 80098e6:	4620      	mov	r0, r4
 80098e8:	4629      	mov	r1, r5
 80098ea:	f7f7 f915 	bl	8000b18 <__aeabi_dcmpeq>
 80098ee:	b108      	cbz	r0, 80098f4 <__cvt+0xa4>
 80098f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80098f4:	2230      	movs	r2, #48	; 0x30
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	454b      	cmp	r3, r9
 80098fa:	d307      	bcc.n	800990c <__cvt+0xbc>
 80098fc:	9b03      	ldr	r3, [sp, #12]
 80098fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009900:	1bdb      	subs	r3, r3, r7
 8009902:	4638      	mov	r0, r7
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	b004      	add	sp, #16
 8009908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800990c:	1c59      	adds	r1, r3, #1
 800990e:	9103      	str	r1, [sp, #12]
 8009910:	701a      	strb	r2, [r3, #0]
 8009912:	e7f0      	b.n	80098f6 <__cvt+0xa6>

08009914 <__exponent>:
 8009914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009916:	4603      	mov	r3, r0
 8009918:	2900      	cmp	r1, #0
 800991a:	bfb8      	it	lt
 800991c:	4249      	neglt	r1, r1
 800991e:	f803 2b02 	strb.w	r2, [r3], #2
 8009922:	bfb4      	ite	lt
 8009924:	222d      	movlt	r2, #45	; 0x2d
 8009926:	222b      	movge	r2, #43	; 0x2b
 8009928:	2909      	cmp	r1, #9
 800992a:	7042      	strb	r2, [r0, #1]
 800992c:	dd2a      	ble.n	8009984 <__exponent+0x70>
 800992e:	f10d 0207 	add.w	r2, sp, #7
 8009932:	4617      	mov	r7, r2
 8009934:	260a      	movs	r6, #10
 8009936:	4694      	mov	ip, r2
 8009938:	fb91 f5f6 	sdiv	r5, r1, r6
 800993c:	fb06 1415 	mls	r4, r6, r5, r1
 8009940:	3430      	adds	r4, #48	; 0x30
 8009942:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009946:	460c      	mov	r4, r1
 8009948:	2c63      	cmp	r4, #99	; 0x63
 800994a:	f102 32ff 	add.w	r2, r2, #4294967295
 800994e:	4629      	mov	r1, r5
 8009950:	dcf1      	bgt.n	8009936 <__exponent+0x22>
 8009952:	3130      	adds	r1, #48	; 0x30
 8009954:	f1ac 0402 	sub.w	r4, ip, #2
 8009958:	f802 1c01 	strb.w	r1, [r2, #-1]
 800995c:	1c41      	adds	r1, r0, #1
 800995e:	4622      	mov	r2, r4
 8009960:	42ba      	cmp	r2, r7
 8009962:	d30a      	bcc.n	800997a <__exponent+0x66>
 8009964:	f10d 0209 	add.w	r2, sp, #9
 8009968:	eba2 020c 	sub.w	r2, r2, ip
 800996c:	42bc      	cmp	r4, r7
 800996e:	bf88      	it	hi
 8009970:	2200      	movhi	r2, #0
 8009972:	4413      	add	r3, r2
 8009974:	1a18      	subs	r0, r3, r0
 8009976:	b003      	add	sp, #12
 8009978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800997a:	f812 5b01 	ldrb.w	r5, [r2], #1
 800997e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009982:	e7ed      	b.n	8009960 <__exponent+0x4c>
 8009984:	2330      	movs	r3, #48	; 0x30
 8009986:	3130      	adds	r1, #48	; 0x30
 8009988:	7083      	strb	r3, [r0, #2]
 800998a:	70c1      	strb	r1, [r0, #3]
 800998c:	1d03      	adds	r3, r0, #4
 800998e:	e7f1      	b.n	8009974 <__exponent+0x60>

08009990 <_printf_float>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	ed2d 8b02 	vpush	{d8}
 8009998:	b08d      	sub	sp, #52	; 0x34
 800999a:	460c      	mov	r4, r1
 800999c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099a0:	4616      	mov	r6, r2
 80099a2:	461f      	mov	r7, r3
 80099a4:	4605      	mov	r5, r0
 80099a6:	f000 fdc9 	bl	800a53c <_localeconv_r>
 80099aa:	f8d0 a000 	ldr.w	sl, [r0]
 80099ae:	4650      	mov	r0, sl
 80099b0:	f7f6 fc86 	bl	80002c0 <strlen>
 80099b4:	2300      	movs	r3, #0
 80099b6:	930a      	str	r3, [sp, #40]	; 0x28
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	9305      	str	r3, [sp, #20]
 80099bc:	f8d8 3000 	ldr.w	r3, [r8]
 80099c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099c4:	3307      	adds	r3, #7
 80099c6:	f023 0307 	bic.w	r3, r3, #7
 80099ca:	f103 0208 	add.w	r2, r3, #8
 80099ce:	f8c8 2000 	str.w	r2, [r8]
 80099d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099da:	9307      	str	r3, [sp, #28]
 80099dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80099e0:	ee08 0a10 	vmov	s16, r0
 80099e4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80099e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ec:	4b9e      	ldr	r3, [pc, #632]	; (8009c68 <_printf_float+0x2d8>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	f7f7 f8c3 	bl	8000b7c <__aeabi_dcmpun>
 80099f6:	bb88      	cbnz	r0, 8009a5c <_printf_float+0xcc>
 80099f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099fc:	4b9a      	ldr	r3, [pc, #616]	; (8009c68 <_printf_float+0x2d8>)
 80099fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009a02:	f7f7 f89d 	bl	8000b40 <__aeabi_dcmple>
 8009a06:	bb48      	cbnz	r0, 8009a5c <_printf_float+0xcc>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f7 f88c 	bl	8000b2c <__aeabi_dcmplt>
 8009a14:	b110      	cbz	r0, 8009a1c <_printf_float+0x8c>
 8009a16:	232d      	movs	r3, #45	; 0x2d
 8009a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a1c:	4a93      	ldr	r2, [pc, #588]	; (8009c6c <_printf_float+0x2dc>)
 8009a1e:	4b94      	ldr	r3, [pc, #592]	; (8009c70 <_printf_float+0x2e0>)
 8009a20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a24:	bf94      	ite	ls
 8009a26:	4690      	movls	r8, r2
 8009a28:	4698      	movhi	r8, r3
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	f023 0304 	bic.w	r3, r3, #4
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	9700      	str	r7, [sp, #0]
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f9da 	bl	8009dfc <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f040 8090 	bne.w	8009b6e <_printf_float+0x1de>
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	b00d      	add	sp, #52	; 0x34
 8009a54:	ecbd 8b02 	vpop	{d8}
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	4649      	mov	r1, r9
 8009a64:	f7f7 f88a 	bl	8000b7c <__aeabi_dcmpun>
 8009a68:	b140      	cbz	r0, 8009a7c <_printf_float+0xec>
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfbc      	itt	lt
 8009a70:	232d      	movlt	r3, #45	; 0x2d
 8009a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a76:	4a7f      	ldr	r2, [pc, #508]	; (8009c74 <_printf_float+0x2e4>)
 8009a78:	4b7f      	ldr	r3, [pc, #508]	; (8009c78 <_printf_float+0x2e8>)
 8009a7a:	e7d1      	b.n	8009a20 <_printf_float+0x90>
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a82:	9206      	str	r2, [sp, #24]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	d13f      	bne.n	8009b08 <_printf_float+0x178>
 8009a88:	2306      	movs	r3, #6
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	9b05      	ldr	r3, [sp, #20]
 8009a8e:	6861      	ldr	r1, [r4, #4]
 8009a90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a94:	2300      	movs	r3, #0
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	ab0a      	add	r3, sp, #40	; 0x28
 8009a9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a9e:	ab09      	add	r3, sp, #36	; 0x24
 8009aa0:	ec49 8b10 	vmov	d0, r8, r9
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7ff fecf 	bl	8009850 <__cvt>
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ab6:	2b47      	cmp	r3, #71	; 0x47
 8009ab8:	4680      	mov	r8, r0
 8009aba:	d108      	bne.n	8009ace <_printf_float+0x13e>
 8009abc:	1cc8      	adds	r0, r1, #3
 8009abe:	db02      	blt.n	8009ac6 <_printf_float+0x136>
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	4299      	cmp	r1, r3
 8009ac4:	dd41      	ble.n	8009b4a <_printf_float+0x1ba>
 8009ac6:	f1ab 0302 	sub.w	r3, fp, #2
 8009aca:	fa5f fb83 	uxtb.w	fp, r3
 8009ace:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ad2:	d820      	bhi.n	8009b16 <_printf_float+0x186>
 8009ad4:	3901      	subs	r1, #1
 8009ad6:	465a      	mov	r2, fp
 8009ad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009adc:	9109      	str	r1, [sp, #36]	; 0x24
 8009ade:	f7ff ff19 	bl	8009914 <__exponent>
 8009ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae4:	1813      	adds	r3, r2, r0
 8009ae6:	2a01      	cmp	r2, #1
 8009ae8:	4681      	mov	r9, r0
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	dc02      	bgt.n	8009af4 <_printf_float+0x164>
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	07d2      	lsls	r2, r2, #31
 8009af2:	d501      	bpl.n	8009af8 <_printf_float+0x168>
 8009af4:	3301      	adds	r3, #1
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d09c      	beq.n	8009a3a <_printf_float+0xaa>
 8009b00:	232d      	movs	r3, #45	; 0x2d
 8009b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b06:	e798      	b.n	8009a3a <_printf_float+0xaa>
 8009b08:	9a06      	ldr	r2, [sp, #24]
 8009b0a:	2a47      	cmp	r2, #71	; 0x47
 8009b0c:	d1be      	bne.n	8009a8c <_printf_float+0xfc>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1bc      	bne.n	8009a8c <_printf_float+0xfc>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7b9      	b.n	8009a8a <_printf_float+0xfa>
 8009b16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b1a:	d118      	bne.n	8009b4e <_printf_float+0x1be>
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	6863      	ldr	r3, [r4, #4]
 8009b20:	dd0b      	ble.n	8009b3a <_printf_float+0x1aa>
 8009b22:	6121      	str	r1, [r4, #16]
 8009b24:	b913      	cbnz	r3, 8009b2c <_printf_float+0x19c>
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	07d0      	lsls	r0, r2, #31
 8009b2a:	d502      	bpl.n	8009b32 <_printf_float+0x1a2>
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	440b      	add	r3, r1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b34:	f04f 0900 	mov.w	r9, #0
 8009b38:	e7de      	b.n	8009af8 <_printf_float+0x168>
 8009b3a:	b913      	cbnz	r3, 8009b42 <_printf_float+0x1b2>
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	07d2      	lsls	r2, r2, #31
 8009b40:	d501      	bpl.n	8009b46 <_printf_float+0x1b6>
 8009b42:	3302      	adds	r3, #2
 8009b44:	e7f4      	b.n	8009b30 <_printf_float+0x1a0>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e7f2      	b.n	8009b30 <_printf_float+0x1a0>
 8009b4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	4299      	cmp	r1, r3
 8009b52:	db05      	blt.n	8009b60 <_printf_float+0x1d0>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	6121      	str	r1, [r4, #16]
 8009b58:	07d8      	lsls	r0, r3, #31
 8009b5a:	d5ea      	bpl.n	8009b32 <_printf_float+0x1a2>
 8009b5c:	1c4b      	adds	r3, r1, #1
 8009b5e:	e7e7      	b.n	8009b30 <_printf_float+0x1a0>
 8009b60:	2900      	cmp	r1, #0
 8009b62:	bfd4      	ite	le
 8009b64:	f1c1 0202 	rsble	r2, r1, #2
 8009b68:	2201      	movgt	r2, #1
 8009b6a:	4413      	add	r3, r2
 8009b6c:	e7e0      	b.n	8009b30 <_printf_float+0x1a0>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	055a      	lsls	r2, r3, #21
 8009b72:	d407      	bmi.n	8009b84 <_printf_float+0x1f4>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	4642      	mov	r2, r8
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d12c      	bne.n	8009bdc <_printf_float+0x24c>
 8009b82:	e764      	b.n	8009a4e <_printf_float+0xbe>
 8009b84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b88:	f240 80e0 	bls.w	8009d4c <_printf_float+0x3bc>
 8009b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b90:	2200      	movs	r2, #0
 8009b92:	2300      	movs	r3, #0
 8009b94:	f7f6 ffc0 	bl	8000b18 <__aeabi_dcmpeq>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d034      	beq.n	8009c06 <_printf_float+0x276>
 8009b9c:	4a37      	ldr	r2, [pc, #220]	; (8009c7c <_printf_float+0x2ec>)
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af51 	beq.w	8009a4e <_printf_float+0xbe>
 8009bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	db02      	blt.n	8009bba <_printf_float+0x22a>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	07d8      	lsls	r0, r3, #31
 8009bb8:	d510      	bpl.n	8009bdc <_printf_float+0x24c>
 8009bba:	ee18 3a10 	vmov	r3, s16
 8009bbe:	4652      	mov	r2, sl
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f af41 	beq.w	8009a4e <_printf_float+0xbe>
 8009bcc:	f04f 0800 	mov.w	r8, #0
 8009bd0:	f104 091a 	add.w	r9, r4, #26
 8009bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	4543      	cmp	r3, r8
 8009bda:	dc09      	bgt.n	8009bf0 <_printf_float+0x260>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	079b      	lsls	r3, r3, #30
 8009be0:	f100 8107 	bmi.w	8009df2 <_printf_float+0x462>
 8009be4:	68e0      	ldr	r0, [r4, #12]
 8009be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be8:	4298      	cmp	r0, r3
 8009bea:	bfb8      	it	lt
 8009bec:	4618      	movlt	r0, r3
 8009bee:	e730      	b.n	8009a52 <_printf_float+0xc2>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	464a      	mov	r2, r9
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f af27 	beq.w	8009a4e <_printf_float+0xbe>
 8009c00:	f108 0801 	add.w	r8, r8, #1
 8009c04:	e7e6      	b.n	8009bd4 <_printf_float+0x244>
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc39      	bgt.n	8009c80 <_printf_float+0x2f0>
 8009c0c:	4a1b      	ldr	r2, [pc, #108]	; (8009c7c <_printf_float+0x2ec>)
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f af19 	beq.w	8009a4e <_printf_float+0xbe>
 8009c1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c20:	4313      	orrs	r3, r2
 8009c22:	d102      	bne.n	8009c2a <_printf_float+0x29a>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d5d8      	bpl.n	8009bdc <_printf_float+0x24c>
 8009c2a:	ee18 3a10 	vmov	r3, s16
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f af09 	beq.w	8009a4e <_printf_float+0xbe>
 8009c3c:	f04f 0900 	mov.w	r9, #0
 8009c40:	f104 0a1a 	add.w	sl, r4, #26
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	425b      	negs	r3, r3
 8009c48:	454b      	cmp	r3, r9
 8009c4a:	dc01      	bgt.n	8009c50 <_printf_float+0x2c0>
 8009c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4e:	e792      	b.n	8009b76 <_printf_float+0x1e6>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4652      	mov	r2, sl
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f aef7 	beq.w	8009a4e <_printf_float+0xbe>
 8009c60:	f109 0901 	add.w	r9, r9, #1
 8009c64:	e7ee      	b.n	8009c44 <_printf_float+0x2b4>
 8009c66:	bf00      	nop
 8009c68:	7fefffff 	.word	0x7fefffff
 8009c6c:	0800d244 	.word	0x0800d244
 8009c70:	0800d248 	.word	0x0800d248
 8009c74:	0800d24c 	.word	0x0800d24c
 8009c78:	0800d250 	.word	0x0800d250
 8009c7c:	0800d254 	.word	0x0800d254
 8009c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bfa8      	it	ge
 8009c88:	461a      	movge	r2, r3
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	4691      	mov	r9, r2
 8009c8e:	dc37      	bgt.n	8009d00 <_printf_float+0x370>
 8009c90:	f04f 0b00 	mov.w	fp, #0
 8009c94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c98:	f104 021a 	add.w	r2, r4, #26
 8009c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	eba3 0309 	sub.w	r3, r3, r9
 8009ca4:	455b      	cmp	r3, fp
 8009ca6:	dc33      	bgt.n	8009d10 <_printf_float+0x380>
 8009ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cac:	429a      	cmp	r2, r3
 8009cae:	db3b      	blt.n	8009d28 <_printf_float+0x398>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	07da      	lsls	r2, r3, #31
 8009cb4:	d438      	bmi.n	8009d28 <_printf_float+0x398>
 8009cb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009cba:	eba2 0903 	sub.w	r9, r2, r3
 8009cbe:	9b05      	ldr	r3, [sp, #20]
 8009cc0:	1ad2      	subs	r2, r2, r3
 8009cc2:	4591      	cmp	r9, r2
 8009cc4:	bfa8      	it	ge
 8009cc6:	4691      	movge	r9, r2
 8009cc8:	f1b9 0f00 	cmp.w	r9, #0
 8009ccc:	dc35      	bgt.n	8009d3a <_printf_float+0x3aa>
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cd6:	f104 0a1a 	add.w	sl, r4, #26
 8009cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	eba3 0309 	sub.w	r3, r3, r9
 8009ce4:	4543      	cmp	r3, r8
 8009ce6:	f77f af79 	ble.w	8009bdc <_printf_float+0x24c>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4652      	mov	r2, sl
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f aeaa 	beq.w	8009a4e <_printf_float+0xbe>
 8009cfa:	f108 0801 	add.w	r8, r8, #1
 8009cfe:	e7ec      	b.n	8009cda <_printf_float+0x34a>
 8009d00:	4613      	mov	r3, r2
 8009d02:	4631      	mov	r1, r6
 8009d04:	4642      	mov	r2, r8
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d1c0      	bne.n	8009c90 <_printf_float+0x300>
 8009d0e:	e69e      	b.n	8009a4e <_printf_float+0xbe>
 8009d10:	2301      	movs	r3, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	9205      	str	r2, [sp, #20]
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f ae97 	beq.w	8009a4e <_printf_float+0xbe>
 8009d20:	9a05      	ldr	r2, [sp, #20]
 8009d22:	f10b 0b01 	add.w	fp, fp, #1
 8009d26:	e7b9      	b.n	8009c9c <_printf_float+0x30c>
 8009d28:	ee18 3a10 	vmov	r3, s16
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d1be      	bne.n	8009cb6 <_printf_float+0x326>
 8009d38:	e689      	b.n	8009a4e <_printf_float+0xbe>
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	4442      	add	r2, r8
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	d1c1      	bne.n	8009cce <_printf_float+0x33e>
 8009d4a:	e680      	b.n	8009a4e <_printf_float+0xbe>
 8009d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d4e:	2a01      	cmp	r2, #1
 8009d50:	dc01      	bgt.n	8009d56 <_printf_float+0x3c6>
 8009d52:	07db      	lsls	r3, r3, #31
 8009d54:	d53a      	bpl.n	8009dcc <_printf_float+0x43c>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4642      	mov	r2, r8
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f ae74 	beq.w	8009a4e <_printf_float+0xbe>
 8009d66:	ee18 3a10 	vmov	r3, s16
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	f43f ae6b 	beq.w	8009a4e <_printf_float+0xbe>
 8009d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d84:	f7f6 fec8 	bl	8000b18 <__aeabi_dcmpeq>
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_printf_float+0x432>
 8009d8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d8e:	f108 0201 	add.w	r2, r8, #1
 8009d92:	4631      	mov	r1, r6
 8009d94:	4628      	mov	r0, r5
 8009d96:	47b8      	blx	r7
 8009d98:	3001      	adds	r0, #1
 8009d9a:	d10e      	bne.n	8009dba <_printf_float+0x42a>
 8009d9c:	e657      	b.n	8009a4e <_printf_float+0xbe>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	4652      	mov	r2, sl
 8009da2:	4631      	mov	r1, r6
 8009da4:	4628      	mov	r0, r5
 8009da6:	47b8      	blx	r7
 8009da8:	3001      	adds	r0, #1
 8009daa:	f43f ae50 	beq.w	8009a4e <_printf_float+0xbe>
 8009dae:	f108 0801 	add.w	r8, r8, #1
 8009db2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db4:	3b01      	subs	r3, #1
 8009db6:	4543      	cmp	r3, r8
 8009db8:	dcf1      	bgt.n	8009d9e <_printf_float+0x40e>
 8009dba:	464b      	mov	r3, r9
 8009dbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dc0:	e6da      	b.n	8009b78 <_printf_float+0x1e8>
 8009dc2:	f04f 0800 	mov.w	r8, #0
 8009dc6:	f104 0a1a 	add.w	sl, r4, #26
 8009dca:	e7f2      	b.n	8009db2 <_printf_float+0x422>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	4642      	mov	r2, r8
 8009dd0:	e7df      	b.n	8009d92 <_printf_float+0x402>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	464a      	mov	r2, r9
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f ae36 	beq.w	8009a4e <_printf_float+0xbe>
 8009de2:	f108 0801 	add.w	r8, r8, #1
 8009de6:	68e3      	ldr	r3, [r4, #12]
 8009de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009dea:	1a5b      	subs	r3, r3, r1
 8009dec:	4543      	cmp	r3, r8
 8009dee:	dcf0      	bgt.n	8009dd2 <_printf_float+0x442>
 8009df0:	e6f8      	b.n	8009be4 <_printf_float+0x254>
 8009df2:	f04f 0800 	mov.w	r8, #0
 8009df6:	f104 0919 	add.w	r9, r4, #25
 8009dfa:	e7f4      	b.n	8009de6 <_printf_float+0x456>

08009dfc <_printf_common>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	4616      	mov	r6, r2
 8009e02:	4699      	mov	r9, r3
 8009e04:	688a      	ldr	r2, [r1, #8]
 8009e06:	690b      	ldr	r3, [r1, #16]
 8009e08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	bfb8      	it	lt
 8009e10:	4613      	movlt	r3, r2
 8009e12:	6033      	str	r3, [r6, #0]
 8009e14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e18:	4607      	mov	r7, r0
 8009e1a:	460c      	mov	r4, r1
 8009e1c:	b10a      	cbz	r2, 8009e22 <_printf_common+0x26>
 8009e1e:	3301      	adds	r3, #1
 8009e20:	6033      	str	r3, [r6, #0]
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	0699      	lsls	r1, r3, #26
 8009e26:	bf42      	ittt	mi
 8009e28:	6833      	ldrmi	r3, [r6, #0]
 8009e2a:	3302      	addmi	r3, #2
 8009e2c:	6033      	strmi	r3, [r6, #0]
 8009e2e:	6825      	ldr	r5, [r4, #0]
 8009e30:	f015 0506 	ands.w	r5, r5, #6
 8009e34:	d106      	bne.n	8009e44 <_printf_common+0x48>
 8009e36:	f104 0a19 	add.w	sl, r4, #25
 8009e3a:	68e3      	ldr	r3, [r4, #12]
 8009e3c:	6832      	ldr	r2, [r6, #0]
 8009e3e:	1a9b      	subs	r3, r3, r2
 8009e40:	42ab      	cmp	r3, r5
 8009e42:	dc26      	bgt.n	8009e92 <_printf_common+0x96>
 8009e44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e48:	1e13      	subs	r3, r2, #0
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	bf18      	it	ne
 8009e4e:	2301      	movne	r3, #1
 8009e50:	0692      	lsls	r2, r2, #26
 8009e52:	d42b      	bmi.n	8009eac <_printf_common+0xb0>
 8009e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e58:	4649      	mov	r1, r9
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	47c0      	blx	r8
 8009e5e:	3001      	adds	r0, #1
 8009e60:	d01e      	beq.n	8009ea0 <_printf_common+0xa4>
 8009e62:	6823      	ldr	r3, [r4, #0]
 8009e64:	6922      	ldr	r2, [r4, #16]
 8009e66:	f003 0306 	and.w	r3, r3, #6
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	bf02      	ittt	eq
 8009e6e:	68e5      	ldreq	r5, [r4, #12]
 8009e70:	6833      	ldreq	r3, [r6, #0]
 8009e72:	1aed      	subeq	r5, r5, r3
 8009e74:	68a3      	ldr	r3, [r4, #8]
 8009e76:	bf0c      	ite	eq
 8009e78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e7c:	2500      	movne	r5, #0
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	bfc4      	itt	gt
 8009e82:	1a9b      	subgt	r3, r3, r2
 8009e84:	18ed      	addgt	r5, r5, r3
 8009e86:	2600      	movs	r6, #0
 8009e88:	341a      	adds	r4, #26
 8009e8a:	42b5      	cmp	r5, r6
 8009e8c:	d11a      	bne.n	8009ec4 <_printf_common+0xc8>
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e008      	b.n	8009ea4 <_printf_common+0xa8>
 8009e92:	2301      	movs	r3, #1
 8009e94:	4652      	mov	r2, sl
 8009e96:	4649      	mov	r1, r9
 8009e98:	4638      	mov	r0, r7
 8009e9a:	47c0      	blx	r8
 8009e9c:	3001      	adds	r0, #1
 8009e9e:	d103      	bne.n	8009ea8 <_printf_common+0xac>
 8009ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea8:	3501      	adds	r5, #1
 8009eaa:	e7c6      	b.n	8009e3a <_printf_common+0x3e>
 8009eac:	18e1      	adds	r1, r4, r3
 8009eae:	1c5a      	adds	r2, r3, #1
 8009eb0:	2030      	movs	r0, #48	; 0x30
 8009eb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eb6:	4422      	add	r2, r4
 8009eb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ec0:	3302      	adds	r3, #2
 8009ec2:	e7c7      	b.n	8009e54 <_printf_common+0x58>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	4622      	mov	r2, r4
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4638      	mov	r0, r7
 8009ecc:	47c0      	blx	r8
 8009ece:	3001      	adds	r0, #1
 8009ed0:	d0e6      	beq.n	8009ea0 <_printf_common+0xa4>
 8009ed2:	3601      	adds	r6, #1
 8009ed4:	e7d9      	b.n	8009e8a <_printf_common+0x8e>
	...

08009ed8 <_printf_i>:
 8009ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009edc:	7e0f      	ldrb	r7, [r1, #24]
 8009ede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ee0:	2f78      	cmp	r7, #120	; 0x78
 8009ee2:	4691      	mov	r9, r2
 8009ee4:	4680      	mov	r8, r0
 8009ee6:	460c      	mov	r4, r1
 8009ee8:	469a      	mov	sl, r3
 8009eea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eee:	d807      	bhi.n	8009f00 <_printf_i+0x28>
 8009ef0:	2f62      	cmp	r7, #98	; 0x62
 8009ef2:	d80a      	bhi.n	8009f0a <_printf_i+0x32>
 8009ef4:	2f00      	cmp	r7, #0
 8009ef6:	f000 80d4 	beq.w	800a0a2 <_printf_i+0x1ca>
 8009efa:	2f58      	cmp	r7, #88	; 0x58
 8009efc:	f000 80c0 	beq.w	800a080 <_printf_i+0x1a8>
 8009f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f08:	e03a      	b.n	8009f80 <_printf_i+0xa8>
 8009f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f0e:	2b15      	cmp	r3, #21
 8009f10:	d8f6      	bhi.n	8009f00 <_printf_i+0x28>
 8009f12:	a101      	add	r1, pc, #4	; (adr r1, 8009f18 <_printf_i+0x40>)
 8009f14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f18:	08009f71 	.word	0x08009f71
 8009f1c:	08009f85 	.word	0x08009f85
 8009f20:	08009f01 	.word	0x08009f01
 8009f24:	08009f01 	.word	0x08009f01
 8009f28:	08009f01 	.word	0x08009f01
 8009f2c:	08009f01 	.word	0x08009f01
 8009f30:	08009f85 	.word	0x08009f85
 8009f34:	08009f01 	.word	0x08009f01
 8009f38:	08009f01 	.word	0x08009f01
 8009f3c:	08009f01 	.word	0x08009f01
 8009f40:	08009f01 	.word	0x08009f01
 8009f44:	0800a089 	.word	0x0800a089
 8009f48:	08009fb1 	.word	0x08009fb1
 8009f4c:	0800a043 	.word	0x0800a043
 8009f50:	08009f01 	.word	0x08009f01
 8009f54:	08009f01 	.word	0x08009f01
 8009f58:	0800a0ab 	.word	0x0800a0ab
 8009f5c:	08009f01 	.word	0x08009f01
 8009f60:	08009fb1 	.word	0x08009fb1
 8009f64:	08009f01 	.word	0x08009f01
 8009f68:	08009f01 	.word	0x08009f01
 8009f6c:	0800a04b 	.word	0x0800a04b
 8009f70:	682b      	ldr	r3, [r5, #0]
 8009f72:	1d1a      	adds	r2, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	602a      	str	r2, [r5, #0]
 8009f78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f80:	2301      	movs	r3, #1
 8009f82:	e09f      	b.n	800a0c4 <_printf_i+0x1ec>
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	682b      	ldr	r3, [r5, #0]
 8009f88:	0607      	lsls	r7, r0, #24
 8009f8a:	f103 0104 	add.w	r1, r3, #4
 8009f8e:	6029      	str	r1, [r5, #0]
 8009f90:	d501      	bpl.n	8009f96 <_printf_i+0xbe>
 8009f92:	681e      	ldr	r6, [r3, #0]
 8009f94:	e003      	b.n	8009f9e <_printf_i+0xc6>
 8009f96:	0646      	lsls	r6, r0, #25
 8009f98:	d5fb      	bpl.n	8009f92 <_printf_i+0xba>
 8009f9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f9e:	2e00      	cmp	r6, #0
 8009fa0:	da03      	bge.n	8009faa <_printf_i+0xd2>
 8009fa2:	232d      	movs	r3, #45	; 0x2d
 8009fa4:	4276      	negs	r6, r6
 8009fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009faa:	485a      	ldr	r0, [pc, #360]	; (800a114 <_printf_i+0x23c>)
 8009fac:	230a      	movs	r3, #10
 8009fae:	e012      	b.n	8009fd6 <_printf_i+0xfe>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	6820      	ldr	r0, [r4, #0]
 8009fb4:	1d19      	adds	r1, r3, #4
 8009fb6:	6029      	str	r1, [r5, #0]
 8009fb8:	0605      	lsls	r5, r0, #24
 8009fba:	d501      	bpl.n	8009fc0 <_printf_i+0xe8>
 8009fbc:	681e      	ldr	r6, [r3, #0]
 8009fbe:	e002      	b.n	8009fc6 <_printf_i+0xee>
 8009fc0:	0641      	lsls	r1, r0, #25
 8009fc2:	d5fb      	bpl.n	8009fbc <_printf_i+0xe4>
 8009fc4:	881e      	ldrh	r6, [r3, #0]
 8009fc6:	4853      	ldr	r0, [pc, #332]	; (800a114 <_printf_i+0x23c>)
 8009fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8009fca:	bf0c      	ite	eq
 8009fcc:	2308      	moveq	r3, #8
 8009fce:	230a      	movne	r3, #10
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fd6:	6865      	ldr	r5, [r4, #4]
 8009fd8:	60a5      	str	r5, [r4, #8]
 8009fda:	2d00      	cmp	r5, #0
 8009fdc:	bfa2      	ittt	ge
 8009fde:	6821      	ldrge	r1, [r4, #0]
 8009fe0:	f021 0104 	bicge.w	r1, r1, #4
 8009fe4:	6021      	strge	r1, [r4, #0]
 8009fe6:	b90e      	cbnz	r6, 8009fec <_printf_i+0x114>
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	d04b      	beq.n	800a084 <_printf_i+0x1ac>
 8009fec:	4615      	mov	r5, r2
 8009fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ff6:	5dc7      	ldrb	r7, [r0, r7]
 8009ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ffc:	4637      	mov	r7, r6
 8009ffe:	42bb      	cmp	r3, r7
 800a000:	460e      	mov	r6, r1
 800a002:	d9f4      	bls.n	8009fee <_printf_i+0x116>
 800a004:	2b08      	cmp	r3, #8
 800a006:	d10b      	bne.n	800a020 <_printf_i+0x148>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	07de      	lsls	r6, r3, #31
 800a00c:	d508      	bpl.n	800a020 <_printf_i+0x148>
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	6861      	ldr	r1, [r4, #4]
 800a012:	4299      	cmp	r1, r3
 800a014:	bfde      	ittt	le
 800a016:	2330      	movle	r3, #48	; 0x30
 800a018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a01c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a020:	1b52      	subs	r2, r2, r5
 800a022:	6122      	str	r2, [r4, #16]
 800a024:	f8cd a000 	str.w	sl, [sp]
 800a028:	464b      	mov	r3, r9
 800a02a:	aa03      	add	r2, sp, #12
 800a02c:	4621      	mov	r1, r4
 800a02e:	4640      	mov	r0, r8
 800a030:	f7ff fee4 	bl	8009dfc <_printf_common>
 800a034:	3001      	adds	r0, #1
 800a036:	d14a      	bne.n	800a0ce <_printf_i+0x1f6>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	b004      	add	sp, #16
 800a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	f043 0320 	orr.w	r3, r3, #32
 800a048:	6023      	str	r3, [r4, #0]
 800a04a:	4833      	ldr	r0, [pc, #204]	; (800a118 <_printf_i+0x240>)
 800a04c:	2778      	movs	r7, #120	; 0x78
 800a04e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	6829      	ldr	r1, [r5, #0]
 800a056:	061f      	lsls	r7, r3, #24
 800a058:	f851 6b04 	ldr.w	r6, [r1], #4
 800a05c:	d402      	bmi.n	800a064 <_printf_i+0x18c>
 800a05e:	065f      	lsls	r7, r3, #25
 800a060:	bf48      	it	mi
 800a062:	b2b6      	uxthmi	r6, r6
 800a064:	07df      	lsls	r7, r3, #31
 800a066:	bf48      	it	mi
 800a068:	f043 0320 	orrmi.w	r3, r3, #32
 800a06c:	6029      	str	r1, [r5, #0]
 800a06e:	bf48      	it	mi
 800a070:	6023      	strmi	r3, [r4, #0]
 800a072:	b91e      	cbnz	r6, 800a07c <_printf_i+0x1a4>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	f023 0320 	bic.w	r3, r3, #32
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	2310      	movs	r3, #16
 800a07e:	e7a7      	b.n	8009fd0 <_printf_i+0xf8>
 800a080:	4824      	ldr	r0, [pc, #144]	; (800a114 <_printf_i+0x23c>)
 800a082:	e7e4      	b.n	800a04e <_printf_i+0x176>
 800a084:	4615      	mov	r5, r2
 800a086:	e7bd      	b.n	800a004 <_printf_i+0x12c>
 800a088:	682b      	ldr	r3, [r5, #0]
 800a08a:	6826      	ldr	r6, [r4, #0]
 800a08c:	6961      	ldr	r1, [r4, #20]
 800a08e:	1d18      	adds	r0, r3, #4
 800a090:	6028      	str	r0, [r5, #0]
 800a092:	0635      	lsls	r5, r6, #24
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	d501      	bpl.n	800a09c <_printf_i+0x1c4>
 800a098:	6019      	str	r1, [r3, #0]
 800a09a:	e002      	b.n	800a0a2 <_printf_i+0x1ca>
 800a09c:	0670      	lsls	r0, r6, #25
 800a09e:	d5fb      	bpl.n	800a098 <_printf_i+0x1c0>
 800a0a0:	8019      	strh	r1, [r3, #0]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	6123      	str	r3, [r4, #16]
 800a0a6:	4615      	mov	r5, r2
 800a0a8:	e7bc      	b.n	800a024 <_printf_i+0x14c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	1d1a      	adds	r2, r3, #4
 800a0ae:	602a      	str	r2, [r5, #0]
 800a0b0:	681d      	ldr	r5, [r3, #0]
 800a0b2:	6862      	ldr	r2, [r4, #4]
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f7f6 f8b2 	bl	8000220 <memchr>
 800a0bc:	b108      	cbz	r0, 800a0c2 <_printf_i+0x1ea>
 800a0be:	1b40      	subs	r0, r0, r5
 800a0c0:	6060      	str	r0, [r4, #4]
 800a0c2:	6863      	ldr	r3, [r4, #4]
 800a0c4:	6123      	str	r3, [r4, #16]
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0cc:	e7aa      	b.n	800a024 <_printf_i+0x14c>
 800a0ce:	6923      	ldr	r3, [r4, #16]
 800a0d0:	462a      	mov	r2, r5
 800a0d2:	4649      	mov	r1, r9
 800a0d4:	4640      	mov	r0, r8
 800a0d6:	47d0      	blx	sl
 800a0d8:	3001      	adds	r0, #1
 800a0da:	d0ad      	beq.n	800a038 <_printf_i+0x160>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	079b      	lsls	r3, r3, #30
 800a0e0:	d413      	bmi.n	800a10a <_printf_i+0x232>
 800a0e2:	68e0      	ldr	r0, [r4, #12]
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	4298      	cmp	r0, r3
 800a0e8:	bfb8      	it	lt
 800a0ea:	4618      	movlt	r0, r3
 800a0ec:	e7a6      	b.n	800a03c <_printf_i+0x164>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4632      	mov	r2, r6
 800a0f2:	4649      	mov	r1, r9
 800a0f4:	4640      	mov	r0, r8
 800a0f6:	47d0      	blx	sl
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	d09d      	beq.n	800a038 <_printf_i+0x160>
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	68e3      	ldr	r3, [r4, #12]
 800a100:	9903      	ldr	r1, [sp, #12]
 800a102:	1a5b      	subs	r3, r3, r1
 800a104:	42ab      	cmp	r3, r5
 800a106:	dcf2      	bgt.n	800a0ee <_printf_i+0x216>
 800a108:	e7eb      	b.n	800a0e2 <_printf_i+0x20a>
 800a10a:	2500      	movs	r5, #0
 800a10c:	f104 0619 	add.w	r6, r4, #25
 800a110:	e7f5      	b.n	800a0fe <_printf_i+0x226>
 800a112:	bf00      	nop
 800a114:	0800d256 	.word	0x0800d256
 800a118:	0800d267 	.word	0x0800d267

0800a11c <std>:
 800a11c:	2300      	movs	r3, #0
 800a11e:	b510      	push	{r4, lr}
 800a120:	4604      	mov	r4, r0
 800a122:	e9c0 3300 	strd	r3, r3, [r0]
 800a126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a12a:	6083      	str	r3, [r0, #8]
 800a12c:	8181      	strh	r1, [r0, #12]
 800a12e:	6643      	str	r3, [r0, #100]	; 0x64
 800a130:	81c2      	strh	r2, [r0, #14]
 800a132:	6183      	str	r3, [r0, #24]
 800a134:	4619      	mov	r1, r3
 800a136:	2208      	movs	r2, #8
 800a138:	305c      	adds	r0, #92	; 0x5c
 800a13a:	f000 f9f7 	bl	800a52c <memset>
 800a13e:	4b0d      	ldr	r3, [pc, #52]	; (800a174 <std+0x58>)
 800a140:	6263      	str	r3, [r4, #36]	; 0x24
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <std+0x5c>)
 800a144:	62a3      	str	r3, [r4, #40]	; 0x28
 800a146:	4b0d      	ldr	r3, [pc, #52]	; (800a17c <std+0x60>)
 800a148:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a14a:	4b0d      	ldr	r3, [pc, #52]	; (800a180 <std+0x64>)
 800a14c:	6323      	str	r3, [r4, #48]	; 0x30
 800a14e:	4b0d      	ldr	r3, [pc, #52]	; (800a184 <std+0x68>)
 800a150:	6224      	str	r4, [r4, #32]
 800a152:	429c      	cmp	r4, r3
 800a154:	d006      	beq.n	800a164 <std+0x48>
 800a156:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a15a:	4294      	cmp	r4, r2
 800a15c:	d002      	beq.n	800a164 <std+0x48>
 800a15e:	33d0      	adds	r3, #208	; 0xd0
 800a160:	429c      	cmp	r4, r3
 800a162:	d105      	bne.n	800a170 <std+0x54>
 800a164:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16c:	f000 ba5a 	b.w	800a624 <__retarget_lock_init_recursive>
 800a170:	bd10      	pop	{r4, pc}
 800a172:	bf00      	nop
 800a174:	0800a37d 	.word	0x0800a37d
 800a178:	0800a39f 	.word	0x0800a39f
 800a17c:	0800a3d7 	.word	0x0800a3d7
 800a180:	0800a3fb 	.word	0x0800a3fb
 800a184:	20002170 	.word	0x20002170

0800a188 <stdio_exit_handler>:
 800a188:	4a02      	ldr	r2, [pc, #8]	; (800a194 <stdio_exit_handler+0xc>)
 800a18a:	4903      	ldr	r1, [pc, #12]	; (800a198 <stdio_exit_handler+0x10>)
 800a18c:	4803      	ldr	r0, [pc, #12]	; (800a19c <stdio_exit_handler+0x14>)
 800a18e:	f000 b869 	b.w	800a264 <_fwalk_sglue>
 800a192:	bf00      	nop
 800a194:	20000010 	.word	0x20000010
 800a198:	0800bfb1 	.word	0x0800bfb1
 800a19c:	2000001c 	.word	0x2000001c

0800a1a0 <cleanup_stdio>:
 800a1a0:	6841      	ldr	r1, [r0, #4]
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <cleanup_stdio+0x34>)
 800a1a4:	4299      	cmp	r1, r3
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	d001      	beq.n	800a1b0 <cleanup_stdio+0x10>
 800a1ac:	f001 ff00 	bl	800bfb0 <_fflush_r>
 800a1b0:	68a1      	ldr	r1, [r4, #8]
 800a1b2:	4b09      	ldr	r3, [pc, #36]	; (800a1d8 <cleanup_stdio+0x38>)
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	d002      	beq.n	800a1be <cleanup_stdio+0x1e>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f001 fef9 	bl	800bfb0 <_fflush_r>
 800a1be:	68e1      	ldr	r1, [r4, #12]
 800a1c0:	4b06      	ldr	r3, [pc, #24]	; (800a1dc <cleanup_stdio+0x3c>)
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	d004      	beq.n	800a1d0 <cleanup_stdio+0x30>
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1cc:	f001 bef0 	b.w	800bfb0 <_fflush_r>
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	20002170 	.word	0x20002170
 800a1d8:	200021d8 	.word	0x200021d8
 800a1dc:	20002240 	.word	0x20002240

0800a1e0 <global_stdio_init.part.0>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <global_stdio_init.part.0+0x30>)
 800a1e4:	4c0b      	ldr	r4, [pc, #44]	; (800a214 <global_stdio_init.part.0+0x34>)
 800a1e6:	4a0c      	ldr	r2, [pc, #48]	; (800a218 <global_stdio_init.part.0+0x38>)
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2104      	movs	r1, #4
 800a1f0:	f7ff ff94 	bl	800a11c <std>
 800a1f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	2109      	movs	r1, #9
 800a1fc:	f7ff ff8e 	bl	800a11c <std>
 800a200:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a204:	2202      	movs	r2, #2
 800a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20a:	2112      	movs	r1, #18
 800a20c:	f7ff bf86 	b.w	800a11c <std>
 800a210:	200022a8 	.word	0x200022a8
 800a214:	20002170 	.word	0x20002170
 800a218:	0800a189 	.word	0x0800a189

0800a21c <__sfp_lock_acquire>:
 800a21c:	4801      	ldr	r0, [pc, #4]	; (800a224 <__sfp_lock_acquire+0x8>)
 800a21e:	f000 ba02 	b.w	800a626 <__retarget_lock_acquire_recursive>
 800a222:	bf00      	nop
 800a224:	200022b1 	.word	0x200022b1

0800a228 <__sfp_lock_release>:
 800a228:	4801      	ldr	r0, [pc, #4]	; (800a230 <__sfp_lock_release+0x8>)
 800a22a:	f000 b9fd 	b.w	800a628 <__retarget_lock_release_recursive>
 800a22e:	bf00      	nop
 800a230:	200022b1 	.word	0x200022b1

0800a234 <__sinit>:
 800a234:	b510      	push	{r4, lr}
 800a236:	4604      	mov	r4, r0
 800a238:	f7ff fff0 	bl	800a21c <__sfp_lock_acquire>
 800a23c:	6a23      	ldr	r3, [r4, #32]
 800a23e:	b11b      	cbz	r3, 800a248 <__sinit+0x14>
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f7ff bff0 	b.w	800a228 <__sfp_lock_release>
 800a248:	4b04      	ldr	r3, [pc, #16]	; (800a25c <__sinit+0x28>)
 800a24a:	6223      	str	r3, [r4, #32]
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__sinit+0x2c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f5      	bne.n	800a240 <__sinit+0xc>
 800a254:	f7ff ffc4 	bl	800a1e0 <global_stdio_init.part.0>
 800a258:	e7f2      	b.n	800a240 <__sinit+0xc>
 800a25a:	bf00      	nop
 800a25c:	0800a1a1 	.word	0x0800a1a1
 800a260:	200022a8 	.word	0x200022a8

0800a264 <_fwalk_sglue>:
 800a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a268:	4607      	mov	r7, r0
 800a26a:	4688      	mov	r8, r1
 800a26c:	4614      	mov	r4, r2
 800a26e:	2600      	movs	r6, #0
 800a270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a274:	f1b9 0901 	subs.w	r9, r9, #1
 800a278:	d505      	bpl.n	800a286 <_fwalk_sglue+0x22>
 800a27a:	6824      	ldr	r4, [r4, #0]
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	d1f7      	bne.n	800a270 <_fwalk_sglue+0xc>
 800a280:	4630      	mov	r0, r6
 800a282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d907      	bls.n	800a29c <_fwalk_sglue+0x38>
 800a28c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a290:	3301      	adds	r3, #1
 800a292:	d003      	beq.n	800a29c <_fwalk_sglue+0x38>
 800a294:	4629      	mov	r1, r5
 800a296:	4638      	mov	r0, r7
 800a298:	47c0      	blx	r8
 800a29a:	4306      	orrs	r6, r0
 800a29c:	3568      	adds	r5, #104	; 0x68
 800a29e:	e7e9      	b.n	800a274 <_fwalk_sglue+0x10>

0800a2a0 <iprintf>:
 800a2a0:	b40f      	push	{r0, r1, r2, r3}
 800a2a2:	b507      	push	{r0, r1, r2, lr}
 800a2a4:	4906      	ldr	r1, [pc, #24]	; (800a2c0 <iprintf+0x20>)
 800a2a6:	ab04      	add	r3, sp, #16
 800a2a8:	6808      	ldr	r0, [r1, #0]
 800a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ae:	6881      	ldr	r1, [r0, #8]
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	f001 fcdd 	bl	800bc70 <_vfiprintf_r>
 800a2b6:	b003      	add	sp, #12
 800a2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2bc:	b004      	add	sp, #16
 800a2be:	4770      	bx	lr
 800a2c0:	20000068 	.word	0x20000068

0800a2c4 <_puts_r>:
 800a2c4:	6a03      	ldr	r3, [r0, #32]
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	6884      	ldr	r4, [r0, #8]
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	460e      	mov	r6, r1
 800a2ce:	b90b      	cbnz	r3, 800a2d4 <_puts_r+0x10>
 800a2d0:	f7ff ffb0 	bl	800a234 <__sinit>
 800a2d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d6:	07db      	lsls	r3, r3, #31
 800a2d8:	d405      	bmi.n	800a2e6 <_puts_r+0x22>
 800a2da:	89a3      	ldrh	r3, [r4, #12]
 800a2dc:	0598      	lsls	r0, r3, #22
 800a2de:	d402      	bmi.n	800a2e6 <_puts_r+0x22>
 800a2e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2e2:	f000 f9a0 	bl	800a626 <__retarget_lock_acquire_recursive>
 800a2e6:	89a3      	ldrh	r3, [r4, #12]
 800a2e8:	0719      	lsls	r1, r3, #28
 800a2ea:	d513      	bpl.n	800a314 <_puts_r+0x50>
 800a2ec:	6923      	ldr	r3, [r4, #16]
 800a2ee:	b18b      	cbz	r3, 800a314 <_puts_r+0x50>
 800a2f0:	3e01      	subs	r6, #1
 800a2f2:	68a3      	ldr	r3, [r4, #8]
 800a2f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	60a3      	str	r3, [r4, #8]
 800a2fc:	b9e9      	cbnz	r1, 800a33a <_puts_r+0x76>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	da2e      	bge.n	800a360 <_puts_r+0x9c>
 800a302:	4622      	mov	r2, r4
 800a304:	210a      	movs	r1, #10
 800a306:	4628      	mov	r0, r5
 800a308:	f000 f87b 	bl	800a402 <__swbuf_r>
 800a30c:	3001      	adds	r0, #1
 800a30e:	d007      	beq.n	800a320 <_puts_r+0x5c>
 800a310:	250a      	movs	r5, #10
 800a312:	e007      	b.n	800a324 <_puts_r+0x60>
 800a314:	4621      	mov	r1, r4
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f8b0 	bl	800a47c <__swsetup_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d0e7      	beq.n	800a2f0 <_puts_r+0x2c>
 800a320:	f04f 35ff 	mov.w	r5, #4294967295
 800a324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a326:	07da      	lsls	r2, r3, #31
 800a328:	d405      	bmi.n	800a336 <_puts_r+0x72>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	059b      	lsls	r3, r3, #22
 800a32e:	d402      	bmi.n	800a336 <_puts_r+0x72>
 800a330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a332:	f000 f979 	bl	800a628 <__retarget_lock_release_recursive>
 800a336:	4628      	mov	r0, r5
 800a338:	bd70      	pop	{r4, r5, r6, pc}
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	da04      	bge.n	800a348 <_puts_r+0x84>
 800a33e:	69a2      	ldr	r2, [r4, #24]
 800a340:	429a      	cmp	r2, r3
 800a342:	dc06      	bgt.n	800a352 <_puts_r+0x8e>
 800a344:	290a      	cmp	r1, #10
 800a346:	d004      	beq.n	800a352 <_puts_r+0x8e>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	1c5a      	adds	r2, r3, #1
 800a34c:	6022      	str	r2, [r4, #0]
 800a34e:	7019      	strb	r1, [r3, #0]
 800a350:	e7cf      	b.n	800a2f2 <_puts_r+0x2e>
 800a352:	4622      	mov	r2, r4
 800a354:	4628      	mov	r0, r5
 800a356:	f000 f854 	bl	800a402 <__swbuf_r>
 800a35a:	3001      	adds	r0, #1
 800a35c:	d1c9      	bne.n	800a2f2 <_puts_r+0x2e>
 800a35e:	e7df      	b.n	800a320 <_puts_r+0x5c>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	250a      	movs	r5, #10
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	6022      	str	r2, [r4, #0]
 800a368:	701d      	strb	r5, [r3, #0]
 800a36a:	e7db      	b.n	800a324 <_puts_r+0x60>

0800a36c <puts>:
 800a36c:	4b02      	ldr	r3, [pc, #8]	; (800a378 <puts+0xc>)
 800a36e:	4601      	mov	r1, r0
 800a370:	6818      	ldr	r0, [r3, #0]
 800a372:	f7ff bfa7 	b.w	800a2c4 <_puts_r>
 800a376:	bf00      	nop
 800a378:	20000068 	.word	0x20000068

0800a37c <__sread>:
 800a37c:	b510      	push	{r4, lr}
 800a37e:	460c      	mov	r4, r1
 800a380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a384:	f000 f900 	bl	800a588 <_read_r>
 800a388:	2800      	cmp	r0, #0
 800a38a:	bfab      	itete	ge
 800a38c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a38e:	89a3      	ldrhlt	r3, [r4, #12]
 800a390:	181b      	addge	r3, r3, r0
 800a392:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a396:	bfac      	ite	ge
 800a398:	6563      	strge	r3, [r4, #84]	; 0x54
 800a39a:	81a3      	strhlt	r3, [r4, #12]
 800a39c:	bd10      	pop	{r4, pc}

0800a39e <__swrite>:
 800a39e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a2:	461f      	mov	r7, r3
 800a3a4:	898b      	ldrh	r3, [r1, #12]
 800a3a6:	05db      	lsls	r3, r3, #23
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	460c      	mov	r4, r1
 800a3ac:	4616      	mov	r6, r2
 800a3ae:	d505      	bpl.n	800a3bc <__swrite+0x1e>
 800a3b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f000 f8d4 	bl	800a564 <_lseek_r>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3c6:	81a3      	strh	r3, [r4, #12]
 800a3c8:	4632      	mov	r2, r6
 800a3ca:	463b      	mov	r3, r7
 800a3cc:	4628      	mov	r0, r5
 800a3ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3d2:	f000 b8eb 	b.w	800a5ac <_write_r>

0800a3d6 <__sseek>:
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	460c      	mov	r4, r1
 800a3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3de:	f000 f8c1 	bl	800a564 <_lseek_r>
 800a3e2:	1c43      	adds	r3, r0, #1
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	bf15      	itete	ne
 800a3e8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3f2:	81a3      	strheq	r3, [r4, #12]
 800a3f4:	bf18      	it	ne
 800a3f6:	81a3      	strhne	r3, [r4, #12]
 800a3f8:	bd10      	pop	{r4, pc}

0800a3fa <__sclose>:
 800a3fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3fe:	f000 b8a1 	b.w	800a544 <_close_r>

0800a402 <__swbuf_r>:
 800a402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a404:	460e      	mov	r6, r1
 800a406:	4614      	mov	r4, r2
 800a408:	4605      	mov	r5, r0
 800a40a:	b118      	cbz	r0, 800a414 <__swbuf_r+0x12>
 800a40c:	6a03      	ldr	r3, [r0, #32]
 800a40e:	b90b      	cbnz	r3, 800a414 <__swbuf_r+0x12>
 800a410:	f7ff ff10 	bl	800a234 <__sinit>
 800a414:	69a3      	ldr	r3, [r4, #24]
 800a416:	60a3      	str	r3, [r4, #8]
 800a418:	89a3      	ldrh	r3, [r4, #12]
 800a41a:	071a      	lsls	r2, r3, #28
 800a41c:	d525      	bpl.n	800a46a <__swbuf_r+0x68>
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	b31b      	cbz	r3, 800a46a <__swbuf_r+0x68>
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	6922      	ldr	r2, [r4, #16]
 800a426:	1a98      	subs	r0, r3, r2
 800a428:	6963      	ldr	r3, [r4, #20]
 800a42a:	b2f6      	uxtb	r6, r6
 800a42c:	4283      	cmp	r3, r0
 800a42e:	4637      	mov	r7, r6
 800a430:	dc04      	bgt.n	800a43c <__swbuf_r+0x3a>
 800a432:	4621      	mov	r1, r4
 800a434:	4628      	mov	r0, r5
 800a436:	f001 fdbb 	bl	800bfb0 <_fflush_r>
 800a43a:	b9e0      	cbnz	r0, 800a476 <__swbuf_r+0x74>
 800a43c:	68a3      	ldr	r3, [r4, #8]
 800a43e:	3b01      	subs	r3, #1
 800a440:	60a3      	str	r3, [r4, #8]
 800a442:	6823      	ldr	r3, [r4, #0]
 800a444:	1c5a      	adds	r2, r3, #1
 800a446:	6022      	str	r2, [r4, #0]
 800a448:	701e      	strb	r6, [r3, #0]
 800a44a:	6962      	ldr	r2, [r4, #20]
 800a44c:	1c43      	adds	r3, r0, #1
 800a44e:	429a      	cmp	r2, r3
 800a450:	d004      	beq.n	800a45c <__swbuf_r+0x5a>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	07db      	lsls	r3, r3, #31
 800a456:	d506      	bpl.n	800a466 <__swbuf_r+0x64>
 800a458:	2e0a      	cmp	r6, #10
 800a45a:	d104      	bne.n	800a466 <__swbuf_r+0x64>
 800a45c:	4621      	mov	r1, r4
 800a45e:	4628      	mov	r0, r5
 800a460:	f001 fda6 	bl	800bfb0 <_fflush_r>
 800a464:	b938      	cbnz	r0, 800a476 <__swbuf_r+0x74>
 800a466:	4638      	mov	r0, r7
 800a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a46a:	4621      	mov	r1, r4
 800a46c:	4628      	mov	r0, r5
 800a46e:	f000 f805 	bl	800a47c <__swsetup_r>
 800a472:	2800      	cmp	r0, #0
 800a474:	d0d5      	beq.n	800a422 <__swbuf_r+0x20>
 800a476:	f04f 37ff 	mov.w	r7, #4294967295
 800a47a:	e7f4      	b.n	800a466 <__swbuf_r+0x64>

0800a47c <__swsetup_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4b2a      	ldr	r3, [pc, #168]	; (800a528 <__swsetup_r+0xac>)
 800a480:	4605      	mov	r5, r0
 800a482:	6818      	ldr	r0, [r3, #0]
 800a484:	460c      	mov	r4, r1
 800a486:	b118      	cbz	r0, 800a490 <__swsetup_r+0x14>
 800a488:	6a03      	ldr	r3, [r0, #32]
 800a48a:	b90b      	cbnz	r3, 800a490 <__swsetup_r+0x14>
 800a48c:	f7ff fed2 	bl	800a234 <__sinit>
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a496:	0718      	lsls	r0, r3, #28
 800a498:	d422      	bmi.n	800a4e0 <__swsetup_r+0x64>
 800a49a:	06d9      	lsls	r1, r3, #27
 800a49c:	d407      	bmi.n	800a4ae <__swsetup_r+0x32>
 800a49e:	2309      	movs	r3, #9
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e034      	b.n	800a518 <__swsetup_r+0x9c>
 800a4ae:	0758      	lsls	r0, r3, #29
 800a4b0:	d512      	bpl.n	800a4d8 <__swsetup_r+0x5c>
 800a4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b4:	b141      	cbz	r1, 800a4c8 <__swsetup_r+0x4c>
 800a4b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4ba:	4299      	cmp	r1, r3
 800a4bc:	d002      	beq.n	800a4c4 <__swsetup_r+0x48>
 800a4be:	4628      	mov	r0, r5
 800a4c0:	f000 ff30 	bl	800b324 <_free_r>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	6363      	str	r3, [r4, #52]	; 0x34
 800a4c8:	89a3      	ldrh	r3, [r4, #12]
 800a4ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	6063      	str	r3, [r4, #4]
 800a4d4:	6923      	ldr	r3, [r4, #16]
 800a4d6:	6023      	str	r3, [r4, #0]
 800a4d8:	89a3      	ldrh	r3, [r4, #12]
 800a4da:	f043 0308 	orr.w	r3, r3, #8
 800a4de:	81a3      	strh	r3, [r4, #12]
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	b94b      	cbnz	r3, 800a4f8 <__swsetup_r+0x7c>
 800a4e4:	89a3      	ldrh	r3, [r4, #12]
 800a4e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4ee:	d003      	beq.n	800a4f8 <__swsetup_r+0x7c>
 800a4f0:	4621      	mov	r1, r4
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f001 fdaa 	bl	800c04c <__smakebuf_r>
 800a4f8:	89a0      	ldrh	r0, [r4, #12]
 800a4fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4fe:	f010 0301 	ands.w	r3, r0, #1
 800a502:	d00a      	beq.n	800a51a <__swsetup_r+0x9e>
 800a504:	2300      	movs	r3, #0
 800a506:	60a3      	str	r3, [r4, #8]
 800a508:	6963      	ldr	r3, [r4, #20]
 800a50a:	425b      	negs	r3, r3
 800a50c:	61a3      	str	r3, [r4, #24]
 800a50e:	6923      	ldr	r3, [r4, #16]
 800a510:	b943      	cbnz	r3, 800a524 <__swsetup_r+0xa8>
 800a512:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a516:	d1c4      	bne.n	800a4a2 <__swsetup_r+0x26>
 800a518:	bd38      	pop	{r3, r4, r5, pc}
 800a51a:	0781      	lsls	r1, r0, #30
 800a51c:	bf58      	it	pl
 800a51e:	6963      	ldrpl	r3, [r4, #20]
 800a520:	60a3      	str	r3, [r4, #8]
 800a522:	e7f4      	b.n	800a50e <__swsetup_r+0x92>
 800a524:	2000      	movs	r0, #0
 800a526:	e7f7      	b.n	800a518 <__swsetup_r+0x9c>
 800a528:	20000068 	.word	0x20000068

0800a52c <memset>:
 800a52c:	4402      	add	r2, r0
 800a52e:	4603      	mov	r3, r0
 800a530:	4293      	cmp	r3, r2
 800a532:	d100      	bne.n	800a536 <memset+0xa>
 800a534:	4770      	bx	lr
 800a536:	f803 1b01 	strb.w	r1, [r3], #1
 800a53a:	e7f9      	b.n	800a530 <memset+0x4>

0800a53c <_localeconv_r>:
 800a53c:	4800      	ldr	r0, [pc, #0]	; (800a540 <_localeconv_r+0x4>)
 800a53e:	4770      	bx	lr
 800a540:	2000015c 	.word	0x2000015c

0800a544 <_close_r>:
 800a544:	b538      	push	{r3, r4, r5, lr}
 800a546:	4d06      	ldr	r5, [pc, #24]	; (800a560 <_close_r+0x1c>)
 800a548:	2300      	movs	r3, #0
 800a54a:	4604      	mov	r4, r0
 800a54c:	4608      	mov	r0, r1
 800a54e:	602b      	str	r3, [r5, #0]
 800a550:	f7fa fedd 	bl	800530e <_close>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_close_r+0x1a>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_close_r+0x1a>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200022ac 	.word	0x200022ac

0800a564 <_lseek_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_lseek_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7fa fef2 	bl	800535c <_lseek>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_lseek_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_lseek_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	200022ac 	.word	0x200022ac

0800a588 <_read_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	; (800a5a8 <_read_r+0x20>)
 800a58c:	4604      	mov	r4, r0
 800a58e:	4608      	mov	r0, r1
 800a590:	4611      	mov	r1, r2
 800a592:	2200      	movs	r2, #0
 800a594:	602a      	str	r2, [r5, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	f7fa fe80 	bl	800529c <_read>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_read_r+0x1e>
 800a5a0:	682b      	ldr	r3, [r5, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_read_r+0x1e>
 800a5a4:	6023      	str	r3, [r4, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	200022ac 	.word	0x200022ac

0800a5ac <_write_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	4d07      	ldr	r5, [pc, #28]	; (800a5cc <_write_r+0x20>)
 800a5b0:	4604      	mov	r4, r0
 800a5b2:	4608      	mov	r0, r1
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	f7fa fe8b 	bl	80052d6 <_write>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_write_r+0x1e>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_write_r+0x1e>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	200022ac 	.word	0x200022ac

0800a5d0 <__errno>:
 800a5d0:	4b01      	ldr	r3, [pc, #4]	; (800a5d8 <__errno+0x8>)
 800a5d2:	6818      	ldr	r0, [r3, #0]
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop
 800a5d8:	20000068 	.word	0x20000068

0800a5dc <__libc_init_array>:
 800a5dc:	b570      	push	{r4, r5, r6, lr}
 800a5de:	4d0d      	ldr	r5, [pc, #52]	; (800a614 <__libc_init_array+0x38>)
 800a5e0:	4c0d      	ldr	r4, [pc, #52]	; (800a618 <__libc_init_array+0x3c>)
 800a5e2:	1b64      	subs	r4, r4, r5
 800a5e4:	10a4      	asrs	r4, r4, #2
 800a5e6:	2600      	movs	r6, #0
 800a5e8:	42a6      	cmp	r6, r4
 800a5ea:	d109      	bne.n	800a600 <__libc_init_array+0x24>
 800a5ec:	4d0b      	ldr	r5, [pc, #44]	; (800a61c <__libc_init_array+0x40>)
 800a5ee:	4c0c      	ldr	r4, [pc, #48]	; (800a620 <__libc_init_array+0x44>)
 800a5f0:	f002 fdc0 	bl	800d174 <_init>
 800a5f4:	1b64      	subs	r4, r4, r5
 800a5f6:	10a4      	asrs	r4, r4, #2
 800a5f8:	2600      	movs	r6, #0
 800a5fa:	42a6      	cmp	r6, r4
 800a5fc:	d105      	bne.n	800a60a <__libc_init_array+0x2e>
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
 800a600:	f855 3b04 	ldr.w	r3, [r5], #4
 800a604:	4798      	blx	r3
 800a606:	3601      	adds	r6, #1
 800a608:	e7ee      	b.n	800a5e8 <__libc_init_array+0xc>
 800a60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a60e:	4798      	blx	r3
 800a610:	3601      	adds	r6, #1
 800a612:	e7f2      	b.n	800a5fa <__libc_init_array+0x1e>
 800a614:	0800d5f0 	.word	0x0800d5f0
 800a618:	0800d5f0 	.word	0x0800d5f0
 800a61c:	0800d5f0 	.word	0x0800d5f0
 800a620:	0800d5f4 	.word	0x0800d5f4

0800a624 <__retarget_lock_init_recursive>:
 800a624:	4770      	bx	lr

0800a626 <__retarget_lock_acquire_recursive>:
 800a626:	4770      	bx	lr

0800a628 <__retarget_lock_release_recursive>:
 800a628:	4770      	bx	lr

0800a62a <quorem>:
 800a62a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62e:	6903      	ldr	r3, [r0, #16]
 800a630:	690c      	ldr	r4, [r1, #16]
 800a632:	42a3      	cmp	r3, r4
 800a634:	4607      	mov	r7, r0
 800a636:	db7e      	blt.n	800a736 <quorem+0x10c>
 800a638:	3c01      	subs	r4, #1
 800a63a:	f101 0814 	add.w	r8, r1, #20
 800a63e:	f100 0514 	add.w	r5, r0, #20
 800a642:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a646:	9301      	str	r3, [sp, #4]
 800a648:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a64c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a650:	3301      	adds	r3, #1
 800a652:	429a      	cmp	r2, r3
 800a654:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a658:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a65c:	fbb2 f6f3 	udiv	r6, r2, r3
 800a660:	d331      	bcc.n	800a6c6 <quorem+0x9c>
 800a662:	f04f 0e00 	mov.w	lr, #0
 800a666:	4640      	mov	r0, r8
 800a668:	46ac      	mov	ip, r5
 800a66a:	46f2      	mov	sl, lr
 800a66c:	f850 2b04 	ldr.w	r2, [r0], #4
 800a670:	b293      	uxth	r3, r2
 800a672:	fb06 e303 	mla	r3, r6, r3, lr
 800a676:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a67a:	0c1a      	lsrs	r2, r3, #16
 800a67c:	b29b      	uxth	r3, r3
 800a67e:	ebaa 0303 	sub.w	r3, sl, r3
 800a682:	f8dc a000 	ldr.w	sl, [ip]
 800a686:	fa13 f38a 	uxtah	r3, r3, sl
 800a68a:	fb06 220e 	mla	r2, r6, lr, r2
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	9b00      	ldr	r3, [sp, #0]
 800a692:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a696:	b292      	uxth	r2, r2
 800a698:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a69c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a0:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6a4:	4581      	cmp	r9, r0
 800a6a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6aa:	f84c 3b04 	str.w	r3, [ip], #4
 800a6ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6b2:	d2db      	bcs.n	800a66c <quorem+0x42>
 800a6b4:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6b8:	b92b      	cbnz	r3, 800a6c6 <quorem+0x9c>
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	3b04      	subs	r3, #4
 800a6be:	429d      	cmp	r5, r3
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	d32c      	bcc.n	800a71e <quorem+0xf4>
 800a6c4:	613c      	str	r4, [r7, #16]
 800a6c6:	4638      	mov	r0, r7
 800a6c8:	f001 f9a8 	bl	800ba1c <__mcmp>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	db22      	blt.n	800a716 <quorem+0xec>
 800a6d0:	3601      	adds	r6, #1
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	2000      	movs	r0, #0
 800a6d6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a6da:	f8d1 c000 	ldr.w	ip, [r1]
 800a6de:	b293      	uxth	r3, r2
 800a6e0:	1ac3      	subs	r3, r0, r3
 800a6e2:	0c12      	lsrs	r2, r2, #16
 800a6e4:	fa13 f38c 	uxtah	r3, r3, ip
 800a6e8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a6ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6f6:	45c1      	cmp	r9, r8
 800a6f8:	f841 3b04 	str.w	r3, [r1], #4
 800a6fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a700:	d2e9      	bcs.n	800a6d6 <quorem+0xac>
 800a702:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a70a:	b922      	cbnz	r2, 800a716 <quorem+0xec>
 800a70c:	3b04      	subs	r3, #4
 800a70e:	429d      	cmp	r5, r3
 800a710:	461a      	mov	r2, r3
 800a712:	d30a      	bcc.n	800a72a <quorem+0x100>
 800a714:	613c      	str	r4, [r7, #16]
 800a716:	4630      	mov	r0, r6
 800a718:	b003      	add	sp, #12
 800a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a71e:	6812      	ldr	r2, [r2, #0]
 800a720:	3b04      	subs	r3, #4
 800a722:	2a00      	cmp	r2, #0
 800a724:	d1ce      	bne.n	800a6c4 <quorem+0x9a>
 800a726:	3c01      	subs	r4, #1
 800a728:	e7c9      	b.n	800a6be <quorem+0x94>
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	3b04      	subs	r3, #4
 800a72e:	2a00      	cmp	r2, #0
 800a730:	d1f0      	bne.n	800a714 <quorem+0xea>
 800a732:	3c01      	subs	r4, #1
 800a734:	e7eb      	b.n	800a70e <quorem+0xe4>
 800a736:	2000      	movs	r0, #0
 800a738:	e7ee      	b.n	800a718 <quorem+0xee>
 800a73a:	0000      	movs	r0, r0
 800a73c:	0000      	movs	r0, r0
	...

0800a740 <_dtoa_r>:
 800a740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a744:	ed2d 8b04 	vpush	{d8-d9}
 800a748:	69c5      	ldr	r5, [r0, #28]
 800a74a:	b093      	sub	sp, #76	; 0x4c
 800a74c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a750:	ec57 6b10 	vmov	r6, r7, d0
 800a754:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a758:	9107      	str	r1, [sp, #28]
 800a75a:	4604      	mov	r4, r0
 800a75c:	920a      	str	r2, [sp, #40]	; 0x28
 800a75e:	930d      	str	r3, [sp, #52]	; 0x34
 800a760:	b975      	cbnz	r5, 800a780 <_dtoa_r+0x40>
 800a762:	2010      	movs	r0, #16
 800a764:	f000 fe2a 	bl	800b3bc <malloc>
 800a768:	4602      	mov	r2, r0
 800a76a:	61e0      	str	r0, [r4, #28]
 800a76c:	b920      	cbnz	r0, 800a778 <_dtoa_r+0x38>
 800a76e:	4bae      	ldr	r3, [pc, #696]	; (800aa28 <_dtoa_r+0x2e8>)
 800a770:	21ef      	movs	r1, #239	; 0xef
 800a772:	48ae      	ldr	r0, [pc, #696]	; (800aa2c <_dtoa_r+0x2ec>)
 800a774:	f001 fce6 	bl	800c144 <__assert_func>
 800a778:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a77c:	6005      	str	r5, [r0, #0]
 800a77e:	60c5      	str	r5, [r0, #12]
 800a780:	69e3      	ldr	r3, [r4, #28]
 800a782:	6819      	ldr	r1, [r3, #0]
 800a784:	b151      	cbz	r1, 800a79c <_dtoa_r+0x5c>
 800a786:	685a      	ldr	r2, [r3, #4]
 800a788:	604a      	str	r2, [r1, #4]
 800a78a:	2301      	movs	r3, #1
 800a78c:	4093      	lsls	r3, r2
 800a78e:	608b      	str	r3, [r1, #8]
 800a790:	4620      	mov	r0, r4
 800a792:	f000 ff07 	bl	800b5a4 <_Bfree>
 800a796:	69e3      	ldr	r3, [r4, #28]
 800a798:	2200      	movs	r2, #0
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	1e3b      	subs	r3, r7, #0
 800a79e:	bfbb      	ittet	lt
 800a7a0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7a4:	9303      	strlt	r3, [sp, #12]
 800a7a6:	2300      	movge	r3, #0
 800a7a8:	2201      	movlt	r2, #1
 800a7aa:	bfac      	ite	ge
 800a7ac:	f8c8 3000 	strge.w	r3, [r8]
 800a7b0:	f8c8 2000 	strlt.w	r2, [r8]
 800a7b4:	4b9e      	ldr	r3, [pc, #632]	; (800aa30 <_dtoa_r+0x2f0>)
 800a7b6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7ba:	ea33 0308 	bics.w	r3, r3, r8
 800a7be:	d11b      	bne.n	800a7f8 <_dtoa_r+0xb8>
 800a7c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7c2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7cc:	4333      	orrs	r3, r6
 800a7ce:	f000 8593 	beq.w	800b2f8 <_dtoa_r+0xbb8>
 800a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d4:	b963      	cbnz	r3, 800a7f0 <_dtoa_r+0xb0>
 800a7d6:	4b97      	ldr	r3, [pc, #604]	; (800aa34 <_dtoa_r+0x2f4>)
 800a7d8:	e027      	b.n	800a82a <_dtoa_r+0xea>
 800a7da:	4b97      	ldr	r3, [pc, #604]	; (800aa38 <_dtoa_r+0x2f8>)
 800a7dc:	9300      	str	r3, [sp, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	9800      	ldr	r0, [sp, #0]
 800a7e6:	b013      	add	sp, #76	; 0x4c
 800a7e8:	ecbd 8b04 	vpop	{d8-d9}
 800a7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f0:	4b90      	ldr	r3, [pc, #576]	; (800aa34 <_dtoa_r+0x2f4>)
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	3303      	adds	r3, #3
 800a7f6:	e7f3      	b.n	800a7e0 <_dtoa_r+0xa0>
 800a7f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	ec51 0b17 	vmov	r0, r1, d7
 800a802:	eeb0 8a47 	vmov.f32	s16, s14
 800a806:	eef0 8a67 	vmov.f32	s17, s15
 800a80a:	2300      	movs	r3, #0
 800a80c:	f7f6 f984 	bl	8000b18 <__aeabi_dcmpeq>
 800a810:	4681      	mov	r9, r0
 800a812:	b160      	cbz	r0, 800a82e <_dtoa_r+0xee>
 800a814:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a816:	2301      	movs	r3, #1
 800a818:	6013      	str	r3, [r2, #0]
 800a81a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f000 8568 	beq.w	800b2f2 <_dtoa_r+0xbb2>
 800a822:	4b86      	ldr	r3, [pc, #536]	; (800aa3c <_dtoa_r+0x2fc>)
 800a824:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	3b01      	subs	r3, #1
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	e7da      	b.n	800a7e4 <_dtoa_r+0xa4>
 800a82e:	aa10      	add	r2, sp, #64	; 0x40
 800a830:	a911      	add	r1, sp, #68	; 0x44
 800a832:	4620      	mov	r0, r4
 800a834:	eeb0 0a48 	vmov.f32	s0, s16
 800a838:	eef0 0a68 	vmov.f32	s1, s17
 800a83c:	f001 f994 	bl	800bb68 <__d2b>
 800a840:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a844:	4682      	mov	sl, r0
 800a846:	2d00      	cmp	r5, #0
 800a848:	d07f      	beq.n	800a94a <_dtoa_r+0x20a>
 800a84a:	ee18 3a90 	vmov	r3, s17
 800a84e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a852:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a856:	ec51 0b18 	vmov	r0, r1, d8
 800a85a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a85e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a862:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a866:	4619      	mov	r1, r3
 800a868:	2200      	movs	r2, #0
 800a86a:	4b75      	ldr	r3, [pc, #468]	; (800aa40 <_dtoa_r+0x300>)
 800a86c:	f7f5 fd34 	bl	80002d8 <__aeabi_dsub>
 800a870:	a367      	add	r3, pc, #412	; (adr r3, 800aa10 <_dtoa_r+0x2d0>)
 800a872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a876:	f7f5 fee7 	bl	8000648 <__aeabi_dmul>
 800a87a:	a367      	add	r3, pc, #412	; (adr r3, 800aa18 <_dtoa_r+0x2d8>)
 800a87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a880:	f7f5 fd2c 	bl	80002dc <__adddf3>
 800a884:	4606      	mov	r6, r0
 800a886:	4628      	mov	r0, r5
 800a888:	460f      	mov	r7, r1
 800a88a:	f7f5 fe73 	bl	8000574 <__aeabi_i2d>
 800a88e:	a364      	add	r3, pc, #400	; (adr r3, 800aa20 <_dtoa_r+0x2e0>)
 800a890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a894:	f7f5 fed8 	bl	8000648 <__aeabi_dmul>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	4630      	mov	r0, r6
 800a89e:	4639      	mov	r1, r7
 800a8a0:	f7f5 fd1c 	bl	80002dc <__adddf3>
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460f      	mov	r7, r1
 800a8a8:	f7f6 f97e 	bl	8000ba8 <__aeabi_d2iz>
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4683      	mov	fp, r0
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	f7f6 f939 	bl	8000b2c <__aeabi_dcmplt>
 800a8ba:	b148      	cbz	r0, 800a8d0 <_dtoa_r+0x190>
 800a8bc:	4658      	mov	r0, fp
 800a8be:	f7f5 fe59 	bl	8000574 <__aeabi_i2d>
 800a8c2:	4632      	mov	r2, r6
 800a8c4:	463b      	mov	r3, r7
 800a8c6:	f7f6 f927 	bl	8000b18 <__aeabi_dcmpeq>
 800a8ca:	b908      	cbnz	r0, 800a8d0 <_dtoa_r+0x190>
 800a8cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8d0:	f1bb 0f16 	cmp.w	fp, #22
 800a8d4:	d857      	bhi.n	800a986 <_dtoa_r+0x246>
 800a8d6:	4b5b      	ldr	r3, [pc, #364]	; (800aa44 <_dtoa_r+0x304>)
 800a8d8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e0:	ec51 0b18 	vmov	r0, r1, d8
 800a8e4:	f7f6 f922 	bl	8000b2c <__aeabi_dcmplt>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d04e      	beq.n	800a98a <_dtoa_r+0x24a>
 800a8ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8f6:	1b5b      	subs	r3, r3, r5
 800a8f8:	1e5a      	subs	r2, r3, #1
 800a8fa:	bf45      	ittet	mi
 800a8fc:	f1c3 0301 	rsbmi	r3, r3, #1
 800a900:	9305      	strmi	r3, [sp, #20]
 800a902:	2300      	movpl	r3, #0
 800a904:	2300      	movmi	r3, #0
 800a906:	9206      	str	r2, [sp, #24]
 800a908:	bf54      	ite	pl
 800a90a:	9305      	strpl	r3, [sp, #20]
 800a90c:	9306      	strmi	r3, [sp, #24]
 800a90e:	f1bb 0f00 	cmp.w	fp, #0
 800a912:	db3c      	blt.n	800a98e <_dtoa_r+0x24e>
 800a914:	9b06      	ldr	r3, [sp, #24]
 800a916:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a91a:	445b      	add	r3, fp
 800a91c:	9306      	str	r3, [sp, #24]
 800a91e:	2300      	movs	r3, #0
 800a920:	9308      	str	r3, [sp, #32]
 800a922:	9b07      	ldr	r3, [sp, #28]
 800a924:	2b09      	cmp	r3, #9
 800a926:	d868      	bhi.n	800a9fa <_dtoa_r+0x2ba>
 800a928:	2b05      	cmp	r3, #5
 800a92a:	bfc4      	itt	gt
 800a92c:	3b04      	subgt	r3, #4
 800a92e:	9307      	strgt	r3, [sp, #28]
 800a930:	9b07      	ldr	r3, [sp, #28]
 800a932:	f1a3 0302 	sub.w	r3, r3, #2
 800a936:	bfcc      	ite	gt
 800a938:	2500      	movgt	r5, #0
 800a93a:	2501      	movle	r5, #1
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	f200 8085 	bhi.w	800aa4c <_dtoa_r+0x30c>
 800a942:	e8df f003 	tbb	[pc, r3]
 800a946:	3b2e      	.short	0x3b2e
 800a948:	5839      	.short	0x5839
 800a94a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a94e:	441d      	add	r5, r3
 800a950:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a954:	2b20      	cmp	r3, #32
 800a956:	bfc1      	itttt	gt
 800a958:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a95c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a960:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a964:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a968:	bfd6      	itet	le
 800a96a:	f1c3 0320 	rsble	r3, r3, #32
 800a96e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a972:	fa06 f003 	lslle.w	r0, r6, r3
 800a976:	f7f5 fded 	bl	8000554 <__aeabi_ui2d>
 800a97a:	2201      	movs	r2, #1
 800a97c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a980:	3d01      	subs	r5, #1
 800a982:	920e      	str	r2, [sp, #56]	; 0x38
 800a984:	e76f      	b.n	800a866 <_dtoa_r+0x126>
 800a986:	2301      	movs	r3, #1
 800a988:	e7b3      	b.n	800a8f2 <_dtoa_r+0x1b2>
 800a98a:	900c      	str	r0, [sp, #48]	; 0x30
 800a98c:	e7b2      	b.n	800a8f4 <_dtoa_r+0x1b4>
 800a98e:	9b05      	ldr	r3, [sp, #20]
 800a990:	eba3 030b 	sub.w	r3, r3, fp
 800a994:	9305      	str	r3, [sp, #20]
 800a996:	f1cb 0300 	rsb	r3, fp, #0
 800a99a:	9308      	str	r3, [sp, #32]
 800a99c:	2300      	movs	r3, #0
 800a99e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9a0:	e7bf      	b.n	800a922 <_dtoa_r+0x1e2>
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	dc52      	bgt.n	800aa52 <_dtoa_r+0x312>
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	9301      	str	r3, [sp, #4]
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9b6:	e00b      	b.n	800a9d0 <_dtoa_r+0x290>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e7f3      	b.n	800a9a4 <_dtoa_r+0x264>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9c2:	445b      	add	r3, fp
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	bfb8      	it	lt
 800a9ce:	2301      	movlt	r3, #1
 800a9d0:	69e0      	ldr	r0, [r4, #28]
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	f102 0614 	add.w	r6, r2, #20
 800a9da:	429e      	cmp	r6, r3
 800a9dc:	d93d      	bls.n	800aa5a <_dtoa_r+0x31a>
 800a9de:	6041      	str	r1, [r0, #4]
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 fd9f 	bl	800b524 <_Balloc>
 800a9e6:	9000      	str	r0, [sp, #0]
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	d139      	bne.n	800aa60 <_dtoa_r+0x320>
 800a9ec:	4b16      	ldr	r3, [pc, #88]	; (800aa48 <_dtoa_r+0x308>)
 800a9ee:	4602      	mov	r2, r0
 800a9f0:	f240 11af 	movw	r1, #431	; 0x1af
 800a9f4:	e6bd      	b.n	800a772 <_dtoa_r+0x32>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e7e1      	b.n	800a9be <_dtoa_r+0x27e>
 800a9fa:	2501      	movs	r5, #1
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	9307      	str	r3, [sp, #28]
 800aa00:	9509      	str	r5, [sp, #36]	; 0x24
 800aa02:	f04f 33ff 	mov.w	r3, #4294967295
 800aa06:	9301      	str	r3, [sp, #4]
 800aa08:	9304      	str	r3, [sp, #16]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2312      	movs	r3, #18
 800aa0e:	e7d1      	b.n	800a9b4 <_dtoa_r+0x274>
 800aa10:	636f4361 	.word	0x636f4361
 800aa14:	3fd287a7 	.word	0x3fd287a7
 800aa18:	8b60c8b3 	.word	0x8b60c8b3
 800aa1c:	3fc68a28 	.word	0x3fc68a28
 800aa20:	509f79fb 	.word	0x509f79fb
 800aa24:	3fd34413 	.word	0x3fd34413
 800aa28:	0800d285 	.word	0x0800d285
 800aa2c:	0800d29c 	.word	0x0800d29c
 800aa30:	7ff00000 	.word	0x7ff00000
 800aa34:	0800d281 	.word	0x0800d281
 800aa38:	0800d278 	.word	0x0800d278
 800aa3c:	0800d255 	.word	0x0800d255
 800aa40:	3ff80000 	.word	0x3ff80000
 800aa44:	0800d388 	.word	0x0800d388
 800aa48:	0800d2f4 	.word	0x0800d2f4
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa50:	e7d7      	b.n	800aa02 <_dtoa_r+0x2c2>
 800aa52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa54:	9301      	str	r3, [sp, #4]
 800aa56:	9304      	str	r3, [sp, #16]
 800aa58:	e7ba      	b.n	800a9d0 <_dtoa_r+0x290>
 800aa5a:	3101      	adds	r1, #1
 800aa5c:	0052      	lsls	r2, r2, #1
 800aa5e:	e7ba      	b.n	800a9d6 <_dtoa_r+0x296>
 800aa60:	69e3      	ldr	r3, [r4, #28]
 800aa62:	9a00      	ldr	r2, [sp, #0]
 800aa64:	601a      	str	r2, [r3, #0]
 800aa66:	9b04      	ldr	r3, [sp, #16]
 800aa68:	2b0e      	cmp	r3, #14
 800aa6a:	f200 80a8 	bhi.w	800abbe <_dtoa_r+0x47e>
 800aa6e:	2d00      	cmp	r5, #0
 800aa70:	f000 80a5 	beq.w	800abbe <_dtoa_r+0x47e>
 800aa74:	f1bb 0f00 	cmp.w	fp, #0
 800aa78:	dd38      	ble.n	800aaec <_dtoa_r+0x3ac>
 800aa7a:	4bc0      	ldr	r3, [pc, #768]	; (800ad7c <_dtoa_r+0x63c>)
 800aa7c:	f00b 020f 	and.w	r2, fp, #15
 800aa80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa84:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa88:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa8c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa90:	d019      	beq.n	800aac6 <_dtoa_r+0x386>
 800aa92:	4bbb      	ldr	r3, [pc, #748]	; (800ad80 <_dtoa_r+0x640>)
 800aa94:	ec51 0b18 	vmov	r0, r1, d8
 800aa98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa9c:	f7f5 fefe 	bl	800089c <__aeabi_ddiv>
 800aaa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaa4:	f008 080f 	and.w	r8, r8, #15
 800aaa8:	2503      	movs	r5, #3
 800aaaa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad80 <_dtoa_r+0x640>
 800aaae:	f1b8 0f00 	cmp.w	r8, #0
 800aab2:	d10a      	bne.n	800aaca <_dtoa_r+0x38a>
 800aab4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab8:	4632      	mov	r2, r6
 800aaba:	463b      	mov	r3, r7
 800aabc:	f7f5 feee 	bl	800089c <__aeabi_ddiv>
 800aac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac4:	e02b      	b.n	800ab1e <_dtoa_r+0x3de>
 800aac6:	2502      	movs	r5, #2
 800aac8:	e7ef      	b.n	800aaaa <_dtoa_r+0x36a>
 800aaca:	f018 0f01 	tst.w	r8, #1
 800aace:	d008      	beq.n	800aae2 <_dtoa_r+0x3a2>
 800aad0:	4630      	mov	r0, r6
 800aad2:	4639      	mov	r1, r7
 800aad4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aad8:	f7f5 fdb6 	bl	8000648 <__aeabi_dmul>
 800aadc:	3501      	adds	r5, #1
 800aade:	4606      	mov	r6, r0
 800aae0:	460f      	mov	r7, r1
 800aae2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aae6:	f109 0908 	add.w	r9, r9, #8
 800aaea:	e7e0      	b.n	800aaae <_dtoa_r+0x36e>
 800aaec:	f000 809f 	beq.w	800ac2e <_dtoa_r+0x4ee>
 800aaf0:	f1cb 0600 	rsb	r6, fp, #0
 800aaf4:	4ba1      	ldr	r3, [pc, #644]	; (800ad7c <_dtoa_r+0x63c>)
 800aaf6:	4fa2      	ldr	r7, [pc, #648]	; (800ad80 <_dtoa_r+0x640>)
 800aaf8:	f006 020f 	and.w	r2, r6, #15
 800aafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	ec51 0b18 	vmov	r0, r1, d8
 800ab08:	f7f5 fd9e 	bl	8000648 <__aeabi_dmul>
 800ab0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab10:	1136      	asrs	r6, r6, #4
 800ab12:	2300      	movs	r3, #0
 800ab14:	2502      	movs	r5, #2
 800ab16:	2e00      	cmp	r6, #0
 800ab18:	d17e      	bne.n	800ac18 <_dtoa_r+0x4d8>
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1d0      	bne.n	800aac0 <_dtoa_r+0x380>
 800ab1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab20:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8084 	beq.w	800ac32 <_dtoa_r+0x4f2>
 800ab2a:	4b96      	ldr	r3, [pc, #600]	; (800ad84 <_dtoa_r+0x644>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 fffb 	bl	8000b2c <__aeabi_dcmplt>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	d07b      	beq.n	800ac32 <_dtoa_r+0x4f2>
 800ab3a:	9b04      	ldr	r3, [sp, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d078      	beq.n	800ac32 <_dtoa_r+0x4f2>
 800ab40:	9b01      	ldr	r3, [sp, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	dd39      	ble.n	800abba <_dtoa_r+0x47a>
 800ab46:	4b90      	ldr	r3, [pc, #576]	; (800ad88 <_dtoa_r+0x648>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	4640      	mov	r0, r8
 800ab4c:	4649      	mov	r1, r9
 800ab4e:	f7f5 fd7b 	bl	8000648 <__aeabi_dmul>
 800ab52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab56:	9e01      	ldr	r6, [sp, #4]
 800ab58:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab5c:	3501      	adds	r5, #1
 800ab5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab62:	4628      	mov	r0, r5
 800ab64:	f7f5 fd06 	bl	8000574 <__aeabi_i2d>
 800ab68:	4642      	mov	r2, r8
 800ab6a:	464b      	mov	r3, r9
 800ab6c:	f7f5 fd6c 	bl	8000648 <__aeabi_dmul>
 800ab70:	4b86      	ldr	r3, [pc, #536]	; (800ad8c <_dtoa_r+0x64c>)
 800ab72:	2200      	movs	r2, #0
 800ab74:	f7f5 fbb2 	bl	80002dc <__adddf3>
 800ab78:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab80:	9303      	str	r3, [sp, #12]
 800ab82:	2e00      	cmp	r6, #0
 800ab84:	d158      	bne.n	800ac38 <_dtoa_r+0x4f8>
 800ab86:	4b82      	ldr	r3, [pc, #520]	; (800ad90 <_dtoa_r+0x650>)
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 fba3 	bl	80002d8 <__aeabi_dsub>
 800ab92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab96:	4680      	mov	r8, r0
 800ab98:	4689      	mov	r9, r1
 800ab9a:	f7f5 ffe5 	bl	8000b68 <__aeabi_dcmpgt>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f040 8296 	bne.w	800b0d0 <_dtoa_r+0x990>
 800aba4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aba8:	4640      	mov	r0, r8
 800abaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abae:	4649      	mov	r1, r9
 800abb0:	f7f5 ffbc 	bl	8000b2c <__aeabi_dcmplt>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f040 8289 	bne.w	800b0cc <_dtoa_r+0x98c>
 800abba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f2c0 814e 	blt.w	800ae62 <_dtoa_r+0x722>
 800abc6:	f1bb 0f0e 	cmp.w	fp, #14
 800abca:	f300 814a 	bgt.w	800ae62 <_dtoa_r+0x722>
 800abce:	4b6b      	ldr	r3, [pc, #428]	; (800ad7c <_dtoa_r+0x63c>)
 800abd0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800abd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f280 80dc 	bge.w	800ad98 <_dtoa_r+0x658>
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f300 80d8 	bgt.w	800ad98 <_dtoa_r+0x658>
 800abe8:	f040 826f 	bne.w	800b0ca <_dtoa_r+0x98a>
 800abec:	4b68      	ldr	r3, [pc, #416]	; (800ad90 <_dtoa_r+0x650>)
 800abee:	2200      	movs	r2, #0
 800abf0:	4640      	mov	r0, r8
 800abf2:	4649      	mov	r1, r9
 800abf4:	f7f5 fd28 	bl	8000648 <__aeabi_dmul>
 800abf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abfc:	f7f5 ffaa 	bl	8000b54 <__aeabi_dcmpge>
 800ac00:	9e04      	ldr	r6, [sp, #16]
 800ac02:	4637      	mov	r7, r6
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f040 8245 	bne.w	800b094 <_dtoa_r+0x954>
 800ac0a:	9d00      	ldr	r5, [sp, #0]
 800ac0c:	2331      	movs	r3, #49	; 0x31
 800ac0e:	f805 3b01 	strb.w	r3, [r5], #1
 800ac12:	f10b 0b01 	add.w	fp, fp, #1
 800ac16:	e241      	b.n	800b09c <_dtoa_r+0x95c>
 800ac18:	07f2      	lsls	r2, r6, #31
 800ac1a:	d505      	bpl.n	800ac28 <_dtoa_r+0x4e8>
 800ac1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac20:	f7f5 fd12 	bl	8000648 <__aeabi_dmul>
 800ac24:	3501      	adds	r5, #1
 800ac26:	2301      	movs	r3, #1
 800ac28:	1076      	asrs	r6, r6, #1
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	e773      	b.n	800ab16 <_dtoa_r+0x3d6>
 800ac2e:	2502      	movs	r5, #2
 800ac30:	e775      	b.n	800ab1e <_dtoa_r+0x3de>
 800ac32:	9e04      	ldr	r6, [sp, #16]
 800ac34:	465f      	mov	r7, fp
 800ac36:	e792      	b.n	800ab5e <_dtoa_r+0x41e>
 800ac38:	9900      	ldr	r1, [sp, #0]
 800ac3a:	4b50      	ldr	r3, [pc, #320]	; (800ad7c <_dtoa_r+0x63c>)
 800ac3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac40:	4431      	add	r1, r6
 800ac42:	9102      	str	r1, [sp, #8]
 800ac44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac46:	eeb0 9a47 	vmov.f32	s18, s14
 800ac4a:	eef0 9a67 	vmov.f32	s19, s15
 800ac4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac56:	2900      	cmp	r1, #0
 800ac58:	d044      	beq.n	800ace4 <_dtoa_r+0x5a4>
 800ac5a:	494e      	ldr	r1, [pc, #312]	; (800ad94 <_dtoa_r+0x654>)
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	f7f5 fe1d 	bl	800089c <__aeabi_ddiv>
 800ac62:	ec53 2b19 	vmov	r2, r3, d9
 800ac66:	f7f5 fb37 	bl	80002d8 <__aeabi_dsub>
 800ac6a:	9d00      	ldr	r5, [sp, #0]
 800ac6c:	ec41 0b19 	vmov	d9, r0, r1
 800ac70:	4649      	mov	r1, r9
 800ac72:	4640      	mov	r0, r8
 800ac74:	f7f5 ff98 	bl	8000ba8 <__aeabi_d2iz>
 800ac78:	4606      	mov	r6, r0
 800ac7a:	f7f5 fc7b 	bl	8000574 <__aeabi_i2d>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4640      	mov	r0, r8
 800ac84:	4649      	mov	r1, r9
 800ac86:	f7f5 fb27 	bl	80002d8 <__aeabi_dsub>
 800ac8a:	3630      	adds	r6, #48	; 0x30
 800ac8c:	f805 6b01 	strb.w	r6, [r5], #1
 800ac90:	ec53 2b19 	vmov	r2, r3, d9
 800ac94:	4680      	mov	r8, r0
 800ac96:	4689      	mov	r9, r1
 800ac98:	f7f5 ff48 	bl	8000b2c <__aeabi_dcmplt>
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	d164      	bne.n	800ad6a <_dtoa_r+0x62a>
 800aca0:	4642      	mov	r2, r8
 800aca2:	464b      	mov	r3, r9
 800aca4:	4937      	ldr	r1, [pc, #220]	; (800ad84 <_dtoa_r+0x644>)
 800aca6:	2000      	movs	r0, #0
 800aca8:	f7f5 fb16 	bl	80002d8 <__aeabi_dsub>
 800acac:	ec53 2b19 	vmov	r2, r3, d9
 800acb0:	f7f5 ff3c 	bl	8000b2c <__aeabi_dcmplt>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	f040 80b6 	bne.w	800ae26 <_dtoa_r+0x6e6>
 800acba:	9b02      	ldr	r3, [sp, #8]
 800acbc:	429d      	cmp	r5, r3
 800acbe:	f43f af7c 	beq.w	800abba <_dtoa_r+0x47a>
 800acc2:	4b31      	ldr	r3, [pc, #196]	; (800ad88 <_dtoa_r+0x648>)
 800acc4:	ec51 0b19 	vmov	r0, r1, d9
 800acc8:	2200      	movs	r2, #0
 800acca:	f7f5 fcbd 	bl	8000648 <__aeabi_dmul>
 800acce:	4b2e      	ldr	r3, [pc, #184]	; (800ad88 <_dtoa_r+0x648>)
 800acd0:	ec41 0b19 	vmov	d9, r0, r1
 800acd4:	2200      	movs	r2, #0
 800acd6:	4640      	mov	r0, r8
 800acd8:	4649      	mov	r1, r9
 800acda:	f7f5 fcb5 	bl	8000648 <__aeabi_dmul>
 800acde:	4680      	mov	r8, r0
 800ace0:	4689      	mov	r9, r1
 800ace2:	e7c5      	b.n	800ac70 <_dtoa_r+0x530>
 800ace4:	ec51 0b17 	vmov	r0, r1, d7
 800ace8:	f7f5 fcae 	bl	8000648 <__aeabi_dmul>
 800acec:	9b02      	ldr	r3, [sp, #8]
 800acee:	9d00      	ldr	r5, [sp, #0]
 800acf0:	930f      	str	r3, [sp, #60]	; 0x3c
 800acf2:	ec41 0b19 	vmov	d9, r0, r1
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	f7f5 ff55 	bl	8000ba8 <__aeabi_d2iz>
 800acfe:	4606      	mov	r6, r0
 800ad00:	f7f5 fc38 	bl	8000574 <__aeabi_i2d>
 800ad04:	3630      	adds	r6, #48	; 0x30
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7f5 fae3 	bl	80002d8 <__aeabi_dsub>
 800ad12:	f805 6b01 	strb.w	r6, [r5], #1
 800ad16:	9b02      	ldr	r3, [sp, #8]
 800ad18:	429d      	cmp	r5, r3
 800ad1a:	4680      	mov	r8, r0
 800ad1c:	4689      	mov	r9, r1
 800ad1e:	f04f 0200 	mov.w	r2, #0
 800ad22:	d124      	bne.n	800ad6e <_dtoa_r+0x62e>
 800ad24:	4b1b      	ldr	r3, [pc, #108]	; (800ad94 <_dtoa_r+0x654>)
 800ad26:	ec51 0b19 	vmov	r0, r1, d9
 800ad2a:	f7f5 fad7 	bl	80002dc <__adddf3>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 ff17 	bl	8000b68 <__aeabi_dcmpgt>
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	d173      	bne.n	800ae26 <_dtoa_r+0x6e6>
 800ad3e:	ec53 2b19 	vmov	r2, r3, d9
 800ad42:	4914      	ldr	r1, [pc, #80]	; (800ad94 <_dtoa_r+0x654>)
 800ad44:	2000      	movs	r0, #0
 800ad46:	f7f5 fac7 	bl	80002d8 <__aeabi_dsub>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4640      	mov	r0, r8
 800ad50:	4649      	mov	r1, r9
 800ad52:	f7f5 feeb 	bl	8000b2c <__aeabi_dcmplt>
 800ad56:	2800      	cmp	r0, #0
 800ad58:	f43f af2f 	beq.w	800abba <_dtoa_r+0x47a>
 800ad5c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad5e:	1e6b      	subs	r3, r5, #1
 800ad60:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad66:	2b30      	cmp	r3, #48	; 0x30
 800ad68:	d0f8      	beq.n	800ad5c <_dtoa_r+0x61c>
 800ad6a:	46bb      	mov	fp, r7
 800ad6c:	e04a      	b.n	800ae04 <_dtoa_r+0x6c4>
 800ad6e:	4b06      	ldr	r3, [pc, #24]	; (800ad88 <_dtoa_r+0x648>)
 800ad70:	f7f5 fc6a 	bl	8000648 <__aeabi_dmul>
 800ad74:	4680      	mov	r8, r0
 800ad76:	4689      	mov	r9, r1
 800ad78:	e7bd      	b.n	800acf6 <_dtoa_r+0x5b6>
 800ad7a:	bf00      	nop
 800ad7c:	0800d388 	.word	0x0800d388
 800ad80:	0800d360 	.word	0x0800d360
 800ad84:	3ff00000 	.word	0x3ff00000
 800ad88:	40240000 	.word	0x40240000
 800ad8c:	401c0000 	.word	0x401c0000
 800ad90:	40140000 	.word	0x40140000
 800ad94:	3fe00000 	.word	0x3fe00000
 800ad98:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad9c:	9d00      	ldr	r5, [sp, #0]
 800ad9e:	4642      	mov	r2, r8
 800ada0:	464b      	mov	r3, r9
 800ada2:	4630      	mov	r0, r6
 800ada4:	4639      	mov	r1, r7
 800ada6:	f7f5 fd79 	bl	800089c <__aeabi_ddiv>
 800adaa:	f7f5 fefd 	bl	8000ba8 <__aeabi_d2iz>
 800adae:	9001      	str	r0, [sp, #4]
 800adb0:	f7f5 fbe0 	bl	8000574 <__aeabi_i2d>
 800adb4:	4642      	mov	r2, r8
 800adb6:	464b      	mov	r3, r9
 800adb8:	f7f5 fc46 	bl	8000648 <__aeabi_dmul>
 800adbc:	4602      	mov	r2, r0
 800adbe:	460b      	mov	r3, r1
 800adc0:	4630      	mov	r0, r6
 800adc2:	4639      	mov	r1, r7
 800adc4:	f7f5 fa88 	bl	80002d8 <__aeabi_dsub>
 800adc8:	9e01      	ldr	r6, [sp, #4]
 800adca:	9f04      	ldr	r7, [sp, #16]
 800adcc:	3630      	adds	r6, #48	; 0x30
 800adce:	f805 6b01 	strb.w	r6, [r5], #1
 800add2:	9e00      	ldr	r6, [sp, #0]
 800add4:	1bae      	subs	r6, r5, r6
 800add6:	42b7      	cmp	r7, r6
 800add8:	4602      	mov	r2, r0
 800adda:	460b      	mov	r3, r1
 800addc:	d134      	bne.n	800ae48 <_dtoa_r+0x708>
 800adde:	f7f5 fa7d 	bl	80002dc <__adddf3>
 800ade2:	4642      	mov	r2, r8
 800ade4:	464b      	mov	r3, r9
 800ade6:	4606      	mov	r6, r0
 800ade8:	460f      	mov	r7, r1
 800adea:	f7f5 febd 	bl	8000b68 <__aeabi_dcmpgt>
 800adee:	b9c8      	cbnz	r0, 800ae24 <_dtoa_r+0x6e4>
 800adf0:	4642      	mov	r2, r8
 800adf2:	464b      	mov	r3, r9
 800adf4:	4630      	mov	r0, r6
 800adf6:	4639      	mov	r1, r7
 800adf8:	f7f5 fe8e 	bl	8000b18 <__aeabi_dcmpeq>
 800adfc:	b110      	cbz	r0, 800ae04 <_dtoa_r+0x6c4>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	07db      	lsls	r3, r3, #31
 800ae02:	d40f      	bmi.n	800ae24 <_dtoa_r+0x6e4>
 800ae04:	4651      	mov	r1, sl
 800ae06:	4620      	mov	r0, r4
 800ae08:	f000 fbcc 	bl	800b5a4 <_Bfree>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae10:	702b      	strb	r3, [r5, #0]
 800ae12:	f10b 0301 	add.w	r3, fp, #1
 800ae16:	6013      	str	r3, [r2, #0]
 800ae18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	f43f ace2 	beq.w	800a7e4 <_dtoa_r+0xa4>
 800ae20:	601d      	str	r5, [r3, #0]
 800ae22:	e4df      	b.n	800a7e4 <_dtoa_r+0xa4>
 800ae24:	465f      	mov	r7, fp
 800ae26:	462b      	mov	r3, r5
 800ae28:	461d      	mov	r5, r3
 800ae2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae2e:	2a39      	cmp	r2, #57	; 0x39
 800ae30:	d106      	bne.n	800ae40 <_dtoa_r+0x700>
 800ae32:	9a00      	ldr	r2, [sp, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d1f7      	bne.n	800ae28 <_dtoa_r+0x6e8>
 800ae38:	9900      	ldr	r1, [sp, #0]
 800ae3a:	2230      	movs	r2, #48	; 0x30
 800ae3c:	3701      	adds	r7, #1
 800ae3e:	700a      	strb	r2, [r1, #0]
 800ae40:	781a      	ldrb	r2, [r3, #0]
 800ae42:	3201      	adds	r2, #1
 800ae44:	701a      	strb	r2, [r3, #0]
 800ae46:	e790      	b.n	800ad6a <_dtoa_r+0x62a>
 800ae48:	4ba3      	ldr	r3, [pc, #652]	; (800b0d8 <_dtoa_r+0x998>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f7f5 fbfc 	bl	8000648 <__aeabi_dmul>
 800ae50:	2200      	movs	r2, #0
 800ae52:	2300      	movs	r3, #0
 800ae54:	4606      	mov	r6, r0
 800ae56:	460f      	mov	r7, r1
 800ae58:	f7f5 fe5e 	bl	8000b18 <__aeabi_dcmpeq>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d09e      	beq.n	800ad9e <_dtoa_r+0x65e>
 800ae60:	e7d0      	b.n	800ae04 <_dtoa_r+0x6c4>
 800ae62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae64:	2a00      	cmp	r2, #0
 800ae66:	f000 80ca 	beq.w	800affe <_dtoa_r+0x8be>
 800ae6a:	9a07      	ldr	r2, [sp, #28]
 800ae6c:	2a01      	cmp	r2, #1
 800ae6e:	f300 80ad 	bgt.w	800afcc <_dtoa_r+0x88c>
 800ae72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae74:	2a00      	cmp	r2, #0
 800ae76:	f000 80a5 	beq.w	800afc4 <_dtoa_r+0x884>
 800ae7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae7e:	9e08      	ldr	r6, [sp, #32]
 800ae80:	9d05      	ldr	r5, [sp, #20]
 800ae82:	9a05      	ldr	r2, [sp, #20]
 800ae84:	441a      	add	r2, r3
 800ae86:	9205      	str	r2, [sp, #20]
 800ae88:	9a06      	ldr	r2, [sp, #24]
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	441a      	add	r2, r3
 800ae8e:	4620      	mov	r0, r4
 800ae90:	9206      	str	r2, [sp, #24]
 800ae92:	f000 fc3d 	bl	800b710 <__i2b>
 800ae96:	4607      	mov	r7, r0
 800ae98:	b165      	cbz	r5, 800aeb4 <_dtoa_r+0x774>
 800ae9a:	9b06      	ldr	r3, [sp, #24]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dd09      	ble.n	800aeb4 <_dtoa_r+0x774>
 800aea0:	42ab      	cmp	r3, r5
 800aea2:	9a05      	ldr	r2, [sp, #20]
 800aea4:	bfa8      	it	ge
 800aea6:	462b      	movge	r3, r5
 800aea8:	1ad2      	subs	r2, r2, r3
 800aeaa:	9205      	str	r2, [sp, #20]
 800aeac:	9a06      	ldr	r2, [sp, #24]
 800aeae:	1aed      	subs	r5, r5, r3
 800aeb0:	1ad3      	subs	r3, r2, r3
 800aeb2:	9306      	str	r3, [sp, #24]
 800aeb4:	9b08      	ldr	r3, [sp, #32]
 800aeb6:	b1f3      	cbz	r3, 800aef6 <_dtoa_r+0x7b6>
 800aeb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	f000 80a3 	beq.w	800b006 <_dtoa_r+0x8c6>
 800aec0:	2e00      	cmp	r6, #0
 800aec2:	dd10      	ble.n	800aee6 <_dtoa_r+0x7a6>
 800aec4:	4639      	mov	r1, r7
 800aec6:	4632      	mov	r2, r6
 800aec8:	4620      	mov	r0, r4
 800aeca:	f000 fce1 	bl	800b890 <__pow5mult>
 800aece:	4652      	mov	r2, sl
 800aed0:	4601      	mov	r1, r0
 800aed2:	4607      	mov	r7, r0
 800aed4:	4620      	mov	r0, r4
 800aed6:	f000 fc31 	bl	800b73c <__multiply>
 800aeda:	4651      	mov	r1, sl
 800aedc:	4680      	mov	r8, r0
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 fb60 	bl	800b5a4 <_Bfree>
 800aee4:	46c2      	mov	sl, r8
 800aee6:	9b08      	ldr	r3, [sp, #32]
 800aee8:	1b9a      	subs	r2, r3, r6
 800aeea:	d004      	beq.n	800aef6 <_dtoa_r+0x7b6>
 800aeec:	4651      	mov	r1, sl
 800aeee:	4620      	mov	r0, r4
 800aef0:	f000 fcce 	bl	800b890 <__pow5mult>
 800aef4:	4682      	mov	sl, r0
 800aef6:	2101      	movs	r1, #1
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fc09 	bl	800b710 <__i2b>
 800aefe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af00:	2b00      	cmp	r3, #0
 800af02:	4606      	mov	r6, r0
 800af04:	f340 8081 	ble.w	800b00a <_dtoa_r+0x8ca>
 800af08:	461a      	mov	r2, r3
 800af0a:	4601      	mov	r1, r0
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fcbf 	bl	800b890 <__pow5mult>
 800af12:	9b07      	ldr	r3, [sp, #28]
 800af14:	2b01      	cmp	r3, #1
 800af16:	4606      	mov	r6, r0
 800af18:	dd7a      	ble.n	800b010 <_dtoa_r+0x8d0>
 800af1a:	f04f 0800 	mov.w	r8, #0
 800af1e:	6933      	ldr	r3, [r6, #16]
 800af20:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af24:	6918      	ldr	r0, [r3, #16]
 800af26:	f000 fba5 	bl	800b674 <__hi0bits>
 800af2a:	f1c0 0020 	rsb	r0, r0, #32
 800af2e:	9b06      	ldr	r3, [sp, #24]
 800af30:	4418      	add	r0, r3
 800af32:	f010 001f 	ands.w	r0, r0, #31
 800af36:	f000 8094 	beq.w	800b062 <_dtoa_r+0x922>
 800af3a:	f1c0 0320 	rsb	r3, r0, #32
 800af3e:	2b04      	cmp	r3, #4
 800af40:	f340 8085 	ble.w	800b04e <_dtoa_r+0x90e>
 800af44:	9b05      	ldr	r3, [sp, #20]
 800af46:	f1c0 001c 	rsb	r0, r0, #28
 800af4a:	4403      	add	r3, r0
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	9b06      	ldr	r3, [sp, #24]
 800af50:	4403      	add	r3, r0
 800af52:	4405      	add	r5, r0
 800af54:	9306      	str	r3, [sp, #24]
 800af56:	9b05      	ldr	r3, [sp, #20]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	dd05      	ble.n	800af68 <_dtoa_r+0x828>
 800af5c:	4651      	mov	r1, sl
 800af5e:	461a      	mov	r2, r3
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fcef 	bl	800b944 <__lshift>
 800af66:	4682      	mov	sl, r0
 800af68:	9b06      	ldr	r3, [sp, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	dd05      	ble.n	800af7a <_dtoa_r+0x83a>
 800af6e:	4631      	mov	r1, r6
 800af70:	461a      	mov	r2, r3
 800af72:	4620      	mov	r0, r4
 800af74:	f000 fce6 	bl	800b944 <__lshift>
 800af78:	4606      	mov	r6, r0
 800af7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d072      	beq.n	800b066 <_dtoa_r+0x926>
 800af80:	4631      	mov	r1, r6
 800af82:	4650      	mov	r0, sl
 800af84:	f000 fd4a 	bl	800ba1c <__mcmp>
 800af88:	2800      	cmp	r0, #0
 800af8a:	da6c      	bge.n	800b066 <_dtoa_r+0x926>
 800af8c:	2300      	movs	r3, #0
 800af8e:	4651      	mov	r1, sl
 800af90:	220a      	movs	r2, #10
 800af92:	4620      	mov	r0, r4
 800af94:	f000 fb28 	bl	800b5e8 <__multadd>
 800af98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af9e:	4682      	mov	sl, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	f000 81b0 	beq.w	800b306 <_dtoa_r+0xbc6>
 800afa6:	2300      	movs	r3, #0
 800afa8:	4639      	mov	r1, r7
 800afaa:	220a      	movs	r2, #10
 800afac:	4620      	mov	r0, r4
 800afae:	f000 fb1b 	bl	800b5e8 <__multadd>
 800afb2:	9b01      	ldr	r3, [sp, #4]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	4607      	mov	r7, r0
 800afb8:	f300 8096 	bgt.w	800b0e8 <_dtoa_r+0x9a8>
 800afbc:	9b07      	ldr	r3, [sp, #28]
 800afbe:	2b02      	cmp	r3, #2
 800afc0:	dc59      	bgt.n	800b076 <_dtoa_r+0x936>
 800afc2:	e091      	b.n	800b0e8 <_dtoa_r+0x9a8>
 800afc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afc6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800afca:	e758      	b.n	800ae7e <_dtoa_r+0x73e>
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	1e5e      	subs	r6, r3, #1
 800afd0:	9b08      	ldr	r3, [sp, #32]
 800afd2:	42b3      	cmp	r3, r6
 800afd4:	bfbf      	itttt	lt
 800afd6:	9b08      	ldrlt	r3, [sp, #32]
 800afd8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800afda:	9608      	strlt	r6, [sp, #32]
 800afdc:	1af3      	sublt	r3, r6, r3
 800afde:	bfb4      	ite	lt
 800afe0:	18d2      	addlt	r2, r2, r3
 800afe2:	1b9e      	subge	r6, r3, r6
 800afe4:	9b04      	ldr	r3, [sp, #16]
 800afe6:	bfbc      	itt	lt
 800afe8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800afea:	2600      	movlt	r6, #0
 800afec:	2b00      	cmp	r3, #0
 800afee:	bfb7      	itett	lt
 800aff0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800aff4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800aff8:	1a9d      	sublt	r5, r3, r2
 800affa:	2300      	movlt	r3, #0
 800affc:	e741      	b.n	800ae82 <_dtoa_r+0x742>
 800affe:	9e08      	ldr	r6, [sp, #32]
 800b000:	9d05      	ldr	r5, [sp, #20]
 800b002:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b004:	e748      	b.n	800ae98 <_dtoa_r+0x758>
 800b006:	9a08      	ldr	r2, [sp, #32]
 800b008:	e770      	b.n	800aeec <_dtoa_r+0x7ac>
 800b00a:	9b07      	ldr	r3, [sp, #28]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	dc19      	bgt.n	800b044 <_dtoa_r+0x904>
 800b010:	9b02      	ldr	r3, [sp, #8]
 800b012:	b9bb      	cbnz	r3, 800b044 <_dtoa_r+0x904>
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b01a:	b99b      	cbnz	r3, 800b044 <_dtoa_r+0x904>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b022:	0d1b      	lsrs	r3, r3, #20
 800b024:	051b      	lsls	r3, r3, #20
 800b026:	b183      	cbz	r3, 800b04a <_dtoa_r+0x90a>
 800b028:	9b05      	ldr	r3, [sp, #20]
 800b02a:	3301      	adds	r3, #1
 800b02c:	9305      	str	r3, [sp, #20]
 800b02e:	9b06      	ldr	r3, [sp, #24]
 800b030:	3301      	adds	r3, #1
 800b032:	9306      	str	r3, [sp, #24]
 800b034:	f04f 0801 	mov.w	r8, #1
 800b038:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f47f af6f 	bne.w	800af1e <_dtoa_r+0x7de>
 800b040:	2001      	movs	r0, #1
 800b042:	e774      	b.n	800af2e <_dtoa_r+0x7ee>
 800b044:	f04f 0800 	mov.w	r8, #0
 800b048:	e7f6      	b.n	800b038 <_dtoa_r+0x8f8>
 800b04a:	4698      	mov	r8, r3
 800b04c:	e7f4      	b.n	800b038 <_dtoa_r+0x8f8>
 800b04e:	d082      	beq.n	800af56 <_dtoa_r+0x816>
 800b050:	9a05      	ldr	r2, [sp, #20]
 800b052:	331c      	adds	r3, #28
 800b054:	441a      	add	r2, r3
 800b056:	9205      	str	r2, [sp, #20]
 800b058:	9a06      	ldr	r2, [sp, #24]
 800b05a:	441a      	add	r2, r3
 800b05c:	441d      	add	r5, r3
 800b05e:	9206      	str	r2, [sp, #24]
 800b060:	e779      	b.n	800af56 <_dtoa_r+0x816>
 800b062:	4603      	mov	r3, r0
 800b064:	e7f4      	b.n	800b050 <_dtoa_r+0x910>
 800b066:	9b04      	ldr	r3, [sp, #16]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	dc37      	bgt.n	800b0dc <_dtoa_r+0x99c>
 800b06c:	9b07      	ldr	r3, [sp, #28]
 800b06e:	2b02      	cmp	r3, #2
 800b070:	dd34      	ble.n	800b0dc <_dtoa_r+0x99c>
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	9b01      	ldr	r3, [sp, #4]
 800b078:	b963      	cbnz	r3, 800b094 <_dtoa_r+0x954>
 800b07a:	4631      	mov	r1, r6
 800b07c:	2205      	movs	r2, #5
 800b07e:	4620      	mov	r0, r4
 800b080:	f000 fab2 	bl	800b5e8 <__multadd>
 800b084:	4601      	mov	r1, r0
 800b086:	4606      	mov	r6, r0
 800b088:	4650      	mov	r0, sl
 800b08a:	f000 fcc7 	bl	800ba1c <__mcmp>
 800b08e:	2800      	cmp	r0, #0
 800b090:	f73f adbb 	bgt.w	800ac0a <_dtoa_r+0x4ca>
 800b094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b096:	9d00      	ldr	r5, [sp, #0]
 800b098:	ea6f 0b03 	mvn.w	fp, r3
 800b09c:	f04f 0800 	mov.w	r8, #0
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fa7e 	bl	800b5a4 <_Bfree>
 800b0a8:	2f00      	cmp	r7, #0
 800b0aa:	f43f aeab 	beq.w	800ae04 <_dtoa_r+0x6c4>
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	d005      	beq.n	800b0c0 <_dtoa_r+0x980>
 800b0b4:	45b8      	cmp	r8, r7
 800b0b6:	d003      	beq.n	800b0c0 <_dtoa_r+0x980>
 800b0b8:	4641      	mov	r1, r8
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f000 fa72 	bl	800b5a4 <_Bfree>
 800b0c0:	4639      	mov	r1, r7
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 fa6e 	bl	800b5a4 <_Bfree>
 800b0c8:	e69c      	b.n	800ae04 <_dtoa_r+0x6c4>
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	4637      	mov	r7, r6
 800b0ce:	e7e1      	b.n	800b094 <_dtoa_r+0x954>
 800b0d0:	46bb      	mov	fp, r7
 800b0d2:	4637      	mov	r7, r6
 800b0d4:	e599      	b.n	800ac0a <_dtoa_r+0x4ca>
 800b0d6:	bf00      	nop
 800b0d8:	40240000 	.word	0x40240000
 800b0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	f000 80c8 	beq.w	800b274 <_dtoa_r+0xb34>
 800b0e4:	9b04      	ldr	r3, [sp, #16]
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	2d00      	cmp	r5, #0
 800b0ea:	dd05      	ble.n	800b0f8 <_dtoa_r+0x9b8>
 800b0ec:	4639      	mov	r1, r7
 800b0ee:	462a      	mov	r2, r5
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	f000 fc27 	bl	800b944 <__lshift>
 800b0f6:	4607      	mov	r7, r0
 800b0f8:	f1b8 0f00 	cmp.w	r8, #0
 800b0fc:	d05b      	beq.n	800b1b6 <_dtoa_r+0xa76>
 800b0fe:	6879      	ldr	r1, [r7, #4]
 800b100:	4620      	mov	r0, r4
 800b102:	f000 fa0f 	bl	800b524 <_Balloc>
 800b106:	4605      	mov	r5, r0
 800b108:	b928      	cbnz	r0, 800b116 <_dtoa_r+0x9d6>
 800b10a:	4b83      	ldr	r3, [pc, #524]	; (800b318 <_dtoa_r+0xbd8>)
 800b10c:	4602      	mov	r2, r0
 800b10e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b112:	f7ff bb2e 	b.w	800a772 <_dtoa_r+0x32>
 800b116:	693a      	ldr	r2, [r7, #16]
 800b118:	3202      	adds	r2, #2
 800b11a:	0092      	lsls	r2, r2, #2
 800b11c:	f107 010c 	add.w	r1, r7, #12
 800b120:	300c      	adds	r0, #12
 800b122:	f001 f801 	bl	800c128 <memcpy>
 800b126:	2201      	movs	r2, #1
 800b128:	4629      	mov	r1, r5
 800b12a:	4620      	mov	r0, r4
 800b12c:	f000 fc0a 	bl	800b944 <__lshift>
 800b130:	9b00      	ldr	r3, [sp, #0]
 800b132:	3301      	adds	r3, #1
 800b134:	9304      	str	r3, [sp, #16]
 800b136:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b13a:	4413      	add	r3, r2
 800b13c:	9308      	str	r3, [sp, #32]
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	f003 0301 	and.w	r3, r3, #1
 800b144:	46b8      	mov	r8, r7
 800b146:	9306      	str	r3, [sp, #24]
 800b148:	4607      	mov	r7, r0
 800b14a:	9b04      	ldr	r3, [sp, #16]
 800b14c:	4631      	mov	r1, r6
 800b14e:	3b01      	subs	r3, #1
 800b150:	4650      	mov	r0, sl
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	f7ff fa69 	bl	800a62a <quorem>
 800b158:	4641      	mov	r1, r8
 800b15a:	9002      	str	r0, [sp, #8]
 800b15c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b160:	4650      	mov	r0, sl
 800b162:	f000 fc5b 	bl	800ba1c <__mcmp>
 800b166:	463a      	mov	r2, r7
 800b168:	9005      	str	r0, [sp, #20]
 800b16a:	4631      	mov	r1, r6
 800b16c:	4620      	mov	r0, r4
 800b16e:	f000 fc71 	bl	800ba54 <__mdiff>
 800b172:	68c2      	ldr	r2, [r0, #12]
 800b174:	4605      	mov	r5, r0
 800b176:	bb02      	cbnz	r2, 800b1ba <_dtoa_r+0xa7a>
 800b178:	4601      	mov	r1, r0
 800b17a:	4650      	mov	r0, sl
 800b17c:	f000 fc4e 	bl	800ba1c <__mcmp>
 800b180:	4602      	mov	r2, r0
 800b182:	4629      	mov	r1, r5
 800b184:	4620      	mov	r0, r4
 800b186:	9209      	str	r2, [sp, #36]	; 0x24
 800b188:	f000 fa0c 	bl	800b5a4 <_Bfree>
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b190:	9d04      	ldr	r5, [sp, #16]
 800b192:	ea43 0102 	orr.w	r1, r3, r2
 800b196:	9b06      	ldr	r3, [sp, #24]
 800b198:	4319      	orrs	r1, r3
 800b19a:	d110      	bne.n	800b1be <_dtoa_r+0xa7e>
 800b19c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1a0:	d029      	beq.n	800b1f6 <_dtoa_r+0xab6>
 800b1a2:	9b05      	ldr	r3, [sp, #20]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	dd02      	ble.n	800b1ae <_dtoa_r+0xa6e>
 800b1a8:	9b02      	ldr	r3, [sp, #8]
 800b1aa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b1ae:	9b01      	ldr	r3, [sp, #4]
 800b1b0:	f883 9000 	strb.w	r9, [r3]
 800b1b4:	e774      	b.n	800b0a0 <_dtoa_r+0x960>
 800b1b6:	4638      	mov	r0, r7
 800b1b8:	e7ba      	b.n	800b130 <_dtoa_r+0x9f0>
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	e7e1      	b.n	800b182 <_dtoa_r+0xa42>
 800b1be:	9b05      	ldr	r3, [sp, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	db04      	blt.n	800b1ce <_dtoa_r+0xa8e>
 800b1c4:	9907      	ldr	r1, [sp, #28]
 800b1c6:	430b      	orrs	r3, r1
 800b1c8:	9906      	ldr	r1, [sp, #24]
 800b1ca:	430b      	orrs	r3, r1
 800b1cc:	d120      	bne.n	800b210 <_dtoa_r+0xad0>
 800b1ce:	2a00      	cmp	r2, #0
 800b1d0:	dded      	ble.n	800b1ae <_dtoa_r+0xa6e>
 800b1d2:	4651      	mov	r1, sl
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	f000 fbb4 	bl	800b944 <__lshift>
 800b1dc:	4631      	mov	r1, r6
 800b1de:	4682      	mov	sl, r0
 800b1e0:	f000 fc1c 	bl	800ba1c <__mcmp>
 800b1e4:	2800      	cmp	r0, #0
 800b1e6:	dc03      	bgt.n	800b1f0 <_dtoa_r+0xab0>
 800b1e8:	d1e1      	bne.n	800b1ae <_dtoa_r+0xa6e>
 800b1ea:	f019 0f01 	tst.w	r9, #1
 800b1ee:	d0de      	beq.n	800b1ae <_dtoa_r+0xa6e>
 800b1f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1f4:	d1d8      	bne.n	800b1a8 <_dtoa_r+0xa68>
 800b1f6:	9a01      	ldr	r2, [sp, #4]
 800b1f8:	2339      	movs	r3, #57	; 0x39
 800b1fa:	7013      	strb	r3, [r2, #0]
 800b1fc:	462b      	mov	r3, r5
 800b1fe:	461d      	mov	r5, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b206:	2a39      	cmp	r2, #57	; 0x39
 800b208:	d06c      	beq.n	800b2e4 <_dtoa_r+0xba4>
 800b20a:	3201      	adds	r2, #1
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	e747      	b.n	800b0a0 <_dtoa_r+0x960>
 800b210:	2a00      	cmp	r2, #0
 800b212:	dd07      	ble.n	800b224 <_dtoa_r+0xae4>
 800b214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b218:	d0ed      	beq.n	800b1f6 <_dtoa_r+0xab6>
 800b21a:	9a01      	ldr	r2, [sp, #4]
 800b21c:	f109 0301 	add.w	r3, r9, #1
 800b220:	7013      	strb	r3, [r2, #0]
 800b222:	e73d      	b.n	800b0a0 <_dtoa_r+0x960>
 800b224:	9b04      	ldr	r3, [sp, #16]
 800b226:	9a08      	ldr	r2, [sp, #32]
 800b228:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d043      	beq.n	800b2b8 <_dtoa_r+0xb78>
 800b230:	4651      	mov	r1, sl
 800b232:	2300      	movs	r3, #0
 800b234:	220a      	movs	r2, #10
 800b236:	4620      	mov	r0, r4
 800b238:	f000 f9d6 	bl	800b5e8 <__multadd>
 800b23c:	45b8      	cmp	r8, r7
 800b23e:	4682      	mov	sl, r0
 800b240:	f04f 0300 	mov.w	r3, #0
 800b244:	f04f 020a 	mov.w	r2, #10
 800b248:	4641      	mov	r1, r8
 800b24a:	4620      	mov	r0, r4
 800b24c:	d107      	bne.n	800b25e <_dtoa_r+0xb1e>
 800b24e:	f000 f9cb 	bl	800b5e8 <__multadd>
 800b252:	4680      	mov	r8, r0
 800b254:	4607      	mov	r7, r0
 800b256:	9b04      	ldr	r3, [sp, #16]
 800b258:	3301      	adds	r3, #1
 800b25a:	9304      	str	r3, [sp, #16]
 800b25c:	e775      	b.n	800b14a <_dtoa_r+0xa0a>
 800b25e:	f000 f9c3 	bl	800b5e8 <__multadd>
 800b262:	4639      	mov	r1, r7
 800b264:	4680      	mov	r8, r0
 800b266:	2300      	movs	r3, #0
 800b268:	220a      	movs	r2, #10
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f9bc 	bl	800b5e8 <__multadd>
 800b270:	4607      	mov	r7, r0
 800b272:	e7f0      	b.n	800b256 <_dtoa_r+0xb16>
 800b274:	9b04      	ldr	r3, [sp, #16]
 800b276:	9301      	str	r3, [sp, #4]
 800b278:	9d00      	ldr	r5, [sp, #0]
 800b27a:	4631      	mov	r1, r6
 800b27c:	4650      	mov	r0, sl
 800b27e:	f7ff f9d4 	bl	800a62a <quorem>
 800b282:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b286:	9b00      	ldr	r3, [sp, #0]
 800b288:	f805 9b01 	strb.w	r9, [r5], #1
 800b28c:	1aea      	subs	r2, r5, r3
 800b28e:	9b01      	ldr	r3, [sp, #4]
 800b290:	4293      	cmp	r3, r2
 800b292:	dd07      	ble.n	800b2a4 <_dtoa_r+0xb64>
 800b294:	4651      	mov	r1, sl
 800b296:	2300      	movs	r3, #0
 800b298:	220a      	movs	r2, #10
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f9a4 	bl	800b5e8 <__multadd>
 800b2a0:	4682      	mov	sl, r0
 800b2a2:	e7ea      	b.n	800b27a <_dtoa_r+0xb3a>
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	bfc8      	it	gt
 800b2aa:	461d      	movgt	r5, r3
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	bfd8      	it	le
 800b2b0:	2501      	movle	r5, #1
 800b2b2:	441d      	add	r5, r3
 800b2b4:	f04f 0800 	mov.w	r8, #0
 800b2b8:	4651      	mov	r1, sl
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	4620      	mov	r0, r4
 800b2be:	f000 fb41 	bl	800b944 <__lshift>
 800b2c2:	4631      	mov	r1, r6
 800b2c4:	4682      	mov	sl, r0
 800b2c6:	f000 fba9 	bl	800ba1c <__mcmp>
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	dc96      	bgt.n	800b1fc <_dtoa_r+0xabc>
 800b2ce:	d102      	bne.n	800b2d6 <_dtoa_r+0xb96>
 800b2d0:	f019 0f01 	tst.w	r9, #1
 800b2d4:	d192      	bne.n	800b1fc <_dtoa_r+0xabc>
 800b2d6:	462b      	mov	r3, r5
 800b2d8:	461d      	mov	r5, r3
 800b2da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2de:	2a30      	cmp	r2, #48	; 0x30
 800b2e0:	d0fa      	beq.n	800b2d8 <_dtoa_r+0xb98>
 800b2e2:	e6dd      	b.n	800b0a0 <_dtoa_r+0x960>
 800b2e4:	9a00      	ldr	r2, [sp, #0]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d189      	bne.n	800b1fe <_dtoa_r+0xabe>
 800b2ea:	f10b 0b01 	add.w	fp, fp, #1
 800b2ee:	2331      	movs	r3, #49	; 0x31
 800b2f0:	e796      	b.n	800b220 <_dtoa_r+0xae0>
 800b2f2:	4b0a      	ldr	r3, [pc, #40]	; (800b31c <_dtoa_r+0xbdc>)
 800b2f4:	f7ff ba99 	b.w	800a82a <_dtoa_r+0xea>
 800b2f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f47f aa6d 	bne.w	800a7da <_dtoa_r+0x9a>
 800b300:	4b07      	ldr	r3, [pc, #28]	; (800b320 <_dtoa_r+0xbe0>)
 800b302:	f7ff ba92 	b.w	800a82a <_dtoa_r+0xea>
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	dcb5      	bgt.n	800b278 <_dtoa_r+0xb38>
 800b30c:	9b07      	ldr	r3, [sp, #28]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	f73f aeb1 	bgt.w	800b076 <_dtoa_r+0x936>
 800b314:	e7b0      	b.n	800b278 <_dtoa_r+0xb38>
 800b316:	bf00      	nop
 800b318:	0800d2f4 	.word	0x0800d2f4
 800b31c:	0800d254 	.word	0x0800d254
 800b320:	0800d278 	.word	0x0800d278

0800b324 <_free_r>:
 800b324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b326:	2900      	cmp	r1, #0
 800b328:	d044      	beq.n	800b3b4 <_free_r+0x90>
 800b32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b32e:	9001      	str	r0, [sp, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f1a1 0404 	sub.w	r4, r1, #4
 800b336:	bfb8      	it	lt
 800b338:	18e4      	addlt	r4, r4, r3
 800b33a:	f000 f8e7 	bl	800b50c <__malloc_lock>
 800b33e:	4a1e      	ldr	r2, [pc, #120]	; (800b3b8 <_free_r+0x94>)
 800b340:	9801      	ldr	r0, [sp, #4]
 800b342:	6813      	ldr	r3, [r2, #0]
 800b344:	b933      	cbnz	r3, 800b354 <_free_r+0x30>
 800b346:	6063      	str	r3, [r4, #4]
 800b348:	6014      	str	r4, [r2, #0]
 800b34a:	b003      	add	sp, #12
 800b34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b350:	f000 b8e2 	b.w	800b518 <__malloc_unlock>
 800b354:	42a3      	cmp	r3, r4
 800b356:	d908      	bls.n	800b36a <_free_r+0x46>
 800b358:	6825      	ldr	r5, [r4, #0]
 800b35a:	1961      	adds	r1, r4, r5
 800b35c:	428b      	cmp	r3, r1
 800b35e:	bf01      	itttt	eq
 800b360:	6819      	ldreq	r1, [r3, #0]
 800b362:	685b      	ldreq	r3, [r3, #4]
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	e7ed      	b.n	800b346 <_free_r+0x22>
 800b36a:	461a      	mov	r2, r3
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	b10b      	cbz	r3, 800b374 <_free_r+0x50>
 800b370:	42a3      	cmp	r3, r4
 800b372:	d9fa      	bls.n	800b36a <_free_r+0x46>
 800b374:	6811      	ldr	r1, [r2, #0]
 800b376:	1855      	adds	r5, r2, r1
 800b378:	42a5      	cmp	r5, r4
 800b37a:	d10b      	bne.n	800b394 <_free_r+0x70>
 800b37c:	6824      	ldr	r4, [r4, #0]
 800b37e:	4421      	add	r1, r4
 800b380:	1854      	adds	r4, r2, r1
 800b382:	42a3      	cmp	r3, r4
 800b384:	6011      	str	r1, [r2, #0]
 800b386:	d1e0      	bne.n	800b34a <_free_r+0x26>
 800b388:	681c      	ldr	r4, [r3, #0]
 800b38a:	685b      	ldr	r3, [r3, #4]
 800b38c:	6053      	str	r3, [r2, #4]
 800b38e:	440c      	add	r4, r1
 800b390:	6014      	str	r4, [r2, #0]
 800b392:	e7da      	b.n	800b34a <_free_r+0x26>
 800b394:	d902      	bls.n	800b39c <_free_r+0x78>
 800b396:	230c      	movs	r3, #12
 800b398:	6003      	str	r3, [r0, #0]
 800b39a:	e7d6      	b.n	800b34a <_free_r+0x26>
 800b39c:	6825      	ldr	r5, [r4, #0]
 800b39e:	1961      	adds	r1, r4, r5
 800b3a0:	428b      	cmp	r3, r1
 800b3a2:	bf04      	itt	eq
 800b3a4:	6819      	ldreq	r1, [r3, #0]
 800b3a6:	685b      	ldreq	r3, [r3, #4]
 800b3a8:	6063      	str	r3, [r4, #4]
 800b3aa:	bf04      	itt	eq
 800b3ac:	1949      	addeq	r1, r1, r5
 800b3ae:	6021      	streq	r1, [r4, #0]
 800b3b0:	6054      	str	r4, [r2, #4]
 800b3b2:	e7ca      	b.n	800b34a <_free_r+0x26>
 800b3b4:	b003      	add	sp, #12
 800b3b6:	bd30      	pop	{r4, r5, pc}
 800b3b8:	200022b4 	.word	0x200022b4

0800b3bc <malloc>:
 800b3bc:	4b02      	ldr	r3, [pc, #8]	; (800b3c8 <malloc+0xc>)
 800b3be:	4601      	mov	r1, r0
 800b3c0:	6818      	ldr	r0, [r3, #0]
 800b3c2:	f000 b823 	b.w	800b40c <_malloc_r>
 800b3c6:	bf00      	nop
 800b3c8:	20000068 	.word	0x20000068

0800b3cc <sbrk_aligned>:
 800b3cc:	b570      	push	{r4, r5, r6, lr}
 800b3ce:	4e0e      	ldr	r6, [pc, #56]	; (800b408 <sbrk_aligned+0x3c>)
 800b3d0:	460c      	mov	r4, r1
 800b3d2:	6831      	ldr	r1, [r6, #0]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	b911      	cbnz	r1, 800b3de <sbrk_aligned+0x12>
 800b3d8:	f000 fe96 	bl	800c108 <_sbrk_r>
 800b3dc:	6030      	str	r0, [r6, #0]
 800b3de:	4621      	mov	r1, r4
 800b3e0:	4628      	mov	r0, r5
 800b3e2:	f000 fe91 	bl	800c108 <_sbrk_r>
 800b3e6:	1c43      	adds	r3, r0, #1
 800b3e8:	d00a      	beq.n	800b400 <sbrk_aligned+0x34>
 800b3ea:	1cc4      	adds	r4, r0, #3
 800b3ec:	f024 0403 	bic.w	r4, r4, #3
 800b3f0:	42a0      	cmp	r0, r4
 800b3f2:	d007      	beq.n	800b404 <sbrk_aligned+0x38>
 800b3f4:	1a21      	subs	r1, r4, r0
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f000 fe86 	bl	800c108 <_sbrk_r>
 800b3fc:	3001      	adds	r0, #1
 800b3fe:	d101      	bne.n	800b404 <sbrk_aligned+0x38>
 800b400:	f04f 34ff 	mov.w	r4, #4294967295
 800b404:	4620      	mov	r0, r4
 800b406:	bd70      	pop	{r4, r5, r6, pc}
 800b408:	200022b8 	.word	0x200022b8

0800b40c <_malloc_r>:
 800b40c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b410:	1ccd      	adds	r5, r1, #3
 800b412:	f025 0503 	bic.w	r5, r5, #3
 800b416:	3508      	adds	r5, #8
 800b418:	2d0c      	cmp	r5, #12
 800b41a:	bf38      	it	cc
 800b41c:	250c      	movcc	r5, #12
 800b41e:	2d00      	cmp	r5, #0
 800b420:	4607      	mov	r7, r0
 800b422:	db01      	blt.n	800b428 <_malloc_r+0x1c>
 800b424:	42a9      	cmp	r1, r5
 800b426:	d905      	bls.n	800b434 <_malloc_r+0x28>
 800b428:	230c      	movs	r3, #12
 800b42a:	603b      	str	r3, [r7, #0]
 800b42c:	2600      	movs	r6, #0
 800b42e:	4630      	mov	r0, r6
 800b430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b434:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b508 <_malloc_r+0xfc>
 800b438:	f000 f868 	bl	800b50c <__malloc_lock>
 800b43c:	f8d8 3000 	ldr.w	r3, [r8]
 800b440:	461c      	mov	r4, r3
 800b442:	bb5c      	cbnz	r4, 800b49c <_malloc_r+0x90>
 800b444:	4629      	mov	r1, r5
 800b446:	4638      	mov	r0, r7
 800b448:	f7ff ffc0 	bl	800b3cc <sbrk_aligned>
 800b44c:	1c43      	adds	r3, r0, #1
 800b44e:	4604      	mov	r4, r0
 800b450:	d155      	bne.n	800b4fe <_malloc_r+0xf2>
 800b452:	f8d8 4000 	ldr.w	r4, [r8]
 800b456:	4626      	mov	r6, r4
 800b458:	2e00      	cmp	r6, #0
 800b45a:	d145      	bne.n	800b4e8 <_malloc_r+0xdc>
 800b45c:	2c00      	cmp	r4, #0
 800b45e:	d048      	beq.n	800b4f2 <_malloc_r+0xe6>
 800b460:	6823      	ldr	r3, [r4, #0]
 800b462:	4631      	mov	r1, r6
 800b464:	4638      	mov	r0, r7
 800b466:	eb04 0903 	add.w	r9, r4, r3
 800b46a:	f000 fe4d 	bl	800c108 <_sbrk_r>
 800b46e:	4581      	cmp	r9, r0
 800b470:	d13f      	bne.n	800b4f2 <_malloc_r+0xe6>
 800b472:	6821      	ldr	r1, [r4, #0]
 800b474:	1a6d      	subs	r5, r5, r1
 800b476:	4629      	mov	r1, r5
 800b478:	4638      	mov	r0, r7
 800b47a:	f7ff ffa7 	bl	800b3cc <sbrk_aligned>
 800b47e:	3001      	adds	r0, #1
 800b480:	d037      	beq.n	800b4f2 <_malloc_r+0xe6>
 800b482:	6823      	ldr	r3, [r4, #0]
 800b484:	442b      	add	r3, r5
 800b486:	6023      	str	r3, [r4, #0]
 800b488:	f8d8 3000 	ldr.w	r3, [r8]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d038      	beq.n	800b502 <_malloc_r+0xf6>
 800b490:	685a      	ldr	r2, [r3, #4]
 800b492:	42a2      	cmp	r2, r4
 800b494:	d12b      	bne.n	800b4ee <_malloc_r+0xe2>
 800b496:	2200      	movs	r2, #0
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	e00f      	b.n	800b4bc <_malloc_r+0xb0>
 800b49c:	6822      	ldr	r2, [r4, #0]
 800b49e:	1b52      	subs	r2, r2, r5
 800b4a0:	d41f      	bmi.n	800b4e2 <_malloc_r+0xd6>
 800b4a2:	2a0b      	cmp	r2, #11
 800b4a4:	d917      	bls.n	800b4d6 <_malloc_r+0xca>
 800b4a6:	1961      	adds	r1, r4, r5
 800b4a8:	42a3      	cmp	r3, r4
 800b4aa:	6025      	str	r5, [r4, #0]
 800b4ac:	bf18      	it	ne
 800b4ae:	6059      	strne	r1, [r3, #4]
 800b4b0:	6863      	ldr	r3, [r4, #4]
 800b4b2:	bf08      	it	eq
 800b4b4:	f8c8 1000 	streq.w	r1, [r8]
 800b4b8:	5162      	str	r2, [r4, r5]
 800b4ba:	604b      	str	r3, [r1, #4]
 800b4bc:	4638      	mov	r0, r7
 800b4be:	f104 060b 	add.w	r6, r4, #11
 800b4c2:	f000 f829 	bl	800b518 <__malloc_unlock>
 800b4c6:	f026 0607 	bic.w	r6, r6, #7
 800b4ca:	1d23      	adds	r3, r4, #4
 800b4cc:	1af2      	subs	r2, r6, r3
 800b4ce:	d0ae      	beq.n	800b42e <_malloc_r+0x22>
 800b4d0:	1b9b      	subs	r3, r3, r6
 800b4d2:	50a3      	str	r3, [r4, r2]
 800b4d4:	e7ab      	b.n	800b42e <_malloc_r+0x22>
 800b4d6:	42a3      	cmp	r3, r4
 800b4d8:	6862      	ldr	r2, [r4, #4]
 800b4da:	d1dd      	bne.n	800b498 <_malloc_r+0x8c>
 800b4dc:	f8c8 2000 	str.w	r2, [r8]
 800b4e0:	e7ec      	b.n	800b4bc <_malloc_r+0xb0>
 800b4e2:	4623      	mov	r3, r4
 800b4e4:	6864      	ldr	r4, [r4, #4]
 800b4e6:	e7ac      	b.n	800b442 <_malloc_r+0x36>
 800b4e8:	4634      	mov	r4, r6
 800b4ea:	6876      	ldr	r6, [r6, #4]
 800b4ec:	e7b4      	b.n	800b458 <_malloc_r+0x4c>
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	e7cc      	b.n	800b48c <_malloc_r+0x80>
 800b4f2:	230c      	movs	r3, #12
 800b4f4:	603b      	str	r3, [r7, #0]
 800b4f6:	4638      	mov	r0, r7
 800b4f8:	f000 f80e 	bl	800b518 <__malloc_unlock>
 800b4fc:	e797      	b.n	800b42e <_malloc_r+0x22>
 800b4fe:	6025      	str	r5, [r4, #0]
 800b500:	e7dc      	b.n	800b4bc <_malloc_r+0xb0>
 800b502:	605b      	str	r3, [r3, #4]
 800b504:	deff      	udf	#255	; 0xff
 800b506:	bf00      	nop
 800b508:	200022b4 	.word	0x200022b4

0800b50c <__malloc_lock>:
 800b50c:	4801      	ldr	r0, [pc, #4]	; (800b514 <__malloc_lock+0x8>)
 800b50e:	f7ff b88a 	b.w	800a626 <__retarget_lock_acquire_recursive>
 800b512:	bf00      	nop
 800b514:	200022b0 	.word	0x200022b0

0800b518 <__malloc_unlock>:
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <__malloc_unlock+0x8>)
 800b51a:	f7ff b885 	b.w	800a628 <__retarget_lock_release_recursive>
 800b51e:	bf00      	nop
 800b520:	200022b0 	.word	0x200022b0

0800b524 <_Balloc>:
 800b524:	b570      	push	{r4, r5, r6, lr}
 800b526:	69c6      	ldr	r6, [r0, #28]
 800b528:	4604      	mov	r4, r0
 800b52a:	460d      	mov	r5, r1
 800b52c:	b976      	cbnz	r6, 800b54c <_Balloc+0x28>
 800b52e:	2010      	movs	r0, #16
 800b530:	f7ff ff44 	bl	800b3bc <malloc>
 800b534:	4602      	mov	r2, r0
 800b536:	61e0      	str	r0, [r4, #28]
 800b538:	b920      	cbnz	r0, 800b544 <_Balloc+0x20>
 800b53a:	4b18      	ldr	r3, [pc, #96]	; (800b59c <_Balloc+0x78>)
 800b53c:	4818      	ldr	r0, [pc, #96]	; (800b5a0 <_Balloc+0x7c>)
 800b53e:	216b      	movs	r1, #107	; 0x6b
 800b540:	f000 fe00 	bl	800c144 <__assert_func>
 800b544:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b548:	6006      	str	r6, [r0, #0]
 800b54a:	60c6      	str	r6, [r0, #12]
 800b54c:	69e6      	ldr	r6, [r4, #28]
 800b54e:	68f3      	ldr	r3, [r6, #12]
 800b550:	b183      	cbz	r3, 800b574 <_Balloc+0x50>
 800b552:	69e3      	ldr	r3, [r4, #28]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b55a:	b9b8      	cbnz	r0, 800b58c <_Balloc+0x68>
 800b55c:	2101      	movs	r1, #1
 800b55e:	fa01 f605 	lsl.w	r6, r1, r5
 800b562:	1d72      	adds	r2, r6, #5
 800b564:	0092      	lsls	r2, r2, #2
 800b566:	4620      	mov	r0, r4
 800b568:	f000 fe0a 	bl	800c180 <_calloc_r>
 800b56c:	b160      	cbz	r0, 800b588 <_Balloc+0x64>
 800b56e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b572:	e00e      	b.n	800b592 <_Balloc+0x6e>
 800b574:	2221      	movs	r2, #33	; 0x21
 800b576:	2104      	movs	r1, #4
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fe01 	bl	800c180 <_calloc_r>
 800b57e:	69e3      	ldr	r3, [r4, #28]
 800b580:	60f0      	str	r0, [r6, #12]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1e4      	bne.n	800b552 <_Balloc+0x2e>
 800b588:	2000      	movs	r0, #0
 800b58a:	bd70      	pop	{r4, r5, r6, pc}
 800b58c:	6802      	ldr	r2, [r0, #0]
 800b58e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b592:	2300      	movs	r3, #0
 800b594:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b598:	e7f7      	b.n	800b58a <_Balloc+0x66>
 800b59a:	bf00      	nop
 800b59c:	0800d285 	.word	0x0800d285
 800b5a0:	0800d305 	.word	0x0800d305

0800b5a4 <_Bfree>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	69c6      	ldr	r6, [r0, #28]
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	b976      	cbnz	r6, 800b5cc <_Bfree+0x28>
 800b5ae:	2010      	movs	r0, #16
 800b5b0:	f7ff ff04 	bl	800b3bc <malloc>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	61e8      	str	r0, [r5, #28]
 800b5b8:	b920      	cbnz	r0, 800b5c4 <_Bfree+0x20>
 800b5ba:	4b09      	ldr	r3, [pc, #36]	; (800b5e0 <_Bfree+0x3c>)
 800b5bc:	4809      	ldr	r0, [pc, #36]	; (800b5e4 <_Bfree+0x40>)
 800b5be:	218f      	movs	r1, #143	; 0x8f
 800b5c0:	f000 fdc0 	bl	800c144 <__assert_func>
 800b5c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5c8:	6006      	str	r6, [r0, #0]
 800b5ca:	60c6      	str	r6, [r0, #12]
 800b5cc:	b13c      	cbz	r4, 800b5de <_Bfree+0x3a>
 800b5ce:	69eb      	ldr	r3, [r5, #28]
 800b5d0:	6862      	ldr	r2, [r4, #4]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5d8:	6021      	str	r1, [r4, #0]
 800b5da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	0800d285 	.word	0x0800d285
 800b5e4:	0800d305 	.word	0x0800d305

0800b5e8 <__multadd>:
 800b5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5ec:	690d      	ldr	r5, [r1, #16]
 800b5ee:	4607      	mov	r7, r0
 800b5f0:	460c      	mov	r4, r1
 800b5f2:	461e      	mov	r6, r3
 800b5f4:	f101 0c14 	add.w	ip, r1, #20
 800b5f8:	2000      	movs	r0, #0
 800b5fa:	f8dc 3000 	ldr.w	r3, [ip]
 800b5fe:	b299      	uxth	r1, r3
 800b600:	fb02 6101 	mla	r1, r2, r1, r6
 800b604:	0c1e      	lsrs	r6, r3, #16
 800b606:	0c0b      	lsrs	r3, r1, #16
 800b608:	fb02 3306 	mla	r3, r2, r6, r3
 800b60c:	b289      	uxth	r1, r1
 800b60e:	3001      	adds	r0, #1
 800b610:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b614:	4285      	cmp	r5, r0
 800b616:	f84c 1b04 	str.w	r1, [ip], #4
 800b61a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b61e:	dcec      	bgt.n	800b5fa <__multadd+0x12>
 800b620:	b30e      	cbz	r6, 800b666 <__multadd+0x7e>
 800b622:	68a3      	ldr	r3, [r4, #8]
 800b624:	42ab      	cmp	r3, r5
 800b626:	dc19      	bgt.n	800b65c <__multadd+0x74>
 800b628:	6861      	ldr	r1, [r4, #4]
 800b62a:	4638      	mov	r0, r7
 800b62c:	3101      	adds	r1, #1
 800b62e:	f7ff ff79 	bl	800b524 <_Balloc>
 800b632:	4680      	mov	r8, r0
 800b634:	b928      	cbnz	r0, 800b642 <__multadd+0x5a>
 800b636:	4602      	mov	r2, r0
 800b638:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <__multadd+0x84>)
 800b63a:	480d      	ldr	r0, [pc, #52]	; (800b670 <__multadd+0x88>)
 800b63c:	21ba      	movs	r1, #186	; 0xba
 800b63e:	f000 fd81 	bl	800c144 <__assert_func>
 800b642:	6922      	ldr	r2, [r4, #16]
 800b644:	3202      	adds	r2, #2
 800b646:	f104 010c 	add.w	r1, r4, #12
 800b64a:	0092      	lsls	r2, r2, #2
 800b64c:	300c      	adds	r0, #12
 800b64e:	f000 fd6b 	bl	800c128 <memcpy>
 800b652:	4621      	mov	r1, r4
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff ffa5 	bl	800b5a4 <_Bfree>
 800b65a:	4644      	mov	r4, r8
 800b65c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b660:	3501      	adds	r5, #1
 800b662:	615e      	str	r6, [r3, #20]
 800b664:	6125      	str	r5, [r4, #16]
 800b666:	4620      	mov	r0, r4
 800b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b66c:	0800d2f4 	.word	0x0800d2f4
 800b670:	0800d305 	.word	0x0800d305

0800b674 <__hi0bits>:
 800b674:	0c03      	lsrs	r3, r0, #16
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	b9d3      	cbnz	r3, 800b6b0 <__hi0bits+0x3c>
 800b67a:	0400      	lsls	r0, r0, #16
 800b67c:	2310      	movs	r3, #16
 800b67e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b682:	bf04      	itt	eq
 800b684:	0200      	lsleq	r0, r0, #8
 800b686:	3308      	addeq	r3, #8
 800b688:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b68c:	bf04      	itt	eq
 800b68e:	0100      	lsleq	r0, r0, #4
 800b690:	3304      	addeq	r3, #4
 800b692:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b696:	bf04      	itt	eq
 800b698:	0080      	lsleq	r0, r0, #2
 800b69a:	3302      	addeq	r3, #2
 800b69c:	2800      	cmp	r0, #0
 800b69e:	db05      	blt.n	800b6ac <__hi0bits+0x38>
 800b6a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6a4:	f103 0301 	add.w	r3, r3, #1
 800b6a8:	bf08      	it	eq
 800b6aa:	2320      	moveq	r3, #32
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	4770      	bx	lr
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e7e4      	b.n	800b67e <__hi0bits+0xa>

0800b6b4 <__lo0bits>:
 800b6b4:	6803      	ldr	r3, [r0, #0]
 800b6b6:	f013 0207 	ands.w	r2, r3, #7
 800b6ba:	d00c      	beq.n	800b6d6 <__lo0bits+0x22>
 800b6bc:	07d9      	lsls	r1, r3, #31
 800b6be:	d422      	bmi.n	800b706 <__lo0bits+0x52>
 800b6c0:	079a      	lsls	r2, r3, #30
 800b6c2:	bf49      	itett	mi
 800b6c4:	085b      	lsrmi	r3, r3, #1
 800b6c6:	089b      	lsrpl	r3, r3, #2
 800b6c8:	6003      	strmi	r3, [r0, #0]
 800b6ca:	2201      	movmi	r2, #1
 800b6cc:	bf5c      	itt	pl
 800b6ce:	6003      	strpl	r3, [r0, #0]
 800b6d0:	2202      	movpl	r2, #2
 800b6d2:	4610      	mov	r0, r2
 800b6d4:	4770      	bx	lr
 800b6d6:	b299      	uxth	r1, r3
 800b6d8:	b909      	cbnz	r1, 800b6de <__lo0bits+0x2a>
 800b6da:	0c1b      	lsrs	r3, r3, #16
 800b6dc:	2210      	movs	r2, #16
 800b6de:	b2d9      	uxtb	r1, r3
 800b6e0:	b909      	cbnz	r1, 800b6e6 <__lo0bits+0x32>
 800b6e2:	3208      	adds	r2, #8
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	0719      	lsls	r1, r3, #28
 800b6e8:	bf04      	itt	eq
 800b6ea:	091b      	lsreq	r3, r3, #4
 800b6ec:	3204      	addeq	r2, #4
 800b6ee:	0799      	lsls	r1, r3, #30
 800b6f0:	bf04      	itt	eq
 800b6f2:	089b      	lsreq	r3, r3, #2
 800b6f4:	3202      	addeq	r2, #2
 800b6f6:	07d9      	lsls	r1, r3, #31
 800b6f8:	d403      	bmi.n	800b702 <__lo0bits+0x4e>
 800b6fa:	085b      	lsrs	r3, r3, #1
 800b6fc:	f102 0201 	add.w	r2, r2, #1
 800b700:	d003      	beq.n	800b70a <__lo0bits+0x56>
 800b702:	6003      	str	r3, [r0, #0]
 800b704:	e7e5      	b.n	800b6d2 <__lo0bits+0x1e>
 800b706:	2200      	movs	r2, #0
 800b708:	e7e3      	b.n	800b6d2 <__lo0bits+0x1e>
 800b70a:	2220      	movs	r2, #32
 800b70c:	e7e1      	b.n	800b6d2 <__lo0bits+0x1e>
	...

0800b710 <__i2b>:
 800b710:	b510      	push	{r4, lr}
 800b712:	460c      	mov	r4, r1
 800b714:	2101      	movs	r1, #1
 800b716:	f7ff ff05 	bl	800b524 <_Balloc>
 800b71a:	4602      	mov	r2, r0
 800b71c:	b928      	cbnz	r0, 800b72a <__i2b+0x1a>
 800b71e:	4b05      	ldr	r3, [pc, #20]	; (800b734 <__i2b+0x24>)
 800b720:	4805      	ldr	r0, [pc, #20]	; (800b738 <__i2b+0x28>)
 800b722:	f240 1145 	movw	r1, #325	; 0x145
 800b726:	f000 fd0d 	bl	800c144 <__assert_func>
 800b72a:	2301      	movs	r3, #1
 800b72c:	6144      	str	r4, [r0, #20]
 800b72e:	6103      	str	r3, [r0, #16]
 800b730:	bd10      	pop	{r4, pc}
 800b732:	bf00      	nop
 800b734:	0800d2f4 	.word	0x0800d2f4
 800b738:	0800d305 	.word	0x0800d305

0800b73c <__multiply>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	4691      	mov	r9, r2
 800b742:	690a      	ldr	r2, [r1, #16]
 800b744:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b748:	429a      	cmp	r2, r3
 800b74a:	bfb8      	it	lt
 800b74c:	460b      	movlt	r3, r1
 800b74e:	460c      	mov	r4, r1
 800b750:	bfbc      	itt	lt
 800b752:	464c      	movlt	r4, r9
 800b754:	4699      	movlt	r9, r3
 800b756:	6927      	ldr	r7, [r4, #16]
 800b758:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b75c:	68a3      	ldr	r3, [r4, #8]
 800b75e:	6861      	ldr	r1, [r4, #4]
 800b760:	eb07 060a 	add.w	r6, r7, sl
 800b764:	42b3      	cmp	r3, r6
 800b766:	b085      	sub	sp, #20
 800b768:	bfb8      	it	lt
 800b76a:	3101      	addlt	r1, #1
 800b76c:	f7ff feda 	bl	800b524 <_Balloc>
 800b770:	b930      	cbnz	r0, 800b780 <__multiply+0x44>
 800b772:	4602      	mov	r2, r0
 800b774:	4b44      	ldr	r3, [pc, #272]	; (800b888 <__multiply+0x14c>)
 800b776:	4845      	ldr	r0, [pc, #276]	; (800b88c <__multiply+0x150>)
 800b778:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b77c:	f000 fce2 	bl	800c144 <__assert_func>
 800b780:	f100 0514 	add.w	r5, r0, #20
 800b784:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b788:	462b      	mov	r3, r5
 800b78a:	2200      	movs	r2, #0
 800b78c:	4543      	cmp	r3, r8
 800b78e:	d321      	bcc.n	800b7d4 <__multiply+0x98>
 800b790:	f104 0314 	add.w	r3, r4, #20
 800b794:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b798:	f109 0314 	add.w	r3, r9, #20
 800b79c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7a0:	9202      	str	r2, [sp, #8]
 800b7a2:	1b3a      	subs	r2, r7, r4
 800b7a4:	3a15      	subs	r2, #21
 800b7a6:	f022 0203 	bic.w	r2, r2, #3
 800b7aa:	3204      	adds	r2, #4
 800b7ac:	f104 0115 	add.w	r1, r4, #21
 800b7b0:	428f      	cmp	r7, r1
 800b7b2:	bf38      	it	cc
 800b7b4:	2204      	movcc	r2, #4
 800b7b6:	9201      	str	r2, [sp, #4]
 800b7b8:	9a02      	ldr	r2, [sp, #8]
 800b7ba:	9303      	str	r3, [sp, #12]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d80c      	bhi.n	800b7da <__multiply+0x9e>
 800b7c0:	2e00      	cmp	r6, #0
 800b7c2:	dd03      	ble.n	800b7cc <__multiply+0x90>
 800b7c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d05b      	beq.n	800b884 <__multiply+0x148>
 800b7cc:	6106      	str	r6, [r0, #16]
 800b7ce:	b005      	add	sp, #20
 800b7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7d4:	f843 2b04 	str.w	r2, [r3], #4
 800b7d8:	e7d8      	b.n	800b78c <__multiply+0x50>
 800b7da:	f8b3 a000 	ldrh.w	sl, [r3]
 800b7de:	f1ba 0f00 	cmp.w	sl, #0
 800b7e2:	d024      	beq.n	800b82e <__multiply+0xf2>
 800b7e4:	f104 0e14 	add.w	lr, r4, #20
 800b7e8:	46a9      	mov	r9, r5
 800b7ea:	f04f 0c00 	mov.w	ip, #0
 800b7ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7f2:	f8d9 1000 	ldr.w	r1, [r9]
 800b7f6:	fa1f fb82 	uxth.w	fp, r2
 800b7fa:	b289      	uxth	r1, r1
 800b7fc:	fb0a 110b 	mla	r1, sl, fp, r1
 800b800:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b804:	f8d9 2000 	ldr.w	r2, [r9]
 800b808:	4461      	add	r1, ip
 800b80a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b80e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b812:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b816:	b289      	uxth	r1, r1
 800b818:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b81c:	4577      	cmp	r7, lr
 800b81e:	f849 1b04 	str.w	r1, [r9], #4
 800b822:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b826:	d8e2      	bhi.n	800b7ee <__multiply+0xb2>
 800b828:	9a01      	ldr	r2, [sp, #4]
 800b82a:	f845 c002 	str.w	ip, [r5, r2]
 800b82e:	9a03      	ldr	r2, [sp, #12]
 800b830:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b834:	3304      	adds	r3, #4
 800b836:	f1b9 0f00 	cmp.w	r9, #0
 800b83a:	d021      	beq.n	800b880 <__multiply+0x144>
 800b83c:	6829      	ldr	r1, [r5, #0]
 800b83e:	f104 0c14 	add.w	ip, r4, #20
 800b842:	46ae      	mov	lr, r5
 800b844:	f04f 0a00 	mov.w	sl, #0
 800b848:	f8bc b000 	ldrh.w	fp, [ip]
 800b84c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b850:	fb09 220b 	mla	r2, r9, fp, r2
 800b854:	4452      	add	r2, sl
 800b856:	b289      	uxth	r1, r1
 800b858:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b85c:	f84e 1b04 	str.w	r1, [lr], #4
 800b860:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b864:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b868:	f8be 1000 	ldrh.w	r1, [lr]
 800b86c:	fb09 110a 	mla	r1, r9, sl, r1
 800b870:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b874:	4567      	cmp	r7, ip
 800b876:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b87a:	d8e5      	bhi.n	800b848 <__multiply+0x10c>
 800b87c:	9a01      	ldr	r2, [sp, #4]
 800b87e:	50a9      	str	r1, [r5, r2]
 800b880:	3504      	adds	r5, #4
 800b882:	e799      	b.n	800b7b8 <__multiply+0x7c>
 800b884:	3e01      	subs	r6, #1
 800b886:	e79b      	b.n	800b7c0 <__multiply+0x84>
 800b888:	0800d2f4 	.word	0x0800d2f4
 800b88c:	0800d305 	.word	0x0800d305

0800b890 <__pow5mult>:
 800b890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b894:	4615      	mov	r5, r2
 800b896:	f012 0203 	ands.w	r2, r2, #3
 800b89a:	4606      	mov	r6, r0
 800b89c:	460f      	mov	r7, r1
 800b89e:	d007      	beq.n	800b8b0 <__pow5mult+0x20>
 800b8a0:	4c25      	ldr	r4, [pc, #148]	; (800b938 <__pow5mult+0xa8>)
 800b8a2:	3a01      	subs	r2, #1
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8aa:	f7ff fe9d 	bl	800b5e8 <__multadd>
 800b8ae:	4607      	mov	r7, r0
 800b8b0:	10ad      	asrs	r5, r5, #2
 800b8b2:	d03d      	beq.n	800b930 <__pow5mult+0xa0>
 800b8b4:	69f4      	ldr	r4, [r6, #28]
 800b8b6:	b97c      	cbnz	r4, 800b8d8 <__pow5mult+0x48>
 800b8b8:	2010      	movs	r0, #16
 800b8ba:	f7ff fd7f 	bl	800b3bc <malloc>
 800b8be:	4602      	mov	r2, r0
 800b8c0:	61f0      	str	r0, [r6, #28]
 800b8c2:	b928      	cbnz	r0, 800b8d0 <__pow5mult+0x40>
 800b8c4:	4b1d      	ldr	r3, [pc, #116]	; (800b93c <__pow5mult+0xac>)
 800b8c6:	481e      	ldr	r0, [pc, #120]	; (800b940 <__pow5mult+0xb0>)
 800b8c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8cc:	f000 fc3a 	bl	800c144 <__assert_func>
 800b8d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8d4:	6004      	str	r4, [r0, #0]
 800b8d6:	60c4      	str	r4, [r0, #12]
 800b8d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b8dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8e0:	b94c      	cbnz	r4, 800b8f6 <__pow5mult+0x66>
 800b8e2:	f240 2171 	movw	r1, #625	; 0x271
 800b8e6:	4630      	mov	r0, r6
 800b8e8:	f7ff ff12 	bl	800b710 <__i2b>
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	6003      	str	r3, [r0, #0]
 800b8f6:	f04f 0900 	mov.w	r9, #0
 800b8fa:	07eb      	lsls	r3, r5, #31
 800b8fc:	d50a      	bpl.n	800b914 <__pow5mult+0x84>
 800b8fe:	4639      	mov	r1, r7
 800b900:	4622      	mov	r2, r4
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ff1a 	bl	800b73c <__multiply>
 800b908:	4639      	mov	r1, r7
 800b90a:	4680      	mov	r8, r0
 800b90c:	4630      	mov	r0, r6
 800b90e:	f7ff fe49 	bl	800b5a4 <_Bfree>
 800b912:	4647      	mov	r7, r8
 800b914:	106d      	asrs	r5, r5, #1
 800b916:	d00b      	beq.n	800b930 <__pow5mult+0xa0>
 800b918:	6820      	ldr	r0, [r4, #0]
 800b91a:	b938      	cbnz	r0, 800b92c <__pow5mult+0x9c>
 800b91c:	4622      	mov	r2, r4
 800b91e:	4621      	mov	r1, r4
 800b920:	4630      	mov	r0, r6
 800b922:	f7ff ff0b 	bl	800b73c <__multiply>
 800b926:	6020      	str	r0, [r4, #0]
 800b928:	f8c0 9000 	str.w	r9, [r0]
 800b92c:	4604      	mov	r4, r0
 800b92e:	e7e4      	b.n	800b8fa <__pow5mult+0x6a>
 800b930:	4638      	mov	r0, r7
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b936:	bf00      	nop
 800b938:	0800d450 	.word	0x0800d450
 800b93c:	0800d285 	.word	0x0800d285
 800b940:	0800d305 	.word	0x0800d305

0800b944 <__lshift>:
 800b944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	460c      	mov	r4, r1
 800b94a:	6849      	ldr	r1, [r1, #4]
 800b94c:	6923      	ldr	r3, [r4, #16]
 800b94e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b952:	68a3      	ldr	r3, [r4, #8]
 800b954:	4607      	mov	r7, r0
 800b956:	4691      	mov	r9, r2
 800b958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b95c:	f108 0601 	add.w	r6, r8, #1
 800b960:	42b3      	cmp	r3, r6
 800b962:	db0b      	blt.n	800b97c <__lshift+0x38>
 800b964:	4638      	mov	r0, r7
 800b966:	f7ff fddd 	bl	800b524 <_Balloc>
 800b96a:	4605      	mov	r5, r0
 800b96c:	b948      	cbnz	r0, 800b982 <__lshift+0x3e>
 800b96e:	4602      	mov	r2, r0
 800b970:	4b28      	ldr	r3, [pc, #160]	; (800ba14 <__lshift+0xd0>)
 800b972:	4829      	ldr	r0, [pc, #164]	; (800ba18 <__lshift+0xd4>)
 800b974:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b978:	f000 fbe4 	bl	800c144 <__assert_func>
 800b97c:	3101      	adds	r1, #1
 800b97e:	005b      	lsls	r3, r3, #1
 800b980:	e7ee      	b.n	800b960 <__lshift+0x1c>
 800b982:	2300      	movs	r3, #0
 800b984:	f100 0114 	add.w	r1, r0, #20
 800b988:	f100 0210 	add.w	r2, r0, #16
 800b98c:	4618      	mov	r0, r3
 800b98e:	4553      	cmp	r3, sl
 800b990:	db33      	blt.n	800b9fa <__lshift+0xb6>
 800b992:	6920      	ldr	r0, [r4, #16]
 800b994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b998:	f104 0314 	add.w	r3, r4, #20
 800b99c:	f019 091f 	ands.w	r9, r9, #31
 800b9a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9a8:	d02b      	beq.n	800ba02 <__lshift+0xbe>
 800b9aa:	f1c9 0e20 	rsb	lr, r9, #32
 800b9ae:	468a      	mov	sl, r1
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9b8:	4310      	orrs	r0, r2
 800b9ba:	f84a 0b04 	str.w	r0, [sl], #4
 800b9be:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c2:	459c      	cmp	ip, r3
 800b9c4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9c8:	d8f3      	bhi.n	800b9b2 <__lshift+0x6e>
 800b9ca:	ebac 0304 	sub.w	r3, ip, r4
 800b9ce:	3b15      	subs	r3, #21
 800b9d0:	f023 0303 	bic.w	r3, r3, #3
 800b9d4:	3304      	adds	r3, #4
 800b9d6:	f104 0015 	add.w	r0, r4, #21
 800b9da:	4584      	cmp	ip, r0
 800b9dc:	bf38      	it	cc
 800b9de:	2304      	movcc	r3, #4
 800b9e0:	50ca      	str	r2, [r1, r3]
 800b9e2:	b10a      	cbz	r2, 800b9e8 <__lshift+0xa4>
 800b9e4:	f108 0602 	add.w	r6, r8, #2
 800b9e8:	3e01      	subs	r6, #1
 800b9ea:	4638      	mov	r0, r7
 800b9ec:	612e      	str	r6, [r5, #16]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	f7ff fdd8 	bl	800b5a4 <_Bfree>
 800b9f4:	4628      	mov	r0, r5
 800b9f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9fa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9fe:	3301      	adds	r3, #1
 800ba00:	e7c5      	b.n	800b98e <__lshift+0x4a>
 800ba02:	3904      	subs	r1, #4
 800ba04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba08:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba0c:	459c      	cmp	ip, r3
 800ba0e:	d8f9      	bhi.n	800ba04 <__lshift+0xc0>
 800ba10:	e7ea      	b.n	800b9e8 <__lshift+0xa4>
 800ba12:	bf00      	nop
 800ba14:	0800d2f4 	.word	0x0800d2f4
 800ba18:	0800d305 	.word	0x0800d305

0800ba1c <__mcmp>:
 800ba1c:	b530      	push	{r4, r5, lr}
 800ba1e:	6902      	ldr	r2, [r0, #16]
 800ba20:	690c      	ldr	r4, [r1, #16]
 800ba22:	1b12      	subs	r2, r2, r4
 800ba24:	d10e      	bne.n	800ba44 <__mcmp+0x28>
 800ba26:	f100 0314 	add.w	r3, r0, #20
 800ba2a:	3114      	adds	r1, #20
 800ba2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba3c:	42a5      	cmp	r5, r4
 800ba3e:	d003      	beq.n	800ba48 <__mcmp+0x2c>
 800ba40:	d305      	bcc.n	800ba4e <__mcmp+0x32>
 800ba42:	2201      	movs	r2, #1
 800ba44:	4610      	mov	r0, r2
 800ba46:	bd30      	pop	{r4, r5, pc}
 800ba48:	4283      	cmp	r3, r0
 800ba4a:	d3f3      	bcc.n	800ba34 <__mcmp+0x18>
 800ba4c:	e7fa      	b.n	800ba44 <__mcmp+0x28>
 800ba4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba52:	e7f7      	b.n	800ba44 <__mcmp+0x28>

0800ba54 <__mdiff>:
 800ba54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba58:	460c      	mov	r4, r1
 800ba5a:	4606      	mov	r6, r0
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4620      	mov	r0, r4
 800ba60:	4690      	mov	r8, r2
 800ba62:	f7ff ffdb 	bl	800ba1c <__mcmp>
 800ba66:	1e05      	subs	r5, r0, #0
 800ba68:	d110      	bne.n	800ba8c <__mdiff+0x38>
 800ba6a:	4629      	mov	r1, r5
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fd59 	bl	800b524 <_Balloc>
 800ba72:	b930      	cbnz	r0, 800ba82 <__mdiff+0x2e>
 800ba74:	4b3a      	ldr	r3, [pc, #232]	; (800bb60 <__mdiff+0x10c>)
 800ba76:	4602      	mov	r2, r0
 800ba78:	f240 2137 	movw	r1, #567	; 0x237
 800ba7c:	4839      	ldr	r0, [pc, #228]	; (800bb64 <__mdiff+0x110>)
 800ba7e:	f000 fb61 	bl	800c144 <__assert_func>
 800ba82:	2301      	movs	r3, #1
 800ba84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba8c:	bfa4      	itt	ge
 800ba8e:	4643      	movge	r3, r8
 800ba90:	46a0      	movge	r8, r4
 800ba92:	4630      	mov	r0, r6
 800ba94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba98:	bfa6      	itte	ge
 800ba9a:	461c      	movge	r4, r3
 800ba9c:	2500      	movge	r5, #0
 800ba9e:	2501      	movlt	r5, #1
 800baa0:	f7ff fd40 	bl	800b524 <_Balloc>
 800baa4:	b920      	cbnz	r0, 800bab0 <__mdiff+0x5c>
 800baa6:	4b2e      	ldr	r3, [pc, #184]	; (800bb60 <__mdiff+0x10c>)
 800baa8:	4602      	mov	r2, r0
 800baaa:	f240 2145 	movw	r1, #581	; 0x245
 800baae:	e7e5      	b.n	800ba7c <__mdiff+0x28>
 800bab0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bab4:	6926      	ldr	r6, [r4, #16]
 800bab6:	60c5      	str	r5, [r0, #12]
 800bab8:	f104 0914 	add.w	r9, r4, #20
 800babc:	f108 0514 	add.w	r5, r8, #20
 800bac0:	f100 0e14 	add.w	lr, r0, #20
 800bac4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bac8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bacc:	f108 0210 	add.w	r2, r8, #16
 800bad0:	46f2      	mov	sl, lr
 800bad2:	2100      	movs	r1, #0
 800bad4:	f859 3b04 	ldr.w	r3, [r9], #4
 800bad8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800badc:	fa11 f88b 	uxtah	r8, r1, fp
 800bae0:	b299      	uxth	r1, r3
 800bae2:	0c1b      	lsrs	r3, r3, #16
 800bae4:	eba8 0801 	sub.w	r8, r8, r1
 800bae8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baf0:	fa1f f888 	uxth.w	r8, r8
 800baf4:	1419      	asrs	r1, r3, #16
 800baf6:	454e      	cmp	r6, r9
 800baf8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bafc:	f84a 3b04 	str.w	r3, [sl], #4
 800bb00:	d8e8      	bhi.n	800bad4 <__mdiff+0x80>
 800bb02:	1b33      	subs	r3, r6, r4
 800bb04:	3b15      	subs	r3, #21
 800bb06:	f023 0303 	bic.w	r3, r3, #3
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	3415      	adds	r4, #21
 800bb0e:	42a6      	cmp	r6, r4
 800bb10:	bf38      	it	cc
 800bb12:	2304      	movcc	r3, #4
 800bb14:	441d      	add	r5, r3
 800bb16:	4473      	add	r3, lr
 800bb18:	469e      	mov	lr, r3
 800bb1a:	462e      	mov	r6, r5
 800bb1c:	4566      	cmp	r6, ip
 800bb1e:	d30e      	bcc.n	800bb3e <__mdiff+0xea>
 800bb20:	f10c 0203 	add.w	r2, ip, #3
 800bb24:	1b52      	subs	r2, r2, r5
 800bb26:	f022 0203 	bic.w	r2, r2, #3
 800bb2a:	3d03      	subs	r5, #3
 800bb2c:	45ac      	cmp	ip, r5
 800bb2e:	bf38      	it	cc
 800bb30:	2200      	movcc	r2, #0
 800bb32:	4413      	add	r3, r2
 800bb34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb38:	b17a      	cbz	r2, 800bb5a <__mdiff+0x106>
 800bb3a:	6107      	str	r7, [r0, #16]
 800bb3c:	e7a4      	b.n	800ba88 <__mdiff+0x34>
 800bb3e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb42:	fa11 f288 	uxtah	r2, r1, r8
 800bb46:	1414      	asrs	r4, r2, #16
 800bb48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb4c:	b292      	uxth	r2, r2
 800bb4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb52:	f84e 2b04 	str.w	r2, [lr], #4
 800bb56:	1421      	asrs	r1, r4, #16
 800bb58:	e7e0      	b.n	800bb1c <__mdiff+0xc8>
 800bb5a:	3f01      	subs	r7, #1
 800bb5c:	e7ea      	b.n	800bb34 <__mdiff+0xe0>
 800bb5e:	bf00      	nop
 800bb60:	0800d2f4 	.word	0x0800d2f4
 800bb64:	0800d305 	.word	0x0800d305

0800bb68 <__d2b>:
 800bb68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	460f      	mov	r7, r1
 800bb6e:	2101      	movs	r1, #1
 800bb70:	ec59 8b10 	vmov	r8, r9, d0
 800bb74:	4616      	mov	r6, r2
 800bb76:	f7ff fcd5 	bl	800b524 <_Balloc>
 800bb7a:	4604      	mov	r4, r0
 800bb7c:	b930      	cbnz	r0, 800bb8c <__d2b+0x24>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	4b24      	ldr	r3, [pc, #144]	; (800bc14 <__d2b+0xac>)
 800bb82:	4825      	ldr	r0, [pc, #148]	; (800bc18 <__d2b+0xb0>)
 800bb84:	f240 310f 	movw	r1, #783	; 0x30f
 800bb88:	f000 fadc 	bl	800c144 <__assert_func>
 800bb8c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb94:	bb2d      	cbnz	r5, 800bbe2 <__d2b+0x7a>
 800bb96:	9301      	str	r3, [sp, #4]
 800bb98:	f1b8 0300 	subs.w	r3, r8, #0
 800bb9c:	d026      	beq.n	800bbec <__d2b+0x84>
 800bb9e:	4668      	mov	r0, sp
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	f7ff fd87 	bl	800b6b4 <__lo0bits>
 800bba6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbaa:	b1e8      	cbz	r0, 800bbe8 <__d2b+0x80>
 800bbac:	f1c0 0320 	rsb	r3, r0, #32
 800bbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb4:	430b      	orrs	r3, r1
 800bbb6:	40c2      	lsrs	r2, r0
 800bbb8:	6163      	str	r3, [r4, #20]
 800bbba:	9201      	str	r2, [sp, #4]
 800bbbc:	9b01      	ldr	r3, [sp, #4]
 800bbbe:	61a3      	str	r3, [r4, #24]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	bf14      	ite	ne
 800bbc4:	2202      	movne	r2, #2
 800bbc6:	2201      	moveq	r2, #1
 800bbc8:	6122      	str	r2, [r4, #16]
 800bbca:	b1bd      	cbz	r5, 800bbfc <__d2b+0x94>
 800bbcc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbd0:	4405      	add	r5, r0
 800bbd2:	603d      	str	r5, [r7, #0]
 800bbd4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbd8:	6030      	str	r0, [r6, #0]
 800bbda:	4620      	mov	r0, r4
 800bbdc:	b003      	add	sp, #12
 800bbde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbe2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbe6:	e7d6      	b.n	800bb96 <__d2b+0x2e>
 800bbe8:	6161      	str	r1, [r4, #20]
 800bbea:	e7e7      	b.n	800bbbc <__d2b+0x54>
 800bbec:	a801      	add	r0, sp, #4
 800bbee:	f7ff fd61 	bl	800b6b4 <__lo0bits>
 800bbf2:	9b01      	ldr	r3, [sp, #4]
 800bbf4:	6163      	str	r3, [r4, #20]
 800bbf6:	3020      	adds	r0, #32
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	e7e5      	b.n	800bbc8 <__d2b+0x60>
 800bbfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc04:	6038      	str	r0, [r7, #0]
 800bc06:	6918      	ldr	r0, [r3, #16]
 800bc08:	f7ff fd34 	bl	800b674 <__hi0bits>
 800bc0c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc10:	e7e2      	b.n	800bbd8 <__d2b+0x70>
 800bc12:	bf00      	nop
 800bc14:	0800d2f4 	.word	0x0800d2f4
 800bc18:	0800d305 	.word	0x0800d305

0800bc1c <__sfputc_r>:
 800bc1c:	6893      	ldr	r3, [r2, #8]
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	b410      	push	{r4}
 800bc24:	6093      	str	r3, [r2, #8]
 800bc26:	da08      	bge.n	800bc3a <__sfputc_r+0x1e>
 800bc28:	6994      	ldr	r4, [r2, #24]
 800bc2a:	42a3      	cmp	r3, r4
 800bc2c:	db01      	blt.n	800bc32 <__sfputc_r+0x16>
 800bc2e:	290a      	cmp	r1, #10
 800bc30:	d103      	bne.n	800bc3a <__sfputc_r+0x1e>
 800bc32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc36:	f7fe bbe4 	b.w	800a402 <__swbuf_r>
 800bc3a:	6813      	ldr	r3, [r2, #0]
 800bc3c:	1c58      	adds	r0, r3, #1
 800bc3e:	6010      	str	r0, [r2, #0]
 800bc40:	7019      	strb	r1, [r3, #0]
 800bc42:	4608      	mov	r0, r1
 800bc44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc48:	4770      	bx	lr

0800bc4a <__sfputs_r>:
 800bc4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc4c:	4606      	mov	r6, r0
 800bc4e:	460f      	mov	r7, r1
 800bc50:	4614      	mov	r4, r2
 800bc52:	18d5      	adds	r5, r2, r3
 800bc54:	42ac      	cmp	r4, r5
 800bc56:	d101      	bne.n	800bc5c <__sfputs_r+0x12>
 800bc58:	2000      	movs	r0, #0
 800bc5a:	e007      	b.n	800bc6c <__sfputs_r+0x22>
 800bc5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc60:	463a      	mov	r2, r7
 800bc62:	4630      	mov	r0, r6
 800bc64:	f7ff ffda 	bl	800bc1c <__sfputc_r>
 800bc68:	1c43      	adds	r3, r0, #1
 800bc6a:	d1f3      	bne.n	800bc54 <__sfputs_r+0xa>
 800bc6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc70 <_vfiprintf_r>:
 800bc70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc74:	460d      	mov	r5, r1
 800bc76:	b09d      	sub	sp, #116	; 0x74
 800bc78:	4614      	mov	r4, r2
 800bc7a:	4698      	mov	r8, r3
 800bc7c:	4606      	mov	r6, r0
 800bc7e:	b118      	cbz	r0, 800bc88 <_vfiprintf_r+0x18>
 800bc80:	6a03      	ldr	r3, [r0, #32]
 800bc82:	b90b      	cbnz	r3, 800bc88 <_vfiprintf_r+0x18>
 800bc84:	f7fe fad6 	bl	800a234 <__sinit>
 800bc88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc8a:	07d9      	lsls	r1, r3, #31
 800bc8c:	d405      	bmi.n	800bc9a <_vfiprintf_r+0x2a>
 800bc8e:	89ab      	ldrh	r3, [r5, #12]
 800bc90:	059a      	lsls	r2, r3, #22
 800bc92:	d402      	bmi.n	800bc9a <_vfiprintf_r+0x2a>
 800bc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc96:	f7fe fcc6 	bl	800a626 <__retarget_lock_acquire_recursive>
 800bc9a:	89ab      	ldrh	r3, [r5, #12]
 800bc9c:	071b      	lsls	r3, r3, #28
 800bc9e:	d501      	bpl.n	800bca4 <_vfiprintf_r+0x34>
 800bca0:	692b      	ldr	r3, [r5, #16]
 800bca2:	b99b      	cbnz	r3, 800bccc <_vfiprintf_r+0x5c>
 800bca4:	4629      	mov	r1, r5
 800bca6:	4630      	mov	r0, r6
 800bca8:	f7fe fbe8 	bl	800a47c <__swsetup_r>
 800bcac:	b170      	cbz	r0, 800bccc <_vfiprintf_r+0x5c>
 800bcae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcb0:	07dc      	lsls	r4, r3, #31
 800bcb2:	d504      	bpl.n	800bcbe <_vfiprintf_r+0x4e>
 800bcb4:	f04f 30ff 	mov.w	r0, #4294967295
 800bcb8:	b01d      	add	sp, #116	; 0x74
 800bcba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcbe:	89ab      	ldrh	r3, [r5, #12]
 800bcc0:	0598      	lsls	r0, r3, #22
 800bcc2:	d4f7      	bmi.n	800bcb4 <_vfiprintf_r+0x44>
 800bcc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcc6:	f7fe fcaf 	bl	800a628 <__retarget_lock_release_recursive>
 800bcca:	e7f3      	b.n	800bcb4 <_vfiprintf_r+0x44>
 800bccc:	2300      	movs	r3, #0
 800bcce:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd0:	2320      	movs	r3, #32
 800bcd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bcda:	2330      	movs	r3, #48	; 0x30
 800bcdc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be90 <_vfiprintf_r+0x220>
 800bce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bce4:	f04f 0901 	mov.w	r9, #1
 800bce8:	4623      	mov	r3, r4
 800bcea:	469a      	mov	sl, r3
 800bcec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcf0:	b10a      	cbz	r2, 800bcf6 <_vfiprintf_r+0x86>
 800bcf2:	2a25      	cmp	r2, #37	; 0x25
 800bcf4:	d1f9      	bne.n	800bcea <_vfiprintf_r+0x7a>
 800bcf6:	ebba 0b04 	subs.w	fp, sl, r4
 800bcfa:	d00b      	beq.n	800bd14 <_vfiprintf_r+0xa4>
 800bcfc:	465b      	mov	r3, fp
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4629      	mov	r1, r5
 800bd02:	4630      	mov	r0, r6
 800bd04:	f7ff ffa1 	bl	800bc4a <__sfputs_r>
 800bd08:	3001      	adds	r0, #1
 800bd0a:	f000 80a9 	beq.w	800be60 <_vfiprintf_r+0x1f0>
 800bd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd10:	445a      	add	r2, fp
 800bd12:	9209      	str	r2, [sp, #36]	; 0x24
 800bd14:	f89a 3000 	ldrb.w	r3, [sl]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	f000 80a1 	beq.w	800be60 <_vfiprintf_r+0x1f0>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f04f 32ff 	mov.w	r2, #4294967295
 800bd24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd28:	f10a 0a01 	add.w	sl, sl, #1
 800bd2c:	9304      	str	r3, [sp, #16]
 800bd2e:	9307      	str	r3, [sp, #28]
 800bd30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd34:	931a      	str	r3, [sp, #104]	; 0x68
 800bd36:	4654      	mov	r4, sl
 800bd38:	2205      	movs	r2, #5
 800bd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd3e:	4854      	ldr	r0, [pc, #336]	; (800be90 <_vfiprintf_r+0x220>)
 800bd40:	f7f4 fa6e 	bl	8000220 <memchr>
 800bd44:	9a04      	ldr	r2, [sp, #16]
 800bd46:	b9d8      	cbnz	r0, 800bd80 <_vfiprintf_r+0x110>
 800bd48:	06d1      	lsls	r1, r2, #27
 800bd4a:	bf44      	itt	mi
 800bd4c:	2320      	movmi	r3, #32
 800bd4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd52:	0713      	lsls	r3, r2, #28
 800bd54:	bf44      	itt	mi
 800bd56:	232b      	movmi	r3, #43	; 0x2b
 800bd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd60:	2b2a      	cmp	r3, #42	; 0x2a
 800bd62:	d015      	beq.n	800bd90 <_vfiprintf_r+0x120>
 800bd64:	9a07      	ldr	r2, [sp, #28]
 800bd66:	4654      	mov	r4, sl
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f04f 0c0a 	mov.w	ip, #10
 800bd6e:	4621      	mov	r1, r4
 800bd70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd74:	3b30      	subs	r3, #48	; 0x30
 800bd76:	2b09      	cmp	r3, #9
 800bd78:	d94d      	bls.n	800be16 <_vfiprintf_r+0x1a6>
 800bd7a:	b1b0      	cbz	r0, 800bdaa <_vfiprintf_r+0x13a>
 800bd7c:	9207      	str	r2, [sp, #28]
 800bd7e:	e014      	b.n	800bdaa <_vfiprintf_r+0x13a>
 800bd80:	eba0 0308 	sub.w	r3, r0, r8
 800bd84:	fa09 f303 	lsl.w	r3, r9, r3
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	9304      	str	r3, [sp, #16]
 800bd8c:	46a2      	mov	sl, r4
 800bd8e:	e7d2      	b.n	800bd36 <_vfiprintf_r+0xc6>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	1d19      	adds	r1, r3, #4
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	9103      	str	r1, [sp, #12]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	bfbb      	ittet	lt
 800bd9c:	425b      	neglt	r3, r3
 800bd9e:	f042 0202 	orrlt.w	r2, r2, #2
 800bda2:	9307      	strge	r3, [sp, #28]
 800bda4:	9307      	strlt	r3, [sp, #28]
 800bda6:	bfb8      	it	lt
 800bda8:	9204      	strlt	r2, [sp, #16]
 800bdaa:	7823      	ldrb	r3, [r4, #0]
 800bdac:	2b2e      	cmp	r3, #46	; 0x2e
 800bdae:	d10c      	bne.n	800bdca <_vfiprintf_r+0x15a>
 800bdb0:	7863      	ldrb	r3, [r4, #1]
 800bdb2:	2b2a      	cmp	r3, #42	; 0x2a
 800bdb4:	d134      	bne.n	800be20 <_vfiprintf_r+0x1b0>
 800bdb6:	9b03      	ldr	r3, [sp, #12]
 800bdb8:	1d1a      	adds	r2, r3, #4
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	9203      	str	r2, [sp, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	bfb8      	it	lt
 800bdc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdc6:	3402      	adds	r4, #2
 800bdc8:	9305      	str	r3, [sp, #20]
 800bdca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bea0 <_vfiprintf_r+0x230>
 800bdce:	7821      	ldrb	r1, [r4, #0]
 800bdd0:	2203      	movs	r2, #3
 800bdd2:	4650      	mov	r0, sl
 800bdd4:	f7f4 fa24 	bl	8000220 <memchr>
 800bdd8:	b138      	cbz	r0, 800bdea <_vfiprintf_r+0x17a>
 800bdda:	9b04      	ldr	r3, [sp, #16]
 800bddc:	eba0 000a 	sub.w	r0, r0, sl
 800bde0:	2240      	movs	r2, #64	; 0x40
 800bde2:	4082      	lsls	r2, r0
 800bde4:	4313      	orrs	r3, r2
 800bde6:	3401      	adds	r4, #1
 800bde8:	9304      	str	r3, [sp, #16]
 800bdea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdee:	4829      	ldr	r0, [pc, #164]	; (800be94 <_vfiprintf_r+0x224>)
 800bdf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdf4:	2206      	movs	r2, #6
 800bdf6:	f7f4 fa13 	bl	8000220 <memchr>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d03f      	beq.n	800be7e <_vfiprintf_r+0x20e>
 800bdfe:	4b26      	ldr	r3, [pc, #152]	; (800be98 <_vfiprintf_r+0x228>)
 800be00:	bb1b      	cbnz	r3, 800be4a <_vfiprintf_r+0x1da>
 800be02:	9b03      	ldr	r3, [sp, #12]
 800be04:	3307      	adds	r3, #7
 800be06:	f023 0307 	bic.w	r3, r3, #7
 800be0a:	3308      	adds	r3, #8
 800be0c:	9303      	str	r3, [sp, #12]
 800be0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be10:	443b      	add	r3, r7
 800be12:	9309      	str	r3, [sp, #36]	; 0x24
 800be14:	e768      	b.n	800bce8 <_vfiprintf_r+0x78>
 800be16:	fb0c 3202 	mla	r2, ip, r2, r3
 800be1a:	460c      	mov	r4, r1
 800be1c:	2001      	movs	r0, #1
 800be1e:	e7a6      	b.n	800bd6e <_vfiprintf_r+0xfe>
 800be20:	2300      	movs	r3, #0
 800be22:	3401      	adds	r4, #1
 800be24:	9305      	str	r3, [sp, #20]
 800be26:	4619      	mov	r1, r3
 800be28:	f04f 0c0a 	mov.w	ip, #10
 800be2c:	4620      	mov	r0, r4
 800be2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be32:	3a30      	subs	r2, #48	; 0x30
 800be34:	2a09      	cmp	r2, #9
 800be36:	d903      	bls.n	800be40 <_vfiprintf_r+0x1d0>
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d0c6      	beq.n	800bdca <_vfiprintf_r+0x15a>
 800be3c:	9105      	str	r1, [sp, #20]
 800be3e:	e7c4      	b.n	800bdca <_vfiprintf_r+0x15a>
 800be40:	fb0c 2101 	mla	r1, ip, r1, r2
 800be44:	4604      	mov	r4, r0
 800be46:	2301      	movs	r3, #1
 800be48:	e7f0      	b.n	800be2c <_vfiprintf_r+0x1bc>
 800be4a:	ab03      	add	r3, sp, #12
 800be4c:	9300      	str	r3, [sp, #0]
 800be4e:	462a      	mov	r2, r5
 800be50:	4b12      	ldr	r3, [pc, #72]	; (800be9c <_vfiprintf_r+0x22c>)
 800be52:	a904      	add	r1, sp, #16
 800be54:	4630      	mov	r0, r6
 800be56:	f7fd fd9b 	bl	8009990 <_printf_float>
 800be5a:	4607      	mov	r7, r0
 800be5c:	1c78      	adds	r0, r7, #1
 800be5e:	d1d6      	bne.n	800be0e <_vfiprintf_r+0x19e>
 800be60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be62:	07d9      	lsls	r1, r3, #31
 800be64:	d405      	bmi.n	800be72 <_vfiprintf_r+0x202>
 800be66:	89ab      	ldrh	r3, [r5, #12]
 800be68:	059a      	lsls	r2, r3, #22
 800be6a:	d402      	bmi.n	800be72 <_vfiprintf_r+0x202>
 800be6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be6e:	f7fe fbdb 	bl	800a628 <__retarget_lock_release_recursive>
 800be72:	89ab      	ldrh	r3, [r5, #12]
 800be74:	065b      	lsls	r3, r3, #25
 800be76:	f53f af1d 	bmi.w	800bcb4 <_vfiprintf_r+0x44>
 800be7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be7c:	e71c      	b.n	800bcb8 <_vfiprintf_r+0x48>
 800be7e:	ab03      	add	r3, sp, #12
 800be80:	9300      	str	r3, [sp, #0]
 800be82:	462a      	mov	r2, r5
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <_vfiprintf_r+0x22c>)
 800be86:	a904      	add	r1, sp, #16
 800be88:	4630      	mov	r0, r6
 800be8a:	f7fe f825 	bl	8009ed8 <_printf_i>
 800be8e:	e7e4      	b.n	800be5a <_vfiprintf_r+0x1ea>
 800be90:	0800d45c 	.word	0x0800d45c
 800be94:	0800d466 	.word	0x0800d466
 800be98:	08009991 	.word	0x08009991
 800be9c:	0800bc4b 	.word	0x0800bc4b
 800bea0:	0800d462 	.word	0x0800d462

0800bea4 <__sflush_r>:
 800bea4:	898a      	ldrh	r2, [r1, #12]
 800bea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beaa:	4605      	mov	r5, r0
 800beac:	0710      	lsls	r0, r2, #28
 800beae:	460c      	mov	r4, r1
 800beb0:	d458      	bmi.n	800bf64 <__sflush_r+0xc0>
 800beb2:	684b      	ldr	r3, [r1, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dc05      	bgt.n	800bec4 <__sflush_r+0x20>
 800beb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dc02      	bgt.n	800bec4 <__sflush_r+0x20>
 800bebe:	2000      	movs	r0, #0
 800bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	d0f9      	beq.n	800bebe <__sflush_r+0x1a>
 800beca:	2300      	movs	r3, #0
 800becc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bed0:	682f      	ldr	r7, [r5, #0]
 800bed2:	6a21      	ldr	r1, [r4, #32]
 800bed4:	602b      	str	r3, [r5, #0]
 800bed6:	d032      	beq.n	800bf3e <__sflush_r+0x9a>
 800bed8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800beda:	89a3      	ldrh	r3, [r4, #12]
 800bedc:	075a      	lsls	r2, r3, #29
 800bede:	d505      	bpl.n	800beec <__sflush_r+0x48>
 800bee0:	6863      	ldr	r3, [r4, #4]
 800bee2:	1ac0      	subs	r0, r0, r3
 800bee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bee6:	b10b      	cbz	r3, 800beec <__sflush_r+0x48>
 800bee8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beea:	1ac0      	subs	r0, r0, r3
 800beec:	2300      	movs	r3, #0
 800beee:	4602      	mov	r2, r0
 800bef0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bef2:	6a21      	ldr	r1, [r4, #32]
 800bef4:	4628      	mov	r0, r5
 800bef6:	47b0      	blx	r6
 800bef8:	1c43      	adds	r3, r0, #1
 800befa:	89a3      	ldrh	r3, [r4, #12]
 800befc:	d106      	bne.n	800bf0c <__sflush_r+0x68>
 800befe:	6829      	ldr	r1, [r5, #0]
 800bf00:	291d      	cmp	r1, #29
 800bf02:	d82b      	bhi.n	800bf5c <__sflush_r+0xb8>
 800bf04:	4a29      	ldr	r2, [pc, #164]	; (800bfac <__sflush_r+0x108>)
 800bf06:	410a      	asrs	r2, r1
 800bf08:	07d6      	lsls	r6, r2, #31
 800bf0a:	d427      	bmi.n	800bf5c <__sflush_r+0xb8>
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	6062      	str	r2, [r4, #4]
 800bf10:	04d9      	lsls	r1, r3, #19
 800bf12:	6922      	ldr	r2, [r4, #16]
 800bf14:	6022      	str	r2, [r4, #0]
 800bf16:	d504      	bpl.n	800bf22 <__sflush_r+0x7e>
 800bf18:	1c42      	adds	r2, r0, #1
 800bf1a:	d101      	bne.n	800bf20 <__sflush_r+0x7c>
 800bf1c:	682b      	ldr	r3, [r5, #0]
 800bf1e:	b903      	cbnz	r3, 800bf22 <__sflush_r+0x7e>
 800bf20:	6560      	str	r0, [r4, #84]	; 0x54
 800bf22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf24:	602f      	str	r7, [r5, #0]
 800bf26:	2900      	cmp	r1, #0
 800bf28:	d0c9      	beq.n	800bebe <__sflush_r+0x1a>
 800bf2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf2e:	4299      	cmp	r1, r3
 800bf30:	d002      	beq.n	800bf38 <__sflush_r+0x94>
 800bf32:	4628      	mov	r0, r5
 800bf34:	f7ff f9f6 	bl	800b324 <_free_r>
 800bf38:	2000      	movs	r0, #0
 800bf3a:	6360      	str	r0, [r4, #52]	; 0x34
 800bf3c:	e7c0      	b.n	800bec0 <__sflush_r+0x1c>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4628      	mov	r0, r5
 800bf42:	47b0      	blx	r6
 800bf44:	1c41      	adds	r1, r0, #1
 800bf46:	d1c8      	bne.n	800beda <__sflush_r+0x36>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0c5      	beq.n	800beda <__sflush_r+0x36>
 800bf4e:	2b1d      	cmp	r3, #29
 800bf50:	d001      	beq.n	800bf56 <__sflush_r+0xb2>
 800bf52:	2b16      	cmp	r3, #22
 800bf54:	d101      	bne.n	800bf5a <__sflush_r+0xb6>
 800bf56:	602f      	str	r7, [r5, #0]
 800bf58:	e7b1      	b.n	800bebe <__sflush_r+0x1a>
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf60:	81a3      	strh	r3, [r4, #12]
 800bf62:	e7ad      	b.n	800bec0 <__sflush_r+0x1c>
 800bf64:	690f      	ldr	r7, [r1, #16]
 800bf66:	2f00      	cmp	r7, #0
 800bf68:	d0a9      	beq.n	800bebe <__sflush_r+0x1a>
 800bf6a:	0793      	lsls	r3, r2, #30
 800bf6c:	680e      	ldr	r6, [r1, #0]
 800bf6e:	bf08      	it	eq
 800bf70:	694b      	ldreq	r3, [r1, #20]
 800bf72:	600f      	str	r7, [r1, #0]
 800bf74:	bf18      	it	ne
 800bf76:	2300      	movne	r3, #0
 800bf78:	eba6 0807 	sub.w	r8, r6, r7
 800bf7c:	608b      	str	r3, [r1, #8]
 800bf7e:	f1b8 0f00 	cmp.w	r8, #0
 800bf82:	dd9c      	ble.n	800bebe <__sflush_r+0x1a>
 800bf84:	6a21      	ldr	r1, [r4, #32]
 800bf86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf88:	4643      	mov	r3, r8
 800bf8a:	463a      	mov	r2, r7
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	47b0      	blx	r6
 800bf90:	2800      	cmp	r0, #0
 800bf92:	dc06      	bgt.n	800bfa2 <__sflush_r+0xfe>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf9a:	81a3      	strh	r3, [r4, #12]
 800bf9c:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa0:	e78e      	b.n	800bec0 <__sflush_r+0x1c>
 800bfa2:	4407      	add	r7, r0
 800bfa4:	eba8 0800 	sub.w	r8, r8, r0
 800bfa8:	e7e9      	b.n	800bf7e <__sflush_r+0xda>
 800bfaa:	bf00      	nop
 800bfac:	dfbffffe 	.word	0xdfbffffe

0800bfb0 <_fflush_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	690b      	ldr	r3, [r1, #16]
 800bfb4:	4605      	mov	r5, r0
 800bfb6:	460c      	mov	r4, r1
 800bfb8:	b913      	cbnz	r3, 800bfc0 <_fflush_r+0x10>
 800bfba:	2500      	movs	r5, #0
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	bd38      	pop	{r3, r4, r5, pc}
 800bfc0:	b118      	cbz	r0, 800bfca <_fflush_r+0x1a>
 800bfc2:	6a03      	ldr	r3, [r0, #32]
 800bfc4:	b90b      	cbnz	r3, 800bfca <_fflush_r+0x1a>
 800bfc6:	f7fe f935 	bl	800a234 <__sinit>
 800bfca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0f3      	beq.n	800bfba <_fflush_r+0xa>
 800bfd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bfd4:	07d0      	lsls	r0, r2, #31
 800bfd6:	d404      	bmi.n	800bfe2 <_fflush_r+0x32>
 800bfd8:	0599      	lsls	r1, r3, #22
 800bfda:	d402      	bmi.n	800bfe2 <_fflush_r+0x32>
 800bfdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfde:	f7fe fb22 	bl	800a626 <__retarget_lock_acquire_recursive>
 800bfe2:	4628      	mov	r0, r5
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	f7ff ff5d 	bl	800bea4 <__sflush_r>
 800bfea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfec:	07da      	lsls	r2, r3, #31
 800bfee:	4605      	mov	r5, r0
 800bff0:	d4e4      	bmi.n	800bfbc <_fflush_r+0xc>
 800bff2:	89a3      	ldrh	r3, [r4, #12]
 800bff4:	059b      	lsls	r3, r3, #22
 800bff6:	d4e1      	bmi.n	800bfbc <_fflush_r+0xc>
 800bff8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bffa:	f7fe fb15 	bl	800a628 <__retarget_lock_release_recursive>
 800bffe:	e7dd      	b.n	800bfbc <_fflush_r+0xc>

0800c000 <__swhatbuf_r>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	460c      	mov	r4, r1
 800c004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c008:	2900      	cmp	r1, #0
 800c00a:	b096      	sub	sp, #88	; 0x58
 800c00c:	4615      	mov	r5, r2
 800c00e:	461e      	mov	r6, r3
 800c010:	da0d      	bge.n	800c02e <__swhatbuf_r+0x2e>
 800c012:	89a3      	ldrh	r3, [r4, #12]
 800c014:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c018:	f04f 0100 	mov.w	r1, #0
 800c01c:	bf0c      	ite	eq
 800c01e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c022:	2340      	movne	r3, #64	; 0x40
 800c024:	2000      	movs	r0, #0
 800c026:	6031      	str	r1, [r6, #0]
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	b016      	add	sp, #88	; 0x58
 800c02c:	bd70      	pop	{r4, r5, r6, pc}
 800c02e:	466a      	mov	r2, sp
 800c030:	f000 f848 	bl	800c0c4 <_fstat_r>
 800c034:	2800      	cmp	r0, #0
 800c036:	dbec      	blt.n	800c012 <__swhatbuf_r+0x12>
 800c038:	9901      	ldr	r1, [sp, #4]
 800c03a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c03e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c042:	4259      	negs	r1, r3
 800c044:	4159      	adcs	r1, r3
 800c046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c04a:	e7eb      	b.n	800c024 <__swhatbuf_r+0x24>

0800c04c <__smakebuf_r>:
 800c04c:	898b      	ldrh	r3, [r1, #12]
 800c04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c050:	079d      	lsls	r5, r3, #30
 800c052:	4606      	mov	r6, r0
 800c054:	460c      	mov	r4, r1
 800c056:	d507      	bpl.n	800c068 <__smakebuf_r+0x1c>
 800c058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	6123      	str	r3, [r4, #16]
 800c060:	2301      	movs	r3, #1
 800c062:	6163      	str	r3, [r4, #20]
 800c064:	b002      	add	sp, #8
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	ab01      	add	r3, sp, #4
 800c06a:	466a      	mov	r2, sp
 800c06c:	f7ff ffc8 	bl	800c000 <__swhatbuf_r>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	4605      	mov	r5, r0
 800c074:	4630      	mov	r0, r6
 800c076:	f7ff f9c9 	bl	800b40c <_malloc_r>
 800c07a:	b948      	cbnz	r0, 800c090 <__smakebuf_r+0x44>
 800c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c080:	059a      	lsls	r2, r3, #22
 800c082:	d4ef      	bmi.n	800c064 <__smakebuf_r+0x18>
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	f043 0302 	orr.w	r3, r3, #2
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	e7e3      	b.n	800c058 <__smakebuf_r+0xc>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	6020      	str	r0, [r4, #0]
 800c094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c098:	81a3      	strh	r3, [r4, #12]
 800c09a:	9b00      	ldr	r3, [sp, #0]
 800c09c:	6163      	str	r3, [r4, #20]
 800c09e:	9b01      	ldr	r3, [sp, #4]
 800c0a0:	6120      	str	r0, [r4, #16]
 800c0a2:	b15b      	cbz	r3, 800c0bc <__smakebuf_r+0x70>
 800c0a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f000 f81d 	bl	800c0e8 <_isatty_r>
 800c0ae:	b128      	cbz	r0, 800c0bc <__smakebuf_r+0x70>
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	f023 0303 	bic.w	r3, r3, #3
 800c0b6:	f043 0301 	orr.w	r3, r3, #1
 800c0ba:	81a3      	strh	r3, [r4, #12]
 800c0bc:	89a3      	ldrh	r3, [r4, #12]
 800c0be:	431d      	orrs	r5, r3
 800c0c0:	81a5      	strh	r5, [r4, #12]
 800c0c2:	e7cf      	b.n	800c064 <__smakebuf_r+0x18>

0800c0c4 <_fstat_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d07      	ldr	r5, [pc, #28]	; (800c0e4 <_fstat_r+0x20>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	602b      	str	r3, [r5, #0]
 800c0d2:	f7f9 f928 	bl	8005326 <_fstat>
 800c0d6:	1c43      	adds	r3, r0, #1
 800c0d8:	d102      	bne.n	800c0e0 <_fstat_r+0x1c>
 800c0da:	682b      	ldr	r3, [r5, #0]
 800c0dc:	b103      	cbz	r3, 800c0e0 <_fstat_r+0x1c>
 800c0de:	6023      	str	r3, [r4, #0]
 800c0e0:	bd38      	pop	{r3, r4, r5, pc}
 800c0e2:	bf00      	nop
 800c0e4:	200022ac 	.word	0x200022ac

0800c0e8 <_isatty_r>:
 800c0e8:	b538      	push	{r3, r4, r5, lr}
 800c0ea:	4d06      	ldr	r5, [pc, #24]	; (800c104 <_isatty_r+0x1c>)
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	4608      	mov	r0, r1
 800c0f2:	602b      	str	r3, [r5, #0]
 800c0f4:	f7f9 f927 	bl	8005346 <_isatty>
 800c0f8:	1c43      	adds	r3, r0, #1
 800c0fa:	d102      	bne.n	800c102 <_isatty_r+0x1a>
 800c0fc:	682b      	ldr	r3, [r5, #0]
 800c0fe:	b103      	cbz	r3, 800c102 <_isatty_r+0x1a>
 800c100:	6023      	str	r3, [r4, #0]
 800c102:	bd38      	pop	{r3, r4, r5, pc}
 800c104:	200022ac 	.word	0x200022ac

0800c108 <_sbrk_r>:
 800c108:	b538      	push	{r3, r4, r5, lr}
 800c10a:	4d06      	ldr	r5, [pc, #24]	; (800c124 <_sbrk_r+0x1c>)
 800c10c:	2300      	movs	r3, #0
 800c10e:	4604      	mov	r4, r0
 800c110:	4608      	mov	r0, r1
 800c112:	602b      	str	r3, [r5, #0]
 800c114:	f7f9 f930 	bl	8005378 <_sbrk>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <_sbrk_r+0x1a>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	b103      	cbz	r3, 800c122 <_sbrk_r+0x1a>
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	bd38      	pop	{r3, r4, r5, pc}
 800c124:	200022ac 	.word	0x200022ac

0800c128 <memcpy>:
 800c128:	440a      	add	r2, r1
 800c12a:	4291      	cmp	r1, r2
 800c12c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c130:	d100      	bne.n	800c134 <memcpy+0xc>
 800c132:	4770      	bx	lr
 800c134:	b510      	push	{r4, lr}
 800c136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c13a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c13e:	4291      	cmp	r1, r2
 800c140:	d1f9      	bne.n	800c136 <memcpy+0xe>
 800c142:	bd10      	pop	{r4, pc}

0800c144 <__assert_func>:
 800c144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c146:	4614      	mov	r4, r2
 800c148:	461a      	mov	r2, r3
 800c14a:	4b09      	ldr	r3, [pc, #36]	; (800c170 <__assert_func+0x2c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	4605      	mov	r5, r0
 800c150:	68d8      	ldr	r0, [r3, #12]
 800c152:	b14c      	cbz	r4, 800c168 <__assert_func+0x24>
 800c154:	4b07      	ldr	r3, [pc, #28]	; (800c174 <__assert_func+0x30>)
 800c156:	9100      	str	r1, [sp, #0]
 800c158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c15c:	4906      	ldr	r1, [pc, #24]	; (800c178 <__assert_func+0x34>)
 800c15e:	462b      	mov	r3, r5
 800c160:	f000 f844 	bl	800c1ec <fiprintf>
 800c164:	f000 f854 	bl	800c210 <abort>
 800c168:	4b04      	ldr	r3, [pc, #16]	; (800c17c <__assert_func+0x38>)
 800c16a:	461c      	mov	r4, r3
 800c16c:	e7f3      	b.n	800c156 <__assert_func+0x12>
 800c16e:	bf00      	nop
 800c170:	20000068 	.word	0x20000068
 800c174:	0800d477 	.word	0x0800d477
 800c178:	0800d484 	.word	0x0800d484
 800c17c:	0800d4b2 	.word	0x0800d4b2

0800c180 <_calloc_r>:
 800c180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c182:	fba1 2402 	umull	r2, r4, r1, r2
 800c186:	b94c      	cbnz	r4, 800c19c <_calloc_r+0x1c>
 800c188:	4611      	mov	r1, r2
 800c18a:	9201      	str	r2, [sp, #4]
 800c18c:	f7ff f93e 	bl	800b40c <_malloc_r>
 800c190:	9a01      	ldr	r2, [sp, #4]
 800c192:	4605      	mov	r5, r0
 800c194:	b930      	cbnz	r0, 800c1a4 <_calloc_r+0x24>
 800c196:	4628      	mov	r0, r5
 800c198:	b003      	add	sp, #12
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	220c      	movs	r2, #12
 800c19e:	6002      	str	r2, [r0, #0]
 800c1a0:	2500      	movs	r5, #0
 800c1a2:	e7f8      	b.n	800c196 <_calloc_r+0x16>
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	f7fe f9c1 	bl	800a52c <memset>
 800c1aa:	e7f4      	b.n	800c196 <_calloc_r+0x16>

0800c1ac <__ascii_mbtowc>:
 800c1ac:	b082      	sub	sp, #8
 800c1ae:	b901      	cbnz	r1, 800c1b2 <__ascii_mbtowc+0x6>
 800c1b0:	a901      	add	r1, sp, #4
 800c1b2:	b142      	cbz	r2, 800c1c6 <__ascii_mbtowc+0x1a>
 800c1b4:	b14b      	cbz	r3, 800c1ca <__ascii_mbtowc+0x1e>
 800c1b6:	7813      	ldrb	r3, [r2, #0]
 800c1b8:	600b      	str	r3, [r1, #0]
 800c1ba:	7812      	ldrb	r2, [r2, #0]
 800c1bc:	1e10      	subs	r0, r2, #0
 800c1be:	bf18      	it	ne
 800c1c0:	2001      	movne	r0, #1
 800c1c2:	b002      	add	sp, #8
 800c1c4:	4770      	bx	lr
 800c1c6:	4610      	mov	r0, r2
 800c1c8:	e7fb      	b.n	800c1c2 <__ascii_mbtowc+0x16>
 800c1ca:	f06f 0001 	mvn.w	r0, #1
 800c1ce:	e7f8      	b.n	800c1c2 <__ascii_mbtowc+0x16>

0800c1d0 <__ascii_wctomb>:
 800c1d0:	b149      	cbz	r1, 800c1e6 <__ascii_wctomb+0x16>
 800c1d2:	2aff      	cmp	r2, #255	; 0xff
 800c1d4:	bf85      	ittet	hi
 800c1d6:	238a      	movhi	r3, #138	; 0x8a
 800c1d8:	6003      	strhi	r3, [r0, #0]
 800c1da:	700a      	strbls	r2, [r1, #0]
 800c1dc:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1e0:	bf98      	it	ls
 800c1e2:	2001      	movls	r0, #1
 800c1e4:	4770      	bx	lr
 800c1e6:	4608      	mov	r0, r1
 800c1e8:	4770      	bx	lr
	...

0800c1ec <fiprintf>:
 800c1ec:	b40e      	push	{r1, r2, r3}
 800c1ee:	b503      	push	{r0, r1, lr}
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	ab03      	add	r3, sp, #12
 800c1f4:	4805      	ldr	r0, [pc, #20]	; (800c20c <fiprintf+0x20>)
 800c1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1fa:	6800      	ldr	r0, [r0, #0]
 800c1fc:	9301      	str	r3, [sp, #4]
 800c1fe:	f7ff fd37 	bl	800bc70 <_vfiprintf_r>
 800c202:	b002      	add	sp, #8
 800c204:	f85d eb04 	ldr.w	lr, [sp], #4
 800c208:	b003      	add	sp, #12
 800c20a:	4770      	bx	lr
 800c20c:	20000068 	.word	0x20000068

0800c210 <abort>:
 800c210:	b508      	push	{r3, lr}
 800c212:	2006      	movs	r0, #6
 800c214:	f000 f82c 	bl	800c270 <raise>
 800c218:	2001      	movs	r0, #1
 800c21a:	f7f9 f835 	bl	8005288 <_exit>

0800c21e <_raise_r>:
 800c21e:	291f      	cmp	r1, #31
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4604      	mov	r4, r0
 800c224:	460d      	mov	r5, r1
 800c226:	d904      	bls.n	800c232 <_raise_r+0x14>
 800c228:	2316      	movs	r3, #22
 800c22a:	6003      	str	r3, [r0, #0]
 800c22c:	f04f 30ff 	mov.w	r0, #4294967295
 800c230:	bd38      	pop	{r3, r4, r5, pc}
 800c232:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c234:	b112      	cbz	r2, 800c23c <_raise_r+0x1e>
 800c236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c23a:	b94b      	cbnz	r3, 800c250 <_raise_r+0x32>
 800c23c:	4620      	mov	r0, r4
 800c23e:	f000 f831 	bl	800c2a4 <_getpid_r>
 800c242:	462a      	mov	r2, r5
 800c244:	4601      	mov	r1, r0
 800c246:	4620      	mov	r0, r4
 800c248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c24c:	f000 b818 	b.w	800c280 <_kill_r>
 800c250:	2b01      	cmp	r3, #1
 800c252:	d00a      	beq.n	800c26a <_raise_r+0x4c>
 800c254:	1c59      	adds	r1, r3, #1
 800c256:	d103      	bne.n	800c260 <_raise_r+0x42>
 800c258:	2316      	movs	r3, #22
 800c25a:	6003      	str	r3, [r0, #0]
 800c25c:	2001      	movs	r0, #1
 800c25e:	e7e7      	b.n	800c230 <_raise_r+0x12>
 800c260:	2400      	movs	r4, #0
 800c262:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c266:	4628      	mov	r0, r5
 800c268:	4798      	blx	r3
 800c26a:	2000      	movs	r0, #0
 800c26c:	e7e0      	b.n	800c230 <_raise_r+0x12>
	...

0800c270 <raise>:
 800c270:	4b02      	ldr	r3, [pc, #8]	; (800c27c <raise+0xc>)
 800c272:	4601      	mov	r1, r0
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f7ff bfd2 	b.w	800c21e <_raise_r>
 800c27a:	bf00      	nop
 800c27c:	20000068 	.word	0x20000068

0800c280 <_kill_r>:
 800c280:	b538      	push	{r3, r4, r5, lr}
 800c282:	4d07      	ldr	r5, [pc, #28]	; (800c2a0 <_kill_r+0x20>)
 800c284:	2300      	movs	r3, #0
 800c286:	4604      	mov	r4, r0
 800c288:	4608      	mov	r0, r1
 800c28a:	4611      	mov	r1, r2
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f7f8 ffeb 	bl	8005268 <_kill>
 800c292:	1c43      	adds	r3, r0, #1
 800c294:	d102      	bne.n	800c29c <_kill_r+0x1c>
 800c296:	682b      	ldr	r3, [r5, #0]
 800c298:	b103      	cbz	r3, 800c29c <_kill_r+0x1c>
 800c29a:	6023      	str	r3, [r4, #0]
 800c29c:	bd38      	pop	{r3, r4, r5, pc}
 800c29e:	bf00      	nop
 800c2a0:	200022ac 	.word	0x200022ac

0800c2a4 <_getpid_r>:
 800c2a4:	f7f8 bfd8 	b.w	8005258 <_getpid>

0800c2a8 <pow>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	ed2d 8b02 	vpush	{d8}
 800c2ae:	eeb0 8a40 	vmov.f32	s16, s0
 800c2b2:	eef0 8a60 	vmov.f32	s17, s1
 800c2b6:	ec55 4b11 	vmov	r4, r5, d1
 800c2ba:	f000 f979 	bl	800c5b0 <__ieee754_pow>
 800c2be:	4622      	mov	r2, r4
 800c2c0:	462b      	mov	r3, r5
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	4629      	mov	r1, r5
 800c2c6:	ec57 6b10 	vmov	r6, r7, d0
 800c2ca:	f7f4 fc57 	bl	8000b7c <__aeabi_dcmpun>
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	d13b      	bne.n	800c34a <pow+0xa2>
 800c2d2:	ec51 0b18 	vmov	r0, r1, d8
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f7f4 fc1d 	bl	8000b18 <__aeabi_dcmpeq>
 800c2de:	b1b8      	cbz	r0, 800c310 <pow+0x68>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f4 fc16 	bl	8000b18 <__aeabi_dcmpeq>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d146      	bne.n	800c37e <pow+0xd6>
 800c2f0:	ec45 4b10 	vmov	d0, r4, r5
 800c2f4:	f000 f874 	bl	800c3e0 <finite>
 800c2f8:	b338      	cbz	r0, 800c34a <pow+0xa2>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4620      	mov	r0, r4
 800c300:	4629      	mov	r1, r5
 800c302:	f7f4 fc13 	bl	8000b2c <__aeabi_dcmplt>
 800c306:	b300      	cbz	r0, 800c34a <pow+0xa2>
 800c308:	f7fe f962 	bl	800a5d0 <__errno>
 800c30c:	2322      	movs	r3, #34	; 0x22
 800c30e:	e01b      	b.n	800c348 <pow+0xa0>
 800c310:	ec47 6b10 	vmov	d0, r6, r7
 800c314:	f000 f864 	bl	800c3e0 <finite>
 800c318:	b9e0      	cbnz	r0, 800c354 <pow+0xac>
 800c31a:	eeb0 0a48 	vmov.f32	s0, s16
 800c31e:	eef0 0a68 	vmov.f32	s1, s17
 800c322:	f000 f85d 	bl	800c3e0 <finite>
 800c326:	b1a8      	cbz	r0, 800c354 <pow+0xac>
 800c328:	ec45 4b10 	vmov	d0, r4, r5
 800c32c:	f000 f858 	bl	800c3e0 <finite>
 800c330:	b180      	cbz	r0, 800c354 <pow+0xac>
 800c332:	4632      	mov	r2, r6
 800c334:	463b      	mov	r3, r7
 800c336:	4630      	mov	r0, r6
 800c338:	4639      	mov	r1, r7
 800c33a:	f7f4 fc1f 	bl	8000b7c <__aeabi_dcmpun>
 800c33e:	2800      	cmp	r0, #0
 800c340:	d0e2      	beq.n	800c308 <pow+0x60>
 800c342:	f7fe f945 	bl	800a5d0 <__errno>
 800c346:	2321      	movs	r3, #33	; 0x21
 800c348:	6003      	str	r3, [r0, #0]
 800c34a:	ecbd 8b02 	vpop	{d8}
 800c34e:	ec47 6b10 	vmov	d0, r6, r7
 800c352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c354:	2200      	movs	r2, #0
 800c356:	2300      	movs	r3, #0
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	f7f4 fbdc 	bl	8000b18 <__aeabi_dcmpeq>
 800c360:	2800      	cmp	r0, #0
 800c362:	d0f2      	beq.n	800c34a <pow+0xa2>
 800c364:	eeb0 0a48 	vmov.f32	s0, s16
 800c368:	eef0 0a68 	vmov.f32	s1, s17
 800c36c:	f000 f838 	bl	800c3e0 <finite>
 800c370:	2800      	cmp	r0, #0
 800c372:	d0ea      	beq.n	800c34a <pow+0xa2>
 800c374:	ec45 4b10 	vmov	d0, r4, r5
 800c378:	f000 f832 	bl	800c3e0 <finite>
 800c37c:	e7c3      	b.n	800c306 <pow+0x5e>
 800c37e:	4f01      	ldr	r7, [pc, #4]	; (800c384 <pow+0xdc>)
 800c380:	2600      	movs	r6, #0
 800c382:	e7e2      	b.n	800c34a <pow+0xa2>
 800c384:	3ff00000 	.word	0x3ff00000

0800c388 <sqrt>:
 800c388:	b538      	push	{r3, r4, r5, lr}
 800c38a:	ed2d 8b02 	vpush	{d8}
 800c38e:	ec55 4b10 	vmov	r4, r5, d0
 800c392:	f000 f831 	bl	800c3f8 <__ieee754_sqrt>
 800c396:	4622      	mov	r2, r4
 800c398:	462b      	mov	r3, r5
 800c39a:	4620      	mov	r0, r4
 800c39c:	4629      	mov	r1, r5
 800c39e:	eeb0 8a40 	vmov.f32	s16, s0
 800c3a2:	eef0 8a60 	vmov.f32	s17, s1
 800c3a6:	f7f4 fbe9 	bl	8000b7c <__aeabi_dcmpun>
 800c3aa:	b990      	cbnz	r0, 800c3d2 <sqrt+0x4a>
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	4620      	mov	r0, r4
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	f7f4 fbba 	bl	8000b2c <__aeabi_dcmplt>
 800c3b8:	b158      	cbz	r0, 800c3d2 <sqrt+0x4a>
 800c3ba:	f7fe f909 	bl	800a5d0 <__errno>
 800c3be:	2321      	movs	r3, #33	; 0x21
 800c3c0:	6003      	str	r3, [r0, #0]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	4610      	mov	r0, r2
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	f7f4 fa67 	bl	800089c <__aeabi_ddiv>
 800c3ce:	ec41 0b18 	vmov	d8, r0, r1
 800c3d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c3d6:	eef0 0a68 	vmov.f32	s1, s17
 800c3da:	ecbd 8b02 	vpop	{d8}
 800c3de:	bd38      	pop	{r3, r4, r5, pc}

0800c3e0 <finite>:
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	ed8d 0b00 	vstr	d0, [sp]
 800c3e6:	9801      	ldr	r0, [sp, #4]
 800c3e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c3ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3f0:	0fc0      	lsrs	r0, r0, #31
 800c3f2:	b002      	add	sp, #8
 800c3f4:	4770      	bx	lr
	...

0800c3f8 <__ieee754_sqrt>:
 800c3f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fc:	ec55 4b10 	vmov	r4, r5, d0
 800c400:	4e67      	ldr	r6, [pc, #412]	; (800c5a0 <__ieee754_sqrt+0x1a8>)
 800c402:	43ae      	bics	r6, r5
 800c404:	ee10 0a10 	vmov	r0, s0
 800c408:	ee10 2a10 	vmov	r2, s0
 800c40c:	4629      	mov	r1, r5
 800c40e:	462b      	mov	r3, r5
 800c410:	d10d      	bne.n	800c42e <__ieee754_sqrt+0x36>
 800c412:	f7f4 f919 	bl	8000648 <__aeabi_dmul>
 800c416:	4602      	mov	r2, r0
 800c418:	460b      	mov	r3, r1
 800c41a:	4620      	mov	r0, r4
 800c41c:	4629      	mov	r1, r5
 800c41e:	f7f3 ff5d 	bl	80002dc <__adddf3>
 800c422:	4604      	mov	r4, r0
 800c424:	460d      	mov	r5, r1
 800c426:	ec45 4b10 	vmov	d0, r4, r5
 800c42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	2d00      	cmp	r5, #0
 800c430:	dc0b      	bgt.n	800c44a <__ieee754_sqrt+0x52>
 800c432:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c436:	4326      	orrs	r6, r4
 800c438:	d0f5      	beq.n	800c426 <__ieee754_sqrt+0x2e>
 800c43a:	b135      	cbz	r5, 800c44a <__ieee754_sqrt+0x52>
 800c43c:	f7f3 ff4c 	bl	80002d8 <__aeabi_dsub>
 800c440:	4602      	mov	r2, r0
 800c442:	460b      	mov	r3, r1
 800c444:	f7f4 fa2a 	bl	800089c <__aeabi_ddiv>
 800c448:	e7eb      	b.n	800c422 <__ieee754_sqrt+0x2a>
 800c44a:	1509      	asrs	r1, r1, #20
 800c44c:	f000 808d 	beq.w	800c56a <__ieee754_sqrt+0x172>
 800c450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c454:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c45c:	07c9      	lsls	r1, r1, #31
 800c45e:	bf5c      	itt	pl
 800c460:	005b      	lslpl	r3, r3, #1
 800c462:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c466:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c46a:	bf58      	it	pl
 800c46c:	0052      	lslpl	r2, r2, #1
 800c46e:	2500      	movs	r5, #0
 800c470:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c474:	1076      	asrs	r6, r6, #1
 800c476:	0052      	lsls	r2, r2, #1
 800c478:	f04f 0e16 	mov.w	lr, #22
 800c47c:	46ac      	mov	ip, r5
 800c47e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c482:	eb0c 0001 	add.w	r0, ip, r1
 800c486:	4298      	cmp	r0, r3
 800c488:	bfde      	ittt	le
 800c48a:	1a1b      	suble	r3, r3, r0
 800c48c:	eb00 0c01 	addle.w	ip, r0, r1
 800c490:	186d      	addle	r5, r5, r1
 800c492:	005b      	lsls	r3, r3, #1
 800c494:	f1be 0e01 	subs.w	lr, lr, #1
 800c498:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c49c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c4a0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c4a4:	d1ed      	bne.n	800c482 <__ieee754_sqrt+0x8a>
 800c4a6:	4674      	mov	r4, lr
 800c4a8:	2720      	movs	r7, #32
 800c4aa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c4ae:	4563      	cmp	r3, ip
 800c4b0:	eb01 000e 	add.w	r0, r1, lr
 800c4b4:	dc02      	bgt.n	800c4bc <__ieee754_sqrt+0xc4>
 800c4b6:	d113      	bne.n	800c4e0 <__ieee754_sqrt+0xe8>
 800c4b8:	4290      	cmp	r0, r2
 800c4ba:	d811      	bhi.n	800c4e0 <__ieee754_sqrt+0xe8>
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	eb00 0e01 	add.w	lr, r0, r1
 800c4c2:	da57      	bge.n	800c574 <__ieee754_sqrt+0x17c>
 800c4c4:	f1be 0f00 	cmp.w	lr, #0
 800c4c8:	db54      	blt.n	800c574 <__ieee754_sqrt+0x17c>
 800c4ca:	f10c 0801 	add.w	r8, ip, #1
 800c4ce:	eba3 030c 	sub.w	r3, r3, ip
 800c4d2:	4290      	cmp	r0, r2
 800c4d4:	bf88      	it	hi
 800c4d6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c4da:	1a12      	subs	r2, r2, r0
 800c4dc:	440c      	add	r4, r1
 800c4de:	46c4      	mov	ip, r8
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	3f01      	subs	r7, #1
 800c4e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c4e8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c4ec:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c4f0:	d1dd      	bne.n	800c4ae <__ieee754_sqrt+0xb6>
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	d01b      	beq.n	800c52e <__ieee754_sqrt+0x136>
 800c4f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c5a4 <__ieee754_sqrt+0x1ac>
 800c4fa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c5a8 <__ieee754_sqrt+0x1b0>
 800c4fe:	e9da 0100 	ldrd	r0, r1, [sl]
 800c502:	e9db 2300 	ldrd	r2, r3, [fp]
 800c506:	f7f3 fee7 	bl	80002d8 <__aeabi_dsub>
 800c50a:	e9da 8900 	ldrd	r8, r9, [sl]
 800c50e:	4602      	mov	r2, r0
 800c510:	460b      	mov	r3, r1
 800c512:	4640      	mov	r0, r8
 800c514:	4649      	mov	r1, r9
 800c516:	f7f4 fb13 	bl	8000b40 <__aeabi_dcmple>
 800c51a:	b140      	cbz	r0, 800c52e <__ieee754_sqrt+0x136>
 800c51c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c520:	e9da 0100 	ldrd	r0, r1, [sl]
 800c524:	e9db 2300 	ldrd	r2, r3, [fp]
 800c528:	d126      	bne.n	800c578 <__ieee754_sqrt+0x180>
 800c52a:	3501      	adds	r5, #1
 800c52c:	463c      	mov	r4, r7
 800c52e:	106a      	asrs	r2, r5, #1
 800c530:	0863      	lsrs	r3, r4, #1
 800c532:	07e9      	lsls	r1, r5, #31
 800c534:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c538:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c53c:	bf48      	it	mi
 800c53e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c542:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c546:	461c      	mov	r4, r3
 800c548:	e76d      	b.n	800c426 <__ieee754_sqrt+0x2e>
 800c54a:	0ad3      	lsrs	r3, r2, #11
 800c54c:	3815      	subs	r0, #21
 800c54e:	0552      	lsls	r2, r2, #21
 800c550:	2b00      	cmp	r3, #0
 800c552:	d0fa      	beq.n	800c54a <__ieee754_sqrt+0x152>
 800c554:	02dc      	lsls	r4, r3, #11
 800c556:	d50a      	bpl.n	800c56e <__ieee754_sqrt+0x176>
 800c558:	f1c1 0420 	rsb	r4, r1, #32
 800c55c:	fa22 f404 	lsr.w	r4, r2, r4
 800c560:	1e4d      	subs	r5, r1, #1
 800c562:	408a      	lsls	r2, r1
 800c564:	4323      	orrs	r3, r4
 800c566:	1b41      	subs	r1, r0, r5
 800c568:	e772      	b.n	800c450 <__ieee754_sqrt+0x58>
 800c56a:	4608      	mov	r0, r1
 800c56c:	e7f0      	b.n	800c550 <__ieee754_sqrt+0x158>
 800c56e:	005b      	lsls	r3, r3, #1
 800c570:	3101      	adds	r1, #1
 800c572:	e7ef      	b.n	800c554 <__ieee754_sqrt+0x15c>
 800c574:	46e0      	mov	r8, ip
 800c576:	e7aa      	b.n	800c4ce <__ieee754_sqrt+0xd6>
 800c578:	f7f3 feb0 	bl	80002dc <__adddf3>
 800c57c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c580:	4602      	mov	r2, r0
 800c582:	460b      	mov	r3, r1
 800c584:	4640      	mov	r0, r8
 800c586:	4649      	mov	r1, r9
 800c588:	f7f4 fad0 	bl	8000b2c <__aeabi_dcmplt>
 800c58c:	b120      	cbz	r0, 800c598 <__ieee754_sqrt+0x1a0>
 800c58e:	1ca0      	adds	r0, r4, #2
 800c590:	bf08      	it	eq
 800c592:	3501      	addeq	r5, #1
 800c594:	3402      	adds	r4, #2
 800c596:	e7ca      	b.n	800c52e <__ieee754_sqrt+0x136>
 800c598:	3401      	adds	r4, #1
 800c59a:	f024 0401 	bic.w	r4, r4, #1
 800c59e:	e7c6      	b.n	800c52e <__ieee754_sqrt+0x136>
 800c5a0:	7ff00000 	.word	0x7ff00000
 800c5a4:	200001d8 	.word	0x200001d8
 800c5a8:	200001e0 	.word	0x200001e0
 800c5ac:	00000000 	.word	0x00000000

0800c5b0 <__ieee754_pow>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	ed2d 8b06 	vpush	{d8-d10}
 800c5b8:	b089      	sub	sp, #36	; 0x24
 800c5ba:	ed8d 1b00 	vstr	d1, [sp]
 800c5be:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5c2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5c6:	ea58 0102 	orrs.w	r1, r8, r2
 800c5ca:	ec57 6b10 	vmov	r6, r7, d0
 800c5ce:	d115      	bne.n	800c5fc <__ieee754_pow+0x4c>
 800c5d0:	19b3      	adds	r3, r6, r6
 800c5d2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5d6:	4152      	adcs	r2, r2
 800c5d8:	4299      	cmp	r1, r3
 800c5da:	4b89      	ldr	r3, [pc, #548]	; (800c800 <__ieee754_pow+0x250>)
 800c5dc:	4193      	sbcs	r3, r2
 800c5de:	f080 84d1 	bcs.w	800cf84 <__ieee754_pow+0x9d4>
 800c5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5e6:	4630      	mov	r0, r6
 800c5e8:	4639      	mov	r1, r7
 800c5ea:	f7f3 fe77 	bl	80002dc <__adddf3>
 800c5ee:	ec41 0b10 	vmov	d0, r0, r1
 800c5f2:	b009      	add	sp, #36	; 0x24
 800c5f4:	ecbd 8b06 	vpop	{d8-d10}
 800c5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5fc:	4b81      	ldr	r3, [pc, #516]	; (800c804 <__ieee754_pow+0x254>)
 800c5fe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c602:	429c      	cmp	r4, r3
 800c604:	ee10 aa10 	vmov	sl, s0
 800c608:	463d      	mov	r5, r7
 800c60a:	dc06      	bgt.n	800c61a <__ieee754_pow+0x6a>
 800c60c:	d101      	bne.n	800c612 <__ieee754_pow+0x62>
 800c60e:	2e00      	cmp	r6, #0
 800c610:	d1e7      	bne.n	800c5e2 <__ieee754_pow+0x32>
 800c612:	4598      	cmp	r8, r3
 800c614:	dc01      	bgt.n	800c61a <__ieee754_pow+0x6a>
 800c616:	d10f      	bne.n	800c638 <__ieee754_pow+0x88>
 800c618:	b172      	cbz	r2, 800c638 <__ieee754_pow+0x88>
 800c61a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c61e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c622:	ea55 050a 	orrs.w	r5, r5, sl
 800c626:	d1dc      	bne.n	800c5e2 <__ieee754_pow+0x32>
 800c628:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c62c:	18db      	adds	r3, r3, r3
 800c62e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c632:	4152      	adcs	r2, r2
 800c634:	429d      	cmp	r5, r3
 800c636:	e7d0      	b.n	800c5da <__ieee754_pow+0x2a>
 800c638:	2d00      	cmp	r5, #0
 800c63a:	da3b      	bge.n	800c6b4 <__ieee754_pow+0x104>
 800c63c:	4b72      	ldr	r3, [pc, #456]	; (800c808 <__ieee754_pow+0x258>)
 800c63e:	4598      	cmp	r8, r3
 800c640:	dc51      	bgt.n	800c6e6 <__ieee754_pow+0x136>
 800c642:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c646:	4598      	cmp	r8, r3
 800c648:	f340 84ab 	ble.w	800cfa2 <__ieee754_pow+0x9f2>
 800c64c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c650:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c654:	2b14      	cmp	r3, #20
 800c656:	dd0f      	ble.n	800c678 <__ieee754_pow+0xc8>
 800c658:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c65c:	fa22 f103 	lsr.w	r1, r2, r3
 800c660:	fa01 f303 	lsl.w	r3, r1, r3
 800c664:	4293      	cmp	r3, r2
 800c666:	f040 849c 	bne.w	800cfa2 <__ieee754_pow+0x9f2>
 800c66a:	f001 0101 	and.w	r1, r1, #1
 800c66e:	f1c1 0302 	rsb	r3, r1, #2
 800c672:	9304      	str	r3, [sp, #16]
 800c674:	b182      	cbz	r2, 800c698 <__ieee754_pow+0xe8>
 800c676:	e05f      	b.n	800c738 <__ieee754_pow+0x188>
 800c678:	2a00      	cmp	r2, #0
 800c67a:	d15b      	bne.n	800c734 <__ieee754_pow+0x184>
 800c67c:	f1c3 0314 	rsb	r3, r3, #20
 800c680:	fa48 f103 	asr.w	r1, r8, r3
 800c684:	fa01 f303 	lsl.w	r3, r1, r3
 800c688:	4543      	cmp	r3, r8
 800c68a:	f040 8487 	bne.w	800cf9c <__ieee754_pow+0x9ec>
 800c68e:	f001 0101 	and.w	r1, r1, #1
 800c692:	f1c1 0302 	rsb	r3, r1, #2
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	4b5c      	ldr	r3, [pc, #368]	; (800c80c <__ieee754_pow+0x25c>)
 800c69a:	4598      	cmp	r8, r3
 800c69c:	d132      	bne.n	800c704 <__ieee754_pow+0x154>
 800c69e:	f1b9 0f00 	cmp.w	r9, #0
 800c6a2:	f280 8477 	bge.w	800cf94 <__ieee754_pow+0x9e4>
 800c6a6:	4959      	ldr	r1, [pc, #356]	; (800c80c <__ieee754_pow+0x25c>)
 800c6a8:	4632      	mov	r2, r6
 800c6aa:	463b      	mov	r3, r7
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f7f4 f8f5 	bl	800089c <__aeabi_ddiv>
 800c6b2:	e79c      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	9304      	str	r3, [sp, #16]
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	d13d      	bne.n	800c738 <__ieee754_pow+0x188>
 800c6bc:	4b51      	ldr	r3, [pc, #324]	; (800c804 <__ieee754_pow+0x254>)
 800c6be:	4598      	cmp	r8, r3
 800c6c0:	d1ea      	bne.n	800c698 <__ieee754_pow+0xe8>
 800c6c2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6c6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6ca:	ea53 030a 	orrs.w	r3, r3, sl
 800c6ce:	f000 8459 	beq.w	800cf84 <__ieee754_pow+0x9d4>
 800c6d2:	4b4f      	ldr	r3, [pc, #316]	; (800c810 <__ieee754_pow+0x260>)
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	dd08      	ble.n	800c6ea <__ieee754_pow+0x13a>
 800c6d8:	f1b9 0f00 	cmp.w	r9, #0
 800c6dc:	f2c0 8456 	blt.w	800cf8c <__ieee754_pow+0x9dc>
 800c6e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6e4:	e783      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	e7e5      	b.n	800c6b6 <__ieee754_pow+0x106>
 800c6ea:	f1b9 0f00 	cmp.w	r9, #0
 800c6ee:	f04f 0000 	mov.w	r0, #0
 800c6f2:	f04f 0100 	mov.w	r1, #0
 800c6f6:	f6bf af7a 	bge.w	800c5ee <__ieee754_pow+0x3e>
 800c6fa:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c702:	e774      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c704:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c708:	d106      	bne.n	800c718 <__ieee754_pow+0x168>
 800c70a:	4632      	mov	r2, r6
 800c70c:	463b      	mov	r3, r7
 800c70e:	4630      	mov	r0, r6
 800c710:	4639      	mov	r1, r7
 800c712:	f7f3 ff99 	bl	8000648 <__aeabi_dmul>
 800c716:	e76a      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c718:	4b3e      	ldr	r3, [pc, #248]	; (800c814 <__ieee754_pow+0x264>)
 800c71a:	4599      	cmp	r9, r3
 800c71c:	d10c      	bne.n	800c738 <__ieee754_pow+0x188>
 800c71e:	2d00      	cmp	r5, #0
 800c720:	db0a      	blt.n	800c738 <__ieee754_pow+0x188>
 800c722:	ec47 6b10 	vmov	d0, r6, r7
 800c726:	b009      	add	sp, #36	; 0x24
 800c728:	ecbd 8b06 	vpop	{d8-d10}
 800c72c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c730:	f7ff be62 	b.w	800c3f8 <__ieee754_sqrt>
 800c734:	2300      	movs	r3, #0
 800c736:	9304      	str	r3, [sp, #16]
 800c738:	ec47 6b10 	vmov	d0, r6, r7
 800c73c:	f000 fc62 	bl	800d004 <fabs>
 800c740:	ec51 0b10 	vmov	r0, r1, d0
 800c744:	f1ba 0f00 	cmp.w	sl, #0
 800c748:	d129      	bne.n	800c79e <__ieee754_pow+0x1ee>
 800c74a:	b124      	cbz	r4, 800c756 <__ieee754_pow+0x1a6>
 800c74c:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <__ieee754_pow+0x25c>)
 800c74e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c752:	429a      	cmp	r2, r3
 800c754:	d123      	bne.n	800c79e <__ieee754_pow+0x1ee>
 800c756:	f1b9 0f00 	cmp.w	r9, #0
 800c75a:	da05      	bge.n	800c768 <__ieee754_pow+0x1b8>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	2000      	movs	r0, #0
 800c762:	492a      	ldr	r1, [pc, #168]	; (800c80c <__ieee754_pow+0x25c>)
 800c764:	f7f4 f89a 	bl	800089c <__aeabi_ddiv>
 800c768:	2d00      	cmp	r5, #0
 800c76a:	f6bf af40 	bge.w	800c5ee <__ieee754_pow+0x3e>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c774:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c778:	431c      	orrs	r4, r3
 800c77a:	d108      	bne.n	800c78e <__ieee754_pow+0x1de>
 800c77c:	4602      	mov	r2, r0
 800c77e:	460b      	mov	r3, r1
 800c780:	4610      	mov	r0, r2
 800c782:	4619      	mov	r1, r3
 800c784:	f7f3 fda8 	bl	80002d8 <__aeabi_dsub>
 800c788:	4602      	mov	r2, r0
 800c78a:	460b      	mov	r3, r1
 800c78c:	e78f      	b.n	800c6ae <__ieee754_pow+0xfe>
 800c78e:	9b04      	ldr	r3, [sp, #16]
 800c790:	2b01      	cmp	r3, #1
 800c792:	f47f af2c 	bne.w	800c5ee <__ieee754_pow+0x3e>
 800c796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c79a:	4619      	mov	r1, r3
 800c79c:	e727      	b.n	800c5ee <__ieee754_pow+0x3e>
 800c79e:	0feb      	lsrs	r3, r5, #31
 800c7a0:	3b01      	subs	r3, #1
 800c7a2:	9306      	str	r3, [sp, #24]
 800c7a4:	9a06      	ldr	r2, [sp, #24]
 800c7a6:	9b04      	ldr	r3, [sp, #16]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	d102      	bne.n	800c7b2 <__ieee754_pow+0x202>
 800c7ac:	4632      	mov	r2, r6
 800c7ae:	463b      	mov	r3, r7
 800c7b0:	e7e6      	b.n	800c780 <__ieee754_pow+0x1d0>
 800c7b2:	4b19      	ldr	r3, [pc, #100]	; (800c818 <__ieee754_pow+0x268>)
 800c7b4:	4598      	cmp	r8, r3
 800c7b6:	f340 80fb 	ble.w	800c9b0 <__ieee754_pow+0x400>
 800c7ba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7be:	4598      	cmp	r8, r3
 800c7c0:	4b13      	ldr	r3, [pc, #76]	; (800c810 <__ieee754_pow+0x260>)
 800c7c2:	dd0c      	ble.n	800c7de <__ieee754_pow+0x22e>
 800c7c4:	429c      	cmp	r4, r3
 800c7c6:	dc0f      	bgt.n	800c7e8 <__ieee754_pow+0x238>
 800c7c8:	f1b9 0f00 	cmp.w	r9, #0
 800c7cc:	da0f      	bge.n	800c7ee <__ieee754_pow+0x23e>
 800c7ce:	2000      	movs	r0, #0
 800c7d0:	b009      	add	sp, #36	; 0x24
 800c7d2:	ecbd 8b06 	vpop	{d8-d10}
 800c7d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7da:	f000 bcc2 	b.w	800d162 <__math_oflow>
 800c7de:	429c      	cmp	r4, r3
 800c7e0:	dbf2      	blt.n	800c7c8 <__ieee754_pow+0x218>
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <__ieee754_pow+0x25c>)
 800c7e4:	429c      	cmp	r4, r3
 800c7e6:	dd19      	ble.n	800c81c <__ieee754_pow+0x26c>
 800c7e8:	f1b9 0f00 	cmp.w	r9, #0
 800c7ec:	dcef      	bgt.n	800c7ce <__ieee754_pow+0x21e>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	b009      	add	sp, #36	; 0x24
 800c7f2:	ecbd 8b06 	vpop	{d8-d10}
 800c7f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	f000 bca9 	b.w	800d150 <__math_uflow>
 800c7fe:	bf00      	nop
 800c800:	fff00000 	.word	0xfff00000
 800c804:	7ff00000 	.word	0x7ff00000
 800c808:	433fffff 	.word	0x433fffff
 800c80c:	3ff00000 	.word	0x3ff00000
 800c810:	3fefffff 	.word	0x3fefffff
 800c814:	3fe00000 	.word	0x3fe00000
 800c818:	41e00000 	.word	0x41e00000
 800c81c:	4b60      	ldr	r3, [pc, #384]	; (800c9a0 <__ieee754_pow+0x3f0>)
 800c81e:	2200      	movs	r2, #0
 800c820:	f7f3 fd5a 	bl	80002d8 <__aeabi_dsub>
 800c824:	a354      	add	r3, pc, #336	; (adr r3, 800c978 <__ieee754_pow+0x3c8>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	4604      	mov	r4, r0
 800c82c:	460d      	mov	r5, r1
 800c82e:	f7f3 ff0b 	bl	8000648 <__aeabi_dmul>
 800c832:	a353      	add	r3, pc, #332	; (adr r3, 800c980 <__ieee754_pow+0x3d0>)
 800c834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c838:	4606      	mov	r6, r0
 800c83a:	460f      	mov	r7, r1
 800c83c:	4620      	mov	r0, r4
 800c83e:	4629      	mov	r1, r5
 800c840:	f7f3 ff02 	bl	8000648 <__aeabi_dmul>
 800c844:	4b57      	ldr	r3, [pc, #348]	; (800c9a4 <__ieee754_pow+0x3f4>)
 800c846:	4682      	mov	sl, r0
 800c848:	468b      	mov	fp, r1
 800c84a:	2200      	movs	r2, #0
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	f7f3 fefa 	bl	8000648 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	a14b      	add	r1, pc, #300	; (adr r1, 800c988 <__ieee754_pow+0x3d8>)
 800c85a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c85e:	f7f3 fd3b 	bl	80002d8 <__aeabi_dsub>
 800c862:	4622      	mov	r2, r4
 800c864:	462b      	mov	r3, r5
 800c866:	f7f3 feef 	bl	8000648 <__aeabi_dmul>
 800c86a:	4602      	mov	r2, r0
 800c86c:	460b      	mov	r3, r1
 800c86e:	2000      	movs	r0, #0
 800c870:	494d      	ldr	r1, [pc, #308]	; (800c9a8 <__ieee754_pow+0x3f8>)
 800c872:	f7f3 fd31 	bl	80002d8 <__aeabi_dsub>
 800c876:	4622      	mov	r2, r4
 800c878:	4680      	mov	r8, r0
 800c87a:	4689      	mov	r9, r1
 800c87c:	462b      	mov	r3, r5
 800c87e:	4620      	mov	r0, r4
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fee1 	bl	8000648 <__aeabi_dmul>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fedb 	bl	8000648 <__aeabi_dmul>
 800c892:	a33f      	add	r3, pc, #252	; (adr r3, 800c990 <__ieee754_pow+0x3e0>)
 800c894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c898:	f7f3 fed6 	bl	8000648 <__aeabi_dmul>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4650      	mov	r0, sl
 800c8a2:	4659      	mov	r1, fp
 800c8a4:	f7f3 fd18 	bl	80002d8 <__aeabi_dsub>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	4680      	mov	r8, r0
 800c8ae:	4689      	mov	r9, r1
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	f7f3 fd12 	bl	80002dc <__adddf3>
 800c8b8:	2000      	movs	r0, #0
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	463b      	mov	r3, r7
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
 800c8c2:	f7f3 fd09 	bl	80002d8 <__aeabi_dsub>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4640      	mov	r0, r8
 800c8cc:	4649      	mov	r1, r9
 800c8ce:	f7f3 fd03 	bl	80002d8 <__aeabi_dsub>
 800c8d2:	9b04      	ldr	r3, [sp, #16]
 800c8d4:	9a06      	ldr	r2, [sp, #24]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	4682      	mov	sl, r0
 800c8dc:	468b      	mov	fp, r1
 800c8de:	f040 81e7 	bne.w	800ccb0 <__ieee754_pow+0x700>
 800c8e2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c998 <__ieee754_pow+0x3e8>
 800c8e6:	eeb0 8a47 	vmov.f32	s16, s14
 800c8ea:	eef0 8a67 	vmov.f32	s17, s15
 800c8ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8f2:	2600      	movs	r6, #0
 800c8f4:	4632      	mov	r2, r6
 800c8f6:	463b      	mov	r3, r7
 800c8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8fc:	f7f3 fcec 	bl	80002d8 <__aeabi_dsub>
 800c900:	4622      	mov	r2, r4
 800c902:	462b      	mov	r3, r5
 800c904:	f7f3 fea0 	bl	8000648 <__aeabi_dmul>
 800c908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c90c:	4680      	mov	r8, r0
 800c90e:	4689      	mov	r9, r1
 800c910:	4650      	mov	r0, sl
 800c912:	4659      	mov	r1, fp
 800c914:	f7f3 fe98 	bl	8000648 <__aeabi_dmul>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	4640      	mov	r0, r8
 800c91e:	4649      	mov	r1, r9
 800c920:	f7f3 fcdc 	bl	80002dc <__adddf3>
 800c924:	4632      	mov	r2, r6
 800c926:	463b      	mov	r3, r7
 800c928:	4680      	mov	r8, r0
 800c92a:	4689      	mov	r9, r1
 800c92c:	4620      	mov	r0, r4
 800c92e:	4629      	mov	r1, r5
 800c930:	f7f3 fe8a 	bl	8000648 <__aeabi_dmul>
 800c934:	460b      	mov	r3, r1
 800c936:	4604      	mov	r4, r0
 800c938:	460d      	mov	r5, r1
 800c93a:	4602      	mov	r2, r0
 800c93c:	4649      	mov	r1, r9
 800c93e:	4640      	mov	r0, r8
 800c940:	f7f3 fccc 	bl	80002dc <__adddf3>
 800c944:	4b19      	ldr	r3, [pc, #100]	; (800c9ac <__ieee754_pow+0x3fc>)
 800c946:	4299      	cmp	r1, r3
 800c948:	ec45 4b19 	vmov	d9, r4, r5
 800c94c:	4606      	mov	r6, r0
 800c94e:	460f      	mov	r7, r1
 800c950:	468b      	mov	fp, r1
 800c952:	f340 82f0 	ble.w	800cf36 <__ieee754_pow+0x986>
 800c956:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c95a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c95e:	4303      	orrs	r3, r0
 800c960:	f000 81e4 	beq.w	800cd2c <__ieee754_pow+0x77c>
 800c964:	ec51 0b18 	vmov	r0, r1, d8
 800c968:	2200      	movs	r2, #0
 800c96a:	2300      	movs	r3, #0
 800c96c:	f7f4 f8de 	bl	8000b2c <__aeabi_dcmplt>
 800c970:	3800      	subs	r0, #0
 800c972:	bf18      	it	ne
 800c974:	2001      	movne	r0, #1
 800c976:	e72b      	b.n	800c7d0 <__ieee754_pow+0x220>
 800c978:	60000000 	.word	0x60000000
 800c97c:	3ff71547 	.word	0x3ff71547
 800c980:	f85ddf44 	.word	0xf85ddf44
 800c984:	3e54ae0b 	.word	0x3e54ae0b
 800c988:	55555555 	.word	0x55555555
 800c98c:	3fd55555 	.word	0x3fd55555
 800c990:	652b82fe 	.word	0x652b82fe
 800c994:	3ff71547 	.word	0x3ff71547
 800c998:	00000000 	.word	0x00000000
 800c99c:	bff00000 	.word	0xbff00000
 800c9a0:	3ff00000 	.word	0x3ff00000
 800c9a4:	3fd00000 	.word	0x3fd00000
 800c9a8:	3fe00000 	.word	0x3fe00000
 800c9ac:	408fffff 	.word	0x408fffff
 800c9b0:	4bd5      	ldr	r3, [pc, #852]	; (800cd08 <__ieee754_pow+0x758>)
 800c9b2:	402b      	ands	r3, r5
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	b92b      	cbnz	r3, 800c9c4 <__ieee754_pow+0x414>
 800c9b8:	4bd4      	ldr	r3, [pc, #848]	; (800cd0c <__ieee754_pow+0x75c>)
 800c9ba:	f7f3 fe45 	bl	8000648 <__aeabi_dmul>
 800c9be:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	1523      	asrs	r3, r4, #20
 800c9c6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9ca:	4413      	add	r3, r2
 800c9cc:	9305      	str	r3, [sp, #20]
 800c9ce:	4bd0      	ldr	r3, [pc, #832]	; (800cd10 <__ieee754_pow+0x760>)
 800c9d0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9d4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c9de:	dd08      	ble.n	800c9f2 <__ieee754_pow+0x442>
 800c9e0:	4bcc      	ldr	r3, [pc, #816]	; (800cd14 <__ieee754_pow+0x764>)
 800c9e2:	429c      	cmp	r4, r3
 800c9e4:	f340 8162 	ble.w	800ccac <__ieee754_pow+0x6fc>
 800c9e8:	9b05      	ldr	r3, [sp, #20]
 800c9ea:	3301      	adds	r3, #1
 800c9ec:	9305      	str	r3, [sp, #20]
 800c9ee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9f2:	2400      	movs	r4, #0
 800c9f4:	00e3      	lsls	r3, r4, #3
 800c9f6:	9307      	str	r3, [sp, #28]
 800c9f8:	4bc7      	ldr	r3, [pc, #796]	; (800cd18 <__ieee754_pow+0x768>)
 800c9fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9fe:	ed93 7b00 	vldr	d7, [r3]
 800ca02:	4629      	mov	r1, r5
 800ca04:	ec53 2b17 	vmov	r2, r3, d7
 800ca08:	eeb0 9a47 	vmov.f32	s18, s14
 800ca0c:	eef0 9a67 	vmov.f32	s19, s15
 800ca10:	4682      	mov	sl, r0
 800ca12:	f7f3 fc61 	bl	80002d8 <__aeabi_dsub>
 800ca16:	4652      	mov	r2, sl
 800ca18:	4606      	mov	r6, r0
 800ca1a:	460f      	mov	r7, r1
 800ca1c:	462b      	mov	r3, r5
 800ca1e:	ec51 0b19 	vmov	r0, r1, d9
 800ca22:	f7f3 fc5b 	bl	80002dc <__adddf3>
 800ca26:	4602      	mov	r2, r0
 800ca28:	460b      	mov	r3, r1
 800ca2a:	2000      	movs	r0, #0
 800ca2c:	49bb      	ldr	r1, [pc, #748]	; (800cd1c <__ieee754_pow+0x76c>)
 800ca2e:	f7f3 ff35 	bl	800089c <__aeabi_ddiv>
 800ca32:	ec41 0b1a 	vmov	d10, r0, r1
 800ca36:	4602      	mov	r2, r0
 800ca38:	460b      	mov	r3, r1
 800ca3a:	4630      	mov	r0, r6
 800ca3c:	4639      	mov	r1, r7
 800ca3e:	f7f3 fe03 	bl	8000648 <__aeabi_dmul>
 800ca42:	2300      	movs	r3, #0
 800ca44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca4e:	46ab      	mov	fp, r5
 800ca50:	106d      	asrs	r5, r5, #1
 800ca52:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca5a:	ec41 0b18 	vmov	d8, r0, r1
 800ca5e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca62:	2200      	movs	r2, #0
 800ca64:	4640      	mov	r0, r8
 800ca66:	4649      	mov	r1, r9
 800ca68:	4614      	mov	r4, r2
 800ca6a:	461d      	mov	r5, r3
 800ca6c:	f7f3 fdec 	bl	8000648 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4630      	mov	r0, r6
 800ca76:	4639      	mov	r1, r7
 800ca78:	f7f3 fc2e 	bl	80002d8 <__aeabi_dsub>
 800ca7c:	ec53 2b19 	vmov	r2, r3, d9
 800ca80:	4606      	mov	r6, r0
 800ca82:	460f      	mov	r7, r1
 800ca84:	4620      	mov	r0, r4
 800ca86:	4629      	mov	r1, r5
 800ca88:	f7f3 fc26 	bl	80002d8 <__aeabi_dsub>
 800ca8c:	4602      	mov	r2, r0
 800ca8e:	460b      	mov	r3, r1
 800ca90:	4650      	mov	r0, sl
 800ca92:	4659      	mov	r1, fp
 800ca94:	f7f3 fc20 	bl	80002d8 <__aeabi_dsub>
 800ca98:	4642      	mov	r2, r8
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	f7f3 fdd4 	bl	8000648 <__aeabi_dmul>
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	4630      	mov	r0, r6
 800caa6:	4639      	mov	r1, r7
 800caa8:	f7f3 fc16 	bl	80002d8 <__aeabi_dsub>
 800caac:	ec53 2b1a 	vmov	r2, r3, d10
 800cab0:	f7f3 fdca 	bl	8000648 <__aeabi_dmul>
 800cab4:	ec53 2b18 	vmov	r2, r3, d8
 800cab8:	ec41 0b19 	vmov	d9, r0, r1
 800cabc:	ec51 0b18 	vmov	r0, r1, d8
 800cac0:	f7f3 fdc2 	bl	8000648 <__aeabi_dmul>
 800cac4:	a37c      	add	r3, pc, #496	; (adr r3, 800ccb8 <__ieee754_pow+0x708>)
 800cac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caca:	4604      	mov	r4, r0
 800cacc:	460d      	mov	r5, r1
 800cace:	f7f3 fdbb 	bl	8000648 <__aeabi_dmul>
 800cad2:	a37b      	add	r3, pc, #492	; (adr r3, 800ccc0 <__ieee754_pow+0x710>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fc00 	bl	80002dc <__adddf3>
 800cadc:	4622      	mov	r2, r4
 800cade:	462b      	mov	r3, r5
 800cae0:	f7f3 fdb2 	bl	8000648 <__aeabi_dmul>
 800cae4:	a378      	add	r3, pc, #480	; (adr r3, 800ccc8 <__ieee754_pow+0x718>)
 800cae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caea:	f7f3 fbf7 	bl	80002dc <__adddf3>
 800caee:	4622      	mov	r2, r4
 800caf0:	462b      	mov	r3, r5
 800caf2:	f7f3 fda9 	bl	8000648 <__aeabi_dmul>
 800caf6:	a376      	add	r3, pc, #472	; (adr r3, 800ccd0 <__ieee754_pow+0x720>)
 800caf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafc:	f7f3 fbee 	bl	80002dc <__adddf3>
 800cb00:	4622      	mov	r2, r4
 800cb02:	462b      	mov	r3, r5
 800cb04:	f7f3 fda0 	bl	8000648 <__aeabi_dmul>
 800cb08:	a373      	add	r3, pc, #460	; (adr r3, 800ccd8 <__ieee754_pow+0x728>)
 800cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb0e:	f7f3 fbe5 	bl	80002dc <__adddf3>
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	f7f3 fd97 	bl	8000648 <__aeabi_dmul>
 800cb1a:	a371      	add	r3, pc, #452	; (adr r3, 800cce0 <__ieee754_pow+0x730>)
 800cb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb20:	f7f3 fbdc 	bl	80002dc <__adddf3>
 800cb24:	4622      	mov	r2, r4
 800cb26:	4606      	mov	r6, r0
 800cb28:	460f      	mov	r7, r1
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	f7f3 fd8a 	bl	8000648 <__aeabi_dmul>
 800cb34:	4602      	mov	r2, r0
 800cb36:	460b      	mov	r3, r1
 800cb38:	4630      	mov	r0, r6
 800cb3a:	4639      	mov	r1, r7
 800cb3c:	f7f3 fd84 	bl	8000648 <__aeabi_dmul>
 800cb40:	4642      	mov	r2, r8
 800cb42:	4604      	mov	r4, r0
 800cb44:	460d      	mov	r5, r1
 800cb46:	464b      	mov	r3, r9
 800cb48:	ec51 0b18 	vmov	r0, r1, d8
 800cb4c:	f7f3 fbc6 	bl	80002dc <__adddf3>
 800cb50:	ec53 2b19 	vmov	r2, r3, d9
 800cb54:	f7f3 fd78 	bl	8000648 <__aeabi_dmul>
 800cb58:	4622      	mov	r2, r4
 800cb5a:	462b      	mov	r3, r5
 800cb5c:	f7f3 fbbe 	bl	80002dc <__adddf3>
 800cb60:	4642      	mov	r2, r8
 800cb62:	4682      	mov	sl, r0
 800cb64:	468b      	mov	fp, r1
 800cb66:	464b      	mov	r3, r9
 800cb68:	4640      	mov	r0, r8
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	f7f3 fd6c 	bl	8000648 <__aeabi_dmul>
 800cb70:	4b6b      	ldr	r3, [pc, #428]	; (800cd20 <__ieee754_pow+0x770>)
 800cb72:	2200      	movs	r2, #0
 800cb74:	4606      	mov	r6, r0
 800cb76:	460f      	mov	r7, r1
 800cb78:	f7f3 fbb0 	bl	80002dc <__adddf3>
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	465b      	mov	r3, fp
 800cb80:	f7f3 fbac 	bl	80002dc <__adddf3>
 800cb84:	2000      	movs	r0, #0
 800cb86:	4604      	mov	r4, r0
 800cb88:	460d      	mov	r5, r1
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4640      	mov	r0, r8
 800cb90:	4649      	mov	r1, r9
 800cb92:	f7f3 fd59 	bl	8000648 <__aeabi_dmul>
 800cb96:	4b62      	ldr	r3, [pc, #392]	; (800cd20 <__ieee754_pow+0x770>)
 800cb98:	4680      	mov	r8, r0
 800cb9a:	4689      	mov	r9, r1
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	4620      	mov	r0, r4
 800cba0:	4629      	mov	r1, r5
 800cba2:	f7f3 fb99 	bl	80002d8 <__aeabi_dsub>
 800cba6:	4632      	mov	r2, r6
 800cba8:	463b      	mov	r3, r7
 800cbaa:	f7f3 fb95 	bl	80002d8 <__aeabi_dsub>
 800cbae:	4602      	mov	r2, r0
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	4650      	mov	r0, sl
 800cbb4:	4659      	mov	r1, fp
 800cbb6:	f7f3 fb8f 	bl	80002d8 <__aeabi_dsub>
 800cbba:	ec53 2b18 	vmov	r2, r3, d8
 800cbbe:	f7f3 fd43 	bl	8000648 <__aeabi_dmul>
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	462b      	mov	r3, r5
 800cbca:	ec51 0b19 	vmov	r0, r1, d9
 800cbce:	f7f3 fd3b 	bl	8000648 <__aeabi_dmul>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	4639      	mov	r1, r7
 800cbda:	f7f3 fb7f 	bl	80002dc <__adddf3>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	4602      	mov	r2, r0
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	4640      	mov	r0, r8
 800cbe8:	4649      	mov	r1, r9
 800cbea:	f7f3 fb77 	bl	80002dc <__adddf3>
 800cbee:	a33e      	add	r3, pc, #248	; (adr r3, 800cce8 <__ieee754_pow+0x738>)
 800cbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	4604      	mov	r4, r0
 800cbf8:	460d      	mov	r5, r1
 800cbfa:	f7f3 fd25 	bl	8000648 <__aeabi_dmul>
 800cbfe:	4642      	mov	r2, r8
 800cc00:	ec41 0b18 	vmov	d8, r0, r1
 800cc04:	464b      	mov	r3, r9
 800cc06:	4620      	mov	r0, r4
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7f3 fb65 	bl	80002d8 <__aeabi_dsub>
 800cc0e:	4602      	mov	r2, r0
 800cc10:	460b      	mov	r3, r1
 800cc12:	4630      	mov	r0, r6
 800cc14:	4639      	mov	r1, r7
 800cc16:	f7f3 fb5f 	bl	80002d8 <__aeabi_dsub>
 800cc1a:	a335      	add	r3, pc, #212	; (adr r3, 800ccf0 <__ieee754_pow+0x740>)
 800cc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc20:	f7f3 fd12 	bl	8000648 <__aeabi_dmul>
 800cc24:	a334      	add	r3, pc, #208	; (adr r3, 800ccf8 <__ieee754_pow+0x748>)
 800cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fd09 	bl	8000648 <__aeabi_dmul>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fb4d 	bl	80002dc <__adddf3>
 800cc42:	9a07      	ldr	r2, [sp, #28]
 800cc44:	4b37      	ldr	r3, [pc, #220]	; (800cd24 <__ieee754_pow+0x774>)
 800cc46:	4413      	add	r3, r2
 800cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4c:	f7f3 fb46 	bl	80002dc <__adddf3>
 800cc50:	4682      	mov	sl, r0
 800cc52:	9805      	ldr	r0, [sp, #20]
 800cc54:	468b      	mov	fp, r1
 800cc56:	f7f3 fc8d 	bl	8000574 <__aeabi_i2d>
 800cc5a:	9a07      	ldr	r2, [sp, #28]
 800cc5c:	4b32      	ldr	r3, [pc, #200]	; (800cd28 <__ieee754_pow+0x778>)
 800cc5e:	4413      	add	r3, r2
 800cc60:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc64:	4606      	mov	r6, r0
 800cc66:	460f      	mov	r7, r1
 800cc68:	4652      	mov	r2, sl
 800cc6a:	465b      	mov	r3, fp
 800cc6c:	ec51 0b18 	vmov	r0, r1, d8
 800cc70:	f7f3 fb34 	bl	80002dc <__adddf3>
 800cc74:	4642      	mov	r2, r8
 800cc76:	464b      	mov	r3, r9
 800cc78:	f7f3 fb30 	bl	80002dc <__adddf3>
 800cc7c:	4632      	mov	r2, r6
 800cc7e:	463b      	mov	r3, r7
 800cc80:	f7f3 fb2c 	bl	80002dc <__adddf3>
 800cc84:	2000      	movs	r0, #0
 800cc86:	4632      	mov	r2, r6
 800cc88:	463b      	mov	r3, r7
 800cc8a:	4604      	mov	r4, r0
 800cc8c:	460d      	mov	r5, r1
 800cc8e:	f7f3 fb23 	bl	80002d8 <__aeabi_dsub>
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	f7f3 fb1f 	bl	80002d8 <__aeabi_dsub>
 800cc9a:	ec53 2b18 	vmov	r2, r3, d8
 800cc9e:	f7f3 fb1b 	bl	80002d8 <__aeabi_dsub>
 800cca2:	4602      	mov	r2, r0
 800cca4:	460b      	mov	r3, r1
 800cca6:	4650      	mov	r0, sl
 800cca8:	4659      	mov	r1, fp
 800ccaa:	e610      	b.n	800c8ce <__ieee754_pow+0x31e>
 800ccac:	2401      	movs	r4, #1
 800ccae:	e6a1      	b.n	800c9f4 <__ieee754_pow+0x444>
 800ccb0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd00 <__ieee754_pow+0x750>
 800ccb4:	e617      	b.n	800c8e6 <__ieee754_pow+0x336>
 800ccb6:	bf00      	nop
 800ccb8:	4a454eef 	.word	0x4a454eef
 800ccbc:	3fca7e28 	.word	0x3fca7e28
 800ccc0:	93c9db65 	.word	0x93c9db65
 800ccc4:	3fcd864a 	.word	0x3fcd864a
 800ccc8:	a91d4101 	.word	0xa91d4101
 800cccc:	3fd17460 	.word	0x3fd17460
 800ccd0:	518f264d 	.word	0x518f264d
 800ccd4:	3fd55555 	.word	0x3fd55555
 800ccd8:	db6fabff 	.word	0xdb6fabff
 800ccdc:	3fdb6db6 	.word	0x3fdb6db6
 800cce0:	33333303 	.word	0x33333303
 800cce4:	3fe33333 	.word	0x3fe33333
 800cce8:	e0000000 	.word	0xe0000000
 800ccec:	3feec709 	.word	0x3feec709
 800ccf0:	dc3a03fd 	.word	0xdc3a03fd
 800ccf4:	3feec709 	.word	0x3feec709
 800ccf8:	145b01f5 	.word	0x145b01f5
 800ccfc:	be3e2fe0 	.word	0xbe3e2fe0
 800cd00:	00000000 	.word	0x00000000
 800cd04:	3ff00000 	.word	0x3ff00000
 800cd08:	7ff00000 	.word	0x7ff00000
 800cd0c:	43400000 	.word	0x43400000
 800cd10:	0003988e 	.word	0x0003988e
 800cd14:	000bb679 	.word	0x000bb679
 800cd18:	0800d5b8 	.word	0x0800d5b8
 800cd1c:	3ff00000 	.word	0x3ff00000
 800cd20:	40080000 	.word	0x40080000
 800cd24:	0800d5d8 	.word	0x0800d5d8
 800cd28:	0800d5c8 	.word	0x0800d5c8
 800cd2c:	a3b3      	add	r3, pc, #716	; (adr r3, 800cffc <__ieee754_pow+0xa4c>)
 800cd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd32:	4640      	mov	r0, r8
 800cd34:	4649      	mov	r1, r9
 800cd36:	f7f3 fad1 	bl	80002dc <__adddf3>
 800cd3a:	4622      	mov	r2, r4
 800cd3c:	ec41 0b1a 	vmov	d10, r0, r1
 800cd40:	462b      	mov	r3, r5
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fac7 	bl	80002d8 <__aeabi_dsub>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	ec51 0b1a 	vmov	r0, r1, d10
 800cd52:	f7f3 ff09 	bl	8000b68 <__aeabi_dcmpgt>
 800cd56:	2800      	cmp	r0, #0
 800cd58:	f47f ae04 	bne.w	800c964 <__ieee754_pow+0x3b4>
 800cd5c:	4aa2      	ldr	r2, [pc, #648]	; (800cfe8 <__ieee754_pow+0xa38>)
 800cd5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd62:	4293      	cmp	r3, r2
 800cd64:	f340 8107 	ble.w	800cf76 <__ieee754_pow+0x9c6>
 800cd68:	151b      	asrs	r3, r3, #20
 800cd6a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd6e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd72:	fa4a fa03 	asr.w	sl, sl, r3
 800cd76:	44da      	add	sl, fp
 800cd78:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd7c:	489b      	ldr	r0, [pc, #620]	; (800cfec <__ieee754_pow+0xa3c>)
 800cd7e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cd82:	4108      	asrs	r0, r1
 800cd84:	ea00 030a 	and.w	r3, r0, sl
 800cd88:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd8c:	f1c1 0114 	rsb	r1, r1, #20
 800cd90:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cd94:	fa4a fa01 	asr.w	sl, sl, r1
 800cd98:	f1bb 0f00 	cmp.w	fp, #0
 800cd9c:	f04f 0200 	mov.w	r2, #0
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	bfb8      	it	lt
 800cda6:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdaa:	f7f3 fa95 	bl	80002d8 <__aeabi_dsub>
 800cdae:	ec41 0b19 	vmov	d9, r0, r1
 800cdb2:	4642      	mov	r2, r8
 800cdb4:	464b      	mov	r3, r9
 800cdb6:	ec51 0b19 	vmov	r0, r1, d9
 800cdba:	f7f3 fa8f 	bl	80002dc <__adddf3>
 800cdbe:	a37a      	add	r3, pc, #488	; (adr r3, 800cfa8 <__ieee754_pow+0x9f8>)
 800cdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	460d      	mov	r5, r1
 800cdca:	f7f3 fc3d 	bl	8000648 <__aeabi_dmul>
 800cdce:	ec53 2b19 	vmov	r2, r3, d9
 800cdd2:	4606      	mov	r6, r0
 800cdd4:	460f      	mov	r7, r1
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	4629      	mov	r1, r5
 800cdda:	f7f3 fa7d 	bl	80002d8 <__aeabi_dsub>
 800cdde:	4602      	mov	r2, r0
 800cde0:	460b      	mov	r3, r1
 800cde2:	4640      	mov	r0, r8
 800cde4:	4649      	mov	r1, r9
 800cde6:	f7f3 fa77 	bl	80002d8 <__aeabi_dsub>
 800cdea:	a371      	add	r3, pc, #452	; (adr r3, 800cfb0 <__ieee754_pow+0xa00>)
 800cdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf0:	f7f3 fc2a 	bl	8000648 <__aeabi_dmul>
 800cdf4:	a370      	add	r3, pc, #448	; (adr r3, 800cfb8 <__ieee754_pow+0xa08>)
 800cdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	4689      	mov	r9, r1
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4629      	mov	r1, r5
 800ce02:	f7f3 fc21 	bl	8000648 <__aeabi_dmul>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 fa65 	bl	80002dc <__adddf3>
 800ce12:	4604      	mov	r4, r0
 800ce14:	460d      	mov	r5, r1
 800ce16:	4602      	mov	r2, r0
 800ce18:	460b      	mov	r3, r1
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fa5d 	bl	80002dc <__adddf3>
 800ce22:	4632      	mov	r2, r6
 800ce24:	463b      	mov	r3, r7
 800ce26:	4680      	mov	r8, r0
 800ce28:	4689      	mov	r9, r1
 800ce2a:	f7f3 fa55 	bl	80002d8 <__aeabi_dsub>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4620      	mov	r0, r4
 800ce34:	4629      	mov	r1, r5
 800ce36:	f7f3 fa4f 	bl	80002d8 <__aeabi_dsub>
 800ce3a:	4642      	mov	r2, r8
 800ce3c:	4606      	mov	r6, r0
 800ce3e:	460f      	mov	r7, r1
 800ce40:	464b      	mov	r3, r9
 800ce42:	4640      	mov	r0, r8
 800ce44:	4649      	mov	r1, r9
 800ce46:	f7f3 fbff 	bl	8000648 <__aeabi_dmul>
 800ce4a:	a35d      	add	r3, pc, #372	; (adr r3, 800cfc0 <__ieee754_pow+0xa10>)
 800ce4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce50:	4604      	mov	r4, r0
 800ce52:	460d      	mov	r5, r1
 800ce54:	f7f3 fbf8 	bl	8000648 <__aeabi_dmul>
 800ce58:	a35b      	add	r3, pc, #364	; (adr r3, 800cfc8 <__ieee754_pow+0xa18>)
 800ce5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce5e:	f7f3 fa3b 	bl	80002d8 <__aeabi_dsub>
 800ce62:	4622      	mov	r2, r4
 800ce64:	462b      	mov	r3, r5
 800ce66:	f7f3 fbef 	bl	8000648 <__aeabi_dmul>
 800ce6a:	a359      	add	r3, pc, #356	; (adr r3, 800cfd0 <__ieee754_pow+0xa20>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 fa34 	bl	80002dc <__adddf3>
 800ce74:	4622      	mov	r2, r4
 800ce76:	462b      	mov	r3, r5
 800ce78:	f7f3 fbe6 	bl	8000648 <__aeabi_dmul>
 800ce7c:	a356      	add	r3, pc, #344	; (adr r3, 800cfd8 <__ieee754_pow+0xa28>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fa29 	bl	80002d8 <__aeabi_dsub>
 800ce86:	4622      	mov	r2, r4
 800ce88:	462b      	mov	r3, r5
 800ce8a:	f7f3 fbdd 	bl	8000648 <__aeabi_dmul>
 800ce8e:	a354      	add	r3, pc, #336	; (adr r3, 800cfe0 <__ieee754_pow+0xa30>)
 800ce90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce94:	f7f3 fa22 	bl	80002dc <__adddf3>
 800ce98:	4622      	mov	r2, r4
 800ce9a:	462b      	mov	r3, r5
 800ce9c:	f7f3 fbd4 	bl	8000648 <__aeabi_dmul>
 800cea0:	4602      	mov	r2, r0
 800cea2:	460b      	mov	r3, r1
 800cea4:	4640      	mov	r0, r8
 800cea6:	4649      	mov	r1, r9
 800cea8:	f7f3 fa16 	bl	80002d8 <__aeabi_dsub>
 800ceac:	4604      	mov	r4, r0
 800ceae:	460d      	mov	r5, r1
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fbc6 	bl	8000648 <__aeabi_dmul>
 800cebc:	2200      	movs	r2, #0
 800cebe:	ec41 0b19 	vmov	d9, r0, r1
 800cec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cec6:	4620      	mov	r0, r4
 800cec8:	4629      	mov	r1, r5
 800ceca:	f7f3 fa05 	bl	80002d8 <__aeabi_dsub>
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	ec51 0b19 	vmov	r0, r1, d9
 800ced6:	f7f3 fce1 	bl	800089c <__aeabi_ddiv>
 800ceda:	4632      	mov	r2, r6
 800cedc:	4604      	mov	r4, r0
 800cede:	460d      	mov	r5, r1
 800cee0:	463b      	mov	r3, r7
 800cee2:	4640      	mov	r0, r8
 800cee4:	4649      	mov	r1, r9
 800cee6:	f7f3 fbaf 	bl	8000648 <__aeabi_dmul>
 800ceea:	4632      	mov	r2, r6
 800ceec:	463b      	mov	r3, r7
 800ceee:	f7f3 f9f5 	bl	80002dc <__adddf3>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	4620      	mov	r0, r4
 800cef8:	4629      	mov	r1, r5
 800cefa:	f7f3 f9ed 	bl	80002d8 <__aeabi_dsub>
 800cefe:	4642      	mov	r2, r8
 800cf00:	464b      	mov	r3, r9
 800cf02:	f7f3 f9e9 	bl	80002d8 <__aeabi_dsub>
 800cf06:	460b      	mov	r3, r1
 800cf08:	4602      	mov	r2, r0
 800cf0a:	4939      	ldr	r1, [pc, #228]	; (800cff0 <__ieee754_pow+0xa40>)
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f7f3 f9e3 	bl	80002d8 <__aeabi_dsub>
 800cf12:	ec41 0b10 	vmov	d0, r0, r1
 800cf16:	ee10 3a90 	vmov	r3, s1
 800cf1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf22:	da2b      	bge.n	800cf7c <__ieee754_pow+0x9cc>
 800cf24:	4650      	mov	r0, sl
 800cf26:	f000 f877 	bl	800d018 <scalbn>
 800cf2a:	ec51 0b10 	vmov	r0, r1, d0
 800cf2e:	ec53 2b18 	vmov	r2, r3, d8
 800cf32:	f7ff bbee 	b.w	800c712 <__ieee754_pow+0x162>
 800cf36:	4b2f      	ldr	r3, [pc, #188]	; (800cff4 <__ieee754_pow+0xa44>)
 800cf38:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf3c:	429e      	cmp	r6, r3
 800cf3e:	f77f af0d 	ble.w	800cd5c <__ieee754_pow+0x7ac>
 800cf42:	4b2d      	ldr	r3, [pc, #180]	; (800cff8 <__ieee754_pow+0xa48>)
 800cf44:	440b      	add	r3, r1
 800cf46:	4303      	orrs	r3, r0
 800cf48:	d009      	beq.n	800cf5e <__ieee754_pow+0x9ae>
 800cf4a:	ec51 0b18 	vmov	r0, r1, d8
 800cf4e:	2200      	movs	r2, #0
 800cf50:	2300      	movs	r3, #0
 800cf52:	f7f3 fdeb 	bl	8000b2c <__aeabi_dcmplt>
 800cf56:	3800      	subs	r0, #0
 800cf58:	bf18      	it	ne
 800cf5a:	2001      	movne	r0, #1
 800cf5c:	e448      	b.n	800c7f0 <__ieee754_pow+0x240>
 800cf5e:	4622      	mov	r2, r4
 800cf60:	462b      	mov	r3, r5
 800cf62:	f7f3 f9b9 	bl	80002d8 <__aeabi_dsub>
 800cf66:	4642      	mov	r2, r8
 800cf68:	464b      	mov	r3, r9
 800cf6a:	f7f3 fdf3 	bl	8000b54 <__aeabi_dcmpge>
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f aef4 	beq.w	800cd5c <__ieee754_pow+0x7ac>
 800cf74:	e7e9      	b.n	800cf4a <__ieee754_pow+0x99a>
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	e71a      	b.n	800cdb2 <__ieee754_pow+0x802>
 800cf7c:	ec51 0b10 	vmov	r0, r1, d0
 800cf80:	4619      	mov	r1, r3
 800cf82:	e7d4      	b.n	800cf2e <__ieee754_pow+0x97e>
 800cf84:	491a      	ldr	r1, [pc, #104]	; (800cff0 <__ieee754_pow+0xa40>)
 800cf86:	2000      	movs	r0, #0
 800cf88:	f7ff bb31 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf8c:	2000      	movs	r0, #0
 800cf8e:	2100      	movs	r1, #0
 800cf90:	f7ff bb2d 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf94:	4630      	mov	r0, r6
 800cf96:	4639      	mov	r1, r7
 800cf98:	f7ff bb29 	b.w	800c5ee <__ieee754_pow+0x3e>
 800cf9c:	9204      	str	r2, [sp, #16]
 800cf9e:	f7ff bb7b 	b.w	800c698 <__ieee754_pow+0xe8>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f7ff bb65 	b.w	800c672 <__ieee754_pow+0xc2>
 800cfa8:	00000000 	.word	0x00000000
 800cfac:	3fe62e43 	.word	0x3fe62e43
 800cfb0:	fefa39ef 	.word	0xfefa39ef
 800cfb4:	3fe62e42 	.word	0x3fe62e42
 800cfb8:	0ca86c39 	.word	0x0ca86c39
 800cfbc:	be205c61 	.word	0xbe205c61
 800cfc0:	72bea4d0 	.word	0x72bea4d0
 800cfc4:	3e663769 	.word	0x3e663769
 800cfc8:	c5d26bf1 	.word	0xc5d26bf1
 800cfcc:	3ebbbd41 	.word	0x3ebbbd41
 800cfd0:	af25de2c 	.word	0xaf25de2c
 800cfd4:	3f11566a 	.word	0x3f11566a
 800cfd8:	16bebd93 	.word	0x16bebd93
 800cfdc:	3f66c16c 	.word	0x3f66c16c
 800cfe0:	5555553e 	.word	0x5555553e
 800cfe4:	3fc55555 	.word	0x3fc55555
 800cfe8:	3fe00000 	.word	0x3fe00000
 800cfec:	fff00000 	.word	0xfff00000
 800cff0:	3ff00000 	.word	0x3ff00000
 800cff4:	4090cbff 	.word	0x4090cbff
 800cff8:	3f6f3400 	.word	0x3f6f3400
 800cffc:	652b82fe 	.word	0x652b82fe
 800d000:	3c971547 	.word	0x3c971547

0800d004 <fabs>:
 800d004:	ec51 0b10 	vmov	r0, r1, d0
 800d008:	ee10 2a10 	vmov	r2, s0
 800d00c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d010:	ec43 2b10 	vmov	d0, r2, r3
 800d014:	4770      	bx	lr
	...

0800d018 <scalbn>:
 800d018:	b570      	push	{r4, r5, r6, lr}
 800d01a:	ec55 4b10 	vmov	r4, r5, d0
 800d01e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d022:	4606      	mov	r6, r0
 800d024:	462b      	mov	r3, r5
 800d026:	b999      	cbnz	r1, 800d050 <scalbn+0x38>
 800d028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d02c:	4323      	orrs	r3, r4
 800d02e:	d03f      	beq.n	800d0b0 <scalbn+0x98>
 800d030:	4b35      	ldr	r3, [pc, #212]	; (800d108 <scalbn+0xf0>)
 800d032:	4629      	mov	r1, r5
 800d034:	ee10 0a10 	vmov	r0, s0
 800d038:	2200      	movs	r2, #0
 800d03a:	f7f3 fb05 	bl	8000648 <__aeabi_dmul>
 800d03e:	4b33      	ldr	r3, [pc, #204]	; (800d10c <scalbn+0xf4>)
 800d040:	429e      	cmp	r6, r3
 800d042:	4604      	mov	r4, r0
 800d044:	460d      	mov	r5, r1
 800d046:	da10      	bge.n	800d06a <scalbn+0x52>
 800d048:	a327      	add	r3, pc, #156	; (adr r3, 800d0e8 <scalbn+0xd0>)
 800d04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04e:	e01f      	b.n	800d090 <scalbn+0x78>
 800d050:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d054:	4291      	cmp	r1, r2
 800d056:	d10c      	bne.n	800d072 <scalbn+0x5a>
 800d058:	ee10 2a10 	vmov	r2, s0
 800d05c:	4620      	mov	r0, r4
 800d05e:	4629      	mov	r1, r5
 800d060:	f7f3 f93c 	bl	80002dc <__adddf3>
 800d064:	4604      	mov	r4, r0
 800d066:	460d      	mov	r5, r1
 800d068:	e022      	b.n	800d0b0 <scalbn+0x98>
 800d06a:	460b      	mov	r3, r1
 800d06c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d070:	3936      	subs	r1, #54	; 0x36
 800d072:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d076:	4296      	cmp	r6, r2
 800d078:	dd0d      	ble.n	800d096 <scalbn+0x7e>
 800d07a:	2d00      	cmp	r5, #0
 800d07c:	a11c      	add	r1, pc, #112	; (adr r1, 800d0f0 <scalbn+0xd8>)
 800d07e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d082:	da02      	bge.n	800d08a <scalbn+0x72>
 800d084:	a11c      	add	r1, pc, #112	; (adr r1, 800d0f8 <scalbn+0xe0>)
 800d086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d08a:	a319      	add	r3, pc, #100	; (adr r3, 800d0f0 <scalbn+0xd8>)
 800d08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d090:	f7f3 fada 	bl	8000648 <__aeabi_dmul>
 800d094:	e7e6      	b.n	800d064 <scalbn+0x4c>
 800d096:	1872      	adds	r2, r6, r1
 800d098:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d09c:	428a      	cmp	r2, r1
 800d09e:	dcec      	bgt.n	800d07a <scalbn+0x62>
 800d0a0:	2a00      	cmp	r2, #0
 800d0a2:	dd08      	ble.n	800d0b6 <scalbn+0x9e>
 800d0a4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0a8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0ac:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0b0:	ec45 4b10 	vmov	d0, r4, r5
 800d0b4:	bd70      	pop	{r4, r5, r6, pc}
 800d0b6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0ba:	da08      	bge.n	800d0ce <scalbn+0xb6>
 800d0bc:	2d00      	cmp	r5, #0
 800d0be:	a10a      	add	r1, pc, #40	; (adr r1, 800d0e8 <scalbn+0xd0>)
 800d0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0c4:	dac0      	bge.n	800d048 <scalbn+0x30>
 800d0c6:	a10e      	add	r1, pc, #56	; (adr r1, 800d100 <scalbn+0xe8>)
 800d0c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0cc:	e7bc      	b.n	800d048 <scalbn+0x30>
 800d0ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0d2:	3236      	adds	r2, #54	; 0x36
 800d0d4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0d8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d0dc:	4620      	mov	r0, r4
 800d0de:	4b0c      	ldr	r3, [pc, #48]	; (800d110 <scalbn+0xf8>)
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	e7d5      	b.n	800d090 <scalbn+0x78>
 800d0e4:	f3af 8000 	nop.w
 800d0e8:	c2f8f359 	.word	0xc2f8f359
 800d0ec:	01a56e1f 	.word	0x01a56e1f
 800d0f0:	8800759c 	.word	0x8800759c
 800d0f4:	7e37e43c 	.word	0x7e37e43c
 800d0f8:	8800759c 	.word	0x8800759c
 800d0fc:	fe37e43c 	.word	0xfe37e43c
 800d100:	c2f8f359 	.word	0xc2f8f359
 800d104:	81a56e1f 	.word	0x81a56e1f
 800d108:	43500000 	.word	0x43500000
 800d10c:	ffff3cb0 	.word	0xffff3cb0
 800d110:	3c900000 	.word	0x3c900000

0800d114 <with_errno>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	4604      	mov	r4, r0
 800d118:	460d      	mov	r5, r1
 800d11a:	4616      	mov	r6, r2
 800d11c:	f7fd fa58 	bl	800a5d0 <__errno>
 800d120:	4629      	mov	r1, r5
 800d122:	6006      	str	r6, [r0, #0]
 800d124:	4620      	mov	r0, r4
 800d126:	bd70      	pop	{r4, r5, r6, pc}

0800d128 <xflow>:
 800d128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d12a:	4614      	mov	r4, r2
 800d12c:	461d      	mov	r5, r3
 800d12e:	b108      	cbz	r0, 800d134 <xflow+0xc>
 800d130:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d134:	e9cd 2300 	strd	r2, r3, [sp]
 800d138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d13c:	4620      	mov	r0, r4
 800d13e:	4629      	mov	r1, r5
 800d140:	f7f3 fa82 	bl	8000648 <__aeabi_dmul>
 800d144:	2222      	movs	r2, #34	; 0x22
 800d146:	b003      	add	sp, #12
 800d148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d14c:	f7ff bfe2 	b.w	800d114 <with_errno>

0800d150 <__math_uflow>:
 800d150:	b508      	push	{r3, lr}
 800d152:	2200      	movs	r2, #0
 800d154:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d158:	f7ff ffe6 	bl	800d128 <xflow>
 800d15c:	ec41 0b10 	vmov	d0, r0, r1
 800d160:	bd08      	pop	{r3, pc}

0800d162 <__math_oflow>:
 800d162:	b508      	push	{r3, lr}
 800d164:	2200      	movs	r2, #0
 800d166:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d16a:	f7ff ffdd 	bl	800d128 <xflow>
 800d16e:	ec41 0b10 	vmov	d0, r0, r1
 800d172:	bd08      	pop	{r3, pc}

0800d174 <_init>:
 800d174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d176:	bf00      	nop
 800d178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d17a:	bc08      	pop	{r3}
 800d17c:	469e      	mov	lr, r3
 800d17e:	4770      	bx	lr

0800d180 <_fini>:
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d182:	bf00      	nop
 800d184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d186:	bc08      	pop	{r3}
 800d188:	469e      	mov	lr, r3
 800d18a:	4770      	bx	lr
