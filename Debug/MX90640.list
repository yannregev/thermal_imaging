
MX90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfd4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800d1b8  0800d1b8  0001d1b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d610  0800d610  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d610  0800d610  0001d610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d618  0800d618  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d61c  0800d61c  0001d61c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d620  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d4  200001e8  0800d808  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022bc  0800d808  000222bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016303  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f06  00000000  00000000  0003655e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001420  00000000  00000000  00039468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f9f  00000000  00000000  0003a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e45  00000000  00000000  0003b827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183da  00000000  00000000  0005e66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de241  00000000  00000000  00076a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069c8  00000000  00000000  00154c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015b650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d19c 	.word	0x0800d19c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d19c 	.word	0x0800d19c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_I2C_IsActiveFlag_TXE+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	2b02      	cmp	r3, #2
 800100c:	d101      	bne.n	8001012 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	2b04      	cmp	r3, #4
 8001032:	d101      	bne.n	8001038 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	2b20      	cmp	r3, #32
 8001058:	d101      	bne.n	800105e <LL_I2C_IsActiveFlag_STOP+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_I2C_IsActiveFlag_STOP+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800107c:	2b40      	cmp	r3, #64	; 0x40
 800107e:	d101      	bne.n	8001084 <LL_I2C_IsActiveFlag_TC+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_I2C_IsActiveFlag_TC+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_I2C_IsActiveFlag_TCR>:
  * @rmtoll ISR          TCR           LL_I2C_IsActiveFlag_TCR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TCR(const I2C_TypeDef *I2Cx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TCR) == (I2C_ISR_TCR)) ? 1UL : 0UL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	699b      	ldr	r3, [r3, #24]
 800109e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010a2:	2b80      	cmp	r3, #128	; 0x80
 80010a4:	d101      	bne.n	80010aa <LL_I2C_IsActiveFlag_TCR+0x18>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <LL_I2C_IsActiveFlag_TCR+0x1a>
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010cc:	d101      	bne.n	80010d2 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	f043 0210 	orr.w	r2, r3, #16
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	61da      	str	r2, [r3, #28]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69db      	ldr	r3, [r3, #28]
 800110c:	f043 0220 	orr.w	r2, r3, #32
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	61da      	str	r2, [r3, #28]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001120:	b480      	push	{r7}
 8001122:	b087      	sub	sp, #28
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
 800112c:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800113a:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	041b      	lsls	r3, r3, #16
 8001140:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 8001144:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	4313      	orrs	r3, r2
 800114e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001152:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	0d5b      	lsrs	r3, r3, #21
 800115c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <LL_I2C_HandleTransfer+0x5c>)
 8001162:	430b      	orrs	r3, r1
 8001164:	43db      	mvns	r3, r3
 8001166:	401a      	ands	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	431a      	orrs	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001170:	bf00      	nop
 8001172:	371c      	adds	r7, #28
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	03ff7bff 	.word	0x03ff7bff

08001180 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118c:	b2db      	uxtb	r3, r3
}
 800118e:	4618      	mov	r0, r3
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
 80011a2:	460b      	mov	r3, r1
 80011a4:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80011a6:	78fa      	ldrb	r2, [r7, #3]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <MLX90640_I2CInit>:
#include "main.h"

//I2C_HandleTypeDef _hi2c;

void MLX90640_I2CInit(/*I2C_HandleTypeDef hi2c*/)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
//	_hi2c = hi2c;
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <MLX90640_I2CReadWord>:

uint16_t MLX90640_I2CReadWord(uint8_t slaveAddress, uint16_t start_address)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	4603      	mov	r3, r0
 80011d0:	460a      	mov	r2, r1
 80011d2:	71fb      	strb	r3, [r7, #7]
 80011d4:	4613      	mov	r3, r2
 80011d6:	80bb      	strh	r3, [r7, #4]
	return ((buf[0] << 8) | (buf[1] & 0xFF));
*/

	volatile uint8_t reg_m,reg_l,dat_m,dat_l;

	reg_m = (uint8_t) ((start_address & 0xFF00) >> 8);	//Address MSB
 80011d8:	88bb      	ldrh	r3, [r7, #4]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b29b      	uxth	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (start_address & 0x00FF); 	    //Address LSB
 80011e2:	88bb      	ldrh	r3, [r7, #4]
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	73bb      	strb	r3, [r7, #14]


	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {
 80011e8:	bf00      	nop
 80011ea:	483a      	ldr	r0, [pc, #232]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 80011ec:	f7ff ff64 	bl	80010b8 <LL_I2C_IsActiveFlag_BUSY>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f9      	bne.n	80011ea <MLX90640_I2CReadWord+0x22>
	}

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 80011f6:	79f9      	ldrb	r1, [r7, #7]
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <MLX90640_I2CReadWord+0x110>)
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2302      	movs	r3, #2
 8001202:	2200      	movs	r2, #0
 8001204:	4833      	ldr	r0, [pc, #204]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001206:	f7ff ff8b 	bl	8001120 <LL_I2C_HandleTransfer>
    		LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXIS(I2C1)){};
 800120a:	bf00      	nop
 800120c:	4831      	ldr	r0, [pc, #196]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 800120e:	f7ff fef4 	bl	8000ffa <LL_I2C_IsActiveFlag_TXIS>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f9      	beq.n	800120c <MLX90640_I2CReadWord+0x44>

    LL_I2C_TransmitData8(I2C1, reg_m);
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4619      	mov	r1, r3
 800121e:	482d      	ldr	r0, [pc, #180]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001220:	f7ff ffbb 	bl	800119a <LL_I2C_TransmitData8>

    //LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 1, I2C_CR2_AUTOEND, LL_I2C_GENERATE_NOSTARTSTOP);

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 8001224:	bf00      	nop
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001228:	f7ff fed4 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d0f9      	beq.n	8001226 <MLX90640_I2CReadWord+0x5e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	4826      	ldr	r0, [pc, #152]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 800123a:	f7ff ffae 	bl	800119a <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TC(I2C1)) {};
 800123e:	bf00      	nop
 8001240:	4824      	ldr	r0, [pc, #144]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001242:	f7ff ff13 	bl	800106c <LL_I2C_IsActiveFlag_TC>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0f9      	beq.n	8001240 <MLX90640_I2CReadWord+0x78>

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 800124c:	79f9      	ldrb	r1, [r7, #7]
 800124e:	4b23      	ldr	r3, [pc, #140]	; (80012dc <MLX90640_I2CReadWord+0x114>)
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2302      	movs	r3, #2
 800125a:	2200      	movs	r2, #0
 800125c:	481d      	ldr	r0, [pc, #116]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 800125e:	f7ff ff5f 	bl	8001120 <LL_I2C_HandleTransfer>
                              I2C_CR2_AUTOEND ,LL_I2C_GENERATE_START_READ);

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 8001262:	bf00      	nop
 8001264:	481b      	ldr	r0, [pc, #108]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001266:	f7ff fedb 	bl	8001020 <LL_I2C_IsActiveFlag_RXNE>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f9      	beq.n	8001264 <MLX90640_I2CReadWord+0x9c>

    dat_m = LL_I2C_ReceiveData8(I2C1);
 8001270:	4818      	ldr	r0, [pc, #96]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001272:	f7ff ff85 	bl	8001180 <LL_I2C_ReceiveData8>
 8001276:	4603      	mov	r3, r0
 8001278:	737b      	strb	r3, [r7, #13]

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 800127a:	bf00      	nop
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 800127e:	f7ff fecf 	bl	8001020 <LL_I2C_IsActiveFlag_RXNE>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d0f9      	beq.n	800127c <MLX90640_I2CReadWord+0xb4>

    dat_l = LL_I2C_ReceiveData8(I2C1);
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 800128a:	f7ff ff79 	bl	8001180 <LL_I2C_ReceiveData8>
 800128e:	4603      	mov	r3, r0
 8001290:	733b      	strb	r3, [r7, #12]

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 8001292:	bf00      	nop
 8001294:	480f      	ldr	r0, [pc, #60]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 8001296:	f7ff fed6 	bl	8001046 <LL_I2C_IsActiveFlag_STOP>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f9      	beq.n	8001294 <MLX90640_I2CReadWord+0xcc>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 80012a2:	f7ff ff1d 	bl	80010e0 <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 80012a8:	f7ff ff2a 	bl	8001100 <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 80012ac:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4908      	ldr	r1, [pc, #32]	; (80012d4 <MLX90640_I2CReadWord+0x10c>)
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MLX90640_I2CReadWord+0x118>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));

	return ((uint16_t) (dat_m << 8)) | ((uint16_t)((dat_l) & 0x00FF));
 80012b8:	7b7b      	ldrb	r3, [r7, #13]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	021b      	lsls	r3, r3, #8
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	7b3b      	ldrb	r3, [r7, #12]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	4313      	orrs	r3, r2
 80012ca:	b29b      	uxth	r3, r3

}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40005400 	.word	0x40005400
 80012d8:	80002000 	.word	0x80002000
 80012dc:	80002400 	.word	0x80002400
 80012e0:	fe00e800 	.word	0xfe00e800

080012e4 <MLX90640_I2CRead>:
{
	return 0;
}

int MLX90640_I2CRead(uint8_t slaveAddr,uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4603      	mov	r3, r0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	460b      	mov	r3, r1
 80012f2:	81bb      	strh	r3, [r7, #12]
 80012f4:	4613      	mov	r3, r2
 80012f6:	817b      	strh	r3, [r7, #10]
	slaveAddr <<= 1;
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	73fb      	strb	r3, [r7, #15]

	uint16_t temp_address = startAddress;
 80012fe:	89bb      	ldrh	r3, [r7, #12]
 8001300:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_data;
	for(int i=0; i < nMemAddressRead; i++){
 8001302:	2300      	movs	r3, #0
 8001304:	61bb      	str	r3, [r7, #24]
 8001306:	e013      	b.n	8001330 <MLX90640_I2CRead+0x4c>

		temp_data = MLX90640_I2CReadWord(slaveAddr,temp_address);
 8001308:	8bfa      	ldrh	r2, [r7, #30]
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff ff5a 	bl	80011c8 <MLX90640_I2CReadWord>
 8001314:	4603      	mov	r3, r0
 8001316:	82fb      	strh	r3, [r7, #22]
		temp_address++;
 8001318:	8bfb      	ldrh	r3, [r7, #30]
 800131a:	3301      	adds	r3, #1
 800131c:	83fb      	strh	r3, [r7, #30]
		*(data + i) = temp_data;
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	8afa      	ldrh	r2, [r7, #22]
 8001328:	801a      	strh	r2, [r3, #0]
	for(int i=0; i < nMemAddressRead; i++){
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	3301      	adds	r3, #1
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	897b      	ldrh	r3, [r7, #10]
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbe7      	blt.n	8001308 <MLX90640_I2CRead+0x24>

	}
	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr,uint16_t writeAddress, uint16_t data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
 800134e:	460b      	mov	r3, r1
 8001350:	80bb      	strh	r3, [r7, #4]
 8001352:	4613      	mov	r3, r2
 8001354:	807b      	strh	r3, [r7, #2]
	buf[0] = (data >> 8) & 0xFF;
	slaveAddr <<= 1;
	HAL_I2C_Mem_Write(&_hi2c, slaveAddr, writeAddress, 2, buf, 2, 100);
	return 0;
*/
	slaveAddr <<= 1;
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_m,reg_l,dat_m,dat_l;
	reg_m = (uint8_t) ((writeAddress & 0xFF00) >> 8);			//Address MSB
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	b29b      	uxth	r3, r3
 8001362:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (writeAddress & 0x00FF); 				//Address LSB
 8001364:	88bb      	ldrh	r3, [r7, #4]
 8001366:	73bb      	strb	r3, [r7, #14]
	dat_m = (uint8_t) ((data & 0xFF00) >> 8);	// Data MSB
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	b29b      	uxth	r3, r3
 800136e:	737b      	strb	r3, [r7, #13]
	dat_l = (uint8_t) (data & 0x00FF);			//Data LSB
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	733b      	strb	r3, [r7, #12]

	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {
 8001374:	bf00      	nop
 8001376:	4835      	ldr	r0, [pc, #212]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001378:	f7ff fe9e 	bl	80010b8 <LL_I2C_IsActiveFlag_BUSY>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f9      	bne.n	8001376 <MLX90640_I2CWrite+0x32>
	}

    LL_I2C_HandleTransfer(I2C1, slaveAddr, LL_I2C_ADDRSLAVE_7BIT, 2,
 8001382:	79f9      	ldrb	r1, [r7, #7]
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <MLX90640_I2CWrite+0x10c>)
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2302      	movs	r3, #2
 8001390:	2200      	movs	r2, #0
 8001392:	482e      	ldr	r0, [pc, #184]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001394:	f7ff fec4 	bl	8001120 <LL_I2C_HandleTransfer>
    		I2C_CR2_RELOAD, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXIS(I2C1)){};
 8001398:	bf00      	nop
 800139a:	482c      	ldr	r0, [pc, #176]	; (800144c <MLX90640_I2CWrite+0x108>)
 800139c:	f7ff fe2d 	bl	8000ffa <LL_I2C_IsActiveFlag_TXIS>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f9      	beq.n	800139a <MLX90640_I2CWrite+0x56>

    LL_I2C_TransmitData8(I2C1, reg_m);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4828      	ldr	r0, [pc, #160]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013ac:	f7ff fef5 	bl	800119a <LL_I2C_TransmitData8>

    //LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 1, I2C_CR2_AUTOEND, LL_I2C_GENERATE_NOSTARTSTOP);

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 80013b0:	bf00      	nop
 80013b2:	4826      	ldr	r0, [pc, #152]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013b4:	f7ff fe0e 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f9      	beq.n	80013b2 <MLX90640_I2CWrite+0x6e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	4619      	mov	r1, r3
 80013c2:	4822      	ldr	r0, [pc, #136]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013c4:	f7ff fee9 	bl	800119a <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TCR(I2C1)) {};
 80013c8:	bf00      	nop
 80013ca:	4820      	ldr	r0, [pc, #128]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013cc:	f7ff fe61 	bl	8001092 <LL_I2C_IsActiveFlag_TCR>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0f9      	beq.n	80013ca <MLX90640_I2CWrite+0x86>

    LL_I2C_HandleTransfer(I2C1, slaveAddr, LL_I2C_ADDRSLAVE_7BIT, 2,
 80013d6:	79f9      	ldrb	r1, [r7, #7]
 80013d8:	2300      	movs	r3, #0
 80013da:	9301      	str	r3, [sp, #4]
 80013dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2302      	movs	r3, #2
 80013e4:	2200      	movs	r2, #0
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013e8:	f7ff fe9a 	bl	8001120 <LL_I2C_HandleTransfer>
                              I2C_CR2_AUTOEND ,LL_I2C_GENERATE_NOSTARTSTOP);

    while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {};
 80013ec:	bf00      	nop
 80013ee:	4817      	ldr	r0, [pc, #92]	; (800144c <MLX90640_I2CWrite+0x108>)
 80013f0:	f7ff fe03 	bl	8000ffa <LL_I2C_IsActiveFlag_TXIS>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0f9      	beq.n	80013ee <MLX90640_I2CWrite+0xaa>

    LL_I2C_TransmitData8(I2C1, dat_m);
 80013fa:	7b7b      	ldrb	r3, [r7, #13]
 80013fc:	4619      	mov	r1, r3
 80013fe:	4813      	ldr	r0, [pc, #76]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001400:	f7ff fecb 	bl	800119a <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXIS(I2C1)) {};
 8001404:	bf00      	nop
 8001406:	4811      	ldr	r0, [pc, #68]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001408:	f7ff fdf7 	bl	8000ffa <LL_I2C_IsActiveFlag_TXIS>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0f9      	beq.n	8001406 <MLX90640_I2CWrite+0xc2>

    LL_I2C_TransmitData8(I2C1, dat_l);
 8001412:	7b3b      	ldrb	r3, [r7, #12]
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001418:	f7ff febf 	bl	800119a <LL_I2C_TransmitData8>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 800141c:	bf00      	nop
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001420:	f7ff fe11 	bl	8001046 <LL_I2C_IsActiveFlag_STOP>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f9      	beq.n	800141e <MLX90640_I2CWrite+0xda>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 800142a:	4808      	ldr	r0, [pc, #32]	; (800144c <MLX90640_I2CWrite+0x108>)
 800142c:	f7ff fe58 	bl	80010e0 <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001432:	f7ff fe65 	bl	8001100 <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <MLX90640_I2CWrite+0x108>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4904      	ldr	r1, [pc, #16]	; (800144c <MLX90640_I2CWrite+0x108>)
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <MLX90640_I2CWrite+0x110>)
 800143e:	4013      	ands	r3, r2
 8001440:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));


	return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40005400 	.word	0x40005400
 8001450:	80002000 	.word	0x80002000
 8001454:	fe00e800 	.word	0xfe00e800

08001458 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 8001464:	79f8      	ldrb	r0, [r7, #7]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f44f 7250 	mov.w	r2, #832	; 0x340
 800146c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001470:	f7ff ff38 	bl	80012e4 <MLX90640_I2CRead>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b0a6      	sub	sp, #152	; 0x98
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	6039      	str	r1, [r7, #0]
 8001488:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8001490:	2301      	movs	r3, #1
 8001492:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

    while(dataReady == 0)
 800149c:	e016      	b.n	80014cc <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 800149e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014a2:	79f8      	ldrb	r0, [r7, #7]
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014aa:	f7ff ff1b 	bl	80012e4 <MLX90640_I2CRead>
 80014ae:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if(error != MLX90640_NO_ERROR)
 80014b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d002      	beq.n	80014c0 <MLX90640_GetFrameData+0x42>
        {
            return error;
 80014ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014be:	e093      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 80014c0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    while(dataReady == 0)
 80014cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0e4      	beq.n	800149e <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff31 	bl	8001344 <MLX90640_I2CWrite>
 80014e2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 80014e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ee:	d102      	bne.n	80014f6 <MLX90640_GetFrameData+0x78>
    {
        return error;
 80014f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014f4:	e078      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 80014f6:	79f8      	ldrb	r0, [r7, #7]
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001502:	f7ff feef 	bl	80012e4 <MLX90640_I2CRead>
 8001506:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 800150a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800150e:	2b00      	cmp	r3, #0
 8001510:	d002      	beq.n	8001518 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 8001512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001516:	e067      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	79f8      	ldrb	r0, [r7, #7]
 800151e:	2240      	movs	r2, #64	; 0x40
 8001520:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001524:	f7ff fede 	bl	80012e4 <MLX90640_I2CRead>
 8001528:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 800152c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <MLX90640_GetFrameData+0xbc>
    {
        return error;
 8001534:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001538:	e056      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800153a:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 800153e:	79f8      	ldrb	r0, [r7, #7]
 8001540:	2201      	movs	r2, #1
 8001542:	f248 010d 	movw	r1, #32781	; 0x800d
 8001546:	f7ff fecd 	bl	80012e4 <MLX90640_I2CRead>
 800154a:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    frameData[832] = controlRegister1;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001554:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001558:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 800155a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001564:	f002 0201 	and.w	r2, r2, #1
 8001568:	b292      	uxth	r2, r2
 800156a:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 800156c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001570:	2b00      	cmp	r3, #0
 8001572:	d002      	beq.n	800157a <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8001574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001578:	e036      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f867 	bl	8001652 <ValidateAuxData>
 8001584:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == MLX90640_NO_ERROR)
 8001588:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800158c:	2b00      	cmp	r3, #0
 800158e:	d11b      	bne.n	80015c8 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001596:	e013      	b.n	80015c0 <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8001598:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800159c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80015a0:	f502 7240 	add.w	r2, r2, #768	; 0x300
 80015a4:	0052      	lsls	r2, r2, #1
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	440a      	add	r2, r1
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	3398      	adds	r3, #152	; 0x98
 80015ae:	443b      	add	r3, r7
 80015b0:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 80015b4:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 80015b6:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80015ba:	3301      	adds	r3, #1
 80015bc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 80015c0:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 80015c4:	2b3f      	cmp	r3, #63	; 0x3f
 80015c6:	d9e7      	bls.n	8001598 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f000 f811 	bl	80015f0 <ValidateFrameData>
 80015ce:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (error != MLX90640_NO_ERROR)
 80015d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <MLX90640_GetFrameData+0x162>
    {
        return error;
 80015da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015de:	e003      	b.n	80015e8 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80015e6:	881b      	ldrh	r3, [r3, #0]
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3798      	adds	r7, #152	; 0x98
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	e01c      	b.n	800163c <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001610:	4293      	cmp	r3, r2
 8001612:	d10d      	bne.n	8001630 <ValidateFrameData+0x40>
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	b29b      	uxth	r3, r3
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	b29a      	uxth	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d102      	bne.n	8001630 <ValidateFrameData+0x40>
 800162a:	f06f 0307 	mvn.w	r3, #7
 800162e:	e00a      	b.n	8001646 <ValidateFrameData+0x56>
        line = line + 1;
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	3301      	adds	r3, #1
 8001634:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	3320      	adds	r3, #32
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001642:	dbde      	blt.n	8001602 <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 8001652:	b480      	push	{r7}
 8001654:	b089      	sub	sp, #36	; 0x24
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001662:	4293      	cmp	r3, r2
 8001664:	d102      	bne.n	800166c <ValidateAuxData+0x1a>
 8001666:	f06f 0307 	mvn.w	r3, #7
 800166a:	e07e      	b.n	800176a <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 800166c:	2308      	movs	r3, #8
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	e00e      	b.n	8001690 <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <ValidateAuxData+0x38>
 8001684:	f06f 0307 	mvn.w	r3, #7
 8001688:	e06f      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3301      	adds	r3, #1
 800168e:	61fb      	str	r3, [r7, #28]
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	2b12      	cmp	r3, #18
 8001694:	dded      	ble.n	8001672 <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 8001696:	2314      	movs	r3, #20
 8001698:	61bb      	str	r3, [r7, #24]
 800169a:	e00e      	b.n	80016ba <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	4413      	add	r3, r2
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d102      	bne.n	80016b4 <ValidateAuxData+0x62>
 80016ae:	f06f 0307 	mvn.w	r3, #7
 80016b2:	e05a      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	3301      	adds	r3, #1
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	2b16      	cmp	r3, #22
 80016be:	dded      	ble.n	800169c <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 80016c0:	2318      	movs	r3, #24
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00e      	b.n	80016e4 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	4413      	add	r3, r2
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d102      	bne.n	80016de <ValidateAuxData+0x8c>
 80016d8:	f06f 0307 	mvn.w	r3, #7
 80016dc:	e045      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	dded      	ble.n	80016c6 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 80016ea:	2328      	movs	r3, #40	; 0x28
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	e00e      	b.n	800170e <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	4413      	add	r3, r2
 80016f8:	881b      	ldrh	r3, [r3, #0]
 80016fa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016fe:	4293      	cmp	r3, r2
 8001700:	d102      	bne.n	8001708 <ValidateAuxData+0xb6>
 8001702:	f06f 0307 	mvn.w	r3, #7
 8001706:	e030      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	3301      	adds	r3, #1
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b32      	cmp	r3, #50	; 0x32
 8001712:	dded      	ble.n	80016f0 <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 8001714:	2334      	movs	r3, #52	; 0x34
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	e00e      	b.n	8001738 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	881b      	ldrh	r3, [r3, #0]
 8001724:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001728:	4293      	cmp	r3, r2
 800172a:	d102      	bne.n	8001732 <ValidateAuxData+0xe0>
 800172c:	f06f 0307 	mvn.w	r3, #7
 8001730:	e01b      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b36      	cmp	r3, #54	; 0x36
 800173c:	dded      	ble.n	800171a <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 800173e:	2338      	movs	r3, #56	; 0x38
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e00e      	b.n	8001762 <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	4413      	add	r3, r2
 800174c:	881b      	ldrh	r3, [r3, #0]
 800174e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001752:	4293      	cmp	r3, r2
 8001754:	d102      	bne.n	800175c <ValidateAuxData+0x10a>
 8001756:	f06f 0307 	mvn.w	r3, #7
 800175a:	e006      	b.n	800176a <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3301      	adds	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b3f      	cmp	r3, #63	; 0x3f
 8001766:	dded      	ble.n	8001744 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 8001768:	2300      	movs	r3, #0

}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	; 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b084      	sub	sp, #16
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
    int error = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 8001784:	6839      	ldr	r1, [r7, #0]
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f001 f974 	bl	8002a74 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 800178c:	6839      	ldr	r1, [r7, #0]
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f001 f99c 	bl	8002acc <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8001794:	6839      	ldr	r1, [r7, #0]
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f001 fa24 	bl	8002be4 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f001 fa32 	bl	8002c08 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 80017a4:	6839      	ldr	r1, [r7, #0]
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f001 fa4a 	bl	8002c40 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 80017ac:	6839      	ldr	r1, [r7, #0]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f001 fa5e 	bl	8002c70 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 80017b4:	6839      	ldr	r1, [r7, #0]
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f001 fa78 	bl	8002cac <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f002 fd46 	bl	8004250 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 80017c4:	6839      	ldr	r1, [r7, #0]
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f001 fb2e 	bl	8002e28 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 80017cc:	6839      	ldr	r1, [r7, #0]
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f001 feb2 	bl	8003538 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f002 f8ea 	bl	80039b0 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 80017dc:	6839      	ldr	r1, [r7, #0]
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f002 fb2e 	bl	8003e40 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 80017e4:	6839      	ldr	r1, [r7, #0]
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f002 fe6e 	bl	80044c8 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f002 ff0a 	bl	8004608 <ExtractDeviatingPixels>
 80017f4:	60f8      	str	r0, [r7, #12]

    return error;
 80017f6:	68fb      	ldr	r3, [r7, #12]

}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	4613      	mov	r3, r2
 800180e:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	b29b      	uxth	r3, r3
 8001814:	01db      	lsls	r3, r3, #7
 8001816:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 8001818:	897b      	ldrh	r3, [r7, #10]
 800181a:	f403 7360 	and.w	r3, r3, #896	; 0x380
 800181e:	817b      	strh	r3, [r7, #10]

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	79f8      	ldrb	r0, [r7, #7]
 8001826:	2201      	movs	r2, #1
 8001828:	f248 010d 	movw	r1, #32781	; 0x800d
 800182c:	f7ff fd5a 	bl	80012e4 <MLX90640_I2CRead>
 8001830:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10e      	bne.n	8001856 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 8001838:	893b      	ldrh	r3, [r7, #8]
 800183a:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 800183e:	b29a      	uxth	r2, r3
 8001840:	897b      	ldrh	r3, [r7, #10]
 8001842:	4313      	orrs	r3, r2
 8001844:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 8001846:	897a      	ldrh	r2, [r7, #10]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	f248 010d 	movw	r1, #32781	; 0x800d
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fd78 	bl	8001344 <MLX90640_I2CWrite>
 8001854:	60f8      	str	r0, [r7, #12]
    }

    return error;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <MLX90640_GetCurMode>:
}

//------------------------------------------------------------------------------

int MLX90640_GetCurMode(uint8_t slaveAddr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int modeRAM;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 800186a:	f107 030e 	add.w	r3, r7, #14
 800186e:	79f8      	ldrb	r0, [r7, #7]
 8001870:	2201      	movs	r2, #1
 8001872:	f248 010d 	movw	r1, #32781	; 0x800d
 8001876:	f7ff fd35 	bl	80012e4 <MLX90640_I2CRead>
 800187a:	6178      	str	r0, [r7, #20]
    if(error != 0)
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MLX90640_GetCurMode+0x26>
    {
        return error;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	e005      	b.n	8001892 <MLX90640_GetCurMode+0x32>
    }
    modeRAM = (controlRegister1 & MLX90640_CTRL_MEAS_MODE_MASK) >> MLX90640_CTRL_MEAS_MODE_SHIFT;
 8001886:	89fb      	ldrh	r3, [r7, #14]
 8001888:	0b1b      	lsrs	r3, r3, #12
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]

    return modeRAM;
 8001890:	693b      	ldr	r3, [r7, #16]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	0000      	movs	r0, r0
 800189c:	0000      	movs	r0, r0
	...

080018a0 <MLX90640_CalculateTo>:

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 80018a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018a4:	b0a0      	sub	sp, #128	; 0x80
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6178      	str	r0, [r7, #20]
 80018aa:	6139      	str	r1, [r7, #16]
 80018ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80018b0:	edc7 0a02 	vstr	s1, [r7, #8]
 80018b4:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 80018bc:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 80018c0:	6939      	ldr	r1, [r7, #16]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f000 fd04 	bl	80022d0 <MLX90640_GetVdd>
 80018c8:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
    ta = MLX90640_GetTa(frameData, params);
 80018cc:	6939      	ldr	r1, [r7, #16]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f000 fd76 	bl	80023c0 <MLX90640_GetTa>
 80018d4:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    ta4 = (ta + 273.15);
 80018d8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80018da:	f7fe fe5d 	bl	8000598 <__aeabi_f2d>
 80018de:	a3e6      	add	r3, pc, #920	; (adr r3, 8001c78 <MLX90640_CalculateTo+0x3d8>)
 80018e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e4:	f7fe fcfa 	bl	80002dc <__adddf3>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	4610      	mov	r0, r2
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff f9a2 	bl	8000c38 <__aeabi_d2f>
 80018f4:	4603      	mov	r3, r0
 80018f6:	667b      	str	r3, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 80018f8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80018fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001900:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 8001904:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001908:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800190c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    tr4 = (tr + 273.15);
 8001910:	68b8      	ldr	r0, [r7, #8]
 8001912:	f7fe fe41 	bl	8000598 <__aeabi_f2d>
 8001916:	a3d8      	add	r3, pc, #864	; (adr r3, 8001c78 <MLX90640_CalculateTo+0x3d8>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fcde 	bl	80002dc <__adddf3>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	f7ff f986 	bl	8000c38 <__aeabi_d2f>
 800192c:	4603      	mov	r3, r0
 800192e:	663b      	str	r3, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 8001930:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001934:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001938:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 800193c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001940:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001944:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 8001948:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800194c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001950:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001954:	ed97 7a03 	vldr	s14, [r7, #12]
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001964:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    ktaScale = POW2(params->ktaScale);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 800196e:	4618      	mov	r0, r3
 8001970:	f7fe fdf0 	bl	8000554 <__aeabi_ui2d>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	ec43 2b11 	vmov	d1, r2, r3
 800197c:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8001c60 <MLX90640_CalculateTo+0x3c0>
 8001980:	f00a fca6 	bl	800c2d0 <pow>
 8001984:	ec53 2b10 	vmov	r2, r3, d0
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	f7ff f954 	bl	8000c38 <__aeabi_d2f>
 8001990:	4603      	mov	r3, r0
 8001992:	65bb      	str	r3, [r7, #88]	; 0x58
    kvScale = POW2(params->kvScale);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdd8 	bl	8000554 <__aeabi_ui2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	ec43 2b11 	vmov	d1, r2, r3
 80019ac:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8001c60 <MLX90640_CalculateTo+0x3c0>
 80019b0:	f00a fc8e 	bl	800c2d0 <pow>
 80019b4:	ec53 2b10 	vmov	r2, r3, d0
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7ff f93c 	bl	8000c38 <__aeabi_d2f>
 80019c0:	4603      	mov	r3, r0
 80019c2:	657b      	str	r3, [r7, #84]	; 0x54
    alphaScale = POW2(params->alphaScale);
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fdc2 	bl	8000554 <__aeabi_ui2d>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	ec43 2b11 	vmov	d1, r2, r3
 80019d8:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8001c60 <MLX90640_CalculateTo+0x3c0>
 80019dc:	f00a fc78 	bl	800c2d0 <pow>
 80019e0:	ec53 2b10 	vmov	r2, r3, d0
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f926 	bl	8000c38 <__aeabi_d2f>
 80019ec:	4603      	mov	r3, r0
 80019ee:	653b      	str	r3, [r7, #80]	; 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80019f6:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001c70 <MLX90640_CalculateTo+0x3d0>
 80019fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a0e:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 8001a12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001a16:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001a24:	ee07 3a90 	vmov	s15, r3
 8001a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a38:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 8001a3c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a78:	ee07 3a90 	vmov	s15, r3
 8001a7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	b21b      	sxth	r3, r3
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a96:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	095b      	lsrs	r3, r3, #5
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001aaa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001ab4:	881b      	ldrh	r3, [r3, #0]
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	ee07 3a90 	vmov	s15, r3
 8001abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ade:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ae6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd53 	bl	8000598 <__aeabi_f2d>
 8001af2:	4604      	mov	r4, r0
 8001af4:	460d      	mov	r5, r1
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001b0e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b12:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001b16:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001b1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2a:	ee17 0a90 	vmov	r0, s15
 8001b2e:	f7fe fd33 	bl	8000598 <__aeabi_f2d>
 8001b32:	4680      	mov	r8, r0
 8001b34:	4689      	mov	r9, r1
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd2c 	bl	8000598 <__aeabi_f2d>
 8001b40:	4682      	mov	sl, r0
 8001b42:	468b      	mov	fp, r1
 8001b44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001b46:	f7fe fd27 	bl	8000598 <__aeabi_f2d>
 8001b4a:	a347      	add	r3, pc, #284	; (adr r3, 8001c68 <MLX90640_CalculateTo+0x3c8>)
 8001b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b50:	f7fe fbc2 	bl	80002d8 <__aeabi_dsub>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4650      	mov	r0, sl
 8001b5a:	4659      	mov	r1, fp
 8001b5c:	f7fe fd74 	bl	8000648 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <MLX90640_CalculateTo+0x3d4>)
 8001b6e:	f7fe fbb5 	bl	80002dc <__adddf3>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4640      	mov	r0, r8
 8001b78:	4649      	mov	r1, r9
 8001b7a:	f7fe fd65 	bl	8000648 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fba7 	bl	80002d8 <__aeabi_dsub>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7ff f851 	bl	8000c38 <__aeabi_d2f>
 8001b96:	4603      	mov	r3, r0
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( mode ==  params->calibrationModeEE)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ba0:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	d16b      	bne.n	8001c80 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fcf4 	bl	8000598 <__aeabi_f2d>
 8001bb0:	4604      	mov	r4, r0
 8001bb2:	460d      	mov	r5, r1
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001bbe:	ee07 3a90 	vmov	s15, r3
 8001bc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	edd3 6a08 	vldr	s13, [r3, #32]
 8001bcc:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001bd0:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001bd4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001be0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcd4 	bl	8000598 <__aeabi_f2d>
 8001bf0:	4680      	mov	r8, r0
 8001bf2:	4689      	mov	r9, r1
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7fe fccd 	bl	8000598 <__aeabi_f2d>
 8001bfe:	4682      	mov	sl, r0
 8001c00:	468b      	mov	fp, r1
 8001c02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c04:	f7fe fcc8 	bl	8000598 <__aeabi_f2d>
 8001c08:	a317      	add	r3, pc, #92	; (adr r3, 8001c68 <MLX90640_CalculateTo+0x3c8>)
 8001c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c0e:	f7fe fb63 	bl	80002d8 <__aeabi_dsub>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4650      	mov	r0, sl
 8001c18:	4659      	mov	r1, fp
 8001c1a:	f7fe fd15 	bl	8000648 <__aeabi_dmul>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	460b      	mov	r3, r1
 8001c22:	4610      	mov	r0, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MLX90640_CalculateTo+0x3d4>)
 8001c2c:	f7fe fb56 	bl	80002dc <__adddf3>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4640      	mov	r0, r8
 8001c36:	4649      	mov	r1, r9
 8001c38:	f7fe fd06 	bl	8000648 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fb48 	bl	80002d8 <__aeabi_dsub>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	4610      	mov	r0, r2
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f7fe fff2 	bl	8000c38 <__aeabi_d2f>
 8001c54:	4603      	mov	r3, r0
 8001c56:	633b      	str	r3, [r7, #48]	; 0x30
 8001c58:	e071      	b.n	8001d3e <MLX90640_CalculateTo+0x49e>
 8001c5a:	bf00      	nop
 8001c5c:	f3af 8000 	nop.w
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40000000 	.word	0x40000000
 8001c68:	66666666 	.word	0x66666666
 8001c6c:	400a6666 	.word	0x400a6666
 8001c70:	42200000 	.word	0x42200000
 8001c74:	3ff00000 	.word	0x3ff00000
 8001c78:	66666666 	.word	0x66666666
 8001c7c:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc88 	bl	8000598 <__aeabi_f2d>
 8001c88:	4604      	mov	r4, r0
 8001c8a:	460d      	mov	r5, r1
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca4:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001ca8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	edd3 6a08 	vldr	s13, [r3, #32]
 8001cb2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001cb6:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001cba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cce:	ee17 0a90 	vmov	r0, s15
 8001cd2:	f7fe fc61 	bl	8000598 <__aeabi_f2d>
 8001cd6:	4680      	mov	r8, r0
 8001cd8:	4689      	mov	r9, r1
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc5a 	bl	8000598 <__aeabi_f2d>
 8001ce4:	4682      	mov	sl, r0
 8001ce6:	468b      	mov	fp, r1
 8001ce8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001cea:	f7fe fc55 	bl	8000598 <__aeabi_f2d>
 8001cee:	a33e      	add	r3, pc, #248	; (adr r3, 8001de8 <MLX90640_CalculateTo+0x548>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	f7fe faf0 	bl	80002d8 <__aeabi_dsub>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4650      	mov	r0, sl
 8001cfe:	4659      	mov	r1, fp
 8001d00:	f7fe fca2 	bl	8000648 <__aeabi_dmul>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4610      	mov	r0, r2
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	4b37      	ldr	r3, [pc, #220]	; (8001df0 <MLX90640_CalculateTo+0x550>)
 8001d12:	f7fe fae3 	bl	80002dc <__adddf3>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4640      	mov	r0, r8
 8001d1c:	4649      	mov	r1, r9
 8001d1e:	f7fe fc93 	bl	8000648 <__aeabi_dmul>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4620      	mov	r0, r4
 8001d28:	4629      	mov	r1, r5
 8001d2a:	f7fe fad5 	bl	80002d8 <__aeabi_dsub>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff7f 	bl	8000c38 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	677b      	str	r3, [r7, #116]	; 0x74
 8001d42:	e2b5      	b.n	80022b0 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da00      	bge.n	8001d4c <MLX90640_CalculateTo+0x4ac>
 8001d4a:	331f      	adds	r3, #31
 8001d4c:	115b      	asrs	r3, r3, #5
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	da00      	bge.n	8001d58 <MLX90640_CalculateTo+0x4b8>
 8001d56:	333f      	adds	r3, #63	; 0x3f
 8001d58:	119b      	asrs	r3, r3, #6
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	bfb8      	it	lt
 8001d72:	425b      	neglt	r3, r3
 8001d74:	b25a      	sxtb	r2, r3
 8001d76:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d7a:	4053      	eors	r3, r2
 8001d7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001d80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d82:	3302      	adds	r3, #2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	da00      	bge.n	8001d8a <MLX90640_CalculateTo+0x4ea>
 8001d88:	3303      	adds	r3, #3
 8001d8a:	109b      	asrs	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d90:	3303      	adds	r3, #3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <MLX90640_CalculateTo+0x4f8>
 8001d96:	3303      	adds	r3, #3
 8001d98:	109b      	asrs	r3, r3, #2
 8001d9a:	425b      	negs	r3, r3
 8001d9c:	441a      	add	r2, r3
 8001d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da0:	3301      	adds	r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	da00      	bge.n	8001da8 <MLX90640_CalculateTo+0x508>
 8001da6:	3303      	adds	r3, #3
 8001da8:	109b      	asrs	r3, r3, #2
 8001daa:	441a      	add	r2, r3
 8001dac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	da00      	bge.n	8001db4 <MLX90640_CalculateTo+0x514>
 8001db2:	3303      	adds	r3, #3
 8001db4:	109b      	asrs	r3, r3, #2
 8001db6:	425b      	negs	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	f1c3 0301 	rsb	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	fb12 f303 	smulbb	r3, r2, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(mode == 0)
 8001dd2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 8001dda:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001dde:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001de2:	e00b      	b.n	8001dfc <MLX90640_CalculateTo+0x55c>
 8001de4:	f3af 8000 	nop.w
 8001de8:	66666666 	.word	0x66666666
 8001dec:	400a6666 	.word	0x400a6666
 8001df0:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 8001df4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001df8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        }

        if(pattern == frameData[833])
 8001dfc:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8001e06:	8812      	ldrh	r2, [r2, #0]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 824e 	bne.w	80022aa <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 8001e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4413      	add	r3, r2
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e22:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e32:	4413      	add	r3, r2
 8001e34:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001e38:	f993 3000 	ldrsb.w	r3, [r3]
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e44:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e54:	4413      	add	r3, r2
 8001e56:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	ee07 3a90 	vmov	s15, r3
 8001e62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e66:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001e6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e6e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 8001e72:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e74:	f7fe fb90 	bl	8000598 <__aeabi_f2d>
 8001e78:	4604      	mov	r4, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e80:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e98:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001e9c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001ea0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	ee17 0a90 	vmov	r0, s15
 8001eb8:	f7fe fb6e 	bl	8000598 <__aeabi_f2d>
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ec2:	f7fe fb69 	bl	8000598 <__aeabi_f2d>
 8001ec6:	4682      	mov	sl, r0
 8001ec8:	468b      	mov	fp, r1
 8001eca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ecc:	f7fe fb64 	bl	8000598 <__aeabi_f2d>
 8001ed0:	a3c4      	add	r3, pc, #784	; (adr r3, 80021e4 <MLX90640_CalculateTo+0x944>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	f7fe f9ff 	bl	80002d8 <__aeabi_dsub>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4650      	mov	r0, sl
 8001ee0:	4659      	mov	r1, fp
 8001ee2:	f7fe fbb1 	bl	8000648 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4bbb      	ldr	r3, [pc, #748]	; (80021e0 <MLX90640_CalculateTo+0x940>)
 8001ef4:	f7fe f9f2 	bl	80002dc <__adddf3>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4640      	mov	r0, r8
 8001efe:	4649      	mov	r1, r9
 8001f00:	f7fe fba2 	bl	8000648 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f9e4 	bl	80002d8 <__aeabi_dsub>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f7fe fe8e 	bl	8000c38 <__aeabi_d2f>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	67fb      	str	r3, [r7, #124]	; 0x7c

            if(mode !=  params->calibrationModeEE)
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f26:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d023      	beq.n	8001f76 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f34:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8001f38:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5a:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8001f5e:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f72:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f7c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	3380      	adds	r3, #128	; 0x80
 8001f84:	443b      	add	r3, r7
 8001f86:	3b54      	subs	r3, #84	; 0x54
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f90:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f98:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            irData = irData / emissivity;
 8001f9c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001fa0:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fa8:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001fac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001fae:	f7fe faf3 	bl	8000598 <__aeabi_f2d>
 8001fb2:	a387      	add	r3, pc, #540	; (adr r3, 80021d0 <MLX90640_CalculateTo+0x930>)
 8001fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb8:	f7fe fb46 	bl	8000648 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4614      	mov	r4, r2
 8001fc2:	461d      	mov	r5, r3
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc8:	3324      	adds	r3, #36	; 0x24
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	4413      	add	r3, r2
 8001fce:	885b      	ldrh	r3, [r3, #2]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe facf 	bl	8000574 <__aeabi_i2d>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe fc5d 	bl	800089c <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7fe fe25 	bl	8000c38 <__aeabi_d2f>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ff8:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001ffc:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002000:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800200c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002010:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002018:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 800201c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002020:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002024:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202c:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002030:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002034:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002038:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800203c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002044:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8002048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800204a:	f7fe faa5 	bl	8000598 <__aeabi_f2d>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	ec43 2b10 	vmov	d0, r2, r3
 8002056:	f00a f9ab 	bl	800c3b0 <sqrt>
 800205a:	eeb0 7a40 	vmov.f32	s14, s0
 800205e:	eef0 7a60 	vmov.f32	s15, s1
 8002062:	eeb0 0a47 	vmov.f32	s0, s14
 8002066:	eef0 0a67 	vmov.f32	s1, s15
 800206a:	f00a f9a1 	bl	800c3b0 <sqrt>
 800206e:	ec55 4b10 	vmov	r4, r5, d0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa8e 	bl	8000598 <__aeabi_f2d>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4620      	mov	r0, r4
 8002082:	4629      	mov	r1, r5
 8002084:	f7fe fae0 	bl	8000648 <__aeabi_dmul>
 8002088:	4602      	mov	r2, r0
 800208a:	460b      	mov	r3, r1
 800208c:	4610      	mov	r0, r2
 800208e:	4619      	mov	r1, r3
 8002090:	f7fe fdd2 	bl	8000c38 <__aeabi_d2f>
 8002094:	4603      	mov	r3, r0
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8002098:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800209a:	f7fe fa7d 	bl	8000598 <__aeabi_f2d>
 800209e:	4604      	mov	r4, r0
 80020a0:	460d      	mov	r5, r1
 80020a2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020a4:	f7fe fa78 	bl	8000598 <__aeabi_f2d>
 80020a8:	4680      	mov	r8, r0
 80020aa:	4689      	mov	r9, r1
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7fe fa71 	bl	8000598 <__aeabi_f2d>
 80020b6:	a348      	add	r3, pc, #288	; (adr r3, 80021d8 <MLX90640_CalculateTo+0x938>)
 80020b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020bc:	f7fe fac4 	bl	8000648 <__aeabi_dmul>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	f04f 0000 	mov.w	r0, #0
 80020c8:	4945      	ldr	r1, [pc, #276]	; (80021e0 <MLX90640_CalculateTo+0x940>)
 80020ca:	f7fe f905 	bl	80002d8 <__aeabi_dsub>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	4640      	mov	r0, r8
 80020d4:	4649      	mov	r1, r9
 80020d6:	f7fe fab7 	bl	8000648 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4690      	mov	r8, r2
 80020e0:	4699      	mov	r9, r3
 80020e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80020e4:	f7fe fa58 	bl	8000598 <__aeabi_f2d>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4640      	mov	r0, r8
 80020ee:	4649      	mov	r1, r9
 80020f0:	f7fe f8f4 	bl	80002dc <__adddf3>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fbce 	bl	800089c <__aeabi_ddiv>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4614      	mov	r4, r2
 8002106:	461d      	mov	r5, r3
 8002108:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800210a:	f7fe fa45 	bl	8000598 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f8e1 	bl	80002dc <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	ec43 2b17 	vmov	d7, r2, r3
 8002122:	eeb0 0a47 	vmov.f32	s0, s14
 8002126:	eef0 0a67 	vmov.f32	s1, s15
 800212a:	f00a f941 	bl	800c3b0 <sqrt>
 800212e:	eeb0 7a40 	vmov.f32	s14, s0
 8002132:	eef0 7a60 	vmov.f32	s15, s1
 8002136:	eeb0 0a47 	vmov.f32	s0, s14
 800213a:	eef0 0a67 	vmov.f32	s1, s15
 800213e:	f00a f937 	bl	800c3b0 <sqrt>
 8002142:	ec51 0b10 	vmov	r0, r1, d0
 8002146:	a324      	add	r3, pc, #144	; (adr r3, 80021d8 <MLX90640_CalculateTo+0x938>)
 8002148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800214c:	f7fe f8c4 	bl	80002d8 <__aeabi_dsub>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	f7fe fd6e 	bl	8000c38 <__aeabi_d2f>
 800215c:	4603      	mov	r3, r0
 800215e:	637b      	str	r3, [r7, #52]	; 0x34

            if(To < params->ct[1])
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002166:	ee07 3a90 	vmov	s15, r3
 800216a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800216e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002172:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217a:	d503      	bpl.n	8002184 <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8002182:	e036      	b.n	80021f2 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800218a:	ee07 3a90 	vmov	s15, r3
 800218e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002192:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800219a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219e:	d503      	bpl.n	80021a8 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 80021a0:	2301      	movs	r3, #1
 80021a2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80021a6:	e024      	b.n	80021f2 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80021ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c2:	d513      	bpl.n	80021ec <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 80021ca:	e012      	b.n	80021f2 <MLX90640_CalculateTo+0x952>
 80021cc:	f3af 8000 	nop.w
 80021d0:	a0b5ed8d 	.word	0xa0b5ed8d
 80021d4:	3eb0c6f7 	.word	0x3eb0c6f7
 80021d8:	66666666 	.word	0x66666666
 80021dc:	40711266 	.word	0x40711266
 80021e0:	3ff00000 	.word	0x3ff00000
 80021e4:	66666666 	.word	0x66666666
 80021e8:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 80021ec:	2303      	movs	r3, #3
 80021ee:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 80021f2:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	3380      	adds	r3, #128	; 0x80
 80021fa:	443b      	add	r3, r7
 80021fc:	3b64      	subs	r3, #100	; 0x64
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800220a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	330a      	adds	r3, #10
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3304      	adds	r3, #4
 8002218:	edd3 6a00 	vldr	s13, [r3]
 800221c:	f997 207a 	ldrsb.w	r2, [r7, #122]	; 0x7a
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	3220      	adds	r2, #32
 8002224:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002228:	ee07 3a90 	vmov	s15, r3
 800222c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002230:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8002234:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002240:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002244:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002248:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 800224c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002250:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002258:	ee17 0a90 	vmov	r0, s15
 800225c:	f7fe f99c 	bl	8000598 <__aeabi_f2d>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	ec43 2b10 	vmov	d0, r2, r3
 8002268:	f00a f8a2 	bl	800c3b0 <sqrt>
 800226c:	eeb0 7a40 	vmov.f32	s14, s0
 8002270:	eef0 7a60 	vmov.f32	s15, s1
 8002274:	eeb0 0a47 	vmov.f32	s0, s14
 8002278:	eef0 0a67 	vmov.f32	s1, s15
 800227c:	f00a f898 	bl	800c3b0 <sqrt>
 8002280:	ec51 0b10 	vmov	r0, r1, d0
 8002284:	a310      	add	r3, pc, #64	; (adr r3, 80022c8 <MLX90640_CalculateTo+0xa28>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f7fe f825 	bl	80002d8 <__aeabi_dsub>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	f7fe fccf 	bl	8000c38 <__aeabi_d2f>
 800229a:	4603      	mov	r3, r0
 800229c:	637b      	str	r3, [r7, #52]	; 0x34

            result[pixelNumber] = To;
 800229e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	4413      	add	r3, r2
 80022a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022a8:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80022aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ac:	3301      	adds	r3, #1
 80022ae:	677b      	str	r3, [r7, #116]	; 0x74
 80022b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80022b6:	f6ff ad45 	blt.w	8001d44 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 80022ba:	bf00      	nop
 80022bc:	bf00      	nop
 80022be:	3780      	adds	r7, #128	; 0x80
 80022c0:	46bd      	mov	sp, r7
 80022c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022c6:	bf00      	nop
 80022c8:	66666666 	.word	0x66666666
 80022cc:	40711266 	.word	0x40711266

080022d0 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80022d0:	b5b0      	push	{r4, r5, r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80022e0:	881b      	ldrh	r3, [r3, #0]
 80022e2:	0a9b      	lsrs	r3, r3, #10
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f92e 	bl	8000554 <__aeabi_ui2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	ec43 2b11 	vmov	d1, r2, r3
 8002300:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 80023b0 <MLX90640_GetVdd+0xe0>
 8002304:	f009 ffe4 	bl	800c2d0 <pow>
 8002308:	ec55 4b10 	vmov	r4, r5, d0
 800230c:	8afb      	ldrh	r3, [r7, #22]
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe f920 	bl	8000554 <__aeabi_ui2d>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	ec43 2b11 	vmov	d1, r2, r3
 800231c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80023b0 <MLX90640_GetVdd+0xe0>
 8002320:	f009 ffd6 	bl	800c2d0 <pow>
 8002324:	ec53 2b10 	vmov	r2, r3, d0
 8002328:	4620      	mov	r0, r4
 800232a:	4629      	mov	r1, r5
 800232c:	f7fe fab6 	bl	800089c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	f7fe fc7e 	bl	8000c38 <__aeabi_d2f>
 800233c:	4603      	mov	r3, r0
 800233e:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f203 6354 	addw	r3, r3, #1620	; 0x654
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	b21b      	sxth	r3, r3
 800234a:	ee07 3a90 	vmov	s15, r3
 800234e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002352:	edd7 7a04 	vldr	s15, [r7, #16]
 8002356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800237e:	ee16 0a90 	vmov	r0, s13
 8002382:	f7fe f909 	bl	8000598 <__aeabi_f2d>
 8002386:	a30c      	add	r3, pc, #48	; (adr r3, 80023b8 <MLX90640_GetVdd+0xe8>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fd ffa6 	bl	80002dc <__adddf3>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fc4e 	bl	8000c38 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	60fb      	str	r3, [r7, #12]

    return vdd;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	ee07 3a90 	vmov	s15, r3
}
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bdb0      	pop	{r4, r5, r7, pc}
 80023b0:	00000000 	.word	0x00000000
 80023b4:	40000000 	.word	0x40000000
 80023b8:	66666666 	.word	0x66666666
 80023bc:	400a6666 	.word	0x400a6666

080023c0 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 80023c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 80023cc:	6839      	ldr	r1, [r7, #0]
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff7e 	bl	80022d0 <MLX90640_GetVdd>
 80023d4:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80023de:	881b      	ldrh	r3, [r3, #0]
 80023e0:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 80023e2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023e6:	ee07 3a90 	vmov	s15, r3
 80023ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b21b      	sxth	r3, r3
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800241a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80024e0 <MLX90640_GetTa+0x120>
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7fe f8b4 	bl	8000598 <__aeabi_f2d>
 8002430:	4604      	mov	r4, r0
 8002432:	460d      	mov	r5, r1
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4680      	mov	r8, r0
 8002440:	4689      	mov	r9, r1
 8002442:	6978      	ldr	r0, [r7, #20]
 8002444:	f7fe f8a8 	bl	8000598 <__aeabi_f2d>
 8002448:	a323      	add	r3, pc, #140	; (adr r3, 80024d8 <MLX90640_GetTa+0x118>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fd ff43 	bl	80002d8 <__aeabi_dsub>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4640      	mov	r0, r8
 8002458:	4649      	mov	r1, r9
 800245a:	f7fe f8f5 	bl	8000648 <__aeabi_dmul>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <MLX90640_GetTa+0x124>)
 800246c:	f7fd ff36 	bl	80002dc <__adddf3>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fe fa10 	bl	800089c <__aeabi_ddiv>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4614      	mov	r4, r2
 8002482:	461d      	mov	r5, r3
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	899b      	ldrh	r3, [r3, #12]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f873 	bl	8000574 <__aeabi_i2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	f7fd ff1f 	bl	80002d8 <__aeabi_dsub>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4610      	mov	r0, r2
 80024a0:	4619      	mov	r1, r3
 80024a2:	f7fe fbc9 	bl	8000c38 <__aeabi_d2f>
 80024a6:	4603      	mov	r3, r0
 80024a8:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80024b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80024b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024b8:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80024bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c0:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	ee07 3a90 	vmov	s15, r3
}
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024d6:	bf00      	nop
 80024d8:	66666666 	.word	0x66666666
 80024dc:	400a6666 	.word	0x400a6666
 80024e0:	48800000 	.word	0x48800000
 80024e4:	3ff00000 	.word	0x3ff00000

080024e8 <MLX90640_BadPixelsCorrection>:

}

//------------------------------------------------------------------------------
void MLX90640_BadPixelsCorrection(uint16_t *pixels, float *to, int mode, paramsMLX90640 *params)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b08b      	sub	sp, #44	; 0x2c
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
 80024f4:	603b      	str	r3, [r7, #0]
    float ap[4];
    uint8_t pix;
    uint8_t line;
    uint8_t column;

    pix = 0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 80024fc:	e2aa      	b.n	8002a54 <MLX90640_BadPixelsCorrection+0x56c>
    {
        line = pixels[pix]>>5;
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4413      	add	r3, r2
 8002508:	881b      	ldrh	r3, [r3, #0]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	b29b      	uxth	r3, r3
 800250e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        column = pixels[pix] - (line<<5);
 8002512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	b2da      	uxtb	r2, r3
 8002520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002524:	015b      	lsls	r3, r3, #5
 8002526:	b2db      	uxtb	r3, r3
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if(mode == 1)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b01      	cmp	r3, #1
 8002532:	f040 8152 	bne.w	80027da <MLX90640_BadPixelsCorrection+0x2f2>
        {
            if(line == 0)
 8002536:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800253a:	2b00      	cmp	r3, #0
 800253c:	d14d      	bne.n	80025da <MLX90640_BadPixelsCorrection+0xf2>
            {
                if(column == 0)
 800253e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <MLX90640_BadPixelsCorrection+0x7a>
                {
                    to[pixels[pix]] = to[33];
 8002546:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	4413      	add	r3, r2
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e273      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 8002562:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002566:	2b1f      	cmp	r3, #31
 8002568:	d10d      	bne.n	8002586 <MLX90640_BadPixelsCorrection+0x9e>
                {
                    to[pixels[pix]] = to[62];
 800256a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4413      	add	r3, r2
 800257c:	68ba      	ldr	r2, [r7, #8]
 800257e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e261      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]+31] + to[pixels[pix]+33])/2.0;
 8002586:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	881b      	ldrh	r3, [r3, #0]
 8002592:	331f      	adds	r3, #31
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4413      	add	r3, r2
 800259a:	ed93 7a00 	vldr	s14, [r3]
 800259e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	3321      	adds	r3, #33	; 0x21
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	4413      	add	r3, r2
 80025cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025d4:	edc3 7a00 	vstr	s15, [r3]
 80025d8:	e237      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(line == 23)
 80025da:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80025de:	2b17      	cmp	r3, #23
 80025e0:	d153      	bne.n	800268a <MLX90640_BadPixelsCorrection+0x1a2>
            {
                if(column == 0)
 80025e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d10e      	bne.n	8002608 <MLX90640_BadPixelsCorrection+0x120>
                {
                    to[pixels[pix]] = to[705];
 80025ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	4413      	add	r3, r2
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	f602 3204 	addw	r2, r2, #2820	; 0xb04
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e220      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 8002608:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800260c:	2b1f      	cmp	r3, #31
 800260e:	d10e      	bne.n	800262e <MLX90640_BadPixelsCorrection+0x146>
                {
                    to[pixels[pix]] = to[734];
 8002610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4413      	add	r3, r2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	4413      	add	r3, r2
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	f602 3278 	addw	r2, r2, #2936	; 0xb78
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e20d      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]-31])/2.0;
 800262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800263e:	3b21      	subs	r3, #33	; 0x21
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4413      	add	r3, r2
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800265a:	3b1f      	subs	r3, #31
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	4413      	add	r3, r2
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800266a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4413      	add	r3, r2
 800267c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002680:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002684:	edc3 7a00 	vstr	s15, [r3]
 8002688:	e1df      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(column == 0)
 800268a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800268e:	2b00      	cmp	r3, #0
 8002690:	d12b      	bne.n	80026ea <MLX90640_BadPixelsCorrection+0x202>
            {
                to[pixels[pix]] = (to[pixels[pix]-31] + to[pixels[pix]+33])/2.0;
 8002692:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026a2:	3b1f      	subs	r3, #31
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	4413      	add	r3, r2
 80026aa:	ed93 7a00 	vldr	s14, [r3]
 80026ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	881b      	ldrh	r3, [r3, #0]
 80026ba:	3321      	adds	r3, #33	; 0x21
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	4413      	add	r3, r2
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4413      	add	r3, r2
 80026dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e4:	edc3 7a00 	vstr	s15, [r3]
 80026e8:	e1af      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 80026ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80026ee:	2b1f      	cmp	r3, #31
 80026f0:	d12b      	bne.n	800274a <MLX90640_BadPixelsCorrection+0x262>
            {
                to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]+31])/2.0;
 80026f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	4413      	add	r3, r2
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002702:	3b21      	subs	r3, #33	; 0x21
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4413      	add	r3, r2
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4413      	add	r3, r2
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	331f      	adds	r3, #31
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	4413      	add	r3, r2
 8002722:	edd3 7a00 	vldr	s15, [r3]
 8002726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800272a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	68ba      	ldr	r2, [r7, #8]
 800273a:	4413      	add	r3, r2
 800273c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002744:	edc3 7a00 	vstr	s15, [r3]
 8002748:	e17f      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                ap[0] = to[pixels[pix]-33];
 800274a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4413      	add	r3, r2
 8002754:	881b      	ldrh	r3, [r3, #0]
 8002756:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800275a:	3b21      	subs	r3, #33	; 0x21
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	4413      	add	r3, r2
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	617b      	str	r3, [r7, #20]
                ap[1] = to[pixels[pix]-31];
 8002766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4413      	add	r3, r2
 8002770:	881b      	ldrh	r3, [r3, #0]
 8002772:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002776:	3b1f      	subs	r3, #31
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	4413      	add	r3, r2
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
                ap[2] = to[pixels[pix]+31];
 8002782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	331f      	adds	r3, #31
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4413      	add	r3, r2
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	61fb      	str	r3, [r7, #28]
                ap[3] = to[pixels[pix]+33];
 800279a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	881b      	ldrh	r3, [r3, #0]
 80027a6:	3321      	adds	r3, #33	; 0x21
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	68ba      	ldr	r2, [r7, #8]
 80027ac:	4413      	add	r3, r2
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	623b      	str	r3, [r7, #32]
                to[pixels[pix]] = GetMedian(ap,4);
 80027b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	18d4      	adds	r4, r2, r3
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2104      	movs	r1, #4
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 f851 	bl	8004872 <GetMedian>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	edc4 7a00 	vstr	s15, [r4]
 80027d8:	e137      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
        }
        else
        {
            if(column == 0)
 80027da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d115      	bne.n	800280e <MLX90640_BadPixelsCorrection+0x326>
            {
                to[pixels[pix]] = to[pixels[pix]+1];
 80027e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4413      	add	r3, r2
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	441a      	add	r2, r3
 80027f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	68f9      	ldr	r1, [r7, #12]
 80027fe:	440b      	add	r3, r1
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	440b      	add	r3, r1
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e11d      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 1 || column == 30)
 800280e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002812:	2b01      	cmp	r3, #1
 8002814:	d003      	beq.n	800281e <MLX90640_BadPixelsCorrection+0x336>
 8002816:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800281a:	2b1e      	cmp	r3, #30
 800281c:	d12b      	bne.n	8002876 <MLX90640_BadPixelsCorrection+0x38e>
            {
                to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 800281e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	881b      	ldrh	r3, [r3, #0]
 800282a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800282e:	3b01      	subs	r3, #1
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	4413      	add	r3, r2
 8002836:	ed93 7a00 	vldr	s14, [r3]
 800283a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	4413      	add	r3, r2
 800284e:	edd3 7a00 	vldr	s15, [r3]
 8002852:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	4413      	add	r3, r2
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	4413      	add	r3, r2
 8002868:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800286c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002870:	edc3 7a00 	vstr	s15, [r3]
 8002874:	e0e9      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 8002876:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800287a:	2b1f      	cmp	r3, #31
 800287c:	d117      	bne.n	80028ae <MLX90640_BadPixelsCorrection+0x3c6>
            {
                to[pixels[pix]] = to[pixels[pix]-1];
 800287e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800288e:	3b01      	subs	r3, #1
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	441a      	add	r2, r3
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	68f9      	ldr	r1, [r7, #12]
 800289e:	440b      	add	r3, r1
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	440b      	add	r3, r1
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e0cd      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                if(IsPixelBad(pixels[pix]-2,params) == 0 && IsPixelBad(pixels[pix]+2,params) == 0)
 80028ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	881b      	ldrh	r3, [r3, #0]
 80028ba:	3b02      	subs	r3, #2
 80028bc:	b29b      	uxth	r3, r3
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f002 f849 	bl	8004958 <IsPixelBad>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 8093 	bne.w	80029f4 <MLX90640_BadPixelsCorrection+0x50c>
 80028ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	3302      	adds	r3, #2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	6839      	ldr	r1, [r7, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f002 f839 	bl	8004958 <IsPixelBad>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 8083 	bne.w	80029f4 <MLX90640_BadPixelsCorrection+0x50c>
                {
                    ap[0] = to[pixels[pix]+1] - to[pixels[pix]+2];
 80028ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4413      	add	r3, r2
 8002902:	ed93 7a00 	vldr	s14, [r3]
 8002906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	4413      	add	r3, r2
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	3302      	adds	r3, #2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	4413      	add	r3, r2
 800291a:	edd3 7a00 	vldr	s15, [r3]
 800291e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002922:	edc7 7a05 	vstr	s15, [r7, #20]
                    ap[1] = to[pixels[pix]-1] - to[pixels[pix]-2];
 8002926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	4413      	add	r3, r2
 8002930:	881b      	ldrh	r3, [r3, #0]
 8002932:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002936:	3b01      	subs	r3, #1
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4413      	add	r3, r2
 800293e:	ed93 7a00 	vldr	s14, [r3]
 8002942:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002952:	3b02      	subs	r3, #2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	68ba      	ldr	r2, [r7, #8]
 8002958:	4413      	add	r3, r2
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002962:	edc7 7a06 	vstr	s15, [r7, #24]
                    if(fabs(ap[0]) > fabs(ap[1]))
 8002966:	edd7 7a05 	vldr	s15, [r7, #20]
 800296a:	eeb0 7ae7 	vabs.f32	s14, s15
 800296e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002972:	eef0 7ae7 	vabs.f32	s15, s15
 8002976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297e:	dd1d      	ble.n	80029bc <MLX90640_BadPixelsCorrection+0x4d4>
                    {
                        to[pixels[pix]] = to[pixels[pix]-1] + ap[1];
 8002980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002990:	3b01      	subs	r3, #1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	4413      	add	r3, r2
 8002998:	ed93 7a00 	vldr	s14, [r3]
 800299c:	edd7 7a06 	vldr	s15, [r7, #24]
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4413      	add	r3, r2
 80029b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b6:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 80029ba:	e046      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                    }
                    else
                    {
                        to[pixels[pix]] = to[pixels[pix]+1] + ap[0];
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	3301      	adds	r3, #1
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	68ba      	ldr	r2, [r7, #8]
 80029ce:	4413      	add	r3, r2
 80029d0:	ed93 7a00 	vldr	s14, [r3]
 80029d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	4413      	add	r3, r2
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 80029f2:	e02a      	b.n	8002a4a <MLX90640_BadPixelsCorrection+0x562>
                    }
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	881b      	ldrh	r3, [r3, #0]
 8002a00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a04:	3b01      	subs	r3, #1
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	ed93 7a00 	vldr	s14, [r3]
 8002a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	68ba      	ldr	r2, [r7, #8]
 8002a22:	4413      	add	r3, r2
 8002a24:	edd3 7a00 	vldr	s15, [r3]
 8002a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4413      	add	r3, r2
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a46:	edc3 7a00 	vstr	s15, [r3]
                }
            }
        }
        pix = pix + 1;
 8002a4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 8002a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a64:	4293      	cmp	r3, r2
 8002a66:	f47f ad4a 	bne.w	80024fe <MLX90640_BadPixelsCorrection+0x16>
    }
}
 8002a6a:	bf00      	nop
 8002a6c:	bf00      	nop
 8002a6e:	372c      	adds	r7, #44	; 0x2c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}

08002a74 <ExtractVDDParameters>:

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3366      	adds	r3, #102	; 0x66
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	0a1b      	lsrs	r3, r3, #8
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	3366      	adds	r3, #102	; 0x66
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8002a96:	89bb      	ldrh	r3, [r7, #12]
 8002a98:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	015b      	lsls	r3, r3, #5
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	015b      	lsls	r3, r3, #5
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	b21a      	sxth	r2, r3
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	89ba      	ldrh	r2, [r7, #12]
 8002abe:	805a      	strh	r2, [r3, #2]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3364      	adds	r3, #100	; 0x64
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	0a9b      	lsrs	r3, r3, #10
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	ee07 3a90 	vmov	s15, r3
 8002ae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ae8:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8002aec:	edd7 7a05 	vldr	s15, [r7, #20]
 8002af0:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002afc:	dd07      	ble.n	8002b0e <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8002afe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b02:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002bcc <ExtractPTATParameters+0x100>
 8002b06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b0a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8002b0e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002b12:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002bd0 <ExtractPTATParameters+0x104>
 8002b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b1a:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3364      	adds	r3, #100	; 0x64
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b28:	ee07 3a90 	vmov	s15, r3
 8002b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b30:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8002b34:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b38:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002bd4 <ExtractPTATParameters+0x108>
 8002b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b44:	dd07      	ble.n	8002b56 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8002b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b4a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002bd8 <ExtractPTATParameters+0x10c>
 8002b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b52:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8002b56:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b5a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b62:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3362      	adds	r3, #98	; 0x62
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3320      	adds	r3, #32
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fcfb 	bl	8000574 <__aeabi_i2d>
 8002b7e:	f04f 0200 	mov.w	r2, #0
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <ExtractPTATParameters+0x110>)
 8002b84:	f7fd fe8a 	bl	800089c <__aeabi_ddiv>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4610      	mov	r0, r2
 8002b8e:	4619      	mov	r1, r3
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	4b12      	ldr	r3, [pc, #72]	; (8002be0 <ExtractPTATParameters+0x114>)
 8002b96:	f7fd fba1 	bl	80002dc <__adddf3>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fe f849 	bl	8000c38 <__aeabi_d2f>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8002bb6:	89fa      	ldrh	r2, [r7, #14]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	611a      	str	r2, [r3, #16]
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	42800000 	.word	0x42800000
 8002bd0:	45800000 	.word	0x45800000
 8002bd4:	43ff8000 	.word	0x43ff8000
 8002bd8:	44800000 	.word	0x44800000
 8002bdc:	40d00000 	.word	0x40d00000
 8002be0:	40200000 	.word	0x40200000

08002be4 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3360      	adds	r3, #96	; 0x60
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b21a      	sxth	r2, r3
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	829a      	strh	r2, [r3, #20]
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3378      	adds	r3, #120	; 0x78
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	b25b      	sxtb	r3, r3
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c22:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002c3c <ExtractTgcParameters+0x34>
 8002c26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002c30:	bf00      	nop
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	42000000 	.word	0x42000000

08002c40 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3370      	adds	r3, #112	; 0x70
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	131b      	asrs	r3, r3, #12
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002c62:	bf00      	nop
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	3378      	adds	r3, #120	; 0x78
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	0a1b      	lsrs	r3, r3, #8
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	b25b      	sxtb	r3, r3
 8002c86:	ee07 3a90 	vmov	s15, r3
 8002c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c8e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002ca8 <ExtractKsTaParameters+0x38>
 8002c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	46000000 	.word	0x46000000

08002cac <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	337e      	adds	r3, #126	; 0x7e
 8002cba:	881b      	ldrh	r3, [r3, #0]
 8002cbc:	131b      	asrs	r3, r3, #12
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	f003 0303 	and.w	r3, r3, #3
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	0092      	lsls	r2, r2, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8002cd8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	337e      	adds	r3, #126	; 0x7e
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	111b      	asrs	r3, r3, #4
 8002cec:	b21b      	sxth	r3, r3
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	b21a      	sxth	r2, r3
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	337e      	adds	r3, #126	; 0x7e
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	121b      	asrs	r3, r3, #8
 8002d02:	b21b      	sxth	r3, r3
 8002d04:	f003 030f 	and.w	r3, r3, #15
 8002d08:	b21a      	sxth	r2, r3
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	fb12 f303 	smulbb	r3, r2, r3
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	b21a      	sxth	r2, r3
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	fb11 f303 	smulbb	r3, r1, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	b21a      	sxth	r2, r3
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d5a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	337e      	adds	r3, #126	; 0x7e
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	3308      	adds	r3, #8
 8002d6a:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	fa02 f303 	lsl.w	r3, r2, r3
 8002d74:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	337a      	adds	r3, #122	; 0x7a
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b25b      	sxtb	r3, r3
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	ee07 3a90 	vmov	s15, r3
 8002d8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	337a      	adds	r3, #122	; 0x7a
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b25b      	sxtb	r3, r3
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	ee07 3a90 	vmov	s15, r3
 8002db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	337c      	adds	r3, #124	; 0x7c
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	b25b      	sxtb	r3, r3
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	337c      	adds	r3, #124	; 0x7c
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	0a1b      	lsrs	r3, r3, #8
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	b25b      	sxtb	r3, r3
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    mlx90640->ksTo[4] = -0.0002;
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	4a03      	ldr	r2, [pc, #12]	; (8002e20 <ExtractKsToParameters+0x174>)
 8002e12:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	b951b717 	.word	0xb951b717
 8002e24:	00000000 	.word	0x00000000

08002e28 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e34:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e38:	6018      	str	r0, [r3, #0]
 8002e3a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e3e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002e42:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 8002e4a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e4e:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3340      	adds	r3, #64	; 0x40
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 8002e62:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e66:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	3340      	adds	r3, #64	; 0x40
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	111b      	asrs	r3, r3, #4
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 8002e7c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e80:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3340      	adds	r3, #64	; 0x40
 8002e88:	881b      	ldrh	r3, [r3, #0]
 8002e8a:	121b      	asrs	r3, r3, #8
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 8002e96:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e9a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3340      	adds	r3, #64	; 0x40
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	0b1b      	lsrs	r3, r3, #12
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	331e      	adds	r3, #30
 8002eac:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8002eb0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002eb4:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	3342      	adds	r3, #66	; 0x42
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec

    for(int i = 0; i < 6; i++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002ec8:	e062      	b.n	8002f90 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8002eca:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 8002ed4:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002ed8:	3322      	adds	r3, #34	; 0x22
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002ee0:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	f003 020f 	and.w	r2, r3, #15
 8002eee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002ef8:	443b      	add	r3, r7
 8002efa:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8002efe:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f02:	3322      	adds	r3, #34	; 0x22
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f0a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f0e:	6812      	ldr	r2, [r2, #0]
 8002f10:	4413      	add	r3, r2
 8002f12:	881b      	ldrh	r3, [r3, #0]
 8002f14:	111a      	asrs	r2, r3, #4
 8002f16:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f002 020f 	and.w	r2, r2, #15
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f26:	443b      	add	r3, r7
 8002f28:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 8002f2c:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f30:	3322      	adds	r3, #34	; 0x22
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f38:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	881b      	ldrh	r3, [r3, #0]
 8002f42:	121a      	asrs	r2, r3, #8
 8002f44:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f002 020f 	and.w	r2, r2, #15
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f54:	443b      	add	r3, r7
 8002f56:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 8002f5a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f5e:	3322      	adds	r3, #34	; 0x22
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f66:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	881b      	ldrh	r3, [r3, #0]
 8002f70:	0b1b      	lsrs	r3, r3, #12
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f78:	3303      	adds	r3, #3
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f80:	443b      	add	r3, r7
 8002f82:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8002f86:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002f90:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f94:	2b05      	cmp	r3, #5
 8002f96:	dd98      	ble.n	8002eca <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002f9e:	e020      	b.n	8002fe2 <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002fa0:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002faa:	443b      	add	r3, r7
 8002fac:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002fb0:	2b07      	cmp	r3, #7
 8002fb2:	dd11      	ble.n	8002fd8 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 8002fb4:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002fbe:	443b      	add	r3, r7
 8002fc0:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002fc4:	f1a3 0210 	sub.w	r2, r3, #16
 8002fc8:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002fd2:	443b      	add	r3, r7
 8002fd4:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002fd8:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002fe2:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002fe6:	2b17      	cmp	r3, #23
 8002fe8:	ddda      	ble.n	8002fa0 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 8002fea:	2300      	movs	r3, #0
 8002fec:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8002ff0:	e062      	b.n	80030b8 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 8002ff2:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8002ffc:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003000:	3328      	adds	r3, #40	; 0x28
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003008:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	4413      	add	r3, r2
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	f003 010f 	and.w	r1, r3, #15
 8003016:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800301a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800301e:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8003022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 8003026:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800302a:	3328      	adds	r3, #40	; 0x28
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003032:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8003036:	6812      	ldr	r2, [r2, #0]
 8003038:	4413      	add	r3, r2
 800303a:	881b      	ldrh	r3, [r3, #0]
 800303c:	111b      	asrs	r3, r3, #4
 800303e:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8003042:	3201      	adds	r2, #1
 8003044:	f003 010f 	and.w	r1, r3, #15
 8003048:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800304c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003050:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 8003054:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003058:	3328      	adds	r3, #40	; 0x28
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003060:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	121b      	asrs	r3, r3, #8
 800306c:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8003070:	3202      	adds	r2, #2
 8003072:	f003 010f 	and.w	r1, r3, #15
 8003076:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800307a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800307e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 8003082:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003086:	3328      	adds	r3, #40	; 0x28
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800308e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8003092:	6812      	ldr	r2, [r2, #0]
 8003094:	4413      	add	r3, r2
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	0b1b      	lsrs	r3, r3, #12
 800309a:	b299      	uxth	r1, r3
 800309c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80030a0:	1cda      	adds	r2, r3, #3
 80030a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030a6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80030ae:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80030b2:	3301      	adds	r3, #1
 80030b4:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 80030b8:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 80030bc:	2b07      	cmp	r3, #7
 80030be:	dd98      	ble.n	8002ff2 <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 80030c6:	e020      	b.n	800310a <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 80030c8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030d0:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d8:	2b07      	cmp	r3, #7
 80030da:	dd11      	ble.n	8003100 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 80030dc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030e0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030e4:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	f1a3 0110 	sub.w	r1, r3, #16
 80030f0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80030f8:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 80030fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8003100:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8003104:	3301      	adds	r3, #1
 8003106:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 800310a:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 800310e:	2b1f      	cmp	r3, #31
 8003110:	ddda      	ble.n	80030c8 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8003118:	e13e      	b.n	8003398 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800311a:	2300      	movs	r3, #0
 800311c:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8003120:	e130      	b.n	8003384 <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 8003122:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8003126:	015b      	lsls	r3, r3, #5
 8003128:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 800312c:	4413      	add	r3, r2
 800312e:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8003132:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003136:	3340      	adds	r3, #64	; 0x40
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800313e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8003142:	6812      	ldr	r2, [r2, #0]
 8003144:	4413      	add	r3, r2
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	111b      	asrs	r3, r3, #4
 800314a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003156:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800315a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800315e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 800316a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800316e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003172:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	4413      	add	r3, r2
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	dd17      	ble.n	80031bc <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 800318c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003190:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003194:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	edd3 7a00 	vldr	s15, [r3]
 80031a0:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 8003530 <ExtractAlphaParameters+0x708>
 80031a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031a8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031ac:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031b0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 80031bc:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031c0:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031c4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	ed93 7a00 	vldr	s14, [r3]
 80031d0:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 80031d4:	2201      	movs	r2, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031ea:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031ee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 80031fa:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8003204:	443b      	add	r3, r7
 8003206:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800320a:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 800320e:	409a      	lsls	r2, r3
 8003210:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 8003214:	441a      	add	r2, r3
 8003216:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800321a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800321e:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 8003222:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003226:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	ee07 3a90 	vmov	s15, r3
 8003234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003238:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800323c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003240:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003254:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003258:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 8003264:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003268:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800326c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f7fd f98e 	bl	8000598 <__aeabi_f2d>
 800327c:	4604      	mov	r4, r0
 800327e:	460d      	mov	r5, r1
 8003280:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd f965 	bl	8000554 <__aeabi_ui2d>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	ec43 2b11 	vmov	d1, r2, r3
 8003292:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8003518 <ExtractAlphaParameters+0x6f0>
 8003296:	f009 f81b 	bl	800c2d0 <pow>
 800329a:	ec53 2b10 	vmov	r2, r3, d0
 800329e:	4620      	mov	r0, r4
 80032a0:	4629      	mov	r1, r5
 80032a2:	f7fd fafb 	bl	800089c <__aeabi_ddiv>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4610      	mov	r0, r2
 80032ac:	4619      	mov	r1, r3
 80032ae:	f7fd fcc3 	bl	8000c38 <__aeabi_d2f>
 80032b2:	4601      	mov	r1, r0
 80032b4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032b8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80032bc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 80032c6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032ca:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80032ce:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	ed93 7a00 	vldr	s14, [r3]
 80032da:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032de:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	edd3 6a06 	vldr	s13, [r3, #24]
 80032e8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032ec:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f6:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 80032fa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032fe:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003308:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 800330c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003310:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003314:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8003318:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800331c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003320:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003324:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003328:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	4413      	add	r3, r2
 8003330:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 8003334:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003338:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800333c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4413      	add	r3, r2
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f926 	bl	8000598 <__aeabi_f2d>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	a173      	add	r1, pc, #460	; (adr r1, 8003520 <ExtractAlphaParameters+0x6f8>)
 8003352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003356:	f7fd faa1 	bl	800089c <__aeabi_ddiv>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4610      	mov	r0, r2
 8003360:	4619      	mov	r1, r3
 8003362:	f7fd fc69 	bl	8000c38 <__aeabi_d2f>
 8003366:	4601      	mov	r1, r0
 8003368:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800336c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003370:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800337a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800337e:	3301      	adds	r3, #1
 8003380:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8003384:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8003388:	2b1f      	cmp	r3, #31
 800338a:	f77f aeca 	ble.w	8003122 <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800338e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8003392:	3301      	adds	r3, #1
 8003394:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8003398:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800339c:	2b17      	cmp	r3, #23
 800339e:	f77f aebc 	ble.w	800311a <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 80033a2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80033a6:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80033b0:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80033b2:	2301      	movs	r3, #1
 80033b4:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 80033b8:	e023      	b.n	8003402 <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 80033ba:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80033be:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80033c2:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	edd3 7a00 	vldr	s15, [r3]
 80033ce:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033d2:	ed93 7a00 	vldr	s14, [r3]
 80033d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	d50b      	bpl.n	80033f8 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 80033e0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80033e4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80033e8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80033f6:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80033f8:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8003402:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8003406:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800340a:	dbd6      	blt.n	80033ba <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 8003412:	e00e      	b.n	8003432 <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 8003414:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003420:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003424:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 8003428:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 800342c:	3301      	adds	r3, #1
 800342e:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 8003432:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003436:	6818      	ldr	r0, [r3, #0]
 8003438:	f7fd f8ae 	bl	8000598 <__aeabi_f2d>
 800343c:	a33a      	add	r3, pc, #232	; (adr r3, 8003528 <ExtractAlphaParameters+0x700>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd fb73 	bl	8000b2c <__aeabi_dcmplt>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1e3      	bne.n	8003414 <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 800344c:	2300      	movs	r3, #0
 800344e:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8003452:	e04d      	b.n	80034f0 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 8003454:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003458:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800345c:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f896 	bl	8000598 <__aeabi_f2d>
 800346c:	4604      	mov	r4, r0
 800346e:	460d      	mov	r5, r1
 8003470:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f86d 	bl	8000554 <__aeabi_ui2d>
 800347a:	4602      	mov	r2, r0
 800347c:	460b      	mov	r3, r1
 800347e:	ec43 2b11 	vmov	d1, r2, r3
 8003482:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8003518 <ExtractAlphaParameters+0x6f0>
 8003486:	f008 ff23 	bl	800c2d0 <pow>
 800348a:	ec53 2b10 	vmov	r2, r3, d0
 800348e:	4620      	mov	r0, r4
 8003490:	4629      	mov	r1, r5
 8003492:	f7fd f8d9 	bl	8000648 <__aeabi_dmul>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	f7fd fbcb 	bl	8000c38 <__aeabi_d2f>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 80034a8:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 80034aa:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80034ae:	6818      	ldr	r0, [r3, #0]
 80034b0:	f7fd f872 	bl	8000598 <__aeabi_f2d>
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <ExtractAlphaParameters+0x70c>)
 80034ba:	f7fc ff0f 	bl	80002dc <__adddf3>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4610      	mov	r0, r2
 80034c4:	4619      	mov	r1, r3
 80034c6:	f7fd fb97 	bl	8000bf8 <__aeabi_d2uiz>
 80034ca:	4603      	mov	r3, r0
 80034cc:	b299      	uxth	r1, r3
 80034ce:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80034d2:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034dc:	3324      	adds	r3, #36	; 0x24
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	460a      	mov	r2, r1
 80034e4:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80034e6:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034ea:	3301      	adds	r3, #1
 80034ec:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80034f0:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80034f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034f8:	dbac      	blt.n	8003454 <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 80034fa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80034fe:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8003508:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a

}
 800350c:	bf00      	nop
 800350e:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 8003512:	46bd      	mov	sp, r7
 8003514:	bdb0      	pop	{r4, r5, r7, pc}
 8003516:	bf00      	nop
 8003518:	00000000 	.word	0x00000000
 800351c:	40000000 	.word	0x40000000
 8003520:	a0b5ed8d 	.word	0xa0b5ed8d
 8003524:	3eb0c6f7 	.word	0x3eb0c6f7
 8003528:	9999999a 	.word	0x9999999a
 800352c:	40dfffd9 	.word	0x40dfffd9
 8003530:	42800000 	.word	0x42800000
 8003534:	3fe00000 	.word	0x3fe00000

08003538 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003538:	b480      	push	{r7}
 800353a:	b0c5      	sub	sp, #276	; 0x114
 800353c:	af00      	add	r7, sp, #0
 800353e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003542:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003546:	6018      	str	r0, [r3, #0]
 8003548:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800354c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003550:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 8003558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800355c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3320      	adds	r3, #32
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 030f 	and.w	r3, r3, #15
 800356c:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8003570:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003574:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3320      	adds	r3, #32
 800357c:	881b      	ldrh	r3, [r3, #0]
 800357e:	111b      	asrs	r3, r3, #4
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 800358a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800358e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3320      	adds	r3, #32
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	121b      	asrs	r3, r3, #8
 800359a:	b2db      	uxtb	r3, r3
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = (int16_t)eeData[17];
 80035a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3322      	adds	r3, #34	; 0x22
 80035b0:	881b      	ldrh	r3, [r3, #0]
 80035b2:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

    for(int i = 0; i < 6; i++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035bc:	e062      	b.n	8003684 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 80035be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	3312      	adds	r3, #18
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035d4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035d8:	6812      	ldr	r2, [r2, #0]
 80035da:	4413      	add	r3, r2
 80035dc:	881b      	ldrh	r3, [r3, #0]
 80035de:	f003 020f 	and.w	r2, r3, #15
 80035e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80035ec:	443b      	add	r3, r7
 80035ee:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 80035f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035f6:	3312      	adds	r3, #18
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035fe:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003602:	6812      	ldr	r2, [r2, #0]
 8003604:	4413      	add	r3, r2
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	111a      	asrs	r2, r3, #4
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	3301      	adds	r3, #1
 8003610:	f002 020f 	and.w	r2, r2, #15
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800361a:	443b      	add	r3, r7
 800361c:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 8003620:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003624:	3312      	adds	r3, #18
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800362c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	4413      	add	r3, r2
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	121a      	asrs	r2, r3, #8
 8003638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800363c:	3302      	adds	r3, #2
 800363e:	f002 020f 	and.w	r2, r2, #15
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003648:	443b      	add	r3, r7
 800364a:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 800364e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003652:	3312      	adds	r3, #18
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800365a:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800365e:	6812      	ldr	r2, [r2, #0]
 8003660:	4413      	add	r3, r2
 8003662:	881b      	ldrh	r3, [r3, #0]
 8003664:	0b1b      	lsrs	r3, r3, #12
 8003666:	b29a      	uxth	r2, r3
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366c:	3303      	adds	r3, #3
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003674:	443b      	add	r3, r7
 8003676:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 800367a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800367e:	3301      	adds	r3, #1
 8003680:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003688:	2b05      	cmp	r3, #5
 800368a:	dd98      	ble.n	80035be <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003692:	e020      	b.n	80036d6 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8003694:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800369e:	443b      	add	r3, r7
 80036a0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80036a4:	2b07      	cmp	r3, #7
 80036a6:	dd11      	ble.n	80036cc <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 80036a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80036b2:	443b      	add	r3, r7
 80036b4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80036b8:	f1a3 0210 	sub.w	r2, r3, #16
 80036bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80036c6:	443b      	add	r3, r7
 80036c8:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80036cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036d0:	3301      	adds	r3, #1
 80036d2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036d6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036da:	2b17      	cmp	r3, #23
 80036dc:	ddda      	ble.n	8003694 <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036e4:	e062      	b.n	80037ac <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036f4:	3318      	adds	r3, #24
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036fc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	4413      	add	r3, r2
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	f003 010f 	and.w	r1, r3, #15
 800370a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800370e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003712:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 800371a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371e:	3318      	adds	r3, #24
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003726:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800372a:	6812      	ldr	r2, [r2, #0]
 800372c:	4413      	add	r3, r2
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	111b      	asrs	r3, r3, #4
 8003732:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003736:	3201      	adds	r2, #1
 8003738:	f003 010f 	and.w	r1, r3, #15
 800373c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003740:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 8003748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800374c:	3318      	adds	r3, #24
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003754:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	4413      	add	r3, r2
 800375c:	881b      	ldrh	r3, [r3, #0]
 800375e:	121b      	asrs	r3, r3, #8
 8003760:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003764:	3202      	adds	r2, #2
 8003766:	f003 010f 	and.w	r1, r3, #15
 800376a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800376e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8003776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377a:	3318      	adds	r3, #24
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003782:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	0b1b      	lsrs	r3, r3, #12
 800378e:	b299      	uxth	r1, r3
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003794:	1cda      	adds	r2, r3, #3
 8003796:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800379a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800379e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 80037a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a6:	3301      	adds	r3, #1
 80037a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037b0:	2b07      	cmp	r3, #7
 80037b2:	dd98      	ble.n	80036e6 <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037ba:	e020      	b.n	80037fe <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 80037bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037c4:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037cc:	2b07      	cmp	r3, #7
 80037ce:	dd11      	ble.n	80037f4 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 80037d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	f1a3 0110 	sub.w	r1, r3, #16
 80037e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ec:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 80037f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003802:	2b1f      	cmp	r3, #31
 8003804:	ddda      	ble.n	80037bc <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800380c:	e0c0      	b.n	8003990 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003814:	e0b2      	b.n	800397c <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381a:	015b      	lsls	r3, r3, #5
 800381c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8003820:	4413      	add	r3, r2
 8003822:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800382a:	3340      	adds	r3, #64	; 0x40
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003832:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	4413      	add	r3, r2
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	0a9b      	lsrs	r3, r3, #10
 800383e:	b29b      	uxth	r3, r3
 8003840:	b219      	sxth	r1, r3
 8003842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003846:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003850:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	4413      	add	r3, r2
 8003858:	460a      	mov	r2, r1
 800385a:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 800385c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003860:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	4413      	add	r3, r2
 8003872:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003876:	2b1f      	cmp	r3, #31
 8003878:	dd1d      	ble.n	80038b6 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 800387a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800387e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b40      	subs	r3, #64	; 0x40
 8003898:	b29b      	uxth	r3, r3
 800389a:	b219      	sxth	r1, r3
 800389c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038aa:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	460a      	mov	r2, r1
 80038b4:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 80038b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	4413      	add	r3, r2
 80038cc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038d0:	461a      	mov	r2, r3
 80038d2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	b219      	sxth	r1, r3
 80038dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ea:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	460a      	mov	r2, r1
 80038f4:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 80038f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003900:	443b      	add	r3, r7
 8003902:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8003906:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	b29a      	uxth	r2, r3
 8003910:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8003914:	4413      	add	r3, r2
 8003916:	b29a      	uxth	r2, r3
 8003918:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800391c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003920:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8003924:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8003928:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	b29b      	uxth	r3, r3
 8003932:	4413      	add	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800393a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800393e:	6819      	ldr	r1, [r3, #0]
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003944:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	440b      	add	r3, r1
 800394c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003950:	b29b      	uxth	r3, r3
 8003952:	4413      	add	r3, r2
 8003954:	b29b      	uxth	r3, r3
 8003956:	b219      	sxth	r1, r3
 8003958:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800395c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003966:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	4413      	add	r3, r2
 800396e:	460a      	mov	r2, r1
 8003970:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003972:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003976:	3301      	adds	r3, #1
 8003978:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800397c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003980:	2b1f      	cmp	r3, #31
 8003982:	f77f af48 	ble.w	8003816 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003986:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800398a:	3301      	adds	r3, #1
 800398c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003994:	2b17      	cmp	r3, #23
 8003996:	f77f af3a 	ble.w	800380e <ExtractOffsetParameters+0x2d6>
        }
    }
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	0000      	movs	r0, r0
 80039ac:	0000      	movs	r0, r0
	...

080039b0 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80039b0:	b5b0      	push	{r4, r5, r7, lr}
 80039b2:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039bc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039c0:	6018      	str	r0, [r3, #0]
 80039c2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039c6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80039ca:	6019      	str	r1, [r3, #0]
    int p = 0;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 80039d2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039d6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	336c      	adds	r3, #108	; 0x6c
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	0a1b      	lsrs	r3, r3, #8
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b25b      	sxtb	r3, r3
 80039e6:	f887 3c0c 	strb.w	r3, [r7, #3084]	; 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 80039ea:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039ee:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	336c      	adds	r3, #108	; 0x6c
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	b25b      	sxtb	r3, r3
 80039fa:	f887 3c0e 	strb.w	r3, [r7, #3086]	; 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 80039fe:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a02:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	336e      	adds	r3, #110	; 0x6e
 8003a0a:	881b      	ldrh	r3, [r3, #0]
 8003a0c:	0a1b      	lsrs	r3, r3, #8
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	b25b      	sxtb	r3, r3
 8003a12:	f887 3c0d 	strb.w	r3, [r7, #3085]	; 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 8003a16:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a1a:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	336e      	adds	r3, #110	; 0x6e
 8003a22:	881b      	ldrh	r3, [r3, #0]
 8003a24:	b25b      	sxtb	r3, r3
 8003a26:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8003a2a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a2e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3370      	adds	r3, #112	; 0x70
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	111b      	asrs	r3, r3, #4
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	3308      	adds	r3, #8
 8003a44:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 8003a48:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a4c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3370      	adds	r3, #112	; 0x70
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 030f 	and.w	r3, r3, #15
 8003a5c:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003a60:	2300      	movs	r3, #0
 8003a62:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003a66:	e0ed      	b.n	8003c44 <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003a6e:	e0df      	b.n	8003c30 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8003a70:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	; 0xc20
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003a80:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	da00      	bge.n	8003a8a <ExtractKtaPixelParameters+0xda>
 8003a88:	331f      	adds	r3, #31
 8003a8a:	115b      	asrs	r3, r3, #5
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	da00      	bge.n	8003a98 <ExtractKtaPixelParameters+0xe8>
 8003a96:	333f      	adds	r3, #63	; 0x3f
 8003a98:	119b      	asrs	r3, r3, #6
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	b2da      	uxtb	r2, r3
 8003aa4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	bfb8      	it	lt
 8003ab0:	425b      	neglt	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8003aba:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003abe:	3340      	adds	r3, #64	; 0x40
 8003ac0:	005b      	lsls	r3, r3, #1
 8003ac2:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8003ac6:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	4413      	add	r3, r2
 8003ace:	881b      	ldrh	r3, [r3, #0]
 8003ad0:	105b      	asrs	r3, r3, #1
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ade:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ae2:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ae6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8003af2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003af6:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003afa:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003b0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b12:	dd17      	ble.n	8003b44 <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8003b14:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b18:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b1c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003b2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b30:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b34:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b38:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4413      	add	r3, r2
 8003b40:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003b44:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b48:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b4c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	ed93 7a00 	vldr	s14, [r3]
 8003b58:	f897 3c13 	ldrb.w	r3, [r7, #3091]	; 0xc13
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	ee07 3a90 	vmov	s15, r3
 8003b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b72:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b76:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	4413      	add	r3, r2
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003b82:	f897 3c12 	ldrb.w	r3, [r7, #3090]	; 0xc12
 8003b86:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003b8a:	443b      	add	r3, r7
 8003b8c:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003b90:	ee07 3a90 	vmov	s15, r3
 8003b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b98:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b9c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ba0:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003bb4:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003bb8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8003bc4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003bc8:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003bcc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fcde 	bl	8000598 <__aeabi_f2d>
 8003bdc:	4604      	mov	r4, r0
 8003bde:	460d      	mov	r5, r1
 8003be0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7fc fcb5 	bl	8000554 <__aeabi_ui2d>
 8003bea:	4602      	mov	r2, r0
 8003bec:	460b      	mov	r3, r1
 8003bee:	ec43 2b11 	vmov	d1, r2, r3
 8003bf2:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8003e28 <ExtractKtaPixelParameters+0x478>
 8003bf6:	f008 fb6b 	bl	800c2d0 <pow>
 8003bfa:	ec53 2b10 	vmov	r2, r3, d0
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc fe4b 	bl	800089c <__aeabi_ddiv>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	f7fd f813 	bl	8000c38 <__aeabi_d2f>
 8003c12:	4601      	mov	r1, r0
 8003c14:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c18:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c1c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4413      	add	r3, r2
 8003c24:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003c26:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003c30:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003c34:	2b1f      	cmp	r3, #31
 8003c36:	f77f af1b 	ble.w	8003a70 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003c3a:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003c44:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003c48:	2b17      	cmp	r3, #23
 8003c4a:	f77f af0d 	ble.w	8003a68 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 8003c4e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c52:	f6a3 4324 	subw	r3, r3, #3108	; 0xc24
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	eef0 7ae7 	vabs.f32	s15, s15
 8003c5e:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c62:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003c66:	2301      	movs	r3, #1
 8003c68:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003c6c:	e029      	b.n	8003cc2 <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8003c6e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c72:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c76:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	edd3 7a00 	vldr	s15, [r3]
 8003c82:	eef0 7ae7 	vabs.f32	s15, s15
 8003c86:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c8a:	ed93 7a00 	vldr	s14, [r3]
 8003c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c96:	d50f      	bpl.n	8003cb8 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003c98:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c9c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ca0:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	edd3 7a00 	vldr	s15, [r3]
 8003cac:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb0:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cb4:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003cb8:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003cc2:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003cc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cca:	dbd0      	blt.n	8003c6e <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003cd2:	e00e      	b.n	8003cf2 <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 8003cd4:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cd8:	edd3 7a00 	vldr	s15, [r3]
 8003cdc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ce0:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003ce4:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8003ce8:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003cec:	3301      	adds	r3, #1
 8003cee:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003cf2:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	a34d      	add	r3, pc, #308	; (adr r3, 8003e34 <ExtractKtaPixelParameters+0x484>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	f7fc ff13 	bl	8000b2c <__aeabi_dcmplt>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e3      	bne.n	8003cd4 <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003d12:	e075      	b.n	8003e00 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 8003d14:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003d18:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003d1c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc36 	bl	8000598 <__aeabi_f2d>
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	460d      	mov	r5, r1
 8003d30:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7fc fc0d 	bl	8000554 <__aeabi_ui2d>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	ec43 2b11 	vmov	d1, r2, r3
 8003d42:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8003e28 <ExtractKtaPixelParameters+0x478>
 8003d46:	f008 fac3 	bl	800c2d0 <pow>
 8003d4a:	ec53 2b10 	vmov	r2, r3, d0
 8003d4e:	4620      	mov	r0, r4
 8003d50:	4629      	mov	r1, r5
 8003d52:	f7fc fc79 	bl	8000648 <__aeabi_dmul>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	f7fc ff6b 	bl	8000c38 <__aeabi_d2f>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 8003d68:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003d6a:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d6e:	edd3 7a00 	vldr	s15, [r3]
 8003d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7a:	d51e      	bpl.n	8003dba <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8003d7c:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	f7fc fc09 	bl	8000598 <__aeabi_f2d>
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	4b29      	ldr	r3, [pc, #164]	; (8003e30 <ExtractKtaPixelParameters+0x480>)
 8003d8c:	f7fc faa4 	bl	80002d8 <__aeabi_dsub>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f7fc ff06 	bl	8000ba8 <__aeabi_d2iz>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	b259      	sxtb	r1, r3
 8003da0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003da4:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003dae:	4413      	add	r3, r2
 8003db0:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003db4:	460a      	mov	r2, r1
 8003db6:	701a      	strb	r2, [r3, #0]
 8003db8:	e01d      	b.n	8003df6 <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8003dba:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	f7fc fbea 	bl	8000598 <__aeabi_f2d>
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <ExtractKtaPixelParameters+0x480>)
 8003dca:	f7fc fa87 	bl	80002dc <__adddf3>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	f7fc fee7 	bl	8000ba8 <__aeabi_d2iz>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	b259      	sxtb	r1, r3
 8003dde:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003de2:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003dec:	4413      	add	r3, r2
 8003dee:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003df2:	460a      	mov	r2, r1
 8003df4:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003df6:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003e00:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e08:	db84      	blt.n	8003d14 <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 8003e0a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e0e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	; 0xc2f
 8003e18:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8003e1c:	bf00      	nop
 8003e1e:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bdb0      	pop	{r4, r5, r7, pc}
 8003e26:	bf00      	nop
 8003e28:	00000000 	.word	0x00000000
 8003e2c:	40000000 	.word	0x40000000
 8003e30:	3fe00000 	.word	0x3fe00000
 8003e34:	33333333 	.word	0x33333333
 8003e38:	404fb333 	.word	0x404fb333
 8003e3c:	00000000 	.word	0x00000000

08003e40 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003e40:	b5b0      	push	{r4, r5, r7, lr}
 8003e42:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e4c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e50:	6018      	str	r0, [r3, #0]
 8003e52:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e56:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003e5a:	6019      	str	r1, [r3, #0]
    int p = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 8003e62:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e66:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3368      	adds	r3, #104	; 0x68
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	0b1b      	lsrs	r3, r3, #12
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    if (KvRoCo > 7)
 8003e78:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	; 0xc2f
 8003e7c:	2b07      	cmp	r3, #7
 8003e7e:	dd05      	ble.n	8003e8c <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003e80:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e84:	3b10      	subs	r3, #16
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    }
    KvT[0] = KvRoCo;
 8003e8c:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e90:	f887 3c08 	strb.w	r3, [r7, #3080]	; 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 8003e94:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e98:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3368      	adds	r3, #104	; 0x68
 8003ea0:	881b      	ldrh	r3, [r3, #0]
 8003ea2:	121b      	asrs	r3, r3, #8
 8003ea4:	b25b      	sxtb	r3, r3
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    if (KvReCo > 7)
 8003eae:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
 8003eb2:	2b07      	cmp	r3, #7
 8003eb4:	dd05      	ble.n	8003ec2 <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 8003eb6:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003eba:	3b10      	subs	r3, #16
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    }
    KvT[2] = KvReCo;
 8003ec2:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003ec6:	f887 3c0a 	strb.w	r3, [r7, #3082]	; 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8003eca:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ece:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3368      	adds	r3, #104	; 0x68
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	111b      	asrs	r3, r3, #4
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    if (KvRoCe > 7)
 8003ee4:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	; 0xc2e
 8003ee8:	2b07      	cmp	r3, #7
 8003eea:	dd05      	ble.n	8003ef8 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8003eec:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003ef0:	3b10      	subs	r3, #16
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    }
    KvT[1] = KvRoCe;
 8003ef8:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003efc:	f887 3c09 	strb.w	r3, [r7, #3081]	; 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8003f00:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f04:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3368      	adds	r3, #104	; 0x68
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b25b      	sxtb	r3, r3
 8003f10:	f003 030f 	and.w	r3, r3, #15
 8003f14:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    if (KvReCe > 7)
 8003f18:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
 8003f1c:	2b07      	cmp	r3, #7
 8003f1e:	dd05      	ble.n	8003f2c <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 8003f20:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003f24:	3b10      	subs	r3, #16
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    }
    KvT[3] = KvReCe;
 8003f2c:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003f30:	f887 3c0b 	strb.w	r3, [r7, #3083]	; 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003f34:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f38:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3370      	adds	r3, #112	; 0x70
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	121b      	asrs	r3, r3, #8
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003f54:	e07c      	b.n	8004050 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003f5c:	e06f      	b.n	800403e <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 8003f5e:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003f62:	015b      	lsls	r3, r3, #5
 8003f64:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8003f68:	4413      	add	r3, r2
 8003f6a:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003f6e:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	da00      	bge.n	8003f78 <ExtractKvPixelParameters+0x138>
 8003f76:	331f      	adds	r3, #31
 8003f78:	115b      	asrs	r3, r3, #5
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	da00      	bge.n	8003f86 <ExtractKvPixelParameters+0x146>
 8003f84:	333f      	adds	r3, #63	; 0x3f
 8003f86:	119b      	asrs	r3, r3, #6
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	bfb8      	it	lt
 8003f9e:	425b      	neglt	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f
            kvTemp[p] = KvT[split];
 8003fa8:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	; 0xc0f
 8003fac:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003fb0:	443b      	add	r3, r7
 8003fb2:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003fb6:	ee07 3a90 	vmov	s15, r3
 8003fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fbe:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003fc2:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003fc6:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 8003fd2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003fd6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003fda:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	4413      	add	r3, r2
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fad7 	bl	8000598 <__aeabi_f2d>
 8003fea:	4604      	mov	r4, r0
 8003fec:	460d      	mov	r5, r1
 8003fee:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fc faae 	bl	8000554 <__aeabi_ui2d>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	ec43 2b11 	vmov	d1, r2, r3
 8004000:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8004238 <ExtractKvPixelParameters+0x3f8>
 8004004:	f008 f964 	bl	800c2d0 <pow>
 8004008:	ec53 2b10 	vmov	r2, r3, d0
 800400c:	4620      	mov	r0, r4
 800400e:	4629      	mov	r1, r5
 8004010:	f7fc fc44 	bl	800089c <__aeabi_ddiv>
 8004014:	4602      	mov	r2, r0
 8004016:	460b      	mov	r3, r1
 8004018:	4610      	mov	r0, r2
 800401a:	4619      	mov	r1, r3
 800401c:	f7fc fe0c 	bl	8000c38 <__aeabi_d2f>
 8004020:	4601      	mov	r1, r0
 8004022:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004026:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800402a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8004034:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8004038:	3301      	adds	r3, #1
 800403a:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 800403e:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8004042:	2b1f      	cmp	r3, #31
 8004044:	dd8b      	ble.n	8003f5e <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8004046:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 800404a:	3301      	adds	r3, #1
 800404c:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8004050:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8004054:	2b17      	cmp	r3, #23
 8004056:	f77f af7e 	ble.w	8003f56 <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 800405a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800405e:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8004062:	edd3 7a00 	vldr	s15, [r3]
 8004066:	eef0 7ae7 	vabs.f32	s15, s15
 800406a:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800406e:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8004072:	2301      	movs	r3, #1
 8004074:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8004078:	e029      	b.n	80040ce <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 800407a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800407e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004082:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	edd3 7a00 	vldr	s15, [r3]
 800408e:	eef0 7ae7 	vabs.f32	s15, s15
 8004092:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004096:	ed93 7a00 	vldr	s14, [r3]
 800409a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a2:	d50f      	bpl.n	80040c4 <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 80040a4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80040a8:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80040ac:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	edd3 7a00 	vldr	s15, [r3]
 80040b8:	eef0 7ae7 	vabs.f32	s15, s15
 80040bc:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040c0:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 80040c4:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80040c8:	3301      	adds	r3, #1
 80040ca:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 80040ce:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 80040d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040d6:	dbd0      	blt.n	800407a <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 80040de:	e00e      	b.n	80040fe <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 80040e0:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040e4:	edd3 7a00 	vldr	s15, [r3]
 80040e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040ec:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80040f0:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 80040f4:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80040f8:	3301      	adds	r3, #1
 80040fa:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 80040fe:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	f7fc fa48 	bl	8000598 <__aeabi_f2d>
 8004108:	a34e      	add	r3, pc, #312	; (adr r3, 8004244 <ExtractKvPixelParameters+0x404>)
 800410a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410e:	f7fc fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e3      	bne.n	80040e0 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 800411e:	e075      	b.n	800420c <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 8004120:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004124:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004128:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fc fa30 	bl	8000598 <__aeabi_f2d>
 8004138:	4604      	mov	r4, r0
 800413a:	460d      	mov	r5, r1
 800413c:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8004140:	4618      	mov	r0, r3
 8004142:	f7fc fa07 	bl	8000554 <__aeabi_ui2d>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	ec43 2b11 	vmov	d1, r2, r3
 800414e:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8004238 <ExtractKvPixelParameters+0x3f8>
 8004152:	f008 f8bd 	bl	800c2d0 <pow>
 8004156:	ec53 2b10 	vmov	r2, r3, d0
 800415a:	4620      	mov	r0, r4
 800415c:	4629      	mov	r1, r5
 800415e:	f7fc fa73 	bl	8000648 <__aeabi_dmul>
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	4610      	mov	r0, r2
 8004168:	4619      	mov	r1, r3
 800416a:	f7fc fd65 	bl	8000c38 <__aeabi_d2f>
 800416e:	4603      	mov	r3, r0
 8004170:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 8004174:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8004176:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	d51e      	bpl.n	80041c6 <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8004188:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f7fc fa03 	bl	8000598 <__aeabi_f2d>
 8004192:	f04f 0200 	mov.w	r2, #0
 8004196:	4b2a      	ldr	r3, [pc, #168]	; (8004240 <ExtractKvPixelParameters+0x400>)
 8004198:	f7fc f89e 	bl	80002d8 <__aeabi_dsub>
 800419c:	4602      	mov	r2, r0
 800419e:	460b      	mov	r3, r1
 80041a0:	4610      	mov	r0, r2
 80041a2:	4619      	mov	r1, r3
 80041a4:	f7fc fd00 	bl	8000ba8 <__aeabi_d2iz>
 80041a8:	4603      	mov	r3, r0
 80041aa:	b259      	sxtb	r1, r3
 80041ac:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041b0:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041ba:	4413      	add	r3, r2
 80041bc:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80041c0:	460a      	mov	r2, r1
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e01d      	b.n	8004202 <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 80041c6:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	f7fc f9e4 	bl	8000598 <__aeabi_f2d>
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <ExtractKvPixelParameters+0x400>)
 80041d6:	f7fc f881 	bl	80002dc <__adddf3>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fce1 	bl	8000ba8 <__aeabi_d2iz>
 80041e6:	4603      	mov	r3, r0
 80041e8:	b259      	sxtb	r1, r3
 80041ea:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041ee:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041f8:	4413      	add	r3, r2
 80041fa:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 80041fe:	460a      	mov	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8004202:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004206:	3301      	adds	r3, #1
 8004208:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 800420c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004210:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004214:	db84      	blt.n	8004120 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 8004216:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800421a:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004224:	461a      	mov	r2, r3
 8004226:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 800422a:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 800422e:	bf00      	nop
 8004230:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 8004234:	46bd      	mov	sp, r7
 8004236:	bdb0      	pop	{r4, r5, r7, pc}
 8004238:	00000000 	.word	0x00000000
 800423c:	40000000 	.word	0x40000000
 8004240:	3fe00000 	.word	0x3fe00000
 8004244:	33333333 	.word	0x33333333
 8004248:	404fb333 	.word	0x404fb333
 800424c:	00000000 	.word	0x00000000

08004250 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8004250:	b5b0      	push	{r4, r5, r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	3340      	adds	r3, #64	; 0x40
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	0b1b      	lsrs	r3, r3, #12
 8004262:	b29b      	uxth	r3, r3
 8004264:	b2db      	uxtb	r3, r3
 8004266:	331b      	adds	r3, #27
 8004268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3374      	adds	r3, #116	; 0x74
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b21b      	sxth	r3, r3
 8004274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004278:	b21b      	sxth	r3, r3
 800427a:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 800427c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004280:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004284:	db07      	blt.n	8004296 <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8004286:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800428a:	b29b      	uxth	r3, r3
 800428c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004290:	b29b      	uxth	r3, r3
 8004292:	b21b      	sxth	r3, r3
 8004294:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	3374      	adds	r3, #116	; 0x74
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	0a9b      	lsrs	r3, r3, #10
 800429e:	b29b      	uxth	r3, r3
 80042a0:	b21b      	sxth	r3, r3
 80042a2:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 80042a4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042a8:	2b1f      	cmp	r3, #31
 80042aa:	dd06      	ble.n	80042ba <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 80042ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b40      	subs	r3, #64	; 0x40
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	b21b      	sxth	r3, r3
 80042b8:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 80042ba:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80042be:	b29a      	uxth	r2, r3
 80042c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	4413      	add	r3, r2
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	b21b      	sxth	r3, r3
 80042cc:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	3372      	adds	r3, #114	; 0x72
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d8:	ee07 3a90 	vmov	s15, r3
 80042dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042e0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 80042e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80044b8 <ExtractCPParameters+0x268>
 80042ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f4:	dd07      	ble.n	8004306 <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 80042f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80042fa:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80044bc <ExtractCPParameters+0x26c>
 80042fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004302:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4618      	mov	r0, r3
 800430a:	f7fc f945 	bl	8000598 <__aeabi_f2d>
 800430e:	4604      	mov	r4, r0
 8004310:	460d      	mov	r5, r1
 8004312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004316:	4618      	mov	r0, r3
 8004318:	f7fc f91c 	bl	8000554 <__aeabi_ui2d>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	ec43 2b11 	vmov	d1, r2, r3
 8004324:	ed9f 0b62 	vldr	d0, [pc, #392]	; 80044b0 <ExtractCPParameters+0x260>
 8004328:	f007 ffd2 	bl	800c2d0 <pow>
 800432c:	ec53 2b10 	vmov	r2, r3, d0
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fc fab2 	bl	800089c <__aeabi_ddiv>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	f7fc fc7a 	bl	8000c38 <__aeabi_d2f>
 8004344:	4603      	mov	r3, r0
 8004346:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	3372      	adds	r3, #114	; 0x72
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	0a9b      	lsrs	r3, r3, #10
 8004350:	b29b      	uxth	r3, r3
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800435a:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800435e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004362:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8004366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800436a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436e:	dd07      	ble.n	8004380 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8004370:	edd7 7a04 	vldr	s15, [r7, #16]
 8004374:	ed9f 7a52 	vldr	s14, [pc, #328]	; 80044c0 <ExtractCPParameters+0x270>
 8004378:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800437c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8004380:	ed97 7a04 	vldr	s14, [r7, #16]
 8004384:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80044c4 <ExtractCPParameters+0x274>
 8004388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800438c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004390:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004394:	edd7 7a03 	vldr	s15, [r7, #12]
 8004398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439c:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3376      	adds	r3, #118	; 0x76
 80043a4:	881b      	ldrh	r3, [r3, #0]
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	ee07 3a90 	vmov	s15, r3
 80043ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043b0:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3370      	adds	r3, #112	; 0x70
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	111b      	asrs	r3, r3, #4
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	3308      	adds	r3, #8
 80043c6:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 80043c8:	6a38      	ldr	r0, [r7, #32]
 80043ca:	f7fc f8e5 	bl	8000598 <__aeabi_f2d>
 80043ce:	4604      	mov	r4, r0
 80043d0:	460d      	mov	r5, r1
 80043d2:	7ffb      	ldrb	r3, [r7, #31]
 80043d4:	4618      	mov	r0, r3
 80043d6:	f7fc f8bd 	bl	8000554 <__aeabi_ui2d>
 80043da:	4602      	mov	r2, r0
 80043dc:	460b      	mov	r3, r1
 80043de:	ec43 2b11 	vmov	d1, r2, r3
 80043e2:	ed9f 0b33 	vldr	d0, [pc, #204]	; 80044b0 <ExtractCPParameters+0x260>
 80043e6:	f007 ff73 	bl	800c2d0 <pow>
 80043ea:	ec53 2b10 	vmov	r2, r3, d0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fc fa53 	bl	800089c <__aeabi_ddiv>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fc fc1b 	bl	8000c38 <__aeabi_d2f>
 8004402:	4602      	mov	r2, r0
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3376      	adds	r3, #118	; 0x76
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	0a1b      	lsrs	r3, r3, #8
 8004410:	b29b      	uxth	r3, r3
 8004412:	b25b      	sxtb	r3, r3
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441c:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3370      	adds	r3, #112	; 0x70
 8004424:	881b      	ldrh	r3, [r3, #0]
 8004426:	121b      	asrs	r3, r3, #8
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 8004430:	69b8      	ldr	r0, [r7, #24]
 8004432:	f7fc f8b1 	bl	8000598 <__aeabi_f2d>
 8004436:	4604      	mov	r4, r0
 8004438:	460d      	mov	r5, r1
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc f889 	bl	8000554 <__aeabi_ui2d>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	ec43 2b11 	vmov	d1, r2, r3
 800444a:	ed9f 0b19 	vldr	d0, [pc, #100]	; 80044b0 <ExtractCPParameters+0x260>
 800444e:	f007 ff3f 	bl	800c2d0 <pow>
 8004452:	ec53 2b10 	vmov	r2, r3, d0
 8004456:	4620      	mov	r0, r4
 8004458:	4629      	mov	r1, r5
 800445a:	f7fc fa1f 	bl	800089c <__aeabi_ddiv>
 800445e:	4602      	mov	r2, r0
 8004460:	460b      	mov	r3, r1
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	f7fc fbe7 	bl	8000c38 <__aeabi_d2f>
 800446a:	4602      	mov	r2, r0
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004478:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004484:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8004488:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004492:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 8004496:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a0:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bdb0      	pop	{r4, r5, r7, pc}
 80044ac:	f3af 8000 	nop.w
 80044b0:	00000000 	.word	0x00000000
 80044b4:	40000000 	.word	0x40000000
 80044b8:	43ff8000 	.word	0x43ff8000
 80044bc:	44800000 	.word	0x44800000
 80044c0:	42800000 	.word	0x42800000
 80044c4:	43000000 	.word	0x43000000

080044c8 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3314      	adds	r3, #20
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	111b      	asrs	r3, r3, #4
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044e0:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
 80044e4:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 80044e8:	43db      	mvns	r3, r3
 80044ea:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	336a      	adds	r3, #106	; 0x6a
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044fe:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8004502:	edd7 7a02 	vldr	s15, [r7, #8]
 8004506:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800450a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	dd07      	ble.n	8004524 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 8004514:	edd7 7a02 	vldr	s15, [r7, #8]
 8004518:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004600 <ExtractCILCParameters+0x138>
 800451c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004520:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 8004524:	ed97 7a02 	vldr	s14, [r7, #8]
 8004528:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 800452c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004530:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	336a      	adds	r3, #106	; 0x6a
 8004538:	881b      	ldrh	r3, [r3, #0]
 800453a:	119b      	asrs	r3, r3, #6
 800453c:	f003 031f 	and.w	r3, r3, #31
 8004540:	ee07 3a90 	vmov	s15, r3
 8004544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004548:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 800454c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004550:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8004554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455c:	dd07      	ble.n	800456e <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 800455e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004562:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004604 <ExtractCILCParameters+0x13c>
 8004566:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800456a:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 800456e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004572:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004576:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800457a:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	336a      	adds	r3, #106	; 0x6a
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	0adb      	lsrs	r3, r3, #11
 8004586:	b29b      	uxth	r3, r3
 8004588:	ee07 3a90 	vmov	s15, r3
 800458c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004590:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8004594:	edd7 7a04 	vldr	s15, [r7, #16]
 8004598:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800459c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a4:	dd07      	ble.n	80045b6 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 80045a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80045aa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004604 <ExtractCILCParameters+0x13c>
 80045ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045b2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 80045b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ba:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80045be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045c2:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	7dfa      	ldrb	r2, [r7, #23]
 80045ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045d6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	683a      	ldr	r2, [r7, #0]
 80045de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045e2:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ee:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	42800000 	.word	0x42800000
 8004604:	42000000 	.word	0x42000000

08004608 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 800461e:	2300      	movs	r3, #0
 8004620:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 8004622:	2300      	movs	r3, #0
 8004624:	82fb      	strh	r3, [r7, #22]
 8004626:	e013      	b.n	8004650 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8004628:	8afa      	ldrh	r2, [r7, #22]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004630:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004634:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 8004638:	8afb      	ldrh	r3, [r7, #22]
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	4413      	add	r3, r2
 8004644:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004648:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800464a:	8afb      	ldrh	r3, [r7, #22]
 800464c:	3301      	adds	r3, #1
 800464e:	82fb      	strh	r3, [r7, #22]
 8004650:	8afb      	ldrh	r3, [r7, #22]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d9e8      	bls.n	8004628 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 8004656:	2300      	movs	r3, #0
 8004658:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 800465a:	e02a      	b.n	80046b2 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	3340      	adds	r3, #64	; 0x40
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	4413      	add	r3, r2
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 800466c:	8aba      	ldrh	r2, [r7, #20]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004674:	8af9      	ldrh	r1, [r7, #22]
 8004676:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 800467a:	8abb      	ldrh	r3, [r7, #20]
 800467c:	3301      	adds	r3, #1
 800467e:	82bb      	strh	r3, [r7, #20]
 8004680:	e014      	b.n	80046ac <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8004682:	8afb      	ldrh	r3, [r7, #22]
 8004684:	3340      	adds	r3, #64	; 0x40
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	4413      	add	r3, r2
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8004696:	8a7b      	ldrh	r3, [r7, #18]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	8afa      	ldrh	r2, [r7, #22]
 80046a4:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 80046a6:	8a7b      	ldrh	r3, [r7, #18]
 80046a8:	3301      	adds	r3, #1
 80046aa:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 80046ac:	8afb      	ldrh	r3, [r7, #22]
 80046ae:	3301      	adds	r3, #1
 80046b0:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 80046b2:	8afb      	ldrh	r3, [r7, #22]
 80046b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046b8:	d205      	bcs.n	80046c6 <ExtractDeviatingPixels+0xbe>
 80046ba:	8abb      	ldrh	r3, [r7, #20]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d802      	bhi.n	80046c6 <ExtractDeviatingPixels+0xbe>
 80046c0:	8a7b      	ldrh	r3, [r7, #18]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d9ca      	bls.n	800465c <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 80046c6:	8abb      	ldrh	r3, [r7, #20]
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d903      	bls.n	80046d4 <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 80046cc:	f06f 0302 	mvn.w	r3, #2
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	e08f      	b.n	80047f4 <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 80046d4:	8a7b      	ldrh	r3, [r7, #18]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d903      	bls.n	80046e2 <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 80046da:	f06f 0303 	mvn.w	r3, #3
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	e088      	b.n	80047f4 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 80046e2:	8aba      	ldrh	r2, [r7, #20]
 80046e4:	8a7b      	ldrh	r3, [r7, #18]
 80046e6:	4413      	add	r3, r2
 80046e8:	2b04      	cmp	r3, #4
 80046ea:	dd03      	ble.n	80046f4 <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 80046ec:	f06f 0304 	mvn.w	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e07f      	b.n	80047f4 <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	82fb      	strh	r3, [r7, #22]
 80046f8:	e022      	b.n	8004740 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80046fa:	8afb      	ldrh	r3, [r7, #22]
 80046fc:	3301      	adds	r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	e017      	b.n	8004732 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8004702:	8afa      	ldrh	r2, [r7, #22]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800470a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	68ba      	ldr	r2, [r7, #8]
 8004712:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004716:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800471a:	4619      	mov	r1, r3
 800471c:	f000 f86f 	bl	80047fe <CheckAdjacentPixels>
 8004720:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	e064      	b.n	80047f6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	3301      	adds	r3, #1
 8004730:	60bb      	str	r3, [r7, #8]
 8004732:	8abb      	ldrh	r3, [r7, #20]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	429a      	cmp	r2, r3
 8004738:	dbe3      	blt.n	8004702 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800473a:	8afb      	ldrh	r3, [r7, #22]
 800473c:	3301      	adds	r3, #1
 800473e:	82fb      	strh	r3, [r7, #22]
 8004740:	8afa      	ldrh	r2, [r7, #22]
 8004742:	8abb      	ldrh	r3, [r7, #20]
 8004744:	429a      	cmp	r2, r3
 8004746:	d3d8      	bcc.n	80046fa <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8004748:	2300      	movs	r3, #0
 800474a:	82fb      	strh	r3, [r7, #22]
 800474c:	e024      	b.n	8004798 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	3301      	adds	r3, #1
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	e019      	b.n	800478a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 8004756:	8afb      	ldrh	r3, [r7, #22]
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	4413      	add	r3, r2
 8004762:	8858      	ldrh	r0, [r3, #2]
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	885b      	ldrh	r3, [r3, #2]
 8004772:	4619      	mov	r1, r3
 8004774:	f000 f843 	bl	80047fe <CheckAdjacentPixels>
 8004778:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	e038      	b.n	80047f6 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3301      	adds	r3, #1
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	8a7b      	ldrh	r3, [r7, #18]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	dbe1      	blt.n	8004756 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8004792:	8afb      	ldrh	r3, [r7, #22]
 8004794:	3301      	adds	r3, #1
 8004796:	82fb      	strh	r3, [r7, #22]
 8004798:	8afa      	ldrh	r2, [r7, #22]
 800479a:	8a7b      	ldrh	r3, [r7, #18]
 800479c:	429a      	cmp	r2, r3
 800479e:	d3d6      	bcc.n	800474e <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	82fb      	strh	r3, [r7, #22]
 80047a4:	e022      	b.n	80047ec <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	e018      	b.n	80047de <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 80047ac:	8afa      	ldrh	r2, [r7, #22]
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80047b4:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80047c0:	005b      	lsls	r3, r3, #1
 80047c2:	4413      	add	r3, r2
 80047c4:	885b      	ldrh	r3, [r3, #2]
 80047c6:	4619      	mov	r1, r3
 80047c8:	f000 f819 	bl	80047fe <CheckAdjacentPixels>
 80047cc:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d001      	beq.n	80047d8 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	e00e      	b.n	80047f6 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3301      	adds	r3, #1
 80047dc:	60bb      	str	r3, [r7, #8]
 80047de:	8a7b      	ldrh	r3, [r7, #18]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	dbe2      	blt.n	80047ac <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80047e6:	8afb      	ldrh	r3, [r7, #22]
 80047e8:	3301      	adds	r3, #1
 80047ea:	82fb      	strh	r3, [r7, #22]
 80047ec:	8afa      	ldrh	r2, [r7, #22]
 80047ee:	8abb      	ldrh	r3, [r7, #20]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3d8      	bcc.n	80047a6 <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 80047f4:	68fb      	ldr	r3, [r7, #12]

}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 80047fe:	b480      	push	{r7}
 8004800:	b087      	sub	sp, #28
 8004802:	af00      	add	r7, sp, #0
 8004804:	4603      	mov	r3, r0
 8004806:	460a      	mov	r2, r1
 8004808:	80fb      	strh	r3, [r7, #6]
 800480a:	4613      	mov	r3, r2
 800480c:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 8004814:	88bb      	ldrh	r3, [r7, #4]
 8004816:	095b      	lsrs	r3, r3, #5
 8004818:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 800481a:	8afb      	ldrh	r3, [r7, #22]
 800481c:	015b      	lsls	r3, r3, #5
 800481e:	b29b      	uxth	r3, r3
 8004820:	88fa      	ldrh	r2, [r7, #6]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 8004826:	8abb      	ldrh	r3, [r7, #20]
 8004828:	015b      	lsls	r3, r3, #5
 800482a:	b29b      	uxth	r3, r3
 800482c:	88ba      	ldrh	r2, [r7, #4]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 8004832:	8afa      	ldrh	r2, [r7, #22]
 8004834:	8abb      	ldrh	r3, [r7, #20]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	db10      	blt.n	8004864 <CheckAdjacentPixels+0x66>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b01      	cmp	r3, #1
 8004846:	dc0d      	bgt.n	8004864 <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 8004848:	8a7a      	ldrh	r2, [r7, #18]
 800484a:	8a3b      	ldrh	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	db05      	blt.n	8004864 <CheckAdjacentPixels+0x66>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2b01      	cmp	r3, #1
 800485c:	dc02      	bgt.n	8004864 <CheckAdjacentPixels+0x66>
        {
            return -6;
 800485e:	f06f 0305 	mvn.w	r3, #5
 8004862:	e000      	b.n	8004866 <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 8004864:	2300      	movs	r3, #0
 }
 8004866:	4618      	mov	r0, r3
 8004868:	371c      	adds	r7, #28
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr

08004872 <GetMedian>:

//------------------------------------------------------------------------------

static float GetMedian(float *values, int n)
 {
 8004872:	b480      	push	{r7}
 8004874:	b087      	sub	sp, #28
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
 800487a:	6039      	str	r1, [r7, #0]
    float temp;

    for(int i=0; i<n-1; i++)
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	e034      	b.n	80048ec <GetMedian+0x7a>
    {
        for(int j=i+1; j<n; j++)
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	3301      	adds	r3, #1
 8004886:	613b      	str	r3, [r7, #16]
 8004888:	e029      	b.n	80048de <GetMedian+0x6c>
        {
            if(values[j] < values[i])
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4413      	add	r3, r2
 8004892:	ed93 7a00 	vldr	s14, [r3]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	edd3 7a00 	vldr	s15, [r3]
 80048a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048aa:	d515      	bpl.n	80048d8 <GetMedian+0x66>
            {
                temp = values[i];
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	4413      	add	r3, r2
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]
                values[i] = values[j];
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	441a      	add	r2, r3
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	440b      	add	r3, r1
 80048c8:	6812      	ldr	r2, [r2, #0]
 80048ca:	601a      	str	r2, [r3, #0]
                values[j] = temp;
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	4413      	add	r3, r2
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	601a      	str	r2, [r3, #0]
        for(int j=i+1; j<n; j++)
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3301      	adds	r3, #1
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	dbd1      	blt.n	800488a <GetMedian+0x18>
    for(int i=0; i<n-1; i++)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3301      	adds	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	429a      	cmp	r2, r3
 80048f4:	dbc5      	blt.n	8004882 <GetMedian+0x10>
            }
        }
    }

    if(n%2==0)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d11b      	bne.n	8004938 <GetMedian+0xc6>
    {
        return ((values[n/2] + values[n/2 - 1]) / 2.0);
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	0fda      	lsrs	r2, r3, #31
 8004904:	4413      	add	r3, r2
 8004906:	105b      	asrs	r3, r3, #1
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	4413      	add	r3, r2
 800490e:	ed93 7a00 	vldr	s14, [r3]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	0fda      	lsrs	r2, r3, #31
 8004916:	4413      	add	r3, r2
 8004918:	105b      	asrs	r3, r3, #1
 800491a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800491e:	3b01      	subs	r3, #1
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	4413      	add	r3, r2
 8004926:	edd3 7a00 	vldr	s15, [r3]
 800492a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800492e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004936:	e008      	b.n	800494a <GetMedian+0xd8>

    }
    else
    {
        return values[n/2];
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	0fda      	lsrs	r2, r3, #31
 800493c:	4413      	add	r3, r2
 800493e:	105b      	asrs	r3, r3, #1
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4413      	add	r3, r2
 8004946:	edd3 7a00 	vldr	s15, [r3]
    }

 }
 800494a:	eeb0 0a67 	vmov.f32	s0, s15
 800494e:	371c      	adds	r7, #28
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <IsPixelBad>:

//------------------------------------------------------------------------------

static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	6039      	str	r1, [r7, #0]
 8004962:	80fb      	strh	r3, [r7, #6]
    for(int i=0; i<5; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e017      	b.n	800499a <IsPixelBad+0x42>
    {
        if(pixel == params->outlierPixels[i] || pixel == params->brokenPixels[i])
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004972:	005b      	lsls	r3, r3, #1
 8004974:	4413      	add	r3, r2
 8004976:	885b      	ldrh	r3, [r3, #2]
 8004978:	88fa      	ldrh	r2, [r7, #6]
 800497a:	429a      	cmp	r2, r3
 800497c:	d008      	beq.n	8004990 <IsPixelBad+0x38>
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004986:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	429a      	cmp	r2, r3
 800498e:	d101      	bne.n	8004994 <IsPixelBad+0x3c>
        {
            return 1;
 8004990:	2301      	movs	r3, #1
 8004992:	e006      	b.n	80049a2 <IsPixelBad+0x4a>
    for(int i=0; i<5; i++)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2b04      	cmp	r3, #4
 800499e:	dde4      	ble.n	800496a <IsPixelBad+0x12>
        }
    }

    return 0;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_I2C_EnableClockStretching>:
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	601a      	str	r2, [r3, #0]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_I2C_DisableGeneralCall>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_I2C_SetOwnAddress2>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	60f8      	str	r0, [r7, #12]
 80049f6:	60b9      	str	r1, [r7, #8]
 80049f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a02:	f023 0306 	bic.w	r3, r3, #6
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	60da      	str	r2, [r3, #12]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_I2C_DisableOwnAddress2>:
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <LL_I2C_EnableAutoEndMode>:
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	605a      	str	r2, [r3, #4]
}
 8004a52:	bf00      	nop
 8004a54:	370c      	adds	r7, #12
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
	...

08004a60 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a68:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a6c:	4907      	ldr	r1, [pc, #28]	; (8004a8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	40021000 	.word	0x40021000

08004a90 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a98:	4b08      	ldr	r3, [pc, #32]	; (8004abc <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a9c:	4907      	ldr	r1, [pc, #28]	; (8004abc <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <LL_APB1_GRP1_EnableClock+0x2c>)
 8004aa6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004aae:	68fb      	ldr	r3, [r7, #12]
}
 8004ab0:	bf00      	nop
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	40021000 	.word	0x40021000

08004ac0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004ac8:	1d39      	adds	r1, r7, #4
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <__io_putchar+0x20>)
 8004ad2:	f002 fb5d 	bl	8007190 <HAL_UART_Transmit>
	return ch;
 8004ad6:	687b      	ldr	r3, [r7, #4]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	20000250 	.word	0x20000250

08004ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004ae4:	b5b0      	push	{r4, r5, r7, lr}
 8004ae6:	f5ad 6d53 	sub.w	sp, sp, #3376	; 0xd30
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004aec:	f000 fcc9 	bl	8005482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004af0:	f000 f8f2 	bl	8004cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004af4:	f000 fa52 	bl	8004f9c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004af8:	f000 f93a 	bl	8004d70 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004afc:	f000 f9fa 	bl	8004ef4 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8004b00:	f000 f9be 	bl	8004e80 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8004b04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b08:	f000 fd2c 	bl	8005564 <HAL_Delay>
  MLX90640_I2CInit(/*hi2c1*/);
 8004b0c:	f7fc fb54 	bl	80011b8 <MLX90640_I2CInit>
  int status;
  uint16_t eeMLX90640[832];

  status = MLX90640_DumpEE(mlx_addr, eeMLX90640);
 8004b10:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <main+0x1c0>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fc fc9b 	bl	8001458 <MLX90640_DumpEE>
 8004b22:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004b26:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d002      	beq.n	8004b34 <main+0x50>
	  printf("Failed to load system parameters of MLX90640\n");
 8004b2e:	485e      	ldr	r0, [pc, #376]	; (8004ca8 <main+0x1c4>)
 8004b30:	f005 fc30 	bl	800a394 <puts>

  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8004b34:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004b38:	495c      	ldr	r1, [pc, #368]	; (8004cac <main+0x1c8>)
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7fc fe1b 	bl	8001776 <MLX90640_ExtractParameters>
 8004b40:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004b44:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d004      	beq.n	8004b56 <main+0x72>
	  printf("Number of pixel errors: %d\n", status);
 8004b4c:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004b50:	4857      	ldr	r0, [pc, #348]	; (8004cb0 <main+0x1cc>)
 8004b52:	f005 fbb9 	bl	800a2c8 <iprintf>
  MLX90640_SetRefreshRate(mlx_addr, 0x05);
 8004b56:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <main+0x1c0>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2105      	movs	r1, #5
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fc fe4e 	bl	8001800 <MLX90640_SetRefreshRate>

  status = MLX90640_GetCurMode(mlx_addr);
 8004b64:	4b4f      	ldr	r3, [pc, #316]	; (8004ca4 <main+0x1c0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fc fe78 	bl	8001860 <MLX90640_GetCurMode>
 8004b70:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  	  printf("Current mode: %d\n", status);
 8004b74:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004b78:	484e      	ldr	r0, [pc, #312]	; (8004cb4 <main+0x1d0>)
 8004b7a:	f005 fba5 	bl	800a2c8 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004b7e:	4b4e      	ldr	r3, [pc, #312]	; (8004cb8 <main+0x1d4>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b88:	d359      	bcc.n	8004c3e <main+0x15a>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	; (8004cb8 <main+0x1d4>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	625a      	str	r2, [r3, #36]	; 0x24
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004b92:	2300      	movs	r3, #0
 8004b94:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004b98:	e04d      	b.n	8004c36 <main+0x152>
		  {
		    uint16_t mlx90640Frame[834];
		    int status = MLX90640_GetFrameData(mlx_addr, mlx90640Frame);
 8004b9a:	4b42      	ldr	r3, [pc, #264]	; (8004ca4 <main+0x1c0>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	1d3a      	adds	r2, r7, #4
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fc fc6a 	bl	800147e <MLX90640_GetFrameData>
 8004baa:	f8c7 0d20 	str.w	r0, [r7, #3360]	; 0xd20
		    if (status < 0)
 8004bae:	f8d7 3d20 	ldr.w	r3, [r7, #3360]	; 0xd20
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da04      	bge.n	8004bc0 <main+0xdc>
		    {
		    	printf("GetFrame Error: %d\n", status);
 8004bb6:	f8d7 1d20 	ldr.w	r1, [r7, #3360]	; 0xd20
 8004bba:	4840      	ldr	r0, [pc, #256]	; (8004cbc <main+0x1d8>)
 8004bbc:	f005 fb84 	bl	800a2c8 <iprintf>
		    };
		    float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);
 8004bc0:	1d3b      	adds	r3, r7, #4
 8004bc2:	493a      	ldr	r1, [pc, #232]	; (8004cac <main+0x1c8>)
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fd fbfb 	bl	80023c0 <MLX90640_GetTa>
 8004bca:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004bce:	ed83 0a00 	vstr	s0, [r3]

		    float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8004bd2:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004bd6:	edd3 7a00 	vldr	s15, [r3]
 8004bda:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004bde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004be2:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8004be6:	edc3 7a00 	vstr	s15, [r3]
		    float emissivity = MLX90640_CONFIG_EMISSIVITY;
 8004bea:	4b35      	ldr	r3, [pc, #212]	; (8004cc0 <main+0x1dc>)
 8004bec:	f607 5214 	addw	r2, r7, #3348	; 0xd14
 8004bf0:	6013      	str	r3, [r2, #0]

		    MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 8004bf2:	1d3b      	adds	r3, r7, #4
 8004bf4:	4a33      	ldr	r2, [pc, #204]	; (8004cc4 <main+0x1e0>)
 8004bf6:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8004bfa:	edd1 0a00 	vldr	s1, [r1]
 8004bfe:	f607 5114 	addw	r1, r7, #3348	; 0xd14
 8004c02:	ed91 0a00 	vldr	s0, [r1]
 8004c06:	4929      	ldr	r1, [pc, #164]	; (8004cac <main+0x1c8>)
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fc fe49 	bl	80018a0 <MLX90640_CalculateTo>
		    int mode = MLX90640_GetCurMode(mlx_addr);
 8004c0e:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <main+0x1c0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fc fe23 	bl	8001860 <MLX90640_GetCurMode>
 8004c1a:	f8c7 0d10 	str.w	r0, [r7, #3344]	; 0xd10
		    MLX90640_BadPixelsCorrection(mlx90640.brokenPixels, mlx90640To, mode, &mlx90640);
 8004c1e:	4b23      	ldr	r3, [pc, #140]	; (8004cac <main+0x1c8>)
 8004c20:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	; 0xd10
 8004c24:	4927      	ldr	r1, [pc, #156]	; (8004cc4 <main+0x1e0>)
 8004c26:	4828      	ldr	r0, [pc, #160]	; (8004cc8 <main+0x1e4>)
 8004c28:	f7fd fc5e 	bl	80024e8 <MLX90640_BadPixelsCorrection>
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004c2c:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004c30:	3301      	adds	r3, #1
 8004c32:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004c36:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	ddad      	ble.n	8004b9a <main+0xb6>
		  }

	  }

	  if (send_usart == 1)
 8004c3e:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <main+0x1e8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d19b      	bne.n	8004b7e <main+0x9a>
	  {
		  send_usart = 0;
 8004c46:	4b21      	ldr	r3, [pc, #132]	; (8004ccc <main+0x1e8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 768; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004c52:	e021      	b.n	8004c98 <main+0x1b4>
		  {
			  int64_t data = (int)(mlx90640To[i] * 100);
 8004c54:	4a1b      	ldr	r2, [pc, #108]	; (8004cc4 <main+0x1e0>)
 8004c56:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	edd3 7a00 	vldr	s15, [r3]
 8004c62:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004cd0 <main+0x1ec>
 8004c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c6e:	ee17 2a90 	vmov	r2, s15
 8004c72:	17d3      	asrs	r3, r2, #31
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004c7c:	e943 4502 	strd	r4, r5, [r3, #-8]
			  HAL_UART_Transmit(&huart2, (uint8_t*)&data, 8, 100);
 8004c80:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8004c84:	2364      	movs	r3, #100	; 0x64
 8004c86:	2208      	movs	r2, #8
 8004c88:	4812      	ldr	r0, [pc, #72]	; (8004cd4 <main+0x1f0>)
 8004c8a:	f002 fa81 	bl	8007190 <HAL_UART_Transmit>
		  for (int i = 0; i < 768; i++)
 8004c8e:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c92:	3301      	adds	r3, #1
 8004c94:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004c98:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ca0:	dbd8      	blt.n	8004c54 <main+0x170>
	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004ca2:	e76c      	b.n	8004b7e <main+0x9a>
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	0800d1b8 	.word	0x0800d1b8
 8004cac:	20000ee4 	.word	0x20000ee4
 8004cb0:	0800d1e8 	.word	0x0800d1e8
 8004cb4:	0800d204 	.word	0x0800d204
 8004cb8:	20000204 	.word	0x20000204
 8004cbc:	0800d218 	.word	0x0800d218
 8004cc0:	3f733333 	.word	0x3f733333
 8004cc4:	200002e4 	.word	0x200002e4
 8004cc8:	2000214c 	.word	0x2000214c
 8004ccc:	20002164 	.word	0x20002164
 8004cd0:	42c80000 	.word	0x42c80000
 8004cd4:	20000250 	.word	0x20000250

08004cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b094      	sub	sp, #80	; 0x50
 8004cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cde:	f107 0318 	add.w	r3, r7, #24
 8004ce2:	2238      	movs	r2, #56	; 0x38
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f005 fc34 	bl	800a554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cec:	1d3b      	adds	r3, r7, #4
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	605a      	str	r2, [r3, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
 8004cf6:	60da      	str	r2, [r3, #12]
 8004cf8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004cfa:	2000      	movs	r0, #0
 8004cfc:	f000 ffe2 	bl	8005cc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004d00:	2302      	movs	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d0a:	2340      	movs	r3, #64	; 0x40
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004d12:	2302      	movs	r3, #2
 8004d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004d16:	2304      	movs	r3, #4
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004d1a:	2355      	movs	r3, #85	; 0x55
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d1e:	2302      	movs	r3, #2
 8004d20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004d22:	2302      	movs	r3, #2
 8004d24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004d26:	2302      	movs	r3, #2
 8004d28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d2a:	f107 0318 	add.w	r3, r7, #24
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 f87c 	bl	8005e2c <HAL_RCC_OscConfig>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004d3a:	f000 f9bb 	bl	80050b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d3e:	230f      	movs	r3, #15
 8004d40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d42:	2303      	movs	r3, #3
 8004d44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d46:	2300      	movs	r3, #0
 8004d48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004d52:	1d3b      	adds	r3, r7, #4
 8004d54:	2104      	movs	r1, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f001 fb7a 	bl	8006450 <HAL_RCC_ClockConfig>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d001      	beq.n	8004d66 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004d62:	f000 f9a7 	bl	80050b4 <Error_Handler>
  }
}
 8004d66:	bf00      	nop
 8004d68:	3750      	adds	r7, #80	; 0x50
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b0a2      	sub	sp, #136	; 0x88
 8004d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004d76:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	605a      	str	r2, [r3, #4]
 8004d80:	609a      	str	r2, [r3, #8]
 8004d82:	60da      	str	r2, [r3, #12]
 8004d84:	611a      	str	r2, [r3, #16]
 8004d86:	615a      	str	r2, [r3, #20]
 8004d88:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d8e:	2200      	movs	r2, #0
 8004d90:	601a      	str	r2, [r3, #0]
 8004d92:	605a      	str	r2, [r3, #4]
 8004d94:	609a      	str	r2, [r3, #8]
 8004d96:	60da      	str	r2, [r3, #12]
 8004d98:	611a      	str	r2, [r3, #16]
 8004d9a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d9c:	1d3b      	adds	r3, r7, #4
 8004d9e:	2250      	movs	r2, #80	; 0x50
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f005 fbd6 	bl	800a554 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004da8:	2340      	movs	r3, #64	; 0x40
 8004daa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004dac:	2300      	movs	r3, #0
 8004dae:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004db0:	1d3b      	adds	r3, r7, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f001 fd68 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 8004dbe:	f000 f979 	bl	80050b4 <Error_Handler>
  }

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004dc2:	2002      	movs	r0, #2
 8004dc4:	f7ff fe4c 	bl	8004a60 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8-BOOT0   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dcc:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004dce:	2302      	movs	r3, #2
 8004dd0:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004dde:	2304      	movs	r3, #4
 8004de0:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004de2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004de6:	4619      	mov	r1, r3
 8004de8:	4822      	ldr	r0, [pc, #136]	; (8004e74 <MX_I2C1_Init+0x104>)
 8004dea:	f004 fbf8 	bl	80095de <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df2:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004df4:	2302      	movs	r3, #2
 8004df6:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004e00:	2300      	movs	r3, #0
 8004e02:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004e04:	2304      	movs	r3, #4
 8004e06:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4819      	ldr	r0, [pc, #100]	; (8004e74 <MX_I2C1_Init+0x104>)
 8004e10:	f004 fbe5 	bl	80095de <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8004e14:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004e18:	f7ff fe3a 	bl	8004a90 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  I2C_InitStruct.Timing = 0x10802D9B;
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <MX_I2C1_Init+0x108>)
 8004e22:	673b      	str	r3, [r7, #112]	; 0x70
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8004e24:	2300      	movs	r3, #0
 8004e26:	677b      	str	r3, [r7, #116]	; 0x74
  I2C_InitStruct.DigitalFilter = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	67bb      	str	r3, [r7, #120]	; 0x78
  I2C_InitStruct.OwnAddress1 = 0;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004e36:	2300      	movs	r3, #0
 8004e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8004e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004e40:	4619      	mov	r1, r3
 8004e42:	480e      	ldr	r0, [pc, #56]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e44:	f004 fcdc 	bl	8009800 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8004e48:	480c      	ldr	r0, [pc, #48]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e4a:	f7ff fdf8 	bl	8004a3e <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	480a      	ldr	r0, [pc, #40]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e54:	f7ff fdcb 	bl	80049ee <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8004e58:	4808      	ldr	r0, [pc, #32]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e5a:	f7ff fde0 	bl	8004a1e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8004e5e:	4807      	ldr	r0, [pc, #28]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e60:	f7ff fdb5 	bl	80049ce <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8004e64:	4805      	ldr	r0, [pc, #20]	; (8004e7c <MX_I2C1_Init+0x10c>)
 8004e66:	f7ff fda2 	bl	80049ae <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004e6a:	bf00      	nop
 8004e6c:	3788      	adds	r7, #136	; 0x88
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	48000400 	.word	0x48000400
 8004e78:	10802d9b 	.word	0x10802d9b
 8004e7c:	40005400 	.word	0x40005400

08004e80 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e86:	1d3b      	adds	r3, r7, #4
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e90:	4b16      	ldr	r3, [pc, #88]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004e92:	4a17      	ldr	r2, [pc, #92]	; (8004ef0 <MX_TIM7_Init+0x70>)
 8004e94:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004e98:	f244 2267 	movw	r2, #16999	; 0x4267
 8004e9c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e9e:	4b13      	ldr	r3, [pc, #76]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8004ea4:	4b11      	ldr	r3, [pc, #68]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004ea6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004eaa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004eac:	4b0f      	ldr	r3, [pc, #60]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004eb2:	480e      	ldr	r0, [pc, #56]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004eb4:	f001 ff24 	bl	8006d00 <HAL_TIM_Base_Init>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004ebe:	f000 f8f9 	bl	80050b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004eca:	1d3b      	adds	r3, r7, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4807      	ldr	r0, [pc, #28]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004ed0:	f002 f880 	bl	8006fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004eda:	f000 f8eb 	bl	80050b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 8004ede:	4803      	ldr	r0, [pc, #12]	; (8004eec <MX_TIM7_Init+0x6c>)
 8004ee0:	f001 ff66 	bl	8006db0 <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	20000204 	.word	0x20000204
 8004ef0:	40001400 	.word	0x40001400

08004ef4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004ef8:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004efa:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <MX_USART2_UART_Init+0x9c>)
 8004efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8004efe:	4b23      	ldr	r3, [pc, #140]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <MX_USART2_UART_Init+0xa0>)
 8004f02:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004f04:	4b21      	ldr	r3, [pc, #132]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004f0a:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004f16:	4b1d      	ldr	r3, [pc, #116]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f18:	220c      	movs	r2, #12
 8004f1a:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f1c:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f22:	4b1a      	ldr	r3, [pc, #104]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f28:	4b18      	ldr	r3, [pc, #96]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f2e:	4b17      	ldr	r3, [pc, #92]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f34:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004f3a:	4814      	ldr	r0, [pc, #80]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f3c:	f002 f8d8 	bl	80070f0 <HAL_UART_Init>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004f46:	f000 f8b5 	bl	80050b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	480f      	ldr	r0, [pc, #60]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f4e:	f004 f930 	bl	80091b2 <HAL_UARTEx_SetTxFifoThreshold>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004f58:	f000 f8ac 	bl	80050b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	480b      	ldr	r0, [pc, #44]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f60:	f004 f965 	bl	800922e <HAL_UARTEx_SetRxFifoThreshold>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d001      	beq.n	8004f6e <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004f6a:	f000 f8a3 	bl	80050b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004f6e:	4807      	ldr	r0, [pc, #28]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f70:	f004 f8e6 	bl	8009140 <HAL_UARTEx_DisableFifoMode>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004f7a:	f000 f89b 	bl	80050b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &usart1Buf, 1); 	//Enable interrupt
 8004f7e:	2201      	movs	r2, #1
 8004f80:	4905      	ldr	r1, [pc, #20]	; (8004f98 <MX_USART2_UART_Init+0xa4>)
 8004f82:	4802      	ldr	r0, [pc, #8]	; (8004f8c <MX_USART2_UART_Init+0x98>)
 8004f84:	f002 f992 	bl	80072ac <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8004f88:	bf00      	nop
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000250 	.word	0x20000250
 8004f90:	40004400 	.word	0x40004400
 8004f94:	0007a120 	.word	0x0007a120
 8004f98:	20002160 	.word	0x20002160

08004f9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa2:	f107 0314 	add.w	r3, r7, #20
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	605a      	str	r2, [r3, #4]
 8004fac:	609a      	str	r2, [r3, #8]
 8004fae:	60da      	str	r2, [r3, #12]
 8004fb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fb2:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb6:	4a2e      	ldr	r2, [pc, #184]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fb8:	f043 0304 	orr.w	r3, r3, #4
 8004fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fbe:	4b2c      	ldr	r3, [pc, #176]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	613b      	str	r3, [r7, #16]
 8004fc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fca:	4b29      	ldr	r3, [pc, #164]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fce:	4a28      	ldr	r2, [pc, #160]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fd0:	f043 0320 	orr.w	r3, r3, #32
 8004fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fd6:	4b26      	ldr	r3, [pc, #152]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fda:	f003 0320 	and.w	r3, r3, #32
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe2:	4b23      	ldr	r3, [pc, #140]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004fe8:	f043 0301 	orr.w	r3, r3, #1
 8004fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	60bb      	str	r3, [r7, #8]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <MX_GPIO_Init+0xd4>)
 8004ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <MX_GPIO_Init+0xd4>)
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005006:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <MX_GPIO_Init+0xd4>)
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	607b      	str	r3, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005012:	2200      	movs	r2, #0
 8005014:	2120      	movs	r1, #32
 8005016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800501a:	f000 fe17 	bl	8005c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800501e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005024:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8005028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800502e:	f107 0314 	add.w	r3, r7, #20
 8005032:	4619      	mov	r1, r3
 8005034:	480f      	ldr	r0, [pc, #60]	; (8005074 <MX_GPIO_Init+0xd8>)
 8005036:	f000 fc87 	bl	8005948 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800503a:	2320      	movs	r3, #32
 800503c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800503e:	2301      	movs	r3, #1
 8005040:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005042:	2300      	movs	r3, #0
 8005044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800504a:	f107 0314 	add.w	r3, r7, #20
 800504e:	4619      	mov	r1, r3
 8005050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005054:	f000 fc78 	bl	8005948 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005058:	2200      	movs	r2, #0
 800505a:	2100      	movs	r1, #0
 800505c:	2028      	movs	r0, #40	; 0x28
 800505e:	f000 fb7e 	bl	800575e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005062:	2028      	movs	r0, #40	; 0x28
 8005064:	f000 fb95 	bl	8005792 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005068:	bf00      	nop
 800506a:	3728      	adds	r7, #40	; 0x28
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	48000800 	.word	0x48000800

08005078 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a07      	ldr	r2, [pc, #28]	; (80050a4 <HAL_UART_RxCpltCallback+0x2c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d107      	bne.n	800509a <HAL_UART_RxCpltCallback+0x22>
	{
		send_usart = 1;
 800508a:	4b07      	ldr	r3, [pc, #28]	; (80050a8 <HAL_UART_RxCpltCallback+0x30>)
 800508c:	2201      	movs	r2, #1
 800508e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &usart1Buf, 1);
 8005090:	2201      	movs	r2, #1
 8005092:	4906      	ldr	r1, [pc, #24]	; (80050ac <HAL_UART_RxCpltCallback+0x34>)
 8005094:	4806      	ldr	r0, [pc, #24]	; (80050b0 <HAL_UART_RxCpltCallback+0x38>)
 8005096:	f002 f909 	bl	80072ac <HAL_UART_Receive_IT>
	}
}
 800509a:	bf00      	nop
 800509c:	3708      	adds	r7, #8
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40004400 	.word	0x40004400
 80050a8:	20002164 	.word	0x20002164
 80050ac:	20002160 	.word	0x20002160
 80050b0:	20000250 	.word	0x20000250

080050b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050b8:	b672      	cpsid	i
}
 80050ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050bc:	e7fe      	b.n	80050bc <Error_Handler+0x8>
	...

080050c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050c6:	4b0f      	ldr	r3, [pc, #60]	; (8005104 <HAL_MspInit+0x44>)
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	4a0e      	ldr	r2, [pc, #56]	; (8005104 <HAL_MspInit+0x44>)
 80050cc:	f043 0301 	orr.w	r3, r3, #1
 80050d0:	6613      	str	r3, [r2, #96]	; 0x60
 80050d2:	4b0c      	ldr	r3, [pc, #48]	; (8005104 <HAL_MspInit+0x44>)
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_MspInit+0x44>)
 80050e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e2:	4a08      	ldr	r2, [pc, #32]	; (8005104 <HAL_MspInit+0x44>)
 80050e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050e8:	6593      	str	r3, [r2, #88]	; 0x58
 80050ea:	4b06      	ldr	r3, [pc, #24]	; (8005104 <HAL_MspInit+0x44>)
 80050ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80050f6:	f000 fe89 	bl	8005e0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050fa:	bf00      	nop
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	40021000 	.word	0x40021000

08005108 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0a      	ldr	r2, [pc, #40]	; (8005140 <HAL_TIM_Base_MspInit+0x38>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10b      	bne.n	8005132 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800511a:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <HAL_TIM_Base_MspInit+0x3c>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a09      	ldr	r2, [pc, #36]	; (8005144 <HAL_TIM_Base_MspInit+0x3c>)
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
 8005126:	4b07      	ldr	r3, [pc, #28]	; (8005144 <HAL_TIM_Base_MspInit+0x3c>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	f003 0320 	and.w	r3, r3, #32
 800512e:	60fb      	str	r3, [r7, #12]
 8005130:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005132:	bf00      	nop
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40001400 	.word	0x40001400
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b09e      	sub	sp, #120	; 0x78
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005150:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005154:	2200      	movs	r2, #0
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	605a      	str	r2, [r3, #4]
 800515a:	609a      	str	r2, [r3, #8]
 800515c:	60da      	str	r2, [r3, #12]
 800515e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005160:	f107 0314 	add.w	r3, r7, #20
 8005164:	2250      	movs	r2, #80	; 0x50
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f005 f9f3 	bl	800a554 <memset>
  if(huart->Instance==USART2)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a23      	ldr	r2, [pc, #140]	; (8005200 <HAL_UART_MspInit+0xb8>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d13e      	bne.n	80051f6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005178:	2302      	movs	r3, #2
 800517a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800517c:	2300      	movs	r3, #0
 800517e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005180:	f107 0314 	add.w	r3, r7, #20
 8005184:	4618      	mov	r0, r3
 8005186:	f001 fb7f 	bl	8006888 <HAL_RCCEx_PeriphCLKConfig>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005190:	f7ff ff90 	bl	80050b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005194:	4b1b      	ldr	r3, [pc, #108]	; (8005204 <HAL_UART_MspInit+0xbc>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005198:	4a1a      	ldr	r2, [pc, #104]	; (8005204 <HAL_UART_MspInit+0xbc>)
 800519a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800519e:	6593      	str	r3, [r2, #88]	; 0x58
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <HAL_UART_MspInit+0xbc>)
 80051a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <HAL_UART_MspInit+0xbc>)
 80051ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <HAL_UART_MspInit+0xbc>)
 80051b2:	f043 0301 	orr.w	r3, r3, #1
 80051b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051b8:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_UART_MspInit+0xbc>)
 80051ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80051c4:	230c      	movs	r3, #12
 80051c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d0:	2300      	movs	r3, #0
 80051d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051d4:	2307      	movs	r3, #7
 80051d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051dc:	4619      	mov	r1, r3
 80051de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e2:	f000 fbb1 	bl	8005948 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051e6:	2200      	movs	r2, #0
 80051e8:	2100      	movs	r1, #0
 80051ea:	2026      	movs	r0, #38	; 0x26
 80051ec:	f000 fab7 	bl	800575e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051f0:	2026      	movs	r0, #38	; 0x26
 80051f2:	f000 face 	bl	8005792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80051f6:	bf00      	nop
 80051f8:	3778      	adds	r7, #120	; 0x78
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40004400 	.word	0x40004400
 8005204:	40021000 	.word	0x40021000

08005208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005208:	b480      	push	{r7}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800520c:	e7fe      	b.n	800520c <NMI_Handler+0x4>

0800520e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005212:	e7fe      	b.n	8005212 <HardFault_Handler+0x4>

08005214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005218:	e7fe      	b.n	8005218 <MemManage_Handler+0x4>

0800521a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800521a:	b480      	push	{r7}
 800521c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800521e:	e7fe      	b.n	800521e <BusFault_Handler+0x4>

08005220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005220:	b480      	push	{r7}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005224:	e7fe      	b.n	8005224 <UsageFault_Handler+0x4>

08005226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005226:	b480      	push	{r7}
 8005228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005234:	b480      	push	{r7}
 8005236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005238:	bf00      	nop
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005242:	b480      	push	{r7}
 8005244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005246:	bf00      	nop
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005254:	f000 f968 	bl	8005528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}

0800525c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005260:	4802      	ldr	r0, [pc, #8]	; (800526c <USART2_IRQHandler+0x10>)
 8005262:	f002 f86f 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20000250 	.word	0x20000250

08005270 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005274:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005278:	f000 fd00 	bl	8005c7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800527c:	bf00      	nop
 800527e:	bd80      	pop	{r7, pc}

08005280 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  return 1;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_kill>:

int _kill(int pid, int sig)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800529a:	f005 f9ad 	bl	800a5f8 <__errno>
 800529e:	4603      	mov	r3, r0
 80052a0:	2216      	movs	r2, #22
 80052a2:	601a      	str	r2, [r3, #0]
  return -1;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3708      	adds	r7, #8
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <_exit>:

void _exit (int status)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80052b8:	f04f 31ff 	mov.w	r1, #4294967295
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7ff ffe7 	bl	8005290 <_kill>
  while (1) {}    /* Make sure we hang here */
 80052c2:	e7fe      	b.n	80052c2 <_exit+0x12>

080052c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	e00a      	b.n	80052ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052d6:	f3af 8000 	nop.w
 80052da:	4601      	mov	r1, r0
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	60ba      	str	r2, [r7, #8]
 80052e2:	b2ca      	uxtb	r2, r1
 80052e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	3301      	adds	r3, #1
 80052ea:	617b      	str	r3, [r7, #20]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	dbf0      	blt.n	80052d6 <_read+0x12>
  }

  return len;
 80052f4:	687b      	ldr	r3, [r7, #4]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	e009      	b.n	8005324 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	1c5a      	adds	r2, r3, #1
 8005314:	60ba      	str	r2, [r7, #8]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fbd1 	bl	8004ac0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	dbf1      	blt.n	8005310 <_write+0x12>
  }
  return len;
 800532c:	687b      	ldr	r3, [r7, #4]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_close>:

int _close(int file)
{
 8005336:	b480      	push	{r7}
 8005338:	b083      	sub	sp, #12
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800533e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005342:	4618      	mov	r0, r3
 8005344:	370c      	adds	r7, #12
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800535e:	605a      	str	r2, [r3, #4]
  return 0;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	370c      	adds	r7, #12
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr

0800536e <_isatty>:

int _isatty(int file)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005376:	2301      	movs	r3, #1
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053a8:	4a14      	ldr	r2, [pc, #80]	; (80053fc <_sbrk+0x5c>)
 80053aa:	4b15      	ldr	r3, [pc, #84]	; (8005400 <_sbrk+0x60>)
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053b4:	4b13      	ldr	r3, [pc, #76]	; (8005404 <_sbrk+0x64>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <_sbrk+0x64>)
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <_sbrk+0x68>)
 80053c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <_sbrk+0x64>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4413      	add	r3, r2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d207      	bcs.n	80053e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053d0:	f005 f912 	bl	800a5f8 <__errno>
 80053d4:	4603      	mov	r3, r0
 80053d6:	220c      	movs	r2, #12
 80053d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053da:	f04f 33ff 	mov.w	r3, #4294967295
 80053de:	e009      	b.n	80053f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053e0:	4b08      	ldr	r3, [pc, #32]	; (8005404 <_sbrk+0x64>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <_sbrk+0x64>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	4a05      	ldr	r2, [pc, #20]	; (8005404 <_sbrk+0x64>)
 80053f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053f2:	68fb      	ldr	r3, [r7, #12]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	2001c000 	.word	0x2001c000
 8005400:	00000400 	.word	0x00000400
 8005404:	20002168 	.word	0x20002168
 8005408:	200022c0 	.word	0x200022c0

0800540c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <SystemInit+0x20>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	4a05      	ldr	r2, [pc, #20]	; (800542c <SystemInit+0x20>)
 8005418:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800541c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	e000ed00 	.word	0xe000ed00

08005430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005430:	480d      	ldr	r0, [pc, #52]	; (8005468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005432:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005434:	f7ff ffea 	bl	800540c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <LoopForever+0x6>)
  ldr r1, =_edata
 800543a:	490d      	ldr	r1, [pc, #52]	; (8005470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800543c:	4a0d      	ldr	r2, [pc, #52]	; (8005474 <LoopForever+0xe>)
  movs r3, #0
 800543e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005440:	e002      	b.n	8005448 <LoopCopyDataInit>

08005442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005446:	3304      	adds	r3, #4

08005448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800544a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800544c:	d3f9      	bcc.n	8005442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800544e:	4a0a      	ldr	r2, [pc, #40]	; (8005478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005450:	4c0a      	ldr	r4, [pc, #40]	; (800547c <LoopForever+0x16>)
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005454:	e001      	b.n	800545a <LoopFillZerobss>

08005456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005458:	3204      	adds	r2, #4

0800545a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800545a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800545c:	d3fb      	bcc.n	8005456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800545e:	f005 f8d1 	bl	800a604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005462:	f7ff fb3f 	bl	8004ae4 <main>

08005466 <LoopForever>:

LoopForever:
    b LoopForever
 8005466:	e7fe      	b.n	8005466 <LoopForever>
  ldr   r0, =_estack
 8005468:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800546c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005470:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005474:	0800d620 	.word	0x0800d620
  ldr r2, =_sbss
 8005478:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800547c:	200022bc 	.word	0x200022bc

08005480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005480:	e7fe      	b.n	8005480 <ADC1_2_IRQHandler>

08005482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800548c:	2003      	movs	r0, #3
 800548e:	f000 f95b 	bl	8005748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005492:	2000      	movs	r0, #0
 8005494:	f000 f80e 	bl	80054b4 <HAL_InitTick>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	71fb      	strb	r3, [r7, #7]
 80054a2:	e001      	b.n	80054a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054a4:	f7ff fe0c 	bl	80050c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054a8:	79fb      	ldrb	r3, [r7, #7]

}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
	...

080054b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80054bc:	2300      	movs	r3, #0
 80054be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <HAL_InitTick+0x68>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d022      	beq.n	800550e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <HAL_InitTick+0x6c>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b13      	ldr	r3, [pc, #76]	; (800551c <HAL_InitTick+0x68>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80054d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f966 	bl	80057ae <HAL_SYSTICK_Config>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10f      	bne.n	8005508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d809      	bhi.n	8005502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ee:	2200      	movs	r2, #0
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	f04f 30ff 	mov.w	r0, #4294967295
 80054f6:	f000 f932 	bl	800575e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054fa:	4a0a      	ldr	r2, [pc, #40]	; (8005524 <HAL_InitTick+0x70>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	e007      	b.n	8005512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
 8005506:	e004      	b.n	8005512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	e001      	b.n	8005512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005512:	7bfb      	ldrb	r3, [r7, #15]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	2000000c 	.word	0x2000000c
 8005520:	20000004 	.word	0x20000004
 8005524:	20000008 	.word	0x20000008

08005528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005528:	b480      	push	{r7}
 800552a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800552c:	4b05      	ldr	r3, [pc, #20]	; (8005544 <HAL_IncTick+0x1c>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <HAL_IncTick+0x20>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4413      	add	r3, r2
 8005536:	4a03      	ldr	r2, [pc, #12]	; (8005544 <HAL_IncTick+0x1c>)
 8005538:	6013      	str	r3, [r2, #0]
}
 800553a:	bf00      	nop
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	2000216c 	.word	0x2000216c
 8005548:	2000000c 	.word	0x2000000c

0800554c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800554c:	b480      	push	{r7}
 800554e:	af00      	add	r7, sp, #0
  return uwTick;
 8005550:	4b03      	ldr	r3, [pc, #12]	; (8005560 <HAL_GetTick+0x14>)
 8005552:	681b      	ldr	r3, [r3, #0]
}
 8005554:	4618      	mov	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	2000216c 	.word	0x2000216c

08005564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800556c:	f7ff ffee 	bl	800554c <HAL_GetTick>
 8005570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d004      	beq.n	8005588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800557e:	4b09      	ldr	r3, [pc, #36]	; (80055a4 <HAL_Delay+0x40>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005588:	bf00      	nop
 800558a:	f7ff ffdf 	bl	800554c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	429a      	cmp	r2, r3
 8005598:	d8f7      	bhi.n	800558a <HAL_Delay+0x26>
  {
  }
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	2000000c 	.word	0x2000000c

080055a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b8:	4b0c      	ldr	r3, [pc, #48]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055c4:	4013      	ands	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055da:	4a04      	ldr	r2, [pc, #16]	; (80055ec <__NVIC_SetPriorityGrouping+0x44>)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	60d3      	str	r3, [r2, #12]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <__NVIC_GetPriorityGrouping+0x18>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	0a1b      	lsrs	r3, r3, #8
 80055fa:	f003 0307 	and.w	r3, r3, #7
}
 80055fe:	4618      	mov	r0, r3
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	e000ed00 	.word	0xe000ed00

0800560c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800560c:	b480      	push	{r7}
 800560e:	b083      	sub	sp, #12
 8005610:	af00      	add	r7, sp, #0
 8005612:	4603      	mov	r3, r0
 8005614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800561a:	2b00      	cmp	r3, #0
 800561c:	db0b      	blt.n	8005636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800561e:	79fb      	ldrb	r3, [r7, #7]
 8005620:	f003 021f 	and.w	r2, r3, #31
 8005624:	4907      	ldr	r1, [pc, #28]	; (8005644 <__NVIC_EnableIRQ+0x38>)
 8005626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800562a:	095b      	lsrs	r3, r3, #5
 800562c:	2001      	movs	r0, #1
 800562e:	fa00 f202 	lsl.w	r2, r0, r2
 8005632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	e000e100 	.word	0xe000e100

08005648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005658:	2b00      	cmp	r3, #0
 800565a:	db0a      	blt.n	8005672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	b2da      	uxtb	r2, r3
 8005660:	490c      	ldr	r1, [pc, #48]	; (8005694 <__NVIC_SetPriority+0x4c>)
 8005662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005666:	0112      	lsls	r2, r2, #4
 8005668:	b2d2      	uxtb	r2, r2
 800566a:	440b      	add	r3, r1
 800566c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005670:	e00a      	b.n	8005688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	b2da      	uxtb	r2, r3
 8005676:	4908      	ldr	r1, [pc, #32]	; (8005698 <__NVIC_SetPriority+0x50>)
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	3b04      	subs	r3, #4
 8005680:	0112      	lsls	r2, r2, #4
 8005682:	b2d2      	uxtb	r2, r2
 8005684:	440b      	add	r3, r1
 8005686:	761a      	strb	r2, [r3, #24]
}
 8005688:	bf00      	nop
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	e000e100 	.word	0xe000e100
 8005698:	e000ed00 	.word	0xe000ed00

0800569c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800569c:	b480      	push	{r7}
 800569e:	b089      	sub	sp, #36	; 0x24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f003 0307 	and.w	r3, r3, #7
 80056ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f1c3 0307 	rsb	r3, r3, #7
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	bf28      	it	cs
 80056ba:	2304      	movcs	r3, #4
 80056bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3304      	adds	r3, #4
 80056c2:	2b06      	cmp	r3, #6
 80056c4:	d902      	bls.n	80056cc <NVIC_EncodePriority+0x30>
 80056c6:	69fb      	ldr	r3, [r7, #28]
 80056c8:	3b03      	subs	r3, #3
 80056ca:	e000      	b.n	80056ce <NVIC_EncodePriority+0x32>
 80056cc:	2300      	movs	r3, #0
 80056ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056d0:	f04f 32ff 	mov.w	r2, #4294967295
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	fa02 f303 	lsl.w	r3, r2, r3
 80056da:	43da      	mvns	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	401a      	ands	r2, r3
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056e4:	f04f 31ff 	mov.w	r1, #4294967295
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	fa01 f303 	lsl.w	r3, r1, r3
 80056ee:	43d9      	mvns	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056f4:	4313      	orrs	r3, r2
         );
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3724      	adds	r7, #36	; 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
	...

08005704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3b01      	subs	r3, #1
 8005710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005714:	d301      	bcc.n	800571a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005716:	2301      	movs	r3, #1
 8005718:	e00f      	b.n	800573a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <SysTick_Config+0x40>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3b01      	subs	r3, #1
 8005720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005722:	210f      	movs	r1, #15
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	f7ff ff8e 	bl	8005648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <SysTick_Config+0x40>)
 800572e:	2200      	movs	r2, #0
 8005730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <SysTick_Config+0x40>)
 8005734:	2207      	movs	r2, #7
 8005736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	e000e010 	.word	0xe000e010

08005748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff29 	bl	80055a8 <__NVIC_SetPriorityGrouping>
}
 8005756:	bf00      	nop
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b086      	sub	sp, #24
 8005762:	af00      	add	r7, sp, #0
 8005764:	4603      	mov	r3, r0
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
 800576a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800576c:	f7ff ff40 	bl	80055f0 <__NVIC_GetPriorityGrouping>
 8005770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	6978      	ldr	r0, [r7, #20]
 8005778:	f7ff ff90 	bl	800569c <NVIC_EncodePriority>
 800577c:	4602      	mov	r2, r0
 800577e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005782:	4611      	mov	r1, r2
 8005784:	4618      	mov	r0, r3
 8005786:	f7ff ff5f 	bl	8005648 <__NVIC_SetPriority>
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	4603      	mov	r3, r0
 800579a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800579c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff ff33 	bl	800560c <__NVIC_EnableIRQ>
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b082      	sub	sp, #8
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7ff ffa4 	bl	8005704 <SysTick_Config>
 80057bc:	4603      	mov	r3, r0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057c6:	b480      	push	{r7}
 80057c8:	b085      	sub	sp, #20
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d005      	beq.n	80057ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2204      	movs	r2, #4
 80057e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	73fb      	strb	r3, [r7, #15]
 80057e8:	e037      	b.n	800585a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 020e 	bic.w	r2, r2, #14
 80057f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005808:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581e:	f003 021f 	and.w	r2, r3, #31
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2101      	movs	r1, #1
 8005828:	fa01 f202 	lsl.w	r2, r1, r2
 800582c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005836:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800584e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005858:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800586a:	7bfb      	ldrb	r3, [r7, #15]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3714      	adds	r7, #20
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b02      	cmp	r3, #2
 800588e:	d00d      	beq.n	80058ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2204      	movs	r2, #4
 8005894:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
 80058aa:	e047      	b.n	800593c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 020e 	bic.w	r2, r2, #14
 80058ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0201 	bic.w	r2, r2, #1
 80058ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e0:	f003 021f 	and.w	r2, r3, #31
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e8:	2101      	movs	r1, #1
 80058ea:	fa01 f202 	lsl.w	r2, r1, r2
 80058ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80058f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005910:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800591a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	2b00      	cmp	r3, #0
 8005932:	d003      	beq.n	800593c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	4798      	blx	r3
    }
  }
  return status;
 800593c:	7bfb      	ldrb	r3, [r7, #15]
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005952:	2300      	movs	r3, #0
 8005954:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005956:	e15a      	b.n	8005c0e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	2101      	movs	r1, #1
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	fa01 f303 	lsl.w	r3, r1, r3
 8005964:	4013      	ands	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f000 814c 	beq.w	8005c08 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	2b01      	cmp	r3, #1
 800597a:	d005      	beq.n	8005988 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005984:	2b02      	cmp	r3, #2
 8005986:	d130      	bne.n	80059ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	2203      	movs	r2, #3
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	43db      	mvns	r3, r3
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4013      	ands	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	68da      	ldr	r2, [r3, #12]
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059be:	2201      	movs	r2, #1
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	fa02 f303 	lsl.w	r3, r2, r3
 80059c6:	43db      	mvns	r3, r3
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4013      	ands	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	091b      	lsrs	r3, r3, #4
 80059d4:	f003 0201 	and.w	r2, r3, #1
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f003 0303 	and.w	r3, r3, #3
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d017      	beq.n	8005a26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	005b      	lsls	r3, r3, #1
 8005a00:	2203      	movs	r2, #3
 8005a02:	fa02 f303 	lsl.w	r3, r2, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	693a      	ldr	r2, [r7, #16]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f003 0303 	and.w	r3, r3, #3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d123      	bne.n	8005a7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	08da      	lsrs	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3208      	adds	r2, #8
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f003 0307 	and.w	r3, r3, #7
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	220f      	movs	r2, #15
 8005a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4e:	43db      	mvns	r3, r3
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	08da      	lsrs	r2, r3, #3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	3208      	adds	r2, #8
 8005a74:	6939      	ldr	r1, [r7, #16]
 8005a76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	2203      	movs	r2, #3
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f003 0203 	and.w	r2, r3, #3
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f000 80a6 	beq.w	8005c08 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005abc:	4b5b      	ldr	r3, [pc, #364]	; (8005c2c <HAL_GPIO_Init+0x2e4>)
 8005abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac0:	4a5a      	ldr	r2, [pc, #360]	; (8005c2c <HAL_GPIO_Init+0x2e4>)
 8005ac2:	f043 0301 	orr.w	r3, r3, #1
 8005ac6:	6613      	str	r3, [r2, #96]	; 0x60
 8005ac8:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <HAL_GPIO_Init+0x2e4>)
 8005aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	60bb      	str	r3, [r7, #8]
 8005ad2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005ad4:	4a56      	ldr	r2, [pc, #344]	; (8005c30 <HAL_GPIO_Init+0x2e8>)
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	3302      	adds	r3, #2
 8005adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	220f      	movs	r2, #15
 8005aec:	fa02 f303 	lsl.w	r3, r2, r3
 8005af0:	43db      	mvns	r3, r3
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4013      	ands	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005afe:	d01f      	beq.n	8005b40 <HAL_GPIO_Init+0x1f8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a4c      	ldr	r2, [pc, #304]	; (8005c34 <HAL_GPIO_Init+0x2ec>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d019      	beq.n	8005b3c <HAL_GPIO_Init+0x1f4>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a4b      	ldr	r2, [pc, #300]	; (8005c38 <HAL_GPIO_Init+0x2f0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_GPIO_Init+0x1f0>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a4a      	ldr	r2, [pc, #296]	; (8005c3c <HAL_GPIO_Init+0x2f4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00d      	beq.n	8005b34 <HAL_GPIO_Init+0x1ec>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a49      	ldr	r2, [pc, #292]	; (8005c40 <HAL_GPIO_Init+0x2f8>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <HAL_GPIO_Init+0x1e8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a48      	ldr	r2, [pc, #288]	; (8005c44 <HAL_GPIO_Init+0x2fc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d101      	bne.n	8005b2c <HAL_GPIO_Init+0x1e4>
 8005b28:	2305      	movs	r3, #5
 8005b2a:	e00a      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b2c:	2306      	movs	r3, #6
 8005b2e:	e008      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b30:	2304      	movs	r3, #4
 8005b32:	e006      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b34:	2303      	movs	r3, #3
 8005b36:	e004      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e002      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e000      	b.n	8005b42 <HAL_GPIO_Init+0x1fa>
 8005b40:	2300      	movs	r3, #0
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	f002 0203 	and.w	r2, r2, #3
 8005b48:	0092      	lsls	r2, r2, #2
 8005b4a:	4093      	lsls	r3, r2
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005b52:	4937      	ldr	r1, [pc, #220]	; (8005c30 <HAL_GPIO_Init+0x2e8>)
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	089b      	lsrs	r3, r3, #2
 8005b58:	3302      	adds	r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005b60:	4b39      	ldr	r3, [pc, #228]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	43db      	mvns	r3, r3
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b84:	4a30      	ldr	r2, [pc, #192]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b8a:	4b2f      	ldr	r3, [pc, #188]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	43db      	mvns	r3, r3
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	4013      	ands	r3, r2
 8005b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005ba6:	693a      	ldr	r2, [r7, #16]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005bae:	4a26      	ldr	r2, [pc, #152]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005bb4:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005bd8:	4a1b      	ldr	r2, [pc, #108]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005bde:	4b1a      	ldr	r3, [pc, #104]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	43db      	mvns	r3, r3
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4013      	ands	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005bfa:	693a      	ldr	r2, [r7, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c02:	4a11      	ldr	r2, [pc, #68]	; (8005c48 <HAL_GPIO_Init+0x300>)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f47f ae9d 	bne.w	8005958 <HAL_GPIO_Init+0x10>
  }
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	40010000 	.word	0x40010000
 8005c34:	48000400 	.word	0x48000400
 8005c38:	48000800 	.word	0x48000800
 8005c3c:	48000c00 	.word	0x48000c00
 8005c40:	48001000 	.word	0x48001000
 8005c44:	48001400 	.word	0x48001400
 8005c48:	40010400 	.word	0x40010400

08005c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	807b      	strh	r3, [r7, #2]
 8005c58:	4613      	mov	r3, r2
 8005c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005c5c:	787b      	ldrb	r3, [r7, #1]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005c62:	887a      	ldrh	r2, [r7, #2]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005c68:	e002      	b.n	8005c70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005c6a:	887a      	ldrh	r2, [r7, #2]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c70:	bf00      	nop
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b082      	sub	sp, #8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c86:	4b08      	ldr	r3, [pc, #32]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d006      	beq.n	8005ca0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c92:	4a05      	ldr	r2, [pc, #20]	; (8005ca8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c94:	88fb      	ldrh	r3, [r7, #6]
 8005c96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c98:	88fb      	ldrh	r3, [r7, #6]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 f806 	bl	8005cac <HAL_GPIO_EXTI_Callback>
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3708      	adds	r7, #8
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40010400 	.word	0x40010400

08005cac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
	...

08005cc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d141      	bne.n	8005d56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cd2:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cde:	d131      	bne.n	8005d44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ce0:	4b47      	ldr	r3, [pc, #284]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ce6:	4a46      	ldr	r2, [pc, #280]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cf0:	4b43      	ldr	r3, [pc, #268]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005cf8:	4a41      	ldr	r2, [pc, #260]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d00:	4b40      	ldr	r3, [pc, #256]	; (8005e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2232      	movs	r2, #50	; 0x32
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d10:	0c9b      	lsrs	r3, r3, #18
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d16:	e002      	b.n	8005d1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d1e:	4b38      	ldr	r3, [pc, #224]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d102      	bne.n	8005d32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f2      	bne.n	8005d18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d32:	4b33      	ldr	r3, [pc, #204]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d158      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e057      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d44:	4b2e      	ldr	r3, [pc, #184]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d4a:	4a2d      	ldr	r2, [pc, #180]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d54:	e04d      	b.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d5c:	d141      	bne.n	8005de2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d5e:	4b28      	ldr	r3, [pc, #160]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d6a:	d131      	bne.n	8005dd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d6c:	4b24      	ldr	r3, [pc, #144]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d72:	4a23      	ldr	r2, [pc, #140]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d7c:	4b20      	ldr	r3, [pc, #128]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d84:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d8c:	4b1d      	ldr	r3, [pc, #116]	; (8005e04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2232      	movs	r2, #50	; 0x32
 8005d92:	fb02 f303 	mul.w	r3, r2, r3
 8005d96:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	0c9b      	lsrs	r3, r3, #18
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005da2:	e002      	b.n	8005daa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005daa:	4b15      	ldr	r3, [pc, #84]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db6:	d102      	bne.n	8005dbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1f2      	bne.n	8005da4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dbe:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dca:	d112      	bne.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	e011      	b.n	8005df4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005de0:	e007      	b.n	8005df2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005de2:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005dea:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005df0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	40007000 	.word	0x40007000
 8005e04:	20000004 	.word	0x20000004
 8005e08:	431bde83 	.word	0x431bde83

08005e0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	4a04      	ldr	r2, [pc, #16]	; (8005e28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e1a:	6093      	str	r3, [r2, #8]
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	40007000 	.word	0x40007000

08005e2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b088      	sub	sp, #32
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e2fe      	b.n	800643c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0301 	and.w	r3, r3, #1
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d075      	beq.n	8005f36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e4a:	4b97      	ldr	r3, [pc, #604]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f003 030c 	and.w	r3, r3, #12
 8005e52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e54:	4b94      	ldr	r3, [pc, #592]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0303 	and.w	r3, r3, #3
 8005e5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d102      	bne.n	8005e6a <HAL_RCC_OscConfig+0x3e>
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d002      	beq.n	8005e70 <HAL_RCC_OscConfig+0x44>
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d10b      	bne.n	8005e88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e70:	4b8d      	ldr	r3, [pc, #564]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d05b      	beq.n	8005f34 <HAL_RCC_OscConfig+0x108>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d157      	bne.n	8005f34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e2d9      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e90:	d106      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x74>
 8005e92:	4b85      	ldr	r3, [pc, #532]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a84      	ldr	r2, [pc, #528]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	e01d      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ea8:	d10c      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x98>
 8005eaa:	4b7f      	ldr	r3, [pc, #508]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a7e      	ldr	r2, [pc, #504]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	4b7c      	ldr	r3, [pc, #496]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a7b      	ldr	r2, [pc, #492]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e00b      	b.n	8005edc <HAL_RCC_OscConfig+0xb0>
 8005ec4:	4b78      	ldr	r3, [pc, #480]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a77      	ldr	r2, [pc, #476]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ece:	6013      	str	r3, [r2, #0]
 8005ed0:	4b75      	ldr	r3, [pc, #468]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a74      	ldr	r2, [pc, #464]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d013      	beq.n	8005f0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7ff fb32 	bl	800554c <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7ff fb2e 	bl	800554c <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e29e      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005efe:	4b6a      	ldr	r3, [pc, #424]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d0f0      	beq.n	8005eec <HAL_RCC_OscConfig+0xc0>
 8005f0a:	e014      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7ff fb1e 	bl	800554c <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7ff fb1a 	bl	800554c <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	; 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e28a      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005f26:	4b60      	ldr	r3, [pc, #384]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0xe8>
 8005f32:	e000      	b.n	8005f36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d075      	beq.n	800602e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f42:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 030c 	and.w	r3, r3, #12
 8005f4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f4c:	4b56      	ldr	r3, [pc, #344]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	2b0c      	cmp	r3, #12
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCC_OscConfig+0x136>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d002      	beq.n	8005f68 <HAL_RCC_OscConfig+0x13c>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d11f      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f68:	4b4f      	ldr	r3, [pc, #316]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_RCC_OscConfig+0x154>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d101      	bne.n	8005f80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e25d      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f80:	4b49      	ldr	r3, [pc, #292]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	061b      	lsls	r3, r3, #24
 8005f8e:	4946      	ldr	r1, [pc, #280]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f94:	4b45      	ldr	r3, [pc, #276]	; (80060ac <HAL_RCC_OscConfig+0x280>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fa8b 	bl	80054b4 <HAL_InitTick>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d043      	beq.n	800602c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e249      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d023      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fb0:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fbc:	f7ff fac6 	bl	800554c <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7ff fac2 	bl	800554c <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e232      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005fd6:	4b34      	ldr	r3, [pc, #208]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d0f0      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe2:	4b31      	ldr	r3, [pc, #196]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	061b      	lsls	r3, r3, #24
 8005ff0:	492d      	ldr	r1, [pc, #180]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	604b      	str	r3, [r1, #4]
 8005ff6:	e01a      	b.n	800602e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ff8:	4b2b      	ldr	r3, [pc, #172]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a2a      	ldr	r2, [pc, #168]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8005ffe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7ff faa2 	bl	800554c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800600c:	f7ff fa9e 	bl	800554c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e20e      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800601e:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1f0      	bne.n	800600c <HAL_RCC_OscConfig+0x1e0>
 800602a:	e000      	b.n	800602e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800602c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d041      	beq.n	80060be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d01c      	beq.n	800607c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006042:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800604a:	f043 0301 	orr.w	r3, r3, #1
 800604e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006052:	f7ff fa7b 	bl	800554c <HAL_GetTick>
 8006056:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800605a:	f7ff fa77 	bl	800554c <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e1e7      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800606c:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800606e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0ef      	beq.n	800605a <HAL_RCC_OscConfig+0x22e>
 800607a:	e020      	b.n	80060be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 800607e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006082:	4a09      	ldr	r2, [pc, #36]	; (80060a8 <HAL_RCC_OscConfig+0x27c>)
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7ff fa5e 	bl	800554c <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006092:	e00d      	b.n	80060b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006094:	f7ff fa5a 	bl	800554c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d906      	bls.n	80060b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e1ca      	b.n	800643c <HAL_RCC_OscConfig+0x610>
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000
 80060ac:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80060b0:	4b8c      	ldr	r3, [pc, #560]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1ea      	bne.n	8006094 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 80a6 	beq.w	8006218 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060cc:	2300      	movs	r3, #0
 80060ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80060d0:	4b84      	ldr	r3, [pc, #528]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_OscConfig+0x2b4>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x2b6>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00d      	beq.n	8006102 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060e6:	4b7f      	ldr	r3, [pc, #508]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	4a7e      	ldr	r2, [pc, #504]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6593      	str	r3, [r2, #88]	; 0x58
 80060f2:	4b7c      	ldr	r3, [pc, #496]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80060f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80060fe:	2301      	movs	r3, #1
 8006100:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006102:	4b79      	ldr	r3, [pc, #484]	; (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d118      	bne.n	8006140 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800610e:	4b76      	ldr	r3, [pc, #472]	; (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a75      	ldr	r2, [pc, #468]	; (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800611a:	f7ff fa17 	bl	800554c <HAL_GetTick>
 800611e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006120:	e008      	b.n	8006134 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006122:	f7ff fa13 	bl	800554c <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	2b02      	cmp	r3, #2
 800612e:	d901      	bls.n	8006134 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e183      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006134:	4b6c      	ldr	r3, [pc, #432]	; (80062e8 <HAL_RCC_OscConfig+0x4bc>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800613c:	2b00      	cmp	r3, #0
 800613e:	d0f0      	beq.n	8006122 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d108      	bne.n	800615a <HAL_RCC_OscConfig+0x32e>
 8006148:	4b66      	ldr	r3, [pc, #408]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800614a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800614e:	4a65      	ldr	r2, [pc, #404]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006150:	f043 0301 	orr.w	r3, r3, #1
 8006154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006158:	e024      	b.n	80061a4 <HAL_RCC_OscConfig+0x378>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	2b05      	cmp	r3, #5
 8006160:	d110      	bne.n	8006184 <HAL_RCC_OscConfig+0x358>
 8006162:	4b60      	ldr	r3, [pc, #384]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	4a5e      	ldr	r2, [pc, #376]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800616a:	f043 0304 	orr.w	r3, r3, #4
 800616e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006172:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006178:	4a5a      	ldr	r2, [pc, #360]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006182:	e00f      	b.n	80061a4 <HAL_RCC_OscConfig+0x378>
 8006184:	4b57      	ldr	r3, [pc, #348]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618a:	4a56      	ldr	r2, [pc, #344]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006194:	4b53      	ldr	r3, [pc, #332]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619a:	4a52      	ldr	r2, [pc, #328]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800619c:	f023 0304 	bic.w	r3, r3, #4
 80061a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d016      	beq.n	80061da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7ff f9ce 	bl	800554c <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061b2:	e00a      	b.n	80061ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061b4:	f7ff f9ca 	bl	800554c <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e138      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ca:	4b46      	ldr	r3, [pc, #280]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80061cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0ed      	beq.n	80061b4 <HAL_RCC_OscConfig+0x388>
 80061d8:	e015      	b.n	8006206 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061da:	f7ff f9b7 	bl	800554c <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061e0:	e00a      	b.n	80061f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e2:	f7ff f9b3 	bl	800554c <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e121      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80061f8:	4b3a      	ldr	r3, [pc, #232]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ed      	bne.n	80061e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006206:	7ffb      	ldrb	r3, [r7, #31]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d105      	bne.n	8006218 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800620c:	4b35      	ldr	r3, [pc, #212]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006210:	4a34      	ldr	r2, [pc, #208]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006216:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0320 	and.w	r3, r3, #32
 8006220:	2b00      	cmp	r3, #0
 8006222:	d03c      	beq.n	800629e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d01c      	beq.n	8006266 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800622c:	4b2d      	ldr	r3, [pc, #180]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800622e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006232:	4a2c      	ldr	r2, [pc, #176]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006234:	f043 0301 	orr.w	r3, r3, #1
 8006238:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7ff f986 	bl	800554c <HAL_GetTick>
 8006240:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006242:	e008      	b.n	8006256 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006244:	f7ff f982 	bl	800554c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d901      	bls.n	8006256 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e0f2      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006256:	4b23      	ldr	r3, [pc, #140]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006258:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800625c:	f003 0302 	and.w	r3, r3, #2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d0ef      	beq.n	8006244 <HAL_RCC_OscConfig+0x418>
 8006264:	e01b      	b.n	800629e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006266:	4b1f      	ldr	r3, [pc, #124]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800626c:	4a1d      	ldr	r2, [pc, #116]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006276:	f7ff f969 	bl	800554c <HAL_GetTick>
 800627a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800627e:	f7ff f965 	bl	800554c <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e0d5      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006290:	4b14      	ldr	r3, [pc, #80]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 8006292:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006296:	f003 0302 	and.w	r3, r3, #2
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1ef      	bne.n	800627e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80c9 	beq.w	800643a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80062a8:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 030c 	and.w	r3, r3, #12
 80062b0:	2b0c      	cmp	r3, #12
 80062b2:	f000 8083 	beq.w	80063bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d15e      	bne.n	800637c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062be:	4b09      	ldr	r3, [pc, #36]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a08      	ldr	r2, [pc, #32]	; (80062e4 <HAL_RCC_OscConfig+0x4b8>)
 80062c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ca:	f7ff f93f 	bl	800554c <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062d0:	e00c      	b.n	80062ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062d2:	f7ff f93b 	bl	800554c <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d905      	bls.n	80062ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e0ab      	b.n	800643c <HAL_RCC_OscConfig+0x610>
 80062e4:	40021000 	.word	0x40021000
 80062e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80062ec:	4b55      	ldr	r3, [pc, #340]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1ec      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062f8:	4b52      	ldr	r3, [pc, #328]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	4b52      	ldr	r3, [pc, #328]	; (8006448 <HAL_RCC_OscConfig+0x61c>)
 80062fe:	4013      	ands	r3, r2
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6a11      	ldr	r1, [r2, #32]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006308:	3a01      	subs	r2, #1
 800630a:	0112      	lsls	r2, r2, #4
 800630c:	4311      	orrs	r1, r2
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006312:	0212      	lsls	r2, r2, #8
 8006314:	4311      	orrs	r1, r2
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800631a:	0852      	lsrs	r2, r2, #1
 800631c:	3a01      	subs	r2, #1
 800631e:	0552      	lsls	r2, r2, #21
 8006320:	4311      	orrs	r1, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006326:	0852      	lsrs	r2, r2, #1
 8006328:	3a01      	subs	r2, #1
 800632a:	0652      	lsls	r2, r2, #25
 800632c:	4311      	orrs	r1, r2
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006332:	06d2      	lsls	r2, r2, #27
 8006334:	430a      	orrs	r2, r1
 8006336:	4943      	ldr	r1, [pc, #268]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 8006338:	4313      	orrs	r3, r2
 800633a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800633c:	4b41      	ldr	r3, [pc, #260]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a40      	ldr	r2, [pc, #256]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 8006342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006346:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006348:	4b3e      	ldr	r3, [pc, #248]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a3d      	ldr	r2, [pc, #244]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 800634e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006352:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006354:	f7ff f8fa 	bl	800554c <HAL_GetTick>
 8006358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800635a:	e008      	b.n	800636e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800635c:	f7ff f8f6 	bl	800554c <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d901      	bls.n	800636e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	e066      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800636e:	4b35      	ldr	r3, [pc, #212]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006376:	2b00      	cmp	r3, #0
 8006378:	d0f0      	beq.n	800635c <HAL_RCC_OscConfig+0x530>
 800637a:	e05e      	b.n	800643a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800637c:	4b31      	ldr	r3, [pc, #196]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a30      	ldr	r2, [pc, #192]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 8006382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006388:	f7ff f8e0 	bl	800554c <HAL_GetTick>
 800638c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800638e:	e008      	b.n	80063a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006390:	f7ff f8dc 	bl	800554c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	2b02      	cmp	r3, #2
 800639c:	d901      	bls.n	80063a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800639e:	2303      	movs	r3, #3
 80063a0:	e04c      	b.n	800643c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a2:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1f0      	bne.n	8006390 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80063ae:	4b25      	ldr	r3, [pc, #148]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	4924      	ldr	r1, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80063b4:	4b25      	ldr	r3, [pc, #148]	; (800644c <HAL_RCC_OscConfig+0x620>)
 80063b6:	4013      	ands	r3, r2
 80063b8:	60cb      	str	r3, [r1, #12]
 80063ba:	e03e      	b.n	800643a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	69db      	ldr	r3, [r3, #28]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e039      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <HAL_RCC_OscConfig+0x618>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0203 	and.w	r2, r3, #3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d12c      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	3b01      	subs	r3, #1
 80063e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d123      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d11b      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800640a:	429a      	cmp	r2, r3
 800640c:	d113      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	3b01      	subs	r3, #1
 800641c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d109      	bne.n	8006436 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800642c:	085b      	lsrs	r3, r3, #1
 800642e:	3b01      	subs	r3, #1
 8006430:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006432:	429a      	cmp	r2, r3
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3720      	adds	r7, #32
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	40021000 	.word	0x40021000
 8006448:	019f800c 	.word	0x019f800c
 800644c:	feeefffc 	.word	0xfeeefffc

08006450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b086      	sub	sp, #24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800645a:	2300      	movs	r3, #0
 800645c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d101      	bne.n	8006468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	e11e      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006468:	4b91      	ldr	r3, [pc, #580]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 030f 	and.w	r3, r3, #15
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d910      	bls.n	8006498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006476:	4b8e      	ldr	r3, [pc, #568]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 020f 	bic.w	r2, r3, #15
 800647e:	498c      	ldr	r1, [pc, #560]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006486:	4b8a      	ldr	r3, [pc, #552]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 030f 	and.w	r3, r3, #15
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d001      	beq.n	8006498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e106      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0301 	and.w	r3, r3, #1
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d073      	beq.n	800658c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d129      	bne.n	8006500 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80064ac:	4b81      	ldr	r3, [pc, #516]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e0f4      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80064bc:	f000 f99e 	bl	80067fc <RCC_GetSysClockFreqFromPLLSource>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	4a7c      	ldr	r2, [pc, #496]	; (80066b8 <HAL_RCC_ClockConfig+0x268>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d93f      	bls.n	800654a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064ca:	4b7a      	ldr	r3, [pc, #488]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d009      	beq.n	80064ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d033      	beq.n	800654a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d12f      	bne.n	800654a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064ea:	4b72      	ldr	r3, [pc, #456]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064f2:	4a70      	ldr	r2, [pc, #448]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80064f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	e024      	b.n	800654a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	2b02      	cmp	r3, #2
 8006506:	d107      	bne.n	8006518 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006508:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006510:	2b00      	cmp	r3, #0
 8006512:	d109      	bne.n	8006528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e0c6      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006518:	4b66      	ldr	r3, [pc, #408]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006520:	2b00      	cmp	r3, #0
 8006522:	d101      	bne.n	8006528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	e0be      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006528:	f000 f8ce 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800652c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4a61      	ldr	r2, [pc, #388]	; (80066b8 <HAL_RCC_ClockConfig+0x268>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d909      	bls.n	800654a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006536:	4b5f      	ldr	r3, [pc, #380]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800653e:	4a5d      	ldr	r2, [pc, #372]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006544:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006546:	2380      	movs	r3, #128	; 0x80
 8006548:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800654a:	4b5a      	ldr	r3, [pc, #360]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f023 0203 	bic.w	r2, r3, #3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	4957      	ldr	r1, [pc, #348]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800655c:	f7fe fff6 	bl	800554c <HAL_GetTick>
 8006560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006562:	e00a      	b.n	800657a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006564:	f7fe fff2 	bl	800554c <HAL_GetTick>
 8006568:	4602      	mov	r2, r0
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006572:	4293      	cmp	r3, r2
 8006574:	d901      	bls.n	800657a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e095      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800657a:	4b4e      	ldr	r3, [pc, #312]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	f003 020c 	and.w	r2, r3, #12
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	429a      	cmp	r2, r3
 800658a:	d1eb      	bne.n	8006564 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a4:	4b43      	ldr	r3, [pc, #268]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4a42      	ldr	r2, [pc, #264]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80065bc:	4b3d      	ldr	r3, [pc, #244]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80065c4:	4a3b      	ldr	r2, [pc, #236]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80065ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065cc:	4b39      	ldr	r3, [pc, #228]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4936      	ldr	r1, [pc, #216]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	608b      	str	r3, [r1, #8]
 80065de:	e008      	b.n	80065f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b80      	cmp	r3, #128	; 0x80
 80065e4:	d105      	bne.n	80065f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80065e6:	4b33      	ldr	r3, [pc, #204]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	4a32      	ldr	r2, [pc, #200]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 80065ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065f2:	4b2f      	ldr	r3, [pc, #188]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d21d      	bcs.n	800663c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006600:	4b2b      	ldr	r3, [pc, #172]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f023 020f 	bic.w	r2, r3, #15
 8006608:	4929      	ldr	r1, [pc, #164]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	4313      	orrs	r3, r2
 800660e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006610:	f7fe ff9c 	bl	800554c <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fe ff98 	bl	800554c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	; 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e03b      	b.n	80066a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800662e:	4b20      	ldr	r3, [pc, #128]	; (80066b0 <HAL_RCC_ClockConfig+0x260>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d1ed      	bne.n	8006618 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d008      	beq.n	800665a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006648:	4b1a      	ldr	r3, [pc, #104]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	4917      	ldr	r1, [pc, #92]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006656:	4313      	orrs	r3, r2
 8006658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006666:	4b13      	ldr	r3, [pc, #76]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	00db      	lsls	r3, r3, #3
 8006674:	490f      	ldr	r1, [pc, #60]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006676:	4313      	orrs	r3, r2
 8006678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800667a:	f000 f825 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 800667e:	4602      	mov	r2, r0
 8006680:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <HAL_RCC_ClockConfig+0x264>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	490c      	ldr	r1, [pc, #48]	; (80066bc <HAL_RCC_ClockConfig+0x26c>)
 800668c:	5ccb      	ldrb	r3, [r1, r3]
 800668e:	f003 031f 	and.w	r3, r3, #31
 8006692:	fa22 f303 	lsr.w	r3, r2, r3
 8006696:	4a0a      	ldr	r2, [pc, #40]	; (80066c0 <HAL_RCC_ClockConfig+0x270>)
 8006698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <HAL_RCC_ClockConfig+0x274>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe ff08 	bl	80054b4 <HAL_InitTick>
 80066a4:	4603      	mov	r3, r0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	40022000 	.word	0x40022000
 80066b4:	40021000 	.word	0x40021000
 80066b8:	04c4b400 	.word	0x04c4b400
 80066bc:	0800d22c 	.word	0x0800d22c
 80066c0:	20000004 	.word	0x20000004
 80066c4:	20000008 	.word	0x20000008

080066c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 030c 	and.w	r3, r3, #12
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d102      	bne.n	80066e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80066da:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066dc:	613b      	str	r3, [r7, #16]
 80066de:	e047      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80066e0:	4b27      	ldr	r3, [pc, #156]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d102      	bne.n	80066f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80066ec:	4b26      	ldr	r3, [pc, #152]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	e03e      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80066f2:	4b23      	ldr	r3, [pc, #140]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 030c 	and.w	r3, r3, #12
 80066fa:	2b0c      	cmp	r3, #12
 80066fc:	d136      	bne.n	800676c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066fe:	4b20      	ldr	r3, [pc, #128]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006700:	68db      	ldr	r3, [r3, #12]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	091b      	lsrs	r3, r3, #4
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	3301      	adds	r3, #1
 8006714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2b03      	cmp	r3, #3
 800671a:	d10c      	bne.n	8006736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800671c:	4a1a      	ldr	r2, [pc, #104]	; (8006788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	fbb2 f3f3 	udiv	r3, r2, r3
 8006724:	4a16      	ldr	r2, [pc, #88]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006726:	68d2      	ldr	r2, [r2, #12]
 8006728:	0a12      	lsrs	r2, r2, #8
 800672a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	617b      	str	r3, [r7, #20]
      break;
 8006734:	e00c      	b.n	8006750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006736:	4a13      	ldr	r2, [pc, #76]	; (8006784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	4a10      	ldr	r2, [pc, #64]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006740:	68d2      	ldr	r2, [r2, #12]
 8006742:	0a12      	lsrs	r2, r2, #8
 8006744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]
      break;
 800674e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	0e5b      	lsrs	r3, r3, #25
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	3301      	adds	r3, #1
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006760:	697a      	ldr	r2, [r7, #20]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	fbb2 f3f3 	udiv	r3, r2, r3
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	e001      	b.n	8006770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006770:	693b      	ldr	r3, [r7, #16]
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	40021000 	.word	0x40021000
 8006784:	00f42400 	.word	0x00f42400
 8006788:	016e3600 	.word	0x016e3600

0800678c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006790:	4b03      	ldr	r3, [pc, #12]	; (80067a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006792:	681b      	ldr	r3, [r3, #0]
}
 8006794:	4618      	mov	r0, r3
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	20000004 	.word	0x20000004

080067a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80067a8:	f7ff fff0 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067ac:	4602      	mov	r2, r0
 80067ae:	4b06      	ldr	r3, [pc, #24]	; (80067c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	f003 0307 	and.w	r3, r3, #7
 80067b8:	4904      	ldr	r1, [pc, #16]	; (80067cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80067ba:	5ccb      	ldrb	r3, [r1, r3]
 80067bc:	f003 031f 	and.w	r3, r3, #31
 80067c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	bd80      	pop	{r7, pc}
 80067c8:	40021000 	.word	0x40021000
 80067cc:	0800d23c 	.word	0x0800d23c

080067d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80067d4:	f7ff ffda 	bl	800678c <HAL_RCC_GetHCLKFreq>
 80067d8:	4602      	mov	r2, r0
 80067da:	4b06      	ldr	r3, [pc, #24]	; (80067f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	0adb      	lsrs	r3, r3, #11
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	4904      	ldr	r1, [pc, #16]	; (80067f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80067e6:	5ccb      	ldrb	r3, [r1, r3]
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	40021000 	.word	0x40021000
 80067f8:	0800d23c 	.word	0x0800d23c

080067fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006802:	4b1e      	ldr	r3, [pc, #120]	; (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f003 0303 	and.w	r3, r3, #3
 800680a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800680c:	4b1b      	ldr	r3, [pc, #108]	; (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	091b      	lsrs	r3, r3, #4
 8006812:	f003 030f 	and.w	r3, r3, #15
 8006816:	3301      	adds	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b03      	cmp	r3, #3
 800681e:	d10c      	bne.n	800683a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006820:	4a17      	ldr	r2, [pc, #92]	; (8006880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	4a14      	ldr	r2, [pc, #80]	; (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800682a:	68d2      	ldr	r2, [r2, #12]
 800682c:	0a12      	lsrs	r2, r2, #8
 800682e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006832:	fb02 f303 	mul.w	r3, r2, r3
 8006836:	617b      	str	r3, [r7, #20]
    break;
 8006838:	e00c      	b.n	8006854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800683a:	4a12      	ldr	r2, [pc, #72]	; (8006884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	4a0e      	ldr	r2, [pc, #56]	; (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006844:	68d2      	ldr	r2, [r2, #12]
 8006846:	0a12      	lsrs	r2, r2, #8
 8006848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	617b      	str	r3, [r7, #20]
    break;
 8006852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006854:	4b09      	ldr	r3, [pc, #36]	; (800687c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	0e5b      	lsrs	r3, r3, #25
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	3301      	adds	r3, #1
 8006860:	005b      	lsls	r3, r3, #1
 8006862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	fbb2 f3f3 	udiv	r3, r2, r3
 800686c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800686e:	687b      	ldr	r3, [r7, #4]
}
 8006870:	4618      	mov	r0, r3
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40021000 	.word	0x40021000
 8006880:	016e3600 	.word	0x016e3600
 8006884:	00f42400 	.word	0x00f42400

08006888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006890:	2300      	movs	r3, #0
 8006892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006894:	2300      	movs	r3, #0
 8006896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8098 	beq.w	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068a6:	2300      	movs	r3, #0
 80068a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068aa:	4b43      	ldr	r3, [pc, #268]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10d      	bne.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	4b40      	ldr	r3, [pc, #256]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ba:	4a3f      	ldr	r2, [pc, #252]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068c0:	6593      	str	r3, [r2, #88]	; 0x58
 80068c2:	4b3d      	ldr	r3, [pc, #244]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068ca:	60bb      	str	r3, [r7, #8]
 80068cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068ce:	2301      	movs	r3, #1
 80068d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068d2:	4b3a      	ldr	r3, [pc, #232]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a39      	ldr	r2, [pc, #228]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068de:	f7fe fe35 	bl	800554c <HAL_GetTick>
 80068e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068e4:	e009      	b.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068e6:	f7fe fe31 	bl	800554c <HAL_GetTick>
 80068ea:	4602      	mov	r2, r0
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	d902      	bls.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	74fb      	strb	r3, [r7, #19]
        break;
 80068f8:	e005      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fa:	4b30      	ldr	r3, [pc, #192]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ef      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006906:	7cfb      	ldrb	r3, [r7, #19]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d159      	bne.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800690c:	4b2a      	ldr	r3, [pc, #168]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800690e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d01e      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	429a      	cmp	r2, r3
 8006926:	d019      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006928:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006934:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800693a:	4a1f      	ldr	r2, [pc, #124]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006944:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694a:	4a1b      	ldr	r2, [pc, #108]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800694c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006954:	4a18      	ldr	r2, [pc, #96]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d016      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006966:	f7fe fdf1 	bl	800554c <HAL_GetTick>
 800696a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800696c:	e00b      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800696e:	f7fe fded 	bl	800554c <HAL_GetTick>
 8006972:	4602      	mov	r2, r0
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	f241 3288 	movw	r2, #5000	; 0x1388
 800697c:	4293      	cmp	r3, r2
 800697e:	d902      	bls.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	74fb      	strb	r3, [r7, #19]
            break;
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006986:	4b0c      	ldr	r3, [pc, #48]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0ec      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006994:	7cfb      	ldrb	r3, [r7, #19]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800699a:	4b07      	ldr	r3, [pc, #28]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a8:	4903      	ldr	r1, [pc, #12]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80069b0:	e008      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069b2:	7cfb      	ldrb	r3, [r7, #19]
 80069b4:	74bb      	strb	r3, [r7, #18]
 80069b6:	e005      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80069b8:	40021000 	.word	0x40021000
 80069bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c0:	7cfb      	ldrb	r3, [r7, #19]
 80069c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069c4:	7c7b      	ldrb	r3, [r7, #17]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d105      	bne.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069ca:	4ba7      	ldr	r3, [pc, #668]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ce:	4aa6      	ldr	r2, [pc, #664]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80069e2:	4ba1      	ldr	r3, [pc, #644]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069e8:	f023 0203 	bic.w	r2, r3, #3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	499d      	ldr	r1, [pc, #628]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a04:	4b98      	ldr	r3, [pc, #608]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a0a:	f023 020c 	bic.w	r2, r3, #12
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	4995      	ldr	r1, [pc, #596]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a14:	4313      	orrs	r3, r2
 8006a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006a26:	4b90      	ldr	r3, [pc, #576]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	498c      	ldr	r1, [pc, #560]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0308 	and.w	r3, r3, #8
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d00a      	beq.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006a48:	4b87      	ldr	r3, [pc, #540]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	4984      	ldr	r1, [pc, #528]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0310 	and.w	r3, r3, #16
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006a6a:	4b7f      	ldr	r3, [pc, #508]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	497b      	ldr	r1, [pc, #492]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0320 	and.w	r3, r3, #32
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a8c:	4b76      	ldr	r3, [pc, #472]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4973      	ldr	r1, [pc, #460]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006aae:	4b6e      	ldr	r3, [pc, #440]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	69db      	ldr	r3, [r3, #28]
 8006abc:	496a      	ldr	r1, [pc, #424]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006ad0:	4b65      	ldr	r3, [pc, #404]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	4962      	ldr	r1, [pc, #392]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00a      	beq.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006af2:	4b5d      	ldr	r3, [pc, #372]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	4959      	ldr	r1, [pc, #356]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d00a      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b14:	4b54      	ldr	r3, [pc, #336]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b1a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b22:	4951      	ldr	r1, [pc, #324]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b36:	4b4c      	ldr	r3, [pc, #304]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b44:	4948      	ldr	r1, [pc, #288]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b56:	4b44      	ldr	r3, [pc, #272]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	4a43      	ldr	r2, [pc, #268]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b60:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b6e:	4b3e      	ldr	r3, [pc, #248]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	493a      	ldr	r1, [pc, #232]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b8c:	d105      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8e:	4b36      	ldr	r3, [pc, #216]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	4a35      	ldr	r2, [pc, #212]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b98:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d015      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ba6:	4b30      	ldr	r3, [pc, #192]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb4:	492c      	ldr	r1, [pc, #176]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bc4:	d105      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc6:	4b28      	ldr	r3, [pc, #160]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d015      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006bde:	4b22      	ldr	r3, [pc, #136]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bec:	491e      	ldr	r1, [pc, #120]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bfe:	4b1a      	ldr	r3, [pc, #104]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4a19      	ldr	r2, [pc, #100]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c08:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d015      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	4910      	ldr	r1, [pc, #64]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c26:	4313      	orrs	r3, r2
 8006c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c34:	d105      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	4a0b      	ldr	r2, [pc, #44]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c40:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d018      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006c4e:	4b06      	ldr	r3, [pc, #24]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5c:	4902      	ldr	r1, [pc, #8]	; (8006c68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	e001      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006c68:	40021000 	.word	0x40021000
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c72:	d105      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c74:	4b21      	ldr	r3, [pc, #132]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4a20      	ldr	r2, [pc, #128]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c7e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9a:	4918      	ldr	r1, [pc, #96]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006caa:	d105      	bne.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006cac:	4b13      	ldr	r3, [pc, #76]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	4a12      	ldr	r2, [pc, #72]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d015      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd2:	490a      	ldr	r1, [pc, #40]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ce2:	d105      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce4:	4b05      	ldr	r3, [pc, #20]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4a04      	ldr	r2, [pc, #16]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006cf0:	7cbb      	ldrb	r3, [r7, #18]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40021000 	.word	0x40021000

08006d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e049      	b.n	8006da6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d106      	bne.n	8006d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f7fe f9ee 	bl	8005108 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2202      	movs	r2, #2
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3304      	adds	r3, #4
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	4610      	mov	r0, r2
 8006d40:	f000 f89e 	bl	8006e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2201      	movs	r2, #1
 8006d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e047      	b.n	8006e58 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <HAL_TIM_Base_Start+0xb4>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01d      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de2:	d018      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <HAL_TIM_Base_Start+0xb8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a1e      	ldr	r2, [pc, #120]	; (8006e6c <HAL_TIM_Base_Start+0xbc>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <HAL_TIM_Base_Start+0xc0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a1b      	ldr	r2, [pc, #108]	; (8006e74 <HAL_TIM_Base_Start+0xc4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_TIM_Base_Start+0x66>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a19      	ldr	r2, [pc, #100]	; (8006e78 <HAL_TIM_Base_Start+0xc8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d115      	bne.n	8006e42 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	4b17      	ldr	r3, [pc, #92]	; (8006e7c <HAL_TIM_Base_Start+0xcc>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b06      	cmp	r3, #6
 8006e26:	d015      	beq.n	8006e54 <HAL_TIM_Base_Start+0xa4>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e2e:	d011      	beq.n	8006e54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e40:	e008      	b.n	8006e54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0201 	orr.w	r2, r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e000      	b.n	8006e56 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	40012c00 	.word	0x40012c00
 8006e68:	40000400 	.word	0x40000400
 8006e6c:	40000800 	.word	0x40000800
 8006e70:	40013400 	.word	0x40013400
 8006e74:	40014000 	.word	0x40014000
 8006e78:	40015000 	.word	0x40015000
 8006e7c:	00010007 	.word	0x00010007

08006e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a48      	ldr	r2, [pc, #288]	; (8006fb4 <TIM_Base_SetConfig+0x134>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d013      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e9e:	d00f      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a45      	ldr	r2, [pc, #276]	; (8006fb8 <TIM_Base_SetConfig+0x138>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00b      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a44      	ldr	r2, [pc, #272]	; (8006fbc <TIM_Base_SetConfig+0x13c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d007      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a43      	ldr	r2, [pc, #268]	; (8006fc0 <TIM_Base_SetConfig+0x140>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d003      	beq.n	8006ec0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a42      	ldr	r2, [pc, #264]	; (8006fc4 <TIM_Base_SetConfig+0x144>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d108      	bne.n	8006ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a37      	ldr	r2, [pc, #220]	; (8006fb4 <TIM_Base_SetConfig+0x134>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d01f      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ee0:	d01b      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a34      	ldr	r2, [pc, #208]	; (8006fb8 <TIM_Base_SetConfig+0x138>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d017      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <TIM_Base_SetConfig+0x13c>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d013      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a32      	ldr	r2, [pc, #200]	; (8006fc0 <TIM_Base_SetConfig+0x140>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d00f      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a32      	ldr	r2, [pc, #200]	; (8006fc8 <TIM_Base_SetConfig+0x148>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00b      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a31      	ldr	r2, [pc, #196]	; (8006fcc <TIM_Base_SetConfig+0x14c>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d007      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <TIM_Base_SetConfig+0x150>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d003      	beq.n	8006f1a <TIM_Base_SetConfig+0x9a>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a2b      	ldr	r2, [pc, #172]	; (8006fc4 <TIM_Base_SetConfig+0x144>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d108      	bne.n	8006f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	695b      	ldr	r3, [r3, #20]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68fa      	ldr	r2, [r7, #12]
 8006f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a18      	ldr	r2, [pc, #96]	; (8006fb4 <TIM_Base_SetConfig+0x134>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a19      	ldr	r2, [pc, #100]	; (8006fc0 <TIM_Base_SetConfig+0x140>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <TIM_Base_SetConfig+0x148>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a18      	ldr	r2, [pc, #96]	; (8006fcc <TIM_Base_SetConfig+0x14c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a17      	ldr	r2, [pc, #92]	; (8006fd0 <TIM_Base_SetConfig+0x150>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_Base_SetConfig+0x100>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a12      	ldr	r2, [pc, #72]	; (8006fc4 <TIM_Base_SetConfig+0x144>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d103      	bne.n	8006f88 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	691a      	ldr	r2, [r3, #16]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d105      	bne.n	8006fa6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f023 0201 	bic.w	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	611a      	str	r2, [r3, #16]
  }
}
 8006fa6:	bf00      	nop
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40013400 	.word	0x40013400
 8006fc4:	40015000 	.word	0x40015000
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40014400 	.word	0x40014400
 8006fd0:	40014800 	.word	0x40014800

08006fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b085      	sub	sp, #20
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e06f      	b.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a31      	ldr	r2, [pc, #196]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d009      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a30      	ldr	r2, [pc, #192]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d004      	beq.n	800702a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a2e      	ldr	r2, [pc, #184]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007030:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	4313      	orrs	r3, r2
 8007050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68fa      	ldr	r2, [r7, #12]
 8007058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a1e      	ldr	r2, [pc, #120]	; (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d01d      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800706c:	d018      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00e      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a15      	ldr	r2, [pc, #84]	; (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a16      	ldr	r2, [pc, #88]	; (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a11      	ldr	r2, [pc, #68]	; (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10c      	bne.n	80070ba <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	68ba      	ldr	r2, [r7, #8]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3714      	adds	r7, #20
 80070d0:	46bd      	mov	sp, r7
 80070d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00
 80070dc:	40013400 	.word	0x40013400
 80070e0:	40015000 	.word	0x40015000
 80070e4:	40000400 	.word	0x40000400
 80070e8:	40000800 	.word	0x40000800
 80070ec:	40014000 	.word	0x40014000

080070f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e042      	b.n	8007188 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007108:	2b00      	cmp	r3, #0
 800710a:	d106      	bne.n	800711a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f7fe f817 	bl	8005148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2224      	movs	r2, #36	; 0x24
 800711e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0201 	bic.w	r2, r2, #1
 8007130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d002      	beq.n	8007140 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 ff42 	bl	8007fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fc43 	bl	80079cc <UART_SetConfig>
 8007146:	4603      	mov	r3, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800714c:	2301      	movs	r3, #1
 800714e:	e01b      	b.n	8007188 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800715e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689a      	ldr	r2, [r3, #8]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800716e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681a      	ldr	r2, [r3, #0]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0201 	orr.w	r2, r2, #1
 800717e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f000 ffc1 	bl	8008108 <UART_CheckIdleState>
 8007186:	4603      	mov	r3, r0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af02      	add	r7, sp, #8
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	4613      	mov	r3, r2
 800719e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d17b      	bne.n	80072a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d002      	beq.n	80071b6 <HAL_UART_Transmit+0x26>
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e074      	b.n	80072a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2221      	movs	r2, #33	; 0x21
 80071c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ca:	f7fe f9bf 	bl	800554c <HAL_GetTick>
 80071ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	88fa      	ldrh	r2, [r7, #6]
 80071d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071e8:	d108      	bne.n	80071fc <HAL_UART_Transmit+0x6c>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d104      	bne.n	80071fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	61bb      	str	r3, [r7, #24]
 80071fa:	e003      	b.n	8007204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007200:	2300      	movs	r3, #0
 8007202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007204:	e030      	b.n	8007268 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	9300      	str	r3, [sp, #0]
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2200      	movs	r2, #0
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f001 f823 	bl	800825c <UART_WaitOnFlagUntilTimeout>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e03d      	b.n	80072a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10b      	bne.n	8007246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800723c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	3302      	adds	r3, #2
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	e007      	b.n	8007256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	781a      	ldrb	r2, [r3, #0]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	3301      	adds	r3, #1
 8007254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	b29a      	uxth	r2, r3
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800726e:	b29b      	uxth	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1c8      	bne.n	8007206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2200      	movs	r2, #0
 800727c:	2140      	movs	r1, #64	; 0x40
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 ffec 	bl	800825c <UART_WaitOnFlagUntilTimeout>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d005      	beq.n	8007296 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2220      	movs	r2, #32
 800728e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007292:	2303      	movs	r3, #3
 8007294:	e006      	b.n	80072a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	e000      	b.n	80072a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80072a2:	2302      	movs	r3, #2
  }
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3720      	adds	r7, #32
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b08a      	sub	sp, #40	; 0x28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80072c0:	2b20      	cmp	r3, #32
 80072c2:	d137      	bne.n	8007334 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_UART_Receive_IT+0x24>
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e030      	b.n	8007336 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a18      	ldr	r2, [pc, #96]	; (8007340 <HAL_UART_Receive_IT+0x94>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d01f      	beq.n	8007324 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d018      	beq.n	8007324 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	e853 3f00 	ldrex	r3, [r3]
 80072fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007306:	627b      	str	r3, [r7, #36]	; 0x24
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	461a      	mov	r2, r3
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	623b      	str	r3, [r7, #32]
 8007312:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007314:	69f9      	ldr	r1, [r7, #28]
 8007316:	6a3a      	ldr	r2, [r7, #32]
 8007318:	e841 2300 	strex	r3, r2, [r1]
 800731c:	61bb      	str	r3, [r7, #24]
   return(result);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1e6      	bne.n	80072f2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007324:	88fb      	ldrh	r3, [r7, #6]
 8007326:	461a      	mov	r2, r3
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 f804 	bl	8008338 <UART_Start_Receive_IT>
 8007330:	4603      	mov	r3, r0
 8007332:	e000      	b.n	8007336 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007334:	2302      	movs	r3, #2
  }
}
 8007336:	4618      	mov	r0, r3
 8007338:	3728      	adds	r7, #40	; 0x28
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	40008000 	.word	0x40008000

08007344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b0ba      	sub	sp, #232	; 0xe8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800736a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800736e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007372:	4013      	ands	r3, r2
 8007374:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11b      	bne.n	80073b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d015      	beq.n	80073b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800739c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 82e3 	beq.w	8007974 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
      }
      return;
 80073b6:	e2dd      	b.n	8007974 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8123 	beq.w	8007608 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80073c6:	4b8d      	ldr	r3, [pc, #564]	; (80075fc <HAL_UART_IRQHandler+0x2b8>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80073d2:	4b8b      	ldr	r3, [pc, #556]	; (8007600 <HAL_UART_IRQHandler+0x2bc>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8116 	beq.w	8007608 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d011      	beq.n	800740c <HAL_UART_IRQHandler+0xc8>
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007402:	f043 0201 	orr.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d011      	beq.n	800743c <HAL_UART_IRQHandler+0xf8>
 8007418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2202      	movs	r2, #2
 800742a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007432:	f043 0204 	orr.w	r2, r3, #4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800743c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d011      	beq.n	800746c <HAL_UART_IRQHandler+0x128>
 8007448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2204      	movs	r2, #4
 800745a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007462:	f043 0202 	orr.w	r2, r3, #2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d017      	beq.n	80074a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007488:	4b5c      	ldr	r3, [pc, #368]	; (80075fc <HAL_UART_IRQHandler+0x2b8>)
 800748a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2208      	movs	r2, #8
 8007496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800749e:	f043 0208 	orr.w	r2, r3, #8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <HAL_UART_IRQHandler+0x196>
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00c      	beq.n	80074da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d0:	f043 0220 	orr.w	r2, r3, #32
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8249 	beq.w	8007978 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d013      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007520:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800752e:	2b40      	cmp	r3, #64	; 0x40
 8007530:	d005      	beq.n	800753e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007536:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800753a:	2b00      	cmp	r3, #0
 800753c:	d054      	beq.n	80075e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 f81c 	bl	800857c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d146      	bne.n	80075e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800756c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800757e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800758a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1d9      	bne.n	8007552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ae:	4a15      	ldr	r2, [pc, #84]	; (8007604 <HAL_UART_IRQHandler+0x2c0>)
 80075b0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fe f95d 	bl	8005878 <HAL_DMA_Abort_IT>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d019      	beq.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80075d2:	4610      	mov	r0, r2
 80075d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d6:	e00f      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f9e1 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075de:	e00b      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9dd 	bl	80079a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e6:	e007      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9d9 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80075f6:	e1bf      	b.n	8007978 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	bf00      	nop
    return;
 80075fa:	e1bd      	b.n	8007978 <HAL_UART_IRQHandler+0x634>
 80075fc:	10000001 	.word	0x10000001
 8007600:	04000120 	.word	0x04000120
 8007604:	08008649 	.word	0x08008649

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800760c:	2b01      	cmp	r3, #1
 800760e:	f040 8153 	bne.w	80078b8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 814c 	beq.w	80078b8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8145 	beq.w	80078b8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2210      	movs	r2, #16
 8007634:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007640:	2b40      	cmp	r3, #64	; 0x40
 8007642:	f040 80bb 	bne.w	80077bc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 818f 	beq.w	800797c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007668:	429a      	cmp	r2, r3
 800766a:	f080 8187 	bcs.w	800797c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007674:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 8087 	bne.w	800779a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1da      	bne.n	800768c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80076e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80076fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80076fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007702:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800770c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e1      	bne.n	80076d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007722:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007724:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007736:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007738:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800773c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007744:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e3      	bne.n	8007712 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007768:	f023 0310 	bic.w	r3, r3, #16
 800776c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800777a:	65bb      	str	r3, [r7, #88]	; 0x58
 800777c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007780:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e4      	bne.n	8007758 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007794:	4618      	mov	r0, r3
 8007796:	f7fe f816 	bl	80057c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f8fd 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077ba:	e0df      	b.n	800797c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80d1 	beq.w	8007980 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80077de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f000 80cc 	beq.w	8007980 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f0:	e853 3f00 	ldrex	r3, [r3]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	461a      	mov	r2, r3
 8007806:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800780a:	647b      	str	r3, [r7, #68]	; 0x44
 800780c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007810:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e4      	bne.n	80077e8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3308      	adds	r3, #8
 8007824:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007828:	e853 3f00 	ldrex	r3, [r3]
 800782c:	623b      	str	r3, [r7, #32]
   return(result);
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007834:	f023 0301 	bic.w	r3, r3, #1
 8007838:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007846:	633a      	str	r2, [r7, #48]	; 0x30
 8007848:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800784c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007856:	2b00      	cmp	r3, #0
 8007858:	d1e1      	bne.n	800781e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2220      	movs	r2, #32
 800785e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	60fb      	str	r3, [r7, #12]
   return(result);
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f023 0310 	bic.w	r3, r3, #16
 8007882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007890:	61fb      	str	r3, [r7, #28]
 8007892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	69b9      	ldr	r1, [r7, #24]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	617b      	str	r3, [r7, #20]
   return(result);
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e4      	bne.n	800786e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078ae:	4619      	mov	r1, r3
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 f87f 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078b6:	e063      	b.n	8007980 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00e      	beq.n	80078e2 <HAL_UART_IRQHandler+0x59e>
 80078c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d008      	beq.n	80078e2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80078d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f001 fc12 	bl	8009104 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e0:	e051      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80078e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80078ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80078fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d008      	beq.n	8007918 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800790a:	2b00      	cmp	r3, #0
 800790c:	d03a      	beq.n	8007984 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
    }
    return;
 8007916:	e035      	b.n	8007984 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d009      	beq.n	8007938 <HAL_UART_IRQHandler+0x5f4>
 8007924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fe9f 	bl	8008674 <UART_EndTransmit_IT>
    return;
 8007936:	e026      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007938:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800793c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <HAL_UART_IRQHandler+0x614>
 8007944:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 fbeb 	bl	800912c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007956:	e016      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800795c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d010      	beq.n	8007986 <HAL_UART_IRQHandler+0x642>
 8007964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007968:	2b00      	cmp	r3, #0
 800796a:	da0c      	bge.n	8007986 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fbd3 	bl	8009118 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007972:	e008      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
      return;
 8007974:	bf00      	nop
 8007976:	e006      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
    return;
 8007978:	bf00      	nop
 800797a:	e004      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
      return;
 800797c:	bf00      	nop
 800797e:	e002      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
      return;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <HAL_UART_IRQHandler+0x642>
    return;
 8007984:	bf00      	nop
  }
}
 8007986:	37e8      	adds	r7, #232	; 0xe8
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007994:	bf00      	nop
 8007996:	370c      	adds	r7, #12
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079a8:	bf00      	nop
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c0:	bf00      	nop
 80079c2:	370c      	adds	r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079d0:	b08c      	sub	sp, #48	; 0x30
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4baa      	ldr	r3, [pc, #680]	; (8007ca4 <UART_SetConfig+0x2d8>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	697a      	ldr	r2, [r7, #20]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a9f      	ldr	r2, [pc, #636]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a34:	4313      	orrs	r3, r2
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a46:	697a      	ldr	r2, [r7, #20]
 8007a48:	6812      	ldr	r2, [r2, #0]
 8007a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	f023 010f 	bic.w	r1, r3, #15
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a90      	ldr	r2, [pc, #576]	; (8007cac <UART_SetConfig+0x2e0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d125      	bne.n	8007abc <UART_SetConfig+0xf0>
 8007a70:	4b8f      	ldr	r3, [pc, #572]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a76:	f003 0303 	and.w	r3, r3, #3
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d81a      	bhi.n	8007ab4 <UART_SetConfig+0xe8>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <UART_SetConfig+0xb8>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007aa5 	.word	0x08007aa5
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007aad 	.word	0x08007aad
 8007a94:	2301      	movs	r3, #1
 8007a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a9a:	e116      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007a9c:	2302      	movs	r3, #2
 8007a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa2:	e112      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007aa4:	2304      	movs	r3, #4
 8007aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aaa:	e10e      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007aac:	2308      	movs	r3, #8
 8007aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab2:	e10a      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007ab4:	2310      	movs	r3, #16
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aba:	e106      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a7c      	ldr	r2, [pc, #496]	; (8007cb4 <UART_SetConfig+0x2e8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d138      	bne.n	8007b38 <UART_SetConfig+0x16c>
 8007ac6:	4b7a      	ldr	r3, [pc, #488]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007acc:	f003 030c 	and.w	r3, r3, #12
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d82d      	bhi.n	8007b30 <UART_SetConfig+0x164>
 8007ad4:	a201      	add	r2, pc, #4	; (adr r2, 8007adc <UART_SetConfig+0x110>)
 8007ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ada:	bf00      	nop
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b31 	.word	0x08007b31
 8007ae4:	08007b31 	.word	0x08007b31
 8007ae8:	08007b31 	.word	0x08007b31
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b31 	.word	0x08007b31
 8007af4:	08007b31 	.word	0x08007b31
 8007af8:	08007b31 	.word	0x08007b31
 8007afc:	08007b19 	.word	0x08007b19
 8007b00:	08007b31 	.word	0x08007b31
 8007b04:	08007b31 	.word	0x08007b31
 8007b08:	08007b31 	.word	0x08007b31
 8007b0c:	08007b29 	.word	0x08007b29
 8007b10:	2300      	movs	r3, #0
 8007b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b16:	e0d8      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b18:	2302      	movs	r3, #2
 8007b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1e:	e0d4      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b20:	2304      	movs	r3, #4
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b26:	e0d0      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b28:	2308      	movs	r3, #8
 8007b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b2e:	e0cc      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b30:	2310      	movs	r3, #16
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b36:	e0c8      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a5e      	ldr	r2, [pc, #376]	; (8007cb8 <UART_SetConfig+0x2ec>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d125      	bne.n	8007b8e <UART_SetConfig+0x1c2>
 8007b42:	4b5b      	ldr	r3, [pc, #364]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b4c:	2b30      	cmp	r3, #48	; 0x30
 8007b4e:	d016      	beq.n	8007b7e <UART_SetConfig+0x1b2>
 8007b50:	2b30      	cmp	r3, #48	; 0x30
 8007b52:	d818      	bhi.n	8007b86 <UART_SetConfig+0x1ba>
 8007b54:	2b20      	cmp	r3, #32
 8007b56:	d00a      	beq.n	8007b6e <UART_SetConfig+0x1a2>
 8007b58:	2b20      	cmp	r3, #32
 8007b5a:	d814      	bhi.n	8007b86 <UART_SetConfig+0x1ba>
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d002      	beq.n	8007b66 <UART_SetConfig+0x19a>
 8007b60:	2b10      	cmp	r3, #16
 8007b62:	d008      	beq.n	8007b76 <UART_SetConfig+0x1aa>
 8007b64:	e00f      	b.n	8007b86 <UART_SetConfig+0x1ba>
 8007b66:	2300      	movs	r3, #0
 8007b68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6c:	e0ad      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b74:	e0a9      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b76:	2304      	movs	r3, #4
 8007b78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b7c:	e0a5      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b7e:	2308      	movs	r3, #8
 8007b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b84:	e0a1      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b86:	2310      	movs	r3, #16
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8c:	e09d      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a4a      	ldr	r2, [pc, #296]	; (8007cbc <UART_SetConfig+0x2f0>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d125      	bne.n	8007be4 <UART_SetConfig+0x218>
 8007b98:	4b45      	ldr	r3, [pc, #276]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba4:	d016      	beq.n	8007bd4 <UART_SetConfig+0x208>
 8007ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ba8:	d818      	bhi.n	8007bdc <UART_SetConfig+0x210>
 8007baa:	2b80      	cmp	r3, #128	; 0x80
 8007bac:	d00a      	beq.n	8007bc4 <UART_SetConfig+0x1f8>
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d814      	bhi.n	8007bdc <UART_SetConfig+0x210>
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <UART_SetConfig+0x1f0>
 8007bb6:	2b40      	cmp	r3, #64	; 0x40
 8007bb8:	d008      	beq.n	8007bcc <UART_SetConfig+0x200>
 8007bba:	e00f      	b.n	8007bdc <UART_SetConfig+0x210>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	e082      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bca:	e07e      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007bcc:	2304      	movs	r3, #4
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e07a      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007bd4:	2308      	movs	r3, #8
 8007bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bda:	e076      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be2:	e072      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a35      	ldr	r2, [pc, #212]	; (8007cc0 <UART_SetConfig+0x2f4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d12a      	bne.n	8007c44 <UART_SetConfig+0x278>
 8007bee:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bfc:	d01a      	beq.n	8007c34 <UART_SetConfig+0x268>
 8007bfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c02:	d81b      	bhi.n	8007c3c <UART_SetConfig+0x270>
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c08:	d00c      	beq.n	8007c24 <UART_SetConfig+0x258>
 8007c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c0e:	d815      	bhi.n	8007c3c <UART_SetConfig+0x270>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <UART_SetConfig+0x250>
 8007c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c18:	d008      	beq.n	8007c2c <UART_SetConfig+0x260>
 8007c1a:	e00f      	b.n	8007c3c <UART_SetConfig+0x270>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e052      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c24:	2302      	movs	r3, #2
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e04e      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c2c:	2304      	movs	r3, #4
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e04a      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c34:	2308      	movs	r3, #8
 8007c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3a:	e046      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c42:	e042      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <UART_SetConfig+0x2dc>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d13a      	bne.n	8007cc4 <UART_SetConfig+0x2f8>
 8007c4e:	4b18      	ldr	r3, [pc, #96]	; (8007cb0 <UART_SetConfig+0x2e4>)
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c5c:	d01a      	beq.n	8007c94 <UART_SetConfig+0x2c8>
 8007c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c62:	d81b      	bhi.n	8007c9c <UART_SetConfig+0x2d0>
 8007c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c68:	d00c      	beq.n	8007c84 <UART_SetConfig+0x2b8>
 8007c6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c6e:	d815      	bhi.n	8007c9c <UART_SetConfig+0x2d0>
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <UART_SetConfig+0x2b0>
 8007c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c78:	d008      	beq.n	8007c8c <UART_SetConfig+0x2c0>
 8007c7a:	e00f      	b.n	8007c9c <UART_SetConfig+0x2d0>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c82:	e022      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c84:	2302      	movs	r3, #2
 8007c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c8a:	e01e      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c8c:	2304      	movs	r3, #4
 8007c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c92:	e01a      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c94:	2308      	movs	r3, #8
 8007c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9a:	e016      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	e012      	b.n	8007cca <UART_SetConfig+0x2fe>
 8007ca4:	cfff69f3 	.word	0xcfff69f3
 8007ca8:	40008000 	.word	0x40008000
 8007cac:	40013800 	.word	0x40013800
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	40004400 	.word	0x40004400
 8007cb8:	40004800 	.word	0x40004800
 8007cbc:	40004c00 	.word	0x40004c00
 8007cc0:	40005000 	.word	0x40005000
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4aae      	ldr	r2, [pc, #696]	; (8007f88 <UART_SetConfig+0x5bc>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	f040 8097 	bne.w	8007e04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cda:	2b08      	cmp	r3, #8
 8007cdc:	d823      	bhi.n	8007d26 <UART_SetConfig+0x35a>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <UART_SetConfig+0x318>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d09 	.word	0x08007d09
 8007ce8:	08007d27 	.word	0x08007d27
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d27 	.word	0x08007d27
 8007cf4:	08007d17 	.word	0x08007d17
 8007cf8:	08007d27 	.word	0x08007d27
 8007cfc:	08007d27 	.word	0x08007d27
 8007d00:	08007d27 	.word	0x08007d27
 8007d04:	08007d1f 	.word	0x08007d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d08:	f7fe fd4c 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 8007d0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d0e:	e010      	b.n	8007d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b9e      	ldr	r3, [pc, #632]	; (8007f8c <UART_SetConfig+0x5c0>)
 8007d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d14:	e00d      	b.n	8007d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d16:	f7fe fcd7 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8007d1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d1c:	e009      	b.n	8007d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d24:	e005      	b.n	8007d32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8130 	beq.w	8007f9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	4a94      	ldr	r2, [pc, #592]	; (8007f90 <UART_SetConfig+0x5c4>)
 8007d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d44:	461a      	mov	r2, r3
 8007d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	4613      	mov	r3, r2
 8007d54:	005b      	lsls	r3, r3, #1
 8007d56:	4413      	add	r3, r2
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d305      	bcc.n	8007d6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d64:	69ba      	ldr	r2, [r7, #24]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d70:	e113      	b.n	8007f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d74:	2200      	movs	r2, #0
 8007d76:	60bb      	str	r3, [r7, #8]
 8007d78:	60fa      	str	r2, [r7, #12]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	4a84      	ldr	r2, [pc, #528]	; (8007f90 <UART_SetConfig+0x5c4>)
 8007d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2200      	movs	r2, #0
 8007d88:	603b      	str	r3, [r7, #0]
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d94:	f7f8 ffa0 	bl	8000cd8 <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	4619      	mov	r1, r3
 8007da0:	f04f 0200 	mov.w	r2, #0
 8007da4:	f04f 0300 	mov.w	r3, #0
 8007da8:	020b      	lsls	r3, r1, #8
 8007daa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dae:	0202      	lsls	r2, r0, #8
 8007db0:	6979      	ldr	r1, [r7, #20]
 8007db2:	6849      	ldr	r1, [r1, #4]
 8007db4:	0849      	lsrs	r1, r1, #1
 8007db6:	2000      	movs	r0, #0
 8007db8:	460c      	mov	r4, r1
 8007dba:	4605      	mov	r5, r0
 8007dbc:	eb12 0804 	adds.w	r8, r2, r4
 8007dc0:	eb43 0905 	adc.w	r9, r3, r5
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	469a      	mov	sl, r3
 8007dcc:	4693      	mov	fp, r2
 8007dce:	4652      	mov	r2, sl
 8007dd0:	465b      	mov	r3, fp
 8007dd2:	4640      	mov	r0, r8
 8007dd4:	4649      	mov	r1, r9
 8007dd6:	f7f8 ff7f 	bl	8000cd8 <__aeabi_uldivmod>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4613      	mov	r3, r2
 8007de0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007de8:	d308      	bcc.n	8007dfc <UART_SetConfig+0x430>
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007df0:	d204      	bcs.n	8007dfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6a3a      	ldr	r2, [r7, #32]
 8007df8:	60da      	str	r2, [r3, #12]
 8007dfa:	e0ce      	b.n	8007f9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e02:	e0ca      	b.n	8007f9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e0c:	d166      	bne.n	8007edc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	d827      	bhi.n	8007e66 <UART_SetConfig+0x49a>
 8007e16:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0x450>)
 8007e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e49 	.word	0x08007e49
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e67 	.word	0x08007e67
 8007e2c:	08007e57 	.word	0x08007e57
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e67 	.word	0x08007e67
 8007e38:	08007e67 	.word	0x08007e67
 8007e3c:	08007e5f 	.word	0x08007e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fe fcb0 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 8007e44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e46:	e014      	b.n	8007e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e48:	f7fe fcc2 	bl	80067d0 <HAL_RCC_GetPCLK2Freq>
 8007e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e4e:	e010      	b.n	8007e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e50:	4b4e      	ldr	r3, [pc, #312]	; (8007f8c <UART_SetConfig+0x5c0>)
 8007e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e54:	e00d      	b.n	8007e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e56:	f7fe fc37 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8007e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e5c:	e009      	b.n	8007e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e64:	e005      	b.n	8007e72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e66:	2300      	movs	r3, #0
 8007e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8090 	beq.w	8007f9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	4a44      	ldr	r2, [pc, #272]	; (8007f90 <UART_SetConfig+0x5c4>)
 8007e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8c:	005a      	lsls	r2, r3, #1
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	085b      	lsrs	r3, r3, #1
 8007e94:	441a      	add	r2, r3
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	2b0f      	cmp	r3, #15
 8007ea4:	d916      	bls.n	8007ed4 <UART_SetConfig+0x508>
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eac:	d212      	bcs.n	8007ed4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f023 030f 	bic.w	r3, r3, #15
 8007eb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	8bfb      	ldrh	r3, [r7, #30]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	8bfa      	ldrh	r2, [r7, #30]
 8007ed0:	60da      	str	r2, [r3, #12]
 8007ed2:	e062      	b.n	8007f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007eda:	e05e      	b.n	8007f9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007edc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d828      	bhi.n	8007f36 <UART_SetConfig+0x56a>
 8007ee4:	a201      	add	r2, pc, #4	; (adr r2, 8007eec <UART_SetConfig+0x520>)
 8007ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eea:	bf00      	nop
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f19 	.word	0x08007f19
 8007ef4:	08007f21 	.word	0x08007f21
 8007ef8:	08007f37 	.word	0x08007f37
 8007efc:	08007f27 	.word	0x08007f27
 8007f00:	08007f37 	.word	0x08007f37
 8007f04:	08007f37 	.word	0x08007f37
 8007f08:	08007f37 	.word	0x08007f37
 8007f0c:	08007f2f 	.word	0x08007f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7fe fc48 	bl	80067a4 <HAL_RCC_GetPCLK1Freq>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f16:	e014      	b.n	8007f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f18:	f7fe fc5a 	bl	80067d0 <HAL_RCC_GetPCLK2Freq>
 8007f1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f1e:	e010      	b.n	8007f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f20:	4b1a      	ldr	r3, [pc, #104]	; (8007f8c <UART_SetConfig+0x5c0>)
 8007f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f24:	e00d      	b.n	8007f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f26:	f7fe fbcf 	bl	80066c8 <HAL_RCC_GetSysClockFreq>
 8007f2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f2c:	e009      	b.n	8007f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f34:	e005      	b.n	8007f42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f40:	bf00      	nop
    }

    if (pclk != 0U)
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d028      	beq.n	8007f9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <UART_SetConfig+0x5c4>)
 8007f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f52:	461a      	mov	r2, r3
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	441a      	add	r2, r3
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f6c:	6a3b      	ldr	r3, [r7, #32]
 8007f6e:	2b0f      	cmp	r3, #15
 8007f70:	d910      	bls.n	8007f94 <UART_SetConfig+0x5c8>
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f78:	d20c      	bcs.n	8007f94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	60da      	str	r2, [r3, #12]
 8007f84:	e009      	b.n	8007f9a <UART_SetConfig+0x5ce>
 8007f86:	bf00      	nop
 8007f88:	40008000 	.word	0x40008000
 8007f8c:	00f42400 	.word	0x00f42400
 8007f90:	0800d244 	.word	0x0800d244
      }
      else
      {
        ret = HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2200      	movs	r2, #0
 8007fae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3730      	adds	r7, #48	; 0x30
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d00a      	beq.n	8007fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00a      	beq.n	8008010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008014:	f003 0302 	and.w	r3, r3, #2
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00a      	beq.n	8008032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008036:	f003 0304 	and.w	r3, r3, #4
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00a      	beq.n	8008054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00a      	beq.n	8008076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	430a      	orrs	r2, r1
 8008074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d00a      	beq.n	8008098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	689b      	ldr	r3, [r3, #8]
 8008088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	430a      	orrs	r2, r1
 8008096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01a      	beq.n	80080da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	430a      	orrs	r2, r1
 80080b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080c2:	d10a      	bne.n	80080da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00a      	beq.n	80080fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	430a      	orrs	r2, r1
 80080fa:	605a      	str	r2, [r3, #4]
  }
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b098      	sub	sp, #96	; 0x60
 800810c:	af02      	add	r7, sp, #8
 800810e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008118:	f7fd fa18 	bl	800554c <HAL_GetTick>
 800811c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0308 	and.w	r3, r3, #8
 8008128:	2b08      	cmp	r3, #8
 800812a:	d12f      	bne.n	800818c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008130:	9300      	str	r3, [sp, #0]
 8008132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008134:	2200      	movs	r2, #0
 8008136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f88e 	bl	800825c <UART_WaitOnFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d022      	beq.n	800818c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	e853 3f00 	ldrex	r3, [r3]
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800815a:	653b      	str	r3, [r7, #80]	; 0x50
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	461a      	mov	r2, r3
 8008162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008164:	647b      	str	r3, [r7, #68]	; 0x44
 8008166:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800816a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800816c:	e841 2300 	strex	r3, r2, [r1]
 8008170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1e6      	bne.n	8008146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2220      	movs	r2, #32
 800817c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e063      	b.n	8008254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f003 0304 	and.w	r3, r3, #4
 8008196:	2b04      	cmp	r3, #4
 8008198:	d149      	bne.n	800822e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800819a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081a2:	2200      	movs	r2, #0
 80081a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f857 	bl	800825c <UART_WaitOnFlagUntilTimeout>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d03c      	beq.n	800822e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	623b      	str	r3, [r7, #32]
   return(result);
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081d2:	633b      	str	r3, [r7, #48]	; 0x30
 80081d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081da:	e841 2300 	strex	r3, r2, [r1]
 80081de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d1e6      	bne.n	80081b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	3308      	adds	r3, #8
 80081ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	e853 3f00 	ldrex	r3, [r3]
 80081f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3308      	adds	r3, #8
 8008204:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008206:	61fa      	str	r2, [r7, #28]
 8008208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820a:	69b9      	ldr	r1, [r7, #24]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	e841 2300 	strex	r3, r2, [r1]
 8008212:	617b      	str	r3, [r7, #20]
   return(result);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d1e5      	bne.n	80081e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2220      	movs	r2, #32
 800821e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e012      	b.n	8008254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2220      	movs	r2, #32
 800823a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008252:	2300      	movs	r3, #0
}
 8008254:	4618      	mov	r0, r3
 8008256:	3758      	adds	r7, #88	; 0x58
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	4613      	mov	r3, r2
 800826a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800826c:	e04f      	b.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800826e:	69bb      	ldr	r3, [r7, #24]
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d04b      	beq.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008276:	f7fd f969 	bl	800554c <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	429a      	cmp	r2, r3
 8008284:	d302      	bcc.n	800828c <UART_WaitOnFlagUntilTimeout+0x30>
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e04e      	b.n	800832e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f003 0304 	and.w	r3, r3, #4
 800829a:	2b00      	cmp	r3, #0
 800829c:	d037      	beq.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b80      	cmp	r3, #128	; 0x80
 80082a2:	d034      	beq.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	2b40      	cmp	r3, #64	; 0x40
 80082a8:	d031      	beq.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	f003 0308 	and.w	r3, r3, #8
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d110      	bne.n	80082da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2208      	movs	r2, #8
 80082be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 f95b 	bl	800857c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2208      	movs	r2, #8
 80082ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2200      	movs	r2, #0
 80082d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e029      	b.n	800832e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	69db      	ldr	r3, [r3, #28]
 80082e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082e8:	d111      	bne.n	800830e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082f4:	68f8      	ldr	r0, [r7, #12]
 80082f6:	f000 f941 	bl	800857c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800830a:	2303      	movs	r3, #3
 800830c:	e00f      	b.n	800832e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4013      	ands	r3, r2
 8008318:	68ba      	ldr	r2, [r7, #8]
 800831a:	429a      	cmp	r2, r3
 800831c:	bf0c      	ite	eq
 800831e:	2301      	moveq	r3, #1
 8008320:	2300      	movne	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	461a      	mov	r2, r3
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	429a      	cmp	r2, r3
 800832a:	d0a0      	beq.n	800826e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008338:	b480      	push	{r7}
 800833a:	b0a3      	sub	sp, #140	; 0x8c
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	4613      	mov	r3, r2
 8008344:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	68ba      	ldr	r2, [r7, #8]
 800834a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	88fa      	ldrh	r2, [r7, #6]
 8008350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	88fa      	ldrh	r2, [r7, #6]
 8008358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800836a:	d10e      	bne.n	800838a <UART_Start_Receive_IT+0x52>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d105      	bne.n	8008380 <UART_Start_Receive_IT+0x48>
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f240 12ff 	movw	r2, #511	; 0x1ff
 800837a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800837e:	e02d      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	22ff      	movs	r2, #255	; 0xff
 8008384:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008388:	e028      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10d      	bne.n	80083ae <UART_Start_Receive_IT+0x76>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d104      	bne.n	80083a4 <UART_Start_Receive_IT+0x6c>
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	22ff      	movs	r2, #255	; 0xff
 800839e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083a2:	e01b      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	227f      	movs	r2, #127	; 0x7f
 80083a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083ac:	e016      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083b6:	d10d      	bne.n	80083d4 <UART_Start_Receive_IT+0x9c>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d104      	bne.n	80083ca <UART_Start_Receive_IT+0x92>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	227f      	movs	r2, #127	; 0x7f
 80083c4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083c8:	e008      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	223f      	movs	r2, #63	; 0x3f
 80083ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083d2:	e003      	b.n	80083dc <UART_Start_Receive_IT+0xa4>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2222      	movs	r2, #34	; 0x22
 80083e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3308      	adds	r3, #8
 80083f2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80083fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083fe:	f043 0301 	orr.w	r3, r3, #1
 8008402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3308      	adds	r3, #8
 800840c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008410:	673a      	str	r2, [r7, #112]	; 0x70
 8008412:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008414:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008416:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008418:	e841 2300 	strex	r3, r2, [r1]
 800841c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800841e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e3      	bne.n	80083ec <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800842c:	d14f      	bne.n	80084ce <UART_Start_Receive_IT+0x196>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008434:	88fa      	ldrh	r2, [r7, #6]
 8008436:	429a      	cmp	r2, r3
 8008438:	d349      	bcc.n	80084ce <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008442:	d107      	bne.n	8008454 <UART_Start_Receive_IT+0x11c>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a47      	ldr	r2, [pc, #284]	; (800856c <UART_Start_Receive_IT+0x234>)
 8008450:	675a      	str	r2, [r3, #116]	; 0x74
 8008452:	e002      	b.n	800845a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	4a46      	ldr	r2, [pc, #280]	; (8008570 <UART_Start_Receive_IT+0x238>)
 8008458:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d01a      	beq.n	8008498 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008486:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800848a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e4      	bne.n	8008462 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	3308      	adds	r3, #8
 800849e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	3308      	adds	r3, #8
 80084b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084b8:	64ba      	str	r2, [r7, #72]	; 0x48
 80084ba:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e5      	bne.n	8008498 <UART_Start_Receive_IT+0x160>
 80084cc:	e046      	b.n	800855c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084d6:	d107      	bne.n	80084e8 <UART_Start_Receive_IT+0x1b0>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d103      	bne.n	80084e8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4a24      	ldr	r2, [pc, #144]	; (8008574 <UART_Start_Receive_IT+0x23c>)
 80084e4:	675a      	str	r2, [r3, #116]	; 0x74
 80084e6:	e002      	b.n	80084ee <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4a23      	ldr	r2, [pc, #140]	; (8008578 <UART_Start_Receive_IT+0x240>)
 80084ec:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d019      	beq.n	800852a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	e853 3f00 	ldrex	r3, [r3]
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800850a:	677b      	str	r3, [r7, #116]	; 0x74
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	461a      	mov	r2, r3
 8008512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008514:	637b      	str	r3, [r7, #52]	; 0x34
 8008516:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008518:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800851a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800851c:	e841 2300 	strex	r3, r2, [r1]
 8008520:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1e6      	bne.n	80084f6 <UART_Start_Receive_IT+0x1be>
 8008528:	e018      	b.n	800855c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	e853 3f00 	ldrex	r3, [r3]
 8008536:	613b      	str	r3, [r7, #16]
   return(result);
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f043 0320 	orr.w	r3, r3, #32
 800853e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008548:	623b      	str	r3, [r7, #32]
 800854a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	69f9      	ldr	r1, [r7, #28]
 800854e:	6a3a      	ldr	r2, [r7, #32]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	61bb      	str	r3, [r7, #24]
   return(result);
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e6      	bne.n	800852a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	378c      	adds	r7, #140	; 0x8c
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr
 800856a:	bf00      	nop
 800856c:	08008d9d 	.word	0x08008d9d
 8008570:	08008a3d 	.word	0x08008a3d
 8008574:	08008885 	.word	0x08008885
 8008578:	080086cd 	.word	0x080086cd

0800857c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800857c:	b480      	push	{r7}
 800857e:	b095      	sub	sp, #84	; 0x54
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800858c:	e853 3f00 	ldrex	r3, [r3]
 8008590:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085a2:	643b      	str	r3, [r7, #64]	; 0x40
 80085a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085aa:	e841 2300 	strex	r3, r2, [r1]
 80085ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d1e6      	bne.n	8008584 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3308      	adds	r3, #8
 80085bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085cc:	f023 0301 	bic.w	r3, r3, #1
 80085d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e2:	e841 2300 	strex	r3, r2, [r1]
 80085e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1e3      	bne.n	80085b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d118      	bne.n	8008628 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	e853 3f00 	ldrex	r3, [r3]
 8008602:	60bb      	str	r3, [r7, #8]
   return(result);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0310 	bic.w	r3, r3, #16
 800860a:	647b      	str	r3, [r7, #68]	; 0x44
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	461a      	mov	r2, r3
 8008612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008614:	61bb      	str	r3, [r7, #24]
 8008616:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008618:	6979      	ldr	r1, [r7, #20]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	e841 2300 	strex	r3, r2, [r1]
 8008620:	613b      	str	r3, [r7, #16]
   return(result);
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d1e6      	bne.n	80085f6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800863c:	bf00      	nop
 800863e:	3754      	adds	r7, #84	; 0x54
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2200      	movs	r2, #0
 8008662:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008666:	68f8      	ldr	r0, [r7, #12]
 8008668:	f7ff f99a 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	e853 3f00 	ldrex	r3, [r3]
 8008688:	60bb      	str	r3, [r7, #8]
   return(result);
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	69fb      	ldr	r3, [r7, #28]
 800869a:	61bb      	str	r3, [r7, #24]
 800869c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	e841 2300 	strex	r3, r2, [r1]
 80086a6:	613b      	str	r3, [r7, #16]
   return(result);
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1e6      	bne.n	800867c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f7ff f965 	bl	800798c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086c2:	bf00      	nop
 80086c4:	3720      	adds	r7, #32
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b09c      	sub	sp, #112	; 0x70
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086da:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086e4:	2b22      	cmp	r3, #34	; 0x22
 80086e6:	f040 80be 	bne.w	8008866 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80086f4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80086f8:	b2d9      	uxtb	r1, r3
 80086fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008704:	400a      	ands	r2, r1
 8008706:	b2d2      	uxtb	r2, r2
 8008708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800870e:	1c5a      	adds	r2, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800871a:	b29b      	uxth	r3, r3
 800871c:	3b01      	subs	r3, #1
 800871e:	b29a      	uxth	r2, r3
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	f040 80a1 	bne.w	8008876 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800873a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873c:	e853 3f00 	ldrex	r3, [r3]
 8008740:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008748:	66bb      	str	r3, [r7, #104]	; 0x68
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008752:	65bb      	str	r3, [r7, #88]	; 0x58
 8008754:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008756:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008758:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800875a:	e841 2300 	strex	r3, r2, [r1]
 800875e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1e6      	bne.n	8008734 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	e853 3f00 	ldrex	r3, [r3]
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008778:	f023 0301 	bic.w	r3, r3, #1
 800877c:	667b      	str	r3, [r7, #100]	; 0x64
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	3308      	adds	r3, #8
 8008784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008786:	647a      	str	r2, [r7, #68]	; 0x44
 8008788:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800878c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800878e:	e841 2300 	strex	r3, r2, [r1]
 8008792:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008796:	2b00      	cmp	r3, #0
 8008798:	d1e5      	bne.n	8008766 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2220      	movs	r2, #32
 800879e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a33      	ldr	r2, [pc, #204]	; (8008880 <UART_RxISR_8BIT+0x1b4>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d01f      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d018      	beq.n	80087f8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	e853 3f00 	ldrex	r3, [r3]
 80087d2:	623b      	str	r3, [r7, #32]
   return(result);
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80087da:	663b      	str	r3, [r7, #96]	; 0x60
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	461a      	mov	r2, r3
 80087e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e4:	633b      	str	r3, [r7, #48]	; 0x30
 80087e6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087ec:	e841 2300 	strex	r3, r2, [r1]
 80087f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d1e6      	bne.n	80087c6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087fc:	2b01      	cmp	r3, #1
 80087fe:	d12e      	bne.n	800885e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	e853 3f00 	ldrex	r3, [r3]
 8008812:	60fb      	str	r3, [r7, #12]
   return(result);
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0310 	bic.w	r3, r3, #16
 800881a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	461a      	mov	r2, r3
 8008822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008824:	61fb      	str	r3, [r7, #28]
 8008826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008828:	69b9      	ldr	r1, [r7, #24]
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	e841 2300 	strex	r3, r2, [r1]
 8008830:	617b      	str	r3, [r7, #20]
   return(result);
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d1e6      	bne.n	8008806 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f003 0310 	and.w	r3, r3, #16
 8008842:	2b10      	cmp	r3, #16
 8008844:	d103      	bne.n	800884e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2210      	movs	r2, #16
 800884c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7ff f8ac 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800885c:	e00b      	b.n	8008876 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fc fc0a 	bl	8005078 <HAL_UART_RxCpltCallback>
}
 8008864:	e007      	b.n	8008876 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f042 0208 	orr.w	r2, r2, #8
 8008874:	619a      	str	r2, [r3, #24]
}
 8008876:	bf00      	nop
 8008878:	3770      	adds	r7, #112	; 0x70
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	40008000 	.word	0x40008000

08008884 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b09c      	sub	sp, #112	; 0x70
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008892:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800889c:	2b22      	cmp	r3, #34	; 0x22
 800889e:	f040 80be 	bne.w	8008a1e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80088b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088ba:	4013      	ands	r3, r2
 80088bc:	b29a      	uxth	r2, r3
 80088be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	1c9a      	adds	r2, r3, #2
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	3b01      	subs	r3, #1
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f040 80a1 	bne.w	8008a2e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80088fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008900:	667b      	str	r3, [r7, #100]	; 0x64
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800890a:	657b      	str	r3, [r7, #84]	; 0x54
 800890c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008910:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e6      	bne.n	80088ec <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	3308      	adds	r3, #8
 8008924:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008928:	e853 3f00 	ldrex	r3, [r3]
 800892c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	f023 0301 	bic.w	r3, r3, #1
 8008934:	663b      	str	r3, [r7, #96]	; 0x60
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800893e:	643a      	str	r2, [r7, #64]	; 0x40
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008942:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008946:	e841 2300 	strex	r3, r2, [r1]
 800894a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800894c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1e5      	bne.n	800891e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2220      	movs	r2, #32
 8008956:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a33      	ldr	r2, [pc, #204]	; (8008a38 <UART_RxISR_16BIT+0x1b4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d01f      	beq.n	80089b0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d018      	beq.n	80089b0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6a3b      	ldr	r3, [r7, #32]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	61fb      	str	r3, [r7, #28]
   return(result);
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008992:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800899e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e6      	bne.n	800897e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b01      	cmp	r3, #1
 80089b6:	d12e      	bne.n	8008a16 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2200      	movs	r2, #0
 80089bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f023 0310 	bic.w	r3, r3, #16
 80089d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089dc:	61bb      	str	r3, [r7, #24]
 80089de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6979      	ldr	r1, [r7, #20]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	613b      	str	r3, [r7, #16]
   return(result);
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	2b10      	cmp	r3, #16
 80089fc:	d103      	bne.n	8008a06 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2210      	movs	r2, #16
 8008a04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f7fe ffd0 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a14:	e00b      	b.n	8008a2e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f7fc fb2e 	bl	8005078 <HAL_UART_RxCpltCallback>
}
 8008a1c:	e007      	b.n	8008a2e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	699a      	ldr	r2, [r3, #24]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	619a      	str	r2, [r3, #24]
}
 8008a2e:	bf00      	nop
 8008a30:	3770      	adds	r7, #112	; 0x70
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40008000 	.word	0x40008000

08008a3c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b0ac      	sub	sp, #176	; 0xb0
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a72:	2b22      	cmp	r3, #34	; 0x22
 8008a74:	f040 8182 	bne.w	8008d7c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a7e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a82:	e125      	b.n	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a8a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a8e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008a92:	b2d9      	uxtb	r1, r3
 8008a94:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a98:	b2da      	uxtb	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	400a      	ands	r2, r1
 8008aa0:	b2d2      	uxtb	r2, r2
 8008aa2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aa8:	1c5a      	adds	r2, r3, #1
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	69db      	ldr	r3, [r3, #28]
 8008ac6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008aca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ace:	f003 0307 	and.w	r3, r3, #7
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d053      	beq.n	8008b7e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ad6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ada:	f003 0301 	and.w	r3, r3, #1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d011      	beq.n	8008b06 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d00b      	beq.n	8008b06 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	2201      	movs	r2, #1
 8008af4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afc:	f043 0201 	orr.w	r2, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d011      	beq.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b16:	f003 0301 	and.w	r3, r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00b      	beq.n	8008b36 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2202      	movs	r2, #2
 8008b24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b2c:	f043 0204 	orr.w	r2, r3, #4
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b3a:	f003 0304 	and.w	r3, r3, #4
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d011      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b46:	f003 0301 	and.w	r3, r3, #1
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00b      	beq.n	8008b66 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2204      	movs	r2, #4
 8008b54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b5c:	f043 0202 	orr.w	r2, r3, #2
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d006      	beq.n	8008b7e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fe ff15 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f040 80a2 	bne.w	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bae:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bb0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bb4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e4      	bne.n	8008b8c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	3308      	adds	r3, #8
 8008be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008bea:	66ba      	str	r2, [r7, #104]	; 0x68
 8008bec:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008bf0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bf2:	e841 2300 	strex	r3, r2, [r1]
 8008bf6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008bf8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d1e1      	bne.n	8008bc2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2220      	movs	r2, #32
 8008c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a5f      	ldr	r2, [pc, #380]	; (8008d94 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d021      	beq.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d01a      	beq.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c32:	e853 3f00 	ldrex	r3, [r3]
 8008c36:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8008c4e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c50:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c54:	e841 2300 	strex	r3, r2, [r1]
 8008c58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e4      	bne.n	8008c2a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d130      	bne.n	8008cca <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	f023 0310 	bic.w	r3, r3, #16
 8008c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c90:	643b      	str	r3, [r7, #64]	; 0x40
 8008c92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c98:	e841 2300 	strex	r3, r2, [r1]
 8008c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d1e4      	bne.n	8008c6e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	f003 0310 	and.w	r3, r3, #16
 8008cae:	2b10      	cmp	r3, #16
 8008cb0:	d103      	bne.n	8008cba <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2210      	movs	r2, #16
 8008cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fe fe76 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8008cc8:	e002      	b.n	8008cd0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7fc f9d4 	bl	8005078 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008cd0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d006      	beq.n	8008ce6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008cdc:	f003 0320 	and.w	r3, r3, #32
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f aecf 	bne.w	8008a84 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cec:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008cf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d049      	beq.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008cfe:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d242      	bcs.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	e853 3f00 	ldrex	r3, [r3]
 8008d14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d32:	e841 2300 	strex	r3, r2, [r1]
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d1e3      	bne.n	8008d06 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008d42:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f043 0320 	orr.w	r3, r3, #32
 8008d58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d66:	61bb      	str	r3, [r7, #24]
 8008d68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6979      	ldr	r1, [r7, #20]
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	613b      	str	r3, [r7, #16]
   return(result);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e4      	bne.n	8008d44 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d7a:	e007      	b.n	8008d8c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	699a      	ldr	r2, [r3, #24]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f042 0208 	orr.w	r2, r2, #8
 8008d8a:	619a      	str	r2, [r3, #24]
}
 8008d8c:	bf00      	nop
 8008d8e:	37b0      	adds	r7, #176	; 0xb0
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40008000 	.word	0x40008000
 8008d98:	080086cd 	.word	0x080086cd

08008d9c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b0ae      	sub	sp, #184	; 0xb8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008daa:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dd2:	2b22      	cmp	r3, #34	; 0x22
 8008dd4:	f040 8186 	bne.w	80090e4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dde:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008de2:	e129      	b.n	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008df6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008dfa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008dfe:	4013      	ands	r3, r2
 8008e00:	b29a      	uxth	r2, r3
 8008e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e06:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e0c:	1c9a      	adds	r2, r3, #2
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	3b01      	subs	r3, #1
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e32:	f003 0307 	and.w	r3, r3, #7
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d053      	beq.n	8008ee2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d011      	beq.n	8008e6a <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00b      	beq.n	8008e6a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	2201      	movs	r2, #1
 8008e58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	f043 0201 	orr.w	r2, r3, #1
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e6e:	f003 0302 	and.w	r3, r3, #2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d011      	beq.n	8008e9a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e7a:	f003 0301 	and.w	r3, r3, #1
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2202      	movs	r2, #2
 8008e88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e90:	f043 0204 	orr.w	r2, r3, #4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e9e:	f003 0304 	and.w	r3, r3, #4
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d011      	beq.n	8008eca <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008ea6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2204      	movs	r2, #4
 8008eb8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec0:	f043 0202 	orr.w	r2, r3, #2
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d006      	beq.n	8008ee2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7fe fd63 	bl	80079a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f040 80a4 	bne.w	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef8:	e853 3f00 	ldrex	r3, [r3]
 8008efc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008efe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f16:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e2      	bne.n	8008ef0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f40:	f023 0301 	bic.w	r3, r3, #1
 8008f44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	3308      	adds	r3, #8
 8008f4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008f52:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f54:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e1      	bne.n	8008f2a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a5f      	ldr	r2, [pc, #380]	; (80090fc <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d021      	beq.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d01a      	beq.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008fa6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008fb4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fb6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008fc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e4      	bne.n	8008f92 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d130      	bne.n	8009032 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	e853 3f00 	ldrex	r3, [r3]
 8008fe2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fe6:	f023 0310 	bic.w	r3, r3, #16
 8008fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ff8:	647b      	str	r3, [r7, #68]	; 0x44
 8008ffa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009000:	e841 2300 	strex	r3, r2, [r1]
 8009004:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1e4      	bne.n	8008fd6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	69db      	ldr	r3, [r3, #28]
 8009012:	f003 0310 	and.w	r3, r3, #16
 8009016:	2b10      	cmp	r3, #16
 8009018:	d103      	bne.n	8009022 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2210      	movs	r2, #16
 8009020:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe fcc2 	bl	80079b4 <HAL_UARTEx_RxEventCallback>
 8009030:	e002      	b.n	8009038 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fc f820 	bl	8005078 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009038:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800903c:	2b00      	cmp	r3, #0
 800903e:	d006      	beq.n	800904e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009040:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009044:	f003 0320 	and.w	r3, r3, #32
 8009048:	2b00      	cmp	r3, #0
 800904a:	f47f aecb 	bne.w	8008de4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009054:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009058:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800905c:	2b00      	cmp	r3, #0
 800905e:	d049      	beq.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009066:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800906a:	429a      	cmp	r2, r3
 800906c:	d242      	bcs.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3308      	adds	r3, #8
 8009074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	e853 3f00 	ldrex	r3, [r3]
 800907c:	623b      	str	r3, [r7, #32]
   return(result);
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3308      	adds	r3, #8
 800908e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009092:	633a      	str	r2, [r7, #48]	; 0x30
 8009094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800909a:	e841 2300 	strex	r3, r2, [r1]
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d1e3      	bne.n	800906e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a15      	ldr	r2, [pc, #84]	; (8009100 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80090aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	e853 3f00 	ldrex	r3, [r3]
 80090b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f043 0320 	orr.w	r3, r3, #32
 80090c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090ce:	61fb      	str	r3, [r7, #28]
 80090d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	69b9      	ldr	r1, [r7, #24]
 80090d4:	69fa      	ldr	r2, [r7, #28]
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	617b      	str	r3, [r7, #20]
   return(result);
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e4      	bne.n	80090ac <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090e2:	e007      	b.n	80090f4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0208 	orr.w	r2, r2, #8
 80090f2:	619a      	str	r2, [r3, #24]
}
 80090f4:	bf00      	nop
 80090f6:	37b8      	adds	r7, #184	; 0xb8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	40008000 	.word	0x40008000
 8009100:	08008885 	.word	0x08008885

08009104 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800910c:	bf00      	nop
 800910e:	370c      	adds	r7, #12
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800912c:	b480      	push	{r7}
 800912e:	b083      	sub	sp, #12
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009134:	bf00      	nop
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <HAL_UARTEx_DisableFifoMode+0x16>
 8009152:	2302      	movs	r3, #2
 8009154:	e027      	b.n	80091a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2224      	movs	r2, #36	; 0x24
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f022 0201 	bic.w	r2, r2, #1
 800917c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009184:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2200      	movs	r2, #0
 800918a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2220      	movs	r2, #32
 8009198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091a4:	2300      	movs	r3, #0
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d101      	bne.n	80091ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c6:	2302      	movs	r3, #2
 80091c8:	e02d      	b.n	8009226 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2224      	movs	r2, #36	; 0x24
 80091d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0201 	bic.w	r2, r2, #1
 80091f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	683a      	ldr	r2, [r7, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f850 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2220      	movs	r2, #32
 8009218:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b084      	sub	sp, #16
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009242:	2302      	movs	r3, #2
 8009244:	e02d      	b.n	80092a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2201      	movs	r2, #1
 800924a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2224      	movs	r2, #36	; 0x24
 8009252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f022 0201 	bic.w	r2, r2, #1
 800926c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	683a      	ldr	r2, [r7, #0]
 800927e:	430a      	orrs	r2, r1
 8009280:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f812 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68fa      	ldr	r2, [r7, #12]
 800928e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2220      	movs	r2, #32
 8009294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2200      	movs	r2, #0
 800929c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
	...

080092ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092cc:	e031      	b.n	8009332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ce:	2308      	movs	r3, #8
 80092d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d2:	2308      	movs	r3, #8
 80092d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	0e5b      	lsrs	r3, r3, #25
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0f5b      	lsrs	r3, r3, #29
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	7b3a      	ldrb	r2, [r7, #12]
 80092fa:	4911      	ldr	r1, [pc, #68]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 80092fc:	5c8a      	ldrb	r2, [r1, r2]
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009302:	7b3a      	ldrb	r2, [r7, #12]
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009308:	fb93 f3f2 	sdiv	r3, r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	4909      	ldr	r1, [pc, #36]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 800931a:	5c8a      	ldrb	r2, [r1, r2]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	4908      	ldr	r1, [pc, #32]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009326:	fb93 f3f2 	sdiv	r3, r3, r2
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	0800d25c 	.word	0x0800d25c
 8009344:	0800d264 	.word	0x0800d264

08009348 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009348:	b480      	push	{r7}
 800934a:	b08b      	sub	sp, #44	; 0x2c
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	fa93 f3a3 	rbit	r3, r3
 8009362:	613b      	str	r3, [r7, #16]
  return result;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d101      	bne.n	8009372 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800936e:	2320      	movs	r3, #32
 8009370:	e003      	b.n	800937a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	fab3 f383 	clz	r3, r3
 8009378:	b2db      	uxtb	r3, r3
 800937a:	005b      	lsls	r3, r3, #1
 800937c:	2103      	movs	r1, #3
 800937e:	fa01 f303 	lsl.w	r3, r1, r3
 8009382:	43db      	mvns	r3, r3
 8009384:	401a      	ands	r2, r3
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938a:	6a3b      	ldr	r3, [r7, #32]
 800938c:	fa93 f3a3 	rbit	r3, r3
 8009390:	61fb      	str	r3, [r7, #28]
  return result;
 8009392:	69fb      	ldr	r3, [r7, #28]
 8009394:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	2b00      	cmp	r3, #0
 800939a:	d101      	bne.n	80093a0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800939c:	2320      	movs	r3, #32
 800939e:	e003      	b.n	80093a8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a2:	fab3 f383 	clz	r3, r3
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	fa01 f303 	lsl.w	r3, r1, r3
 80093b0:	431a      	orrs	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	601a      	str	r2, [r3, #0]
}
 80093b6:	bf00      	nop
 80093b8:	372c      	adds	r7, #44	; 0x2c
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	60f8      	str	r0, [r7, #12]
 80093ca:	60b9      	str	r1, [r7, #8]
 80093cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	43db      	mvns	r3, r3
 80093d6:	401a      	ands	r2, r3
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	fb01 f303 	mul.w	r3, r1, r3
 80093e0:	431a      	orrs	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	605a      	str	r2, [r3, #4]
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b08b      	sub	sp, #44	; 0x2c
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	689a      	ldr	r2, [r3, #8]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	fa93 f3a3 	rbit	r3, r3
 800940c:	613b      	str	r3, [r7, #16]
  return result;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009418:	2320      	movs	r3, #32
 800941a:	e003      	b.n	8009424 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	fab3 f383 	clz	r3, r3
 8009422:	b2db      	uxtb	r3, r3
 8009424:	005b      	lsls	r3, r3, #1
 8009426:	2103      	movs	r1, #3
 8009428:	fa01 f303 	lsl.w	r3, r1, r3
 800942c:	43db      	mvns	r3, r3
 800942e:	401a      	ands	r2, r3
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	fa93 f3a3 	rbit	r3, r3
 800943a:	61fb      	str	r3, [r7, #28]
  return result;
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	2b00      	cmp	r3, #0
 8009444:	d101      	bne.n	800944a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009446:	2320      	movs	r3, #32
 8009448:	e003      	b.n	8009452 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	fab3 f383 	clz	r3, r3
 8009450:	b2db      	uxtb	r3, r3
 8009452:	005b      	lsls	r3, r3, #1
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	fa01 f303 	lsl.w	r3, r1, r3
 800945a:	431a      	orrs	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8009460:	bf00      	nop
 8009462:	372c      	adds	r7, #44	; 0x2c
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800946c:	b480      	push	{r7}
 800946e:	b08b      	sub	sp, #44	; 0x2c
 8009470:	af00      	add	r7, sp, #0
 8009472:	60f8      	str	r0, [r7, #12]
 8009474:	60b9      	str	r1, [r7, #8]
 8009476:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	68da      	ldr	r2, [r3, #12]
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	fa93 f3a3 	rbit	r3, r3
 8009486:	613b      	str	r3, [r7, #16]
  return result;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009492:	2320      	movs	r3, #32
 8009494:	e003      	b.n	800949e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	fab3 f383 	clz	r3, r3
 800949c:	b2db      	uxtb	r3, r3
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	2103      	movs	r1, #3
 80094a2:	fa01 f303 	lsl.w	r3, r1, r3
 80094a6:	43db      	mvns	r3, r3
 80094a8:	401a      	ands	r2, r3
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ae:	6a3b      	ldr	r3, [r7, #32]
 80094b0:	fa93 f3a3 	rbit	r3, r3
 80094b4:	61fb      	str	r3, [r7, #28]
  return result;
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80094c0:	2320      	movs	r3, #32
 80094c2:	e003      	b.n	80094cc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	fab3 f383 	clz	r3, r3
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	6879      	ldr	r1, [r7, #4]
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	431a      	orrs	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	60da      	str	r2, [r3, #12]
}
 80094da:	bf00      	nop
 80094dc:	372c      	adds	r7, #44	; 0x2c
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b08b      	sub	sp, #44	; 0x2c
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	60f8      	str	r0, [r7, #12]
 80094ee:	60b9      	str	r1, [r7, #8]
 80094f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a1a      	ldr	r2, [r3, #32]
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	fa93 f3a3 	rbit	r3, r3
 8009500:	613b      	str	r3, [r7, #16]
  return result;
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800950c:	2320      	movs	r3, #32
 800950e:	e003      	b.n	8009518 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8009510:	69bb      	ldr	r3, [r7, #24]
 8009512:	fab3 f383 	clz	r3, r3
 8009516:	b2db      	uxtb	r3, r3
 8009518:	009b      	lsls	r3, r3, #2
 800951a:	210f      	movs	r1, #15
 800951c:	fa01 f303 	lsl.w	r3, r1, r3
 8009520:	43db      	mvns	r3, r3
 8009522:	401a      	ands	r2, r3
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	fa93 f3a3 	rbit	r3, r3
 800952e:	61fb      	str	r3, [r7, #28]
  return result;
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800953a:	2320      	movs	r3, #32
 800953c:	e003      	b.n	8009546 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	fab3 f383 	clz	r3, r3
 8009544:	b2db      	uxtb	r3, r3
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	fa01 f303 	lsl.w	r3, r1, r3
 800954e:	431a      	orrs	r2, r3
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009554:	bf00      	nop
 8009556:	372c      	adds	r7, #44	; 0x2c
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009560:	b480      	push	{r7}
 8009562:	b08b      	sub	sp, #44	; 0x2c
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	0a1b      	lsrs	r3, r3, #8
 8009574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	fa93 f3a3 	rbit	r3, r3
 800957c:	613b      	str	r3, [r7, #16]
  return result;
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d101      	bne.n	800958c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009588:	2320      	movs	r3, #32
 800958a:	e003      	b.n	8009594 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	fab3 f383 	clz	r3, r3
 8009592:	b2db      	uxtb	r3, r3
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	210f      	movs	r1, #15
 8009598:	fa01 f303 	lsl.w	r3, r1, r3
 800959c:	43db      	mvns	r3, r3
 800959e:	401a      	ands	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	0a1b      	lsrs	r3, r3, #8
 80095a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095a6:	6a3b      	ldr	r3, [r7, #32]
 80095a8:	fa93 f3a3 	rbit	r3, r3
 80095ac:	61fb      	str	r3, [r7, #28]
  return result;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d101      	bne.n	80095bc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80095b8:	2320      	movs	r3, #32
 80095ba:	e003      	b.n	80095c4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80095bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095be:	fab3 f383 	clz	r3, r3
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	fa01 f303 	lsl.w	r3, r1, r3
 80095cc:	431a      	orrs	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80095d2:	bf00      	nop
 80095d4:	372c      	adds	r7, #44	; 0x2c
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b088      	sub	sp, #32
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	fa93 f3a3 	rbit	r3, r3
 80095f4:	60fb      	str	r3, [r7, #12]
  return result;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <LL_GPIO_Init+0x26>
    return 32U;
 8009600:	2320      	movs	r3, #32
 8009602:	e003      	b.n	800960c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	fab3 f383 	clz	r3, r3
 800960a:	b2db      	uxtb	r3, r3
 800960c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800960e:	e048      	b.n	80096a2 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681a      	ldr	r2, [r3, #0]
 8009614:	2101      	movs	r1, #1
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	4013      	ands	r3, r2
 800961e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8009620:	69bb      	ldr	r3, [r7, #24]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d03a      	beq.n	800969c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	2b01      	cmp	r3, #1
 800962c:	d003      	beq.n	8009636 <LL_GPIO_Init+0x58>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2b02      	cmp	r3, #2
 8009634:	d10e      	bne.n	8009654 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	461a      	mov	r2, r3
 800963c:	69b9      	ldr	r1, [r7, #24]
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f7ff fed7 	bl	80093f2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	6819      	ldr	r1, [r3, #0]
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	461a      	mov	r2, r3
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7ff feb7 	bl	80093c2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	461a      	mov	r2, r3
 800965a:	69b9      	ldr	r1, [r7, #24]
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f7ff ff05 	bl	800946c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	685b      	ldr	r3, [r3, #4]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d111      	bne.n	800968e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	2bff      	cmp	r3, #255	; 0xff
 800966e:	d807      	bhi.n	8009680 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	461a      	mov	r2, r3
 8009676:	69b9      	ldr	r1, [r7, #24]
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff34 	bl	80094e6 <LL_GPIO_SetAFPin_0_7>
 800967e:	e006      	b.n	800968e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	695b      	ldr	r3, [r3, #20]
 8009684:	461a      	mov	r2, r3
 8009686:	69b9      	ldr	r1, [r7, #24]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f7ff ff69 	bl	8009560 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	461a      	mov	r2, r3
 8009694:	69b9      	ldr	r1, [r7, #24]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fe56 	bl	8009348 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	3301      	adds	r3, #1
 80096a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	69fb      	ldr	r3, [r7, #28]
 80096a8:	fa22 f303 	lsr.w	r3, r2, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1af      	bne.n	8009610 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3720      	adds	r7, #32
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <LL_I2C_Enable>:
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f043 0201 	orr.w	r2, r3, #1
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <LL_I2C_Disable>:
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f023 0201 	bic.w	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_I2C_ConfigFilters>:
{
 80096fa:	b480      	push	{r7}
 80096fc:	b085      	sub	sp, #20
 80096fe:	af00      	add	r7, sp, #0
 8009700:	60f8      	str	r0, [r7, #12]
 8009702:	60b9      	str	r1, [r7, #8]
 8009704:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	0219      	lsls	r1, r3, #8
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	430b      	orrs	r3, r1
 8009716:	431a      	orrs	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	601a      	str	r2, [r3, #0]
}
 800971c:	bf00      	nop
 800971e:	3714      	adds	r7, #20
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <LL_I2C_SetOwnAddress1>:
{
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800973c:	f023 0307 	bic.w	r3, r3, #7
 8009740:	68b9      	ldr	r1, [r7, #8]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	430a      	orrs	r2, r1
 8009746:	431a      	orrs	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	609a      	str	r2, [r3, #8]
}
 800974c:	bf00      	nop
 800974e:	3714      	adds	r7, #20
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <LL_I2C_EnableOwnAddress1>:
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	609a      	str	r2, [r3, #8]
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <LL_I2C_DisableOwnAddress1>:
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	609a      	str	r2, [r3, #8]
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <LL_I2C_SetTiming>:
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	611a      	str	r2, [r3, #16]
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <LL_I2C_SetMode>:
{
 80097b4:	b480      	push	{r7}
 80097b6:	b083      	sub	sp, #12
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	431a      	orrs	r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	601a      	str	r2, [r3, #0]
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr

080097da <LL_I2C_AcknowledgeNextData>:
{
 80097da:	b480      	push	{r7}
 80097dc:	b083      	sub	sp, #12
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
 80097e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	431a      	orrs	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	605a      	str	r2, [r3, #4]
}
 80097f4:	bf00      	nop
 80097f6:	370c      	adds	r7, #12
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff ff65 	bl	80096da <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6899      	ldr	r1, [r3, #8]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	461a      	mov	r2, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f7ff ff6d 	bl	80096fa <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	4619      	mov	r1, r3
 8009826:	6878      	ldr	r0, [r7, #4]
 8009828:	f7ff ffb6 	bl	8009798 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7ff ff44 	bl	80096ba <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f7ff ffa0 	bl	8009778 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	6919      	ldr	r1, [r3, #16]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	461a      	mov	r2, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f7ff ff70 	bl	8009728 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	691b      	ldr	r3, [r3, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d002      	beq.n	8009856 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f7ff ff81 	bl	8009758 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff ffa9 	bl	80097b4 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f7ff ffb6 	bl	80097da <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3708      	adds	r7, #8
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <__cvt>:
 8009878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800987c:	ec55 4b10 	vmov	r4, r5, d0
 8009880:	2d00      	cmp	r5, #0
 8009882:	460e      	mov	r6, r1
 8009884:	4619      	mov	r1, r3
 8009886:	462b      	mov	r3, r5
 8009888:	bfbb      	ittet	lt
 800988a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800988e:	461d      	movlt	r5, r3
 8009890:	2300      	movge	r3, #0
 8009892:	232d      	movlt	r3, #45	; 0x2d
 8009894:	700b      	strb	r3, [r1, #0]
 8009896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009898:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800989c:	4691      	mov	r9, r2
 800989e:	f023 0820 	bic.w	r8, r3, #32
 80098a2:	bfbc      	itt	lt
 80098a4:	4622      	movlt	r2, r4
 80098a6:	4614      	movlt	r4, r2
 80098a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098ac:	d005      	beq.n	80098ba <__cvt+0x42>
 80098ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80098b2:	d100      	bne.n	80098b6 <__cvt+0x3e>
 80098b4:	3601      	adds	r6, #1
 80098b6:	2102      	movs	r1, #2
 80098b8:	e000      	b.n	80098bc <__cvt+0x44>
 80098ba:	2103      	movs	r1, #3
 80098bc:	ab03      	add	r3, sp, #12
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	ab02      	add	r3, sp, #8
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	ec45 4b10 	vmov	d0, r4, r5
 80098c8:	4653      	mov	r3, sl
 80098ca:	4632      	mov	r2, r6
 80098cc:	f000 ff4c 	bl	800a768 <_dtoa_r>
 80098d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098d4:	4607      	mov	r7, r0
 80098d6:	d102      	bne.n	80098de <__cvt+0x66>
 80098d8:	f019 0f01 	tst.w	r9, #1
 80098dc:	d022      	beq.n	8009924 <__cvt+0xac>
 80098de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098e2:	eb07 0906 	add.w	r9, r7, r6
 80098e6:	d110      	bne.n	800990a <__cvt+0x92>
 80098e8:	783b      	ldrb	r3, [r7, #0]
 80098ea:	2b30      	cmp	r3, #48	; 0x30
 80098ec:	d10a      	bne.n	8009904 <__cvt+0x8c>
 80098ee:	2200      	movs	r2, #0
 80098f0:	2300      	movs	r3, #0
 80098f2:	4620      	mov	r0, r4
 80098f4:	4629      	mov	r1, r5
 80098f6:	f7f7 f90f 	bl	8000b18 <__aeabi_dcmpeq>
 80098fa:	b918      	cbnz	r0, 8009904 <__cvt+0x8c>
 80098fc:	f1c6 0601 	rsb	r6, r6, #1
 8009900:	f8ca 6000 	str.w	r6, [sl]
 8009904:	f8da 3000 	ldr.w	r3, [sl]
 8009908:	4499      	add	r9, r3
 800990a:	2200      	movs	r2, #0
 800990c:	2300      	movs	r3, #0
 800990e:	4620      	mov	r0, r4
 8009910:	4629      	mov	r1, r5
 8009912:	f7f7 f901 	bl	8000b18 <__aeabi_dcmpeq>
 8009916:	b108      	cbz	r0, 800991c <__cvt+0xa4>
 8009918:	f8cd 900c 	str.w	r9, [sp, #12]
 800991c:	2230      	movs	r2, #48	; 0x30
 800991e:	9b03      	ldr	r3, [sp, #12]
 8009920:	454b      	cmp	r3, r9
 8009922:	d307      	bcc.n	8009934 <__cvt+0xbc>
 8009924:	9b03      	ldr	r3, [sp, #12]
 8009926:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009928:	1bdb      	subs	r3, r3, r7
 800992a:	4638      	mov	r0, r7
 800992c:	6013      	str	r3, [r2, #0]
 800992e:	b004      	add	sp, #16
 8009930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009934:	1c59      	adds	r1, r3, #1
 8009936:	9103      	str	r1, [sp, #12]
 8009938:	701a      	strb	r2, [r3, #0]
 800993a:	e7f0      	b.n	800991e <__cvt+0xa6>

0800993c <__exponent>:
 800993c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800993e:	4603      	mov	r3, r0
 8009940:	2900      	cmp	r1, #0
 8009942:	bfb8      	it	lt
 8009944:	4249      	neglt	r1, r1
 8009946:	f803 2b02 	strb.w	r2, [r3], #2
 800994a:	bfb4      	ite	lt
 800994c:	222d      	movlt	r2, #45	; 0x2d
 800994e:	222b      	movge	r2, #43	; 0x2b
 8009950:	2909      	cmp	r1, #9
 8009952:	7042      	strb	r2, [r0, #1]
 8009954:	dd2a      	ble.n	80099ac <__exponent+0x70>
 8009956:	f10d 0207 	add.w	r2, sp, #7
 800995a:	4617      	mov	r7, r2
 800995c:	260a      	movs	r6, #10
 800995e:	4694      	mov	ip, r2
 8009960:	fb91 f5f6 	sdiv	r5, r1, r6
 8009964:	fb06 1415 	mls	r4, r6, r5, r1
 8009968:	3430      	adds	r4, #48	; 0x30
 800996a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800996e:	460c      	mov	r4, r1
 8009970:	2c63      	cmp	r4, #99	; 0x63
 8009972:	f102 32ff 	add.w	r2, r2, #4294967295
 8009976:	4629      	mov	r1, r5
 8009978:	dcf1      	bgt.n	800995e <__exponent+0x22>
 800997a:	3130      	adds	r1, #48	; 0x30
 800997c:	f1ac 0402 	sub.w	r4, ip, #2
 8009980:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009984:	1c41      	adds	r1, r0, #1
 8009986:	4622      	mov	r2, r4
 8009988:	42ba      	cmp	r2, r7
 800998a:	d30a      	bcc.n	80099a2 <__exponent+0x66>
 800998c:	f10d 0209 	add.w	r2, sp, #9
 8009990:	eba2 020c 	sub.w	r2, r2, ip
 8009994:	42bc      	cmp	r4, r7
 8009996:	bf88      	it	hi
 8009998:	2200      	movhi	r2, #0
 800999a:	4413      	add	r3, r2
 800999c:	1a18      	subs	r0, r3, r0
 800999e:	b003      	add	sp, #12
 80099a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80099a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80099aa:	e7ed      	b.n	8009988 <__exponent+0x4c>
 80099ac:	2330      	movs	r3, #48	; 0x30
 80099ae:	3130      	adds	r1, #48	; 0x30
 80099b0:	7083      	strb	r3, [r0, #2]
 80099b2:	70c1      	strb	r1, [r0, #3]
 80099b4:	1d03      	adds	r3, r0, #4
 80099b6:	e7f1      	b.n	800999c <__exponent+0x60>

080099b8 <_printf_float>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	ed2d 8b02 	vpush	{d8}
 80099c0:	b08d      	sub	sp, #52	; 0x34
 80099c2:	460c      	mov	r4, r1
 80099c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80099c8:	4616      	mov	r6, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	4605      	mov	r5, r0
 80099ce:	f000 fdc9 	bl	800a564 <_localeconv_r>
 80099d2:	f8d0 a000 	ldr.w	sl, [r0]
 80099d6:	4650      	mov	r0, sl
 80099d8:	f7f6 fc72 	bl	80002c0 <strlen>
 80099dc:	2300      	movs	r3, #0
 80099de:	930a      	str	r3, [sp, #40]	; 0x28
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	9305      	str	r3, [sp, #20]
 80099e4:	f8d8 3000 	ldr.w	r3, [r8]
 80099e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099ec:	3307      	adds	r3, #7
 80099ee:	f023 0307 	bic.w	r3, r3, #7
 80099f2:	f103 0208 	add.w	r2, r3, #8
 80099f6:	f8c8 2000 	str.w	r2, [r8]
 80099fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009a02:	9307      	str	r3, [sp, #28]
 8009a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8009a08:	ee08 0a10 	vmov	s16, r0
 8009a0c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a14:	4b9e      	ldr	r3, [pc, #632]	; (8009c90 <_printf_float+0x2d8>)
 8009a16:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1a:	f7f7 f8af 	bl	8000b7c <__aeabi_dcmpun>
 8009a1e:	bb88      	cbnz	r0, 8009a84 <_printf_float+0xcc>
 8009a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a24:	4b9a      	ldr	r3, [pc, #616]	; (8009c90 <_printf_float+0x2d8>)
 8009a26:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2a:	f7f7 f889 	bl	8000b40 <__aeabi_dcmple>
 8009a2e:	bb48      	cbnz	r0, 8009a84 <_printf_float+0xcc>
 8009a30:	2200      	movs	r2, #0
 8009a32:	2300      	movs	r3, #0
 8009a34:	4640      	mov	r0, r8
 8009a36:	4649      	mov	r1, r9
 8009a38:	f7f7 f878 	bl	8000b2c <__aeabi_dcmplt>
 8009a3c:	b110      	cbz	r0, 8009a44 <_printf_float+0x8c>
 8009a3e:	232d      	movs	r3, #45	; 0x2d
 8009a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a44:	4a93      	ldr	r2, [pc, #588]	; (8009c94 <_printf_float+0x2dc>)
 8009a46:	4b94      	ldr	r3, [pc, #592]	; (8009c98 <_printf_float+0x2e0>)
 8009a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a4c:	bf94      	ite	ls
 8009a4e:	4690      	movls	r8, r2
 8009a50:	4698      	movhi	r8, r3
 8009a52:	2303      	movs	r3, #3
 8009a54:	6123      	str	r3, [r4, #16]
 8009a56:	9b05      	ldr	r3, [sp, #20]
 8009a58:	f023 0304 	bic.w	r3, r3, #4
 8009a5c:	6023      	str	r3, [r4, #0]
 8009a5e:	f04f 0900 	mov.w	r9, #0
 8009a62:	9700      	str	r7, [sp, #0]
 8009a64:	4633      	mov	r3, r6
 8009a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a68:	4621      	mov	r1, r4
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f000 f9da 	bl	8009e24 <_printf_common>
 8009a70:	3001      	adds	r0, #1
 8009a72:	f040 8090 	bne.w	8009b96 <_printf_float+0x1de>
 8009a76:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7a:	b00d      	add	sp, #52	; 0x34
 8009a7c:	ecbd 8b02 	vpop	{d8}
 8009a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a84:	4642      	mov	r2, r8
 8009a86:	464b      	mov	r3, r9
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4649      	mov	r1, r9
 8009a8c:	f7f7 f876 	bl	8000b7c <__aeabi_dcmpun>
 8009a90:	b140      	cbz	r0, 8009aa4 <_printf_float+0xec>
 8009a92:	464b      	mov	r3, r9
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	bfbc      	itt	lt
 8009a98:	232d      	movlt	r3, #45	; 0x2d
 8009a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a9e:	4a7f      	ldr	r2, [pc, #508]	; (8009c9c <_printf_float+0x2e4>)
 8009aa0:	4b7f      	ldr	r3, [pc, #508]	; (8009ca0 <_printf_float+0x2e8>)
 8009aa2:	e7d1      	b.n	8009a48 <_printf_float+0x90>
 8009aa4:	6863      	ldr	r3, [r4, #4]
 8009aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009aaa:	9206      	str	r2, [sp, #24]
 8009aac:	1c5a      	adds	r2, r3, #1
 8009aae:	d13f      	bne.n	8009b30 <_printf_float+0x178>
 8009ab0:	2306      	movs	r3, #6
 8009ab2:	6063      	str	r3, [r4, #4]
 8009ab4:	9b05      	ldr	r3, [sp, #20]
 8009ab6:	6861      	ldr	r1, [r4, #4]
 8009ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009abc:	2300      	movs	r3, #0
 8009abe:	9303      	str	r3, [sp, #12]
 8009ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8009ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009ac6:	ab09      	add	r3, sp, #36	; 0x24
 8009ac8:	ec49 8b10 	vmov	d0, r8, r9
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	6022      	str	r2, [r4, #0]
 8009ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009ad4:	4628      	mov	r0, r5
 8009ad6:	f7ff fecf 	bl	8009878 <__cvt>
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ade:	2b47      	cmp	r3, #71	; 0x47
 8009ae0:	4680      	mov	r8, r0
 8009ae2:	d108      	bne.n	8009af6 <_printf_float+0x13e>
 8009ae4:	1cc8      	adds	r0, r1, #3
 8009ae6:	db02      	blt.n	8009aee <_printf_float+0x136>
 8009ae8:	6863      	ldr	r3, [r4, #4]
 8009aea:	4299      	cmp	r1, r3
 8009aec:	dd41      	ble.n	8009b72 <_printf_float+0x1ba>
 8009aee:	f1ab 0302 	sub.w	r3, fp, #2
 8009af2:	fa5f fb83 	uxtb.w	fp, r3
 8009af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009afa:	d820      	bhi.n	8009b3e <_printf_float+0x186>
 8009afc:	3901      	subs	r1, #1
 8009afe:	465a      	mov	r2, fp
 8009b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009b04:	9109      	str	r1, [sp, #36]	; 0x24
 8009b06:	f7ff ff19 	bl	800993c <__exponent>
 8009b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b0c:	1813      	adds	r3, r2, r0
 8009b0e:	2a01      	cmp	r2, #1
 8009b10:	4681      	mov	r9, r0
 8009b12:	6123      	str	r3, [r4, #16]
 8009b14:	dc02      	bgt.n	8009b1c <_printf_float+0x164>
 8009b16:	6822      	ldr	r2, [r4, #0]
 8009b18:	07d2      	lsls	r2, r2, #31
 8009b1a:	d501      	bpl.n	8009b20 <_printf_float+0x168>
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d09c      	beq.n	8009a62 <_printf_float+0xaa>
 8009b28:	232d      	movs	r3, #45	; 0x2d
 8009b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b2e:	e798      	b.n	8009a62 <_printf_float+0xaa>
 8009b30:	9a06      	ldr	r2, [sp, #24]
 8009b32:	2a47      	cmp	r2, #71	; 0x47
 8009b34:	d1be      	bne.n	8009ab4 <_printf_float+0xfc>
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1bc      	bne.n	8009ab4 <_printf_float+0xfc>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e7b9      	b.n	8009ab2 <_printf_float+0xfa>
 8009b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b42:	d118      	bne.n	8009b76 <_printf_float+0x1be>
 8009b44:	2900      	cmp	r1, #0
 8009b46:	6863      	ldr	r3, [r4, #4]
 8009b48:	dd0b      	ble.n	8009b62 <_printf_float+0x1aa>
 8009b4a:	6121      	str	r1, [r4, #16]
 8009b4c:	b913      	cbnz	r3, 8009b54 <_printf_float+0x19c>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	07d0      	lsls	r0, r2, #31
 8009b52:	d502      	bpl.n	8009b5a <_printf_float+0x1a2>
 8009b54:	3301      	adds	r3, #1
 8009b56:	440b      	add	r3, r1
 8009b58:	6123      	str	r3, [r4, #16]
 8009b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b5c:	f04f 0900 	mov.w	r9, #0
 8009b60:	e7de      	b.n	8009b20 <_printf_float+0x168>
 8009b62:	b913      	cbnz	r3, 8009b6a <_printf_float+0x1b2>
 8009b64:	6822      	ldr	r2, [r4, #0]
 8009b66:	07d2      	lsls	r2, r2, #31
 8009b68:	d501      	bpl.n	8009b6e <_printf_float+0x1b6>
 8009b6a:	3302      	adds	r3, #2
 8009b6c:	e7f4      	b.n	8009b58 <_printf_float+0x1a0>
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e7f2      	b.n	8009b58 <_printf_float+0x1a0>
 8009b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b78:	4299      	cmp	r1, r3
 8009b7a:	db05      	blt.n	8009b88 <_printf_float+0x1d0>
 8009b7c:	6823      	ldr	r3, [r4, #0]
 8009b7e:	6121      	str	r1, [r4, #16]
 8009b80:	07d8      	lsls	r0, r3, #31
 8009b82:	d5ea      	bpl.n	8009b5a <_printf_float+0x1a2>
 8009b84:	1c4b      	adds	r3, r1, #1
 8009b86:	e7e7      	b.n	8009b58 <_printf_float+0x1a0>
 8009b88:	2900      	cmp	r1, #0
 8009b8a:	bfd4      	ite	le
 8009b8c:	f1c1 0202 	rsble	r2, r1, #2
 8009b90:	2201      	movgt	r2, #1
 8009b92:	4413      	add	r3, r2
 8009b94:	e7e0      	b.n	8009b58 <_printf_float+0x1a0>
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	055a      	lsls	r2, r3, #21
 8009b9a:	d407      	bmi.n	8009bac <_printf_float+0x1f4>
 8009b9c:	6923      	ldr	r3, [r4, #16]
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	d12c      	bne.n	8009c04 <_printf_float+0x24c>
 8009baa:	e764      	b.n	8009a76 <_printf_float+0xbe>
 8009bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bb0:	f240 80e0 	bls.w	8009d74 <_printf_float+0x3bc>
 8009bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009bb8:	2200      	movs	r2, #0
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f7f6 ffac 	bl	8000b18 <__aeabi_dcmpeq>
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d034      	beq.n	8009c2e <_printf_float+0x276>
 8009bc4:	4a37      	ldr	r2, [pc, #220]	; (8009ca4 <_printf_float+0x2ec>)
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af51 	beq.w	8009a76 <_printf_float+0xbe>
 8009bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	db02      	blt.n	8009be2 <_printf_float+0x22a>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07d8      	lsls	r0, r3, #31
 8009be0:	d510      	bpl.n	8009c04 <_printf_float+0x24c>
 8009be2:	ee18 3a10 	vmov	r3, s16
 8009be6:	4652      	mov	r2, sl
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af41 	beq.w	8009a76 <_printf_float+0xbe>
 8009bf4:	f04f 0800 	mov.w	r8, #0
 8009bf8:	f104 091a 	add.w	r9, r4, #26
 8009bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bfe:	3b01      	subs	r3, #1
 8009c00:	4543      	cmp	r3, r8
 8009c02:	dc09      	bgt.n	8009c18 <_printf_float+0x260>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	079b      	lsls	r3, r3, #30
 8009c08:	f100 8107 	bmi.w	8009e1a <_printf_float+0x462>
 8009c0c:	68e0      	ldr	r0, [r4, #12]
 8009c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c10:	4298      	cmp	r0, r3
 8009c12:	bfb8      	it	lt
 8009c14:	4618      	movlt	r0, r3
 8009c16:	e730      	b.n	8009a7a <_printf_float+0xc2>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	464a      	mov	r2, r9
 8009c1c:	4631      	mov	r1, r6
 8009c1e:	4628      	mov	r0, r5
 8009c20:	47b8      	blx	r7
 8009c22:	3001      	adds	r0, #1
 8009c24:	f43f af27 	beq.w	8009a76 <_printf_float+0xbe>
 8009c28:	f108 0801 	add.w	r8, r8, #1
 8009c2c:	e7e6      	b.n	8009bfc <_printf_float+0x244>
 8009c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dc39      	bgt.n	8009ca8 <_printf_float+0x2f0>
 8009c34:	4a1b      	ldr	r2, [pc, #108]	; (8009ca4 <_printf_float+0x2ec>)
 8009c36:	2301      	movs	r3, #1
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b8      	blx	r7
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f43f af19 	beq.w	8009a76 <_printf_float+0xbe>
 8009c44:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	d102      	bne.n	8009c52 <_printf_float+0x29a>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	07d9      	lsls	r1, r3, #31
 8009c50:	d5d8      	bpl.n	8009c04 <_printf_float+0x24c>
 8009c52:	ee18 3a10 	vmov	r3, s16
 8009c56:	4652      	mov	r2, sl
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f af09 	beq.w	8009a76 <_printf_float+0xbe>
 8009c64:	f04f 0900 	mov.w	r9, #0
 8009c68:	f104 0a1a 	add.w	sl, r4, #26
 8009c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c6e:	425b      	negs	r3, r3
 8009c70:	454b      	cmp	r3, r9
 8009c72:	dc01      	bgt.n	8009c78 <_printf_float+0x2c0>
 8009c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c76:	e792      	b.n	8009b9e <_printf_float+0x1e6>
 8009c78:	2301      	movs	r3, #1
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4628      	mov	r0, r5
 8009c80:	47b8      	blx	r7
 8009c82:	3001      	adds	r0, #1
 8009c84:	f43f aef7 	beq.w	8009a76 <_printf_float+0xbe>
 8009c88:	f109 0901 	add.w	r9, r9, #1
 8009c8c:	e7ee      	b.n	8009c6c <_printf_float+0x2b4>
 8009c8e:	bf00      	nop
 8009c90:	7fefffff 	.word	0x7fefffff
 8009c94:	0800d26c 	.word	0x0800d26c
 8009c98:	0800d270 	.word	0x0800d270
 8009c9c:	0800d274 	.word	0x0800d274
 8009ca0:	0800d278 	.word	0x0800d278
 8009ca4:	0800d27c 	.word	0x0800d27c
 8009ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cac:	429a      	cmp	r2, r3
 8009cae:	bfa8      	it	ge
 8009cb0:	461a      	movge	r2, r3
 8009cb2:	2a00      	cmp	r2, #0
 8009cb4:	4691      	mov	r9, r2
 8009cb6:	dc37      	bgt.n	8009d28 <_printf_float+0x370>
 8009cb8:	f04f 0b00 	mov.w	fp, #0
 8009cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cc0:	f104 021a 	add.w	r2, r4, #26
 8009cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	eba3 0309 	sub.w	r3, r3, r9
 8009ccc:	455b      	cmp	r3, fp
 8009cce:	dc33      	bgt.n	8009d38 <_printf_float+0x380>
 8009cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cd4:	429a      	cmp	r2, r3
 8009cd6:	db3b      	blt.n	8009d50 <_printf_float+0x398>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	07da      	lsls	r2, r3, #31
 8009cdc:	d438      	bmi.n	8009d50 <_printf_float+0x398>
 8009cde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ce2:	eba2 0903 	sub.w	r9, r2, r3
 8009ce6:	9b05      	ldr	r3, [sp, #20]
 8009ce8:	1ad2      	subs	r2, r2, r3
 8009cea:	4591      	cmp	r9, r2
 8009cec:	bfa8      	it	ge
 8009cee:	4691      	movge	r9, r2
 8009cf0:	f1b9 0f00 	cmp.w	r9, #0
 8009cf4:	dc35      	bgt.n	8009d62 <_printf_float+0x3aa>
 8009cf6:	f04f 0800 	mov.w	r8, #0
 8009cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cfe:	f104 0a1a 	add.w	sl, r4, #26
 8009d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d06:	1a9b      	subs	r3, r3, r2
 8009d08:	eba3 0309 	sub.w	r3, r3, r9
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	f77f af79 	ble.w	8009c04 <_printf_float+0x24c>
 8009d12:	2301      	movs	r3, #1
 8009d14:	4652      	mov	r2, sl
 8009d16:	4631      	mov	r1, r6
 8009d18:	4628      	mov	r0, r5
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	f43f aeaa 	beq.w	8009a76 <_printf_float+0xbe>
 8009d22:	f108 0801 	add.w	r8, r8, #1
 8009d26:	e7ec      	b.n	8009d02 <_printf_float+0x34a>
 8009d28:	4613      	mov	r3, r2
 8009d2a:	4631      	mov	r1, r6
 8009d2c:	4642      	mov	r2, r8
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b8      	blx	r7
 8009d32:	3001      	adds	r0, #1
 8009d34:	d1c0      	bne.n	8009cb8 <_printf_float+0x300>
 8009d36:	e69e      	b.n	8009a76 <_printf_float+0xbe>
 8009d38:	2301      	movs	r3, #1
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	9205      	str	r2, [sp, #20]
 8009d40:	47b8      	blx	r7
 8009d42:	3001      	adds	r0, #1
 8009d44:	f43f ae97 	beq.w	8009a76 <_printf_float+0xbe>
 8009d48:	9a05      	ldr	r2, [sp, #20]
 8009d4a:	f10b 0b01 	add.w	fp, fp, #1
 8009d4e:	e7b9      	b.n	8009cc4 <_printf_float+0x30c>
 8009d50:	ee18 3a10 	vmov	r3, s16
 8009d54:	4652      	mov	r2, sl
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	d1be      	bne.n	8009cde <_printf_float+0x326>
 8009d60:	e689      	b.n	8009a76 <_printf_float+0xbe>
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	464b      	mov	r3, r9
 8009d66:	4442      	add	r2, r8
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	d1c1      	bne.n	8009cf6 <_printf_float+0x33e>
 8009d72:	e680      	b.n	8009a76 <_printf_float+0xbe>
 8009d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d76:	2a01      	cmp	r2, #1
 8009d78:	dc01      	bgt.n	8009d7e <_printf_float+0x3c6>
 8009d7a:	07db      	lsls	r3, r3, #31
 8009d7c:	d53a      	bpl.n	8009df4 <_printf_float+0x43c>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4642      	mov	r2, r8
 8009d82:	4631      	mov	r1, r6
 8009d84:	4628      	mov	r0, r5
 8009d86:	47b8      	blx	r7
 8009d88:	3001      	adds	r0, #1
 8009d8a:	f43f ae74 	beq.w	8009a76 <_printf_float+0xbe>
 8009d8e:	ee18 3a10 	vmov	r3, s16
 8009d92:	4652      	mov	r2, sl
 8009d94:	4631      	mov	r1, r6
 8009d96:	4628      	mov	r0, r5
 8009d98:	47b8      	blx	r7
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	f43f ae6b 	beq.w	8009a76 <_printf_float+0xbe>
 8009da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009da4:	2200      	movs	r2, #0
 8009da6:	2300      	movs	r3, #0
 8009da8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009dac:	f7f6 feb4 	bl	8000b18 <__aeabi_dcmpeq>
 8009db0:	b9d8      	cbnz	r0, 8009dea <_printf_float+0x432>
 8009db2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009db6:	f108 0201 	add.w	r2, r8, #1
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d10e      	bne.n	8009de2 <_printf_float+0x42a>
 8009dc4:	e657      	b.n	8009a76 <_printf_float+0xbe>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	4652      	mov	r2, sl
 8009dca:	4631      	mov	r1, r6
 8009dcc:	4628      	mov	r0, r5
 8009dce:	47b8      	blx	r7
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	f43f ae50 	beq.w	8009a76 <_printf_float+0xbe>
 8009dd6:	f108 0801 	add.w	r8, r8, #1
 8009dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ddc:	3b01      	subs	r3, #1
 8009dde:	4543      	cmp	r3, r8
 8009de0:	dcf1      	bgt.n	8009dc6 <_printf_float+0x40e>
 8009de2:	464b      	mov	r3, r9
 8009de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009de8:	e6da      	b.n	8009ba0 <_printf_float+0x1e8>
 8009dea:	f04f 0800 	mov.w	r8, #0
 8009dee:	f104 0a1a 	add.w	sl, r4, #26
 8009df2:	e7f2      	b.n	8009dda <_printf_float+0x422>
 8009df4:	2301      	movs	r3, #1
 8009df6:	4642      	mov	r2, r8
 8009df8:	e7df      	b.n	8009dba <_printf_float+0x402>
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	464a      	mov	r2, r9
 8009dfe:	4631      	mov	r1, r6
 8009e00:	4628      	mov	r0, r5
 8009e02:	47b8      	blx	r7
 8009e04:	3001      	adds	r0, #1
 8009e06:	f43f ae36 	beq.w	8009a76 <_printf_float+0xbe>
 8009e0a:	f108 0801 	add.w	r8, r8, #1
 8009e0e:	68e3      	ldr	r3, [r4, #12]
 8009e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009e12:	1a5b      	subs	r3, r3, r1
 8009e14:	4543      	cmp	r3, r8
 8009e16:	dcf0      	bgt.n	8009dfa <_printf_float+0x442>
 8009e18:	e6f8      	b.n	8009c0c <_printf_float+0x254>
 8009e1a:	f04f 0800 	mov.w	r8, #0
 8009e1e:	f104 0919 	add.w	r9, r4, #25
 8009e22:	e7f4      	b.n	8009e0e <_printf_float+0x456>

08009e24 <_printf_common>:
 8009e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e28:	4616      	mov	r6, r2
 8009e2a:	4699      	mov	r9, r3
 8009e2c:	688a      	ldr	r2, [r1, #8]
 8009e2e:	690b      	ldr	r3, [r1, #16]
 8009e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e34:	4293      	cmp	r3, r2
 8009e36:	bfb8      	it	lt
 8009e38:	4613      	movlt	r3, r2
 8009e3a:	6033      	str	r3, [r6, #0]
 8009e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e40:	4607      	mov	r7, r0
 8009e42:	460c      	mov	r4, r1
 8009e44:	b10a      	cbz	r2, 8009e4a <_printf_common+0x26>
 8009e46:	3301      	adds	r3, #1
 8009e48:	6033      	str	r3, [r6, #0]
 8009e4a:	6823      	ldr	r3, [r4, #0]
 8009e4c:	0699      	lsls	r1, r3, #26
 8009e4e:	bf42      	ittt	mi
 8009e50:	6833      	ldrmi	r3, [r6, #0]
 8009e52:	3302      	addmi	r3, #2
 8009e54:	6033      	strmi	r3, [r6, #0]
 8009e56:	6825      	ldr	r5, [r4, #0]
 8009e58:	f015 0506 	ands.w	r5, r5, #6
 8009e5c:	d106      	bne.n	8009e6c <_printf_common+0x48>
 8009e5e:	f104 0a19 	add.w	sl, r4, #25
 8009e62:	68e3      	ldr	r3, [r4, #12]
 8009e64:	6832      	ldr	r2, [r6, #0]
 8009e66:	1a9b      	subs	r3, r3, r2
 8009e68:	42ab      	cmp	r3, r5
 8009e6a:	dc26      	bgt.n	8009eba <_printf_common+0x96>
 8009e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e70:	1e13      	subs	r3, r2, #0
 8009e72:	6822      	ldr	r2, [r4, #0]
 8009e74:	bf18      	it	ne
 8009e76:	2301      	movne	r3, #1
 8009e78:	0692      	lsls	r2, r2, #26
 8009e7a:	d42b      	bmi.n	8009ed4 <_printf_common+0xb0>
 8009e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e80:	4649      	mov	r1, r9
 8009e82:	4638      	mov	r0, r7
 8009e84:	47c0      	blx	r8
 8009e86:	3001      	adds	r0, #1
 8009e88:	d01e      	beq.n	8009ec8 <_printf_common+0xa4>
 8009e8a:	6823      	ldr	r3, [r4, #0]
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	f003 0306 	and.w	r3, r3, #6
 8009e92:	2b04      	cmp	r3, #4
 8009e94:	bf02      	ittt	eq
 8009e96:	68e5      	ldreq	r5, [r4, #12]
 8009e98:	6833      	ldreq	r3, [r6, #0]
 8009e9a:	1aed      	subeq	r5, r5, r3
 8009e9c:	68a3      	ldr	r3, [r4, #8]
 8009e9e:	bf0c      	ite	eq
 8009ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ea4:	2500      	movne	r5, #0
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	bfc4      	itt	gt
 8009eaa:	1a9b      	subgt	r3, r3, r2
 8009eac:	18ed      	addgt	r5, r5, r3
 8009eae:	2600      	movs	r6, #0
 8009eb0:	341a      	adds	r4, #26
 8009eb2:	42b5      	cmp	r5, r6
 8009eb4:	d11a      	bne.n	8009eec <_printf_common+0xc8>
 8009eb6:	2000      	movs	r0, #0
 8009eb8:	e008      	b.n	8009ecc <_printf_common+0xa8>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	4652      	mov	r2, sl
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	47c0      	blx	r8
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d103      	bne.n	8009ed0 <_printf_common+0xac>
 8009ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed0:	3501      	adds	r5, #1
 8009ed2:	e7c6      	b.n	8009e62 <_printf_common+0x3e>
 8009ed4:	18e1      	adds	r1, r4, r3
 8009ed6:	1c5a      	adds	r2, r3, #1
 8009ed8:	2030      	movs	r0, #48	; 0x30
 8009eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009ede:	4422      	add	r2, r4
 8009ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ee8:	3302      	adds	r3, #2
 8009eea:	e7c7      	b.n	8009e7c <_printf_common+0x58>
 8009eec:	2301      	movs	r3, #1
 8009eee:	4622      	mov	r2, r4
 8009ef0:	4649      	mov	r1, r9
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	47c0      	blx	r8
 8009ef6:	3001      	adds	r0, #1
 8009ef8:	d0e6      	beq.n	8009ec8 <_printf_common+0xa4>
 8009efa:	3601      	adds	r6, #1
 8009efc:	e7d9      	b.n	8009eb2 <_printf_common+0x8e>
	...

08009f00 <_printf_i>:
 8009f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f04:	7e0f      	ldrb	r7, [r1, #24]
 8009f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009f08:	2f78      	cmp	r7, #120	; 0x78
 8009f0a:	4691      	mov	r9, r2
 8009f0c:	4680      	mov	r8, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	469a      	mov	sl, r3
 8009f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009f16:	d807      	bhi.n	8009f28 <_printf_i+0x28>
 8009f18:	2f62      	cmp	r7, #98	; 0x62
 8009f1a:	d80a      	bhi.n	8009f32 <_printf_i+0x32>
 8009f1c:	2f00      	cmp	r7, #0
 8009f1e:	f000 80d4 	beq.w	800a0ca <_printf_i+0x1ca>
 8009f22:	2f58      	cmp	r7, #88	; 0x58
 8009f24:	f000 80c0 	beq.w	800a0a8 <_printf_i+0x1a8>
 8009f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f30:	e03a      	b.n	8009fa8 <_printf_i+0xa8>
 8009f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f36:	2b15      	cmp	r3, #21
 8009f38:	d8f6      	bhi.n	8009f28 <_printf_i+0x28>
 8009f3a:	a101      	add	r1, pc, #4	; (adr r1, 8009f40 <_printf_i+0x40>)
 8009f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f40:	08009f99 	.word	0x08009f99
 8009f44:	08009fad 	.word	0x08009fad
 8009f48:	08009f29 	.word	0x08009f29
 8009f4c:	08009f29 	.word	0x08009f29
 8009f50:	08009f29 	.word	0x08009f29
 8009f54:	08009f29 	.word	0x08009f29
 8009f58:	08009fad 	.word	0x08009fad
 8009f5c:	08009f29 	.word	0x08009f29
 8009f60:	08009f29 	.word	0x08009f29
 8009f64:	08009f29 	.word	0x08009f29
 8009f68:	08009f29 	.word	0x08009f29
 8009f6c:	0800a0b1 	.word	0x0800a0b1
 8009f70:	08009fd9 	.word	0x08009fd9
 8009f74:	0800a06b 	.word	0x0800a06b
 8009f78:	08009f29 	.word	0x08009f29
 8009f7c:	08009f29 	.word	0x08009f29
 8009f80:	0800a0d3 	.word	0x0800a0d3
 8009f84:	08009f29 	.word	0x08009f29
 8009f88:	08009fd9 	.word	0x08009fd9
 8009f8c:	08009f29 	.word	0x08009f29
 8009f90:	08009f29 	.word	0x08009f29
 8009f94:	0800a073 	.word	0x0800a073
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	1d1a      	adds	r2, r3, #4
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	602a      	str	r2, [r5, #0]
 8009fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e09f      	b.n	800a0ec <_printf_i+0x1ec>
 8009fac:	6820      	ldr	r0, [r4, #0]
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	0607      	lsls	r7, r0, #24
 8009fb2:	f103 0104 	add.w	r1, r3, #4
 8009fb6:	6029      	str	r1, [r5, #0]
 8009fb8:	d501      	bpl.n	8009fbe <_printf_i+0xbe>
 8009fba:	681e      	ldr	r6, [r3, #0]
 8009fbc:	e003      	b.n	8009fc6 <_printf_i+0xc6>
 8009fbe:	0646      	lsls	r6, r0, #25
 8009fc0:	d5fb      	bpl.n	8009fba <_printf_i+0xba>
 8009fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009fc6:	2e00      	cmp	r6, #0
 8009fc8:	da03      	bge.n	8009fd2 <_printf_i+0xd2>
 8009fca:	232d      	movs	r3, #45	; 0x2d
 8009fcc:	4276      	negs	r6, r6
 8009fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fd2:	485a      	ldr	r0, [pc, #360]	; (800a13c <_printf_i+0x23c>)
 8009fd4:	230a      	movs	r3, #10
 8009fd6:	e012      	b.n	8009ffe <_printf_i+0xfe>
 8009fd8:	682b      	ldr	r3, [r5, #0]
 8009fda:	6820      	ldr	r0, [r4, #0]
 8009fdc:	1d19      	adds	r1, r3, #4
 8009fde:	6029      	str	r1, [r5, #0]
 8009fe0:	0605      	lsls	r5, r0, #24
 8009fe2:	d501      	bpl.n	8009fe8 <_printf_i+0xe8>
 8009fe4:	681e      	ldr	r6, [r3, #0]
 8009fe6:	e002      	b.n	8009fee <_printf_i+0xee>
 8009fe8:	0641      	lsls	r1, r0, #25
 8009fea:	d5fb      	bpl.n	8009fe4 <_printf_i+0xe4>
 8009fec:	881e      	ldrh	r6, [r3, #0]
 8009fee:	4853      	ldr	r0, [pc, #332]	; (800a13c <_printf_i+0x23c>)
 8009ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ff2:	bf0c      	ite	eq
 8009ff4:	2308      	moveq	r3, #8
 8009ff6:	230a      	movne	r3, #10
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ffe:	6865      	ldr	r5, [r4, #4]
 800a000:	60a5      	str	r5, [r4, #8]
 800a002:	2d00      	cmp	r5, #0
 800a004:	bfa2      	ittt	ge
 800a006:	6821      	ldrge	r1, [r4, #0]
 800a008:	f021 0104 	bicge.w	r1, r1, #4
 800a00c:	6021      	strge	r1, [r4, #0]
 800a00e:	b90e      	cbnz	r6, 800a014 <_printf_i+0x114>
 800a010:	2d00      	cmp	r5, #0
 800a012:	d04b      	beq.n	800a0ac <_printf_i+0x1ac>
 800a014:	4615      	mov	r5, r2
 800a016:	fbb6 f1f3 	udiv	r1, r6, r3
 800a01a:	fb03 6711 	mls	r7, r3, r1, r6
 800a01e:	5dc7      	ldrb	r7, [r0, r7]
 800a020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a024:	4637      	mov	r7, r6
 800a026:	42bb      	cmp	r3, r7
 800a028:	460e      	mov	r6, r1
 800a02a:	d9f4      	bls.n	800a016 <_printf_i+0x116>
 800a02c:	2b08      	cmp	r3, #8
 800a02e:	d10b      	bne.n	800a048 <_printf_i+0x148>
 800a030:	6823      	ldr	r3, [r4, #0]
 800a032:	07de      	lsls	r6, r3, #31
 800a034:	d508      	bpl.n	800a048 <_printf_i+0x148>
 800a036:	6923      	ldr	r3, [r4, #16]
 800a038:	6861      	ldr	r1, [r4, #4]
 800a03a:	4299      	cmp	r1, r3
 800a03c:	bfde      	ittt	le
 800a03e:	2330      	movle	r3, #48	; 0x30
 800a040:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a044:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a048:	1b52      	subs	r2, r2, r5
 800a04a:	6122      	str	r2, [r4, #16]
 800a04c:	f8cd a000 	str.w	sl, [sp]
 800a050:	464b      	mov	r3, r9
 800a052:	aa03      	add	r2, sp, #12
 800a054:	4621      	mov	r1, r4
 800a056:	4640      	mov	r0, r8
 800a058:	f7ff fee4 	bl	8009e24 <_printf_common>
 800a05c:	3001      	adds	r0, #1
 800a05e:	d14a      	bne.n	800a0f6 <_printf_i+0x1f6>
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	b004      	add	sp, #16
 800a066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a06a:	6823      	ldr	r3, [r4, #0]
 800a06c:	f043 0320 	orr.w	r3, r3, #32
 800a070:	6023      	str	r3, [r4, #0]
 800a072:	4833      	ldr	r0, [pc, #204]	; (800a140 <_printf_i+0x240>)
 800a074:	2778      	movs	r7, #120	; 0x78
 800a076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	6829      	ldr	r1, [r5, #0]
 800a07e:	061f      	lsls	r7, r3, #24
 800a080:	f851 6b04 	ldr.w	r6, [r1], #4
 800a084:	d402      	bmi.n	800a08c <_printf_i+0x18c>
 800a086:	065f      	lsls	r7, r3, #25
 800a088:	bf48      	it	mi
 800a08a:	b2b6      	uxthmi	r6, r6
 800a08c:	07df      	lsls	r7, r3, #31
 800a08e:	bf48      	it	mi
 800a090:	f043 0320 	orrmi.w	r3, r3, #32
 800a094:	6029      	str	r1, [r5, #0]
 800a096:	bf48      	it	mi
 800a098:	6023      	strmi	r3, [r4, #0]
 800a09a:	b91e      	cbnz	r6, 800a0a4 <_printf_i+0x1a4>
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	f023 0320 	bic.w	r3, r3, #32
 800a0a2:	6023      	str	r3, [r4, #0]
 800a0a4:	2310      	movs	r3, #16
 800a0a6:	e7a7      	b.n	8009ff8 <_printf_i+0xf8>
 800a0a8:	4824      	ldr	r0, [pc, #144]	; (800a13c <_printf_i+0x23c>)
 800a0aa:	e7e4      	b.n	800a076 <_printf_i+0x176>
 800a0ac:	4615      	mov	r5, r2
 800a0ae:	e7bd      	b.n	800a02c <_printf_i+0x12c>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	6826      	ldr	r6, [r4, #0]
 800a0b4:	6961      	ldr	r1, [r4, #20]
 800a0b6:	1d18      	adds	r0, r3, #4
 800a0b8:	6028      	str	r0, [r5, #0]
 800a0ba:	0635      	lsls	r5, r6, #24
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	d501      	bpl.n	800a0c4 <_printf_i+0x1c4>
 800a0c0:	6019      	str	r1, [r3, #0]
 800a0c2:	e002      	b.n	800a0ca <_printf_i+0x1ca>
 800a0c4:	0670      	lsls	r0, r6, #25
 800a0c6:	d5fb      	bpl.n	800a0c0 <_printf_i+0x1c0>
 800a0c8:	8019      	strh	r1, [r3, #0]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	6123      	str	r3, [r4, #16]
 800a0ce:	4615      	mov	r5, r2
 800a0d0:	e7bc      	b.n	800a04c <_printf_i+0x14c>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	1d1a      	adds	r2, r3, #4
 800a0d6:	602a      	str	r2, [r5, #0]
 800a0d8:	681d      	ldr	r5, [r3, #0]
 800a0da:	6862      	ldr	r2, [r4, #4]
 800a0dc:	2100      	movs	r1, #0
 800a0de:	4628      	mov	r0, r5
 800a0e0:	f7f6 f89e 	bl	8000220 <memchr>
 800a0e4:	b108      	cbz	r0, 800a0ea <_printf_i+0x1ea>
 800a0e6:	1b40      	subs	r0, r0, r5
 800a0e8:	6060      	str	r0, [r4, #4]
 800a0ea:	6863      	ldr	r3, [r4, #4]
 800a0ec:	6123      	str	r3, [r4, #16]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0f4:	e7aa      	b.n	800a04c <_printf_i+0x14c>
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	462a      	mov	r2, r5
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	4640      	mov	r0, r8
 800a0fe:	47d0      	blx	sl
 800a100:	3001      	adds	r0, #1
 800a102:	d0ad      	beq.n	800a060 <_printf_i+0x160>
 800a104:	6823      	ldr	r3, [r4, #0]
 800a106:	079b      	lsls	r3, r3, #30
 800a108:	d413      	bmi.n	800a132 <_printf_i+0x232>
 800a10a:	68e0      	ldr	r0, [r4, #12]
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	4298      	cmp	r0, r3
 800a110:	bfb8      	it	lt
 800a112:	4618      	movlt	r0, r3
 800a114:	e7a6      	b.n	800a064 <_printf_i+0x164>
 800a116:	2301      	movs	r3, #1
 800a118:	4632      	mov	r2, r6
 800a11a:	4649      	mov	r1, r9
 800a11c:	4640      	mov	r0, r8
 800a11e:	47d0      	blx	sl
 800a120:	3001      	adds	r0, #1
 800a122:	d09d      	beq.n	800a060 <_printf_i+0x160>
 800a124:	3501      	adds	r5, #1
 800a126:	68e3      	ldr	r3, [r4, #12]
 800a128:	9903      	ldr	r1, [sp, #12]
 800a12a:	1a5b      	subs	r3, r3, r1
 800a12c:	42ab      	cmp	r3, r5
 800a12e:	dcf2      	bgt.n	800a116 <_printf_i+0x216>
 800a130:	e7eb      	b.n	800a10a <_printf_i+0x20a>
 800a132:	2500      	movs	r5, #0
 800a134:	f104 0619 	add.w	r6, r4, #25
 800a138:	e7f5      	b.n	800a126 <_printf_i+0x226>
 800a13a:	bf00      	nop
 800a13c:	0800d27e 	.word	0x0800d27e
 800a140:	0800d28f 	.word	0x0800d28f

0800a144 <std>:
 800a144:	2300      	movs	r3, #0
 800a146:	b510      	push	{r4, lr}
 800a148:	4604      	mov	r4, r0
 800a14a:	e9c0 3300 	strd	r3, r3, [r0]
 800a14e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a152:	6083      	str	r3, [r0, #8]
 800a154:	8181      	strh	r1, [r0, #12]
 800a156:	6643      	str	r3, [r0, #100]	; 0x64
 800a158:	81c2      	strh	r2, [r0, #14]
 800a15a:	6183      	str	r3, [r0, #24]
 800a15c:	4619      	mov	r1, r3
 800a15e:	2208      	movs	r2, #8
 800a160:	305c      	adds	r0, #92	; 0x5c
 800a162:	f000 f9f7 	bl	800a554 <memset>
 800a166:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <std+0x58>)
 800a168:	6263      	str	r3, [r4, #36]	; 0x24
 800a16a:	4b0d      	ldr	r3, [pc, #52]	; (800a1a0 <std+0x5c>)
 800a16c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a16e:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <std+0x60>)
 800a170:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a172:	4b0d      	ldr	r3, [pc, #52]	; (800a1a8 <std+0x64>)
 800a174:	6323      	str	r3, [r4, #48]	; 0x30
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <std+0x68>)
 800a178:	6224      	str	r4, [r4, #32]
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d006      	beq.n	800a18c <std+0x48>
 800a17e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a182:	4294      	cmp	r4, r2
 800a184:	d002      	beq.n	800a18c <std+0x48>
 800a186:	33d0      	adds	r3, #208	; 0xd0
 800a188:	429c      	cmp	r4, r3
 800a18a:	d105      	bne.n	800a198 <std+0x54>
 800a18c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a194:	f000 ba5a 	b.w	800a64c <__retarget_lock_init_recursive>
 800a198:	bd10      	pop	{r4, pc}
 800a19a:	bf00      	nop
 800a19c:	0800a3a5 	.word	0x0800a3a5
 800a1a0:	0800a3c7 	.word	0x0800a3c7
 800a1a4:	0800a3ff 	.word	0x0800a3ff
 800a1a8:	0800a423 	.word	0x0800a423
 800a1ac:	20002170 	.word	0x20002170

0800a1b0 <stdio_exit_handler>:
 800a1b0:	4a02      	ldr	r2, [pc, #8]	; (800a1bc <stdio_exit_handler+0xc>)
 800a1b2:	4903      	ldr	r1, [pc, #12]	; (800a1c0 <stdio_exit_handler+0x10>)
 800a1b4:	4803      	ldr	r0, [pc, #12]	; (800a1c4 <stdio_exit_handler+0x14>)
 800a1b6:	f000 b869 	b.w	800a28c <_fwalk_sglue>
 800a1ba:	bf00      	nop
 800a1bc:	20000010 	.word	0x20000010
 800a1c0:	0800bfd9 	.word	0x0800bfd9
 800a1c4:	2000001c 	.word	0x2000001c

0800a1c8 <cleanup_stdio>:
 800a1c8:	6841      	ldr	r1, [r0, #4]
 800a1ca:	4b0c      	ldr	r3, [pc, #48]	; (800a1fc <cleanup_stdio+0x34>)
 800a1cc:	4299      	cmp	r1, r3
 800a1ce:	b510      	push	{r4, lr}
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	d001      	beq.n	800a1d8 <cleanup_stdio+0x10>
 800a1d4:	f001 ff00 	bl	800bfd8 <_fflush_r>
 800a1d8:	68a1      	ldr	r1, [r4, #8]
 800a1da:	4b09      	ldr	r3, [pc, #36]	; (800a200 <cleanup_stdio+0x38>)
 800a1dc:	4299      	cmp	r1, r3
 800a1de:	d002      	beq.n	800a1e6 <cleanup_stdio+0x1e>
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f001 fef9 	bl	800bfd8 <_fflush_r>
 800a1e6:	68e1      	ldr	r1, [r4, #12]
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <cleanup_stdio+0x3c>)
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	d004      	beq.n	800a1f8 <cleanup_stdio+0x30>
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1f4:	f001 bef0 	b.w	800bfd8 <_fflush_r>
 800a1f8:	bd10      	pop	{r4, pc}
 800a1fa:	bf00      	nop
 800a1fc:	20002170 	.word	0x20002170
 800a200:	200021d8 	.word	0x200021d8
 800a204:	20002240 	.word	0x20002240

0800a208 <global_stdio_init.part.0>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	4b0b      	ldr	r3, [pc, #44]	; (800a238 <global_stdio_init.part.0+0x30>)
 800a20c:	4c0b      	ldr	r4, [pc, #44]	; (800a23c <global_stdio_init.part.0+0x34>)
 800a20e:	4a0c      	ldr	r2, [pc, #48]	; (800a240 <global_stdio_init.part.0+0x38>)
 800a210:	601a      	str	r2, [r3, #0]
 800a212:	4620      	mov	r0, r4
 800a214:	2200      	movs	r2, #0
 800a216:	2104      	movs	r1, #4
 800a218:	f7ff ff94 	bl	800a144 <std>
 800a21c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a220:	2201      	movs	r2, #1
 800a222:	2109      	movs	r1, #9
 800a224:	f7ff ff8e 	bl	800a144 <std>
 800a228:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a22c:	2202      	movs	r2, #2
 800a22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a232:	2112      	movs	r1, #18
 800a234:	f7ff bf86 	b.w	800a144 <std>
 800a238:	200022a8 	.word	0x200022a8
 800a23c:	20002170 	.word	0x20002170
 800a240:	0800a1b1 	.word	0x0800a1b1

0800a244 <__sfp_lock_acquire>:
 800a244:	4801      	ldr	r0, [pc, #4]	; (800a24c <__sfp_lock_acquire+0x8>)
 800a246:	f000 ba02 	b.w	800a64e <__retarget_lock_acquire_recursive>
 800a24a:	bf00      	nop
 800a24c:	200022b1 	.word	0x200022b1

0800a250 <__sfp_lock_release>:
 800a250:	4801      	ldr	r0, [pc, #4]	; (800a258 <__sfp_lock_release+0x8>)
 800a252:	f000 b9fd 	b.w	800a650 <__retarget_lock_release_recursive>
 800a256:	bf00      	nop
 800a258:	200022b1 	.word	0x200022b1

0800a25c <__sinit>:
 800a25c:	b510      	push	{r4, lr}
 800a25e:	4604      	mov	r4, r0
 800a260:	f7ff fff0 	bl	800a244 <__sfp_lock_acquire>
 800a264:	6a23      	ldr	r3, [r4, #32]
 800a266:	b11b      	cbz	r3, 800a270 <__sinit+0x14>
 800a268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a26c:	f7ff bff0 	b.w	800a250 <__sfp_lock_release>
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <__sinit+0x28>)
 800a272:	6223      	str	r3, [r4, #32]
 800a274:	4b04      	ldr	r3, [pc, #16]	; (800a288 <__sinit+0x2c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1f5      	bne.n	800a268 <__sinit+0xc>
 800a27c:	f7ff ffc4 	bl	800a208 <global_stdio_init.part.0>
 800a280:	e7f2      	b.n	800a268 <__sinit+0xc>
 800a282:	bf00      	nop
 800a284:	0800a1c9 	.word	0x0800a1c9
 800a288:	200022a8 	.word	0x200022a8

0800a28c <_fwalk_sglue>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	4607      	mov	r7, r0
 800a292:	4688      	mov	r8, r1
 800a294:	4614      	mov	r4, r2
 800a296:	2600      	movs	r6, #0
 800a298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a29c:	f1b9 0901 	subs.w	r9, r9, #1
 800a2a0:	d505      	bpl.n	800a2ae <_fwalk_sglue+0x22>
 800a2a2:	6824      	ldr	r4, [r4, #0]
 800a2a4:	2c00      	cmp	r4, #0
 800a2a6:	d1f7      	bne.n	800a298 <_fwalk_sglue+0xc>
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d907      	bls.n	800a2c4 <_fwalk_sglue+0x38>
 800a2b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	d003      	beq.n	800a2c4 <_fwalk_sglue+0x38>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	4638      	mov	r0, r7
 800a2c0:	47c0      	blx	r8
 800a2c2:	4306      	orrs	r6, r0
 800a2c4:	3568      	adds	r5, #104	; 0x68
 800a2c6:	e7e9      	b.n	800a29c <_fwalk_sglue+0x10>

0800a2c8 <iprintf>:
 800a2c8:	b40f      	push	{r0, r1, r2, r3}
 800a2ca:	b507      	push	{r0, r1, r2, lr}
 800a2cc:	4906      	ldr	r1, [pc, #24]	; (800a2e8 <iprintf+0x20>)
 800a2ce:	ab04      	add	r3, sp, #16
 800a2d0:	6808      	ldr	r0, [r1, #0]
 800a2d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d6:	6881      	ldr	r1, [r0, #8]
 800a2d8:	9301      	str	r3, [sp, #4]
 800a2da:	f001 fcdd 	bl	800bc98 <_vfiprintf_r>
 800a2de:	b003      	add	sp, #12
 800a2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e4:	b004      	add	sp, #16
 800a2e6:	4770      	bx	lr
 800a2e8:	20000068 	.word	0x20000068

0800a2ec <_puts_r>:
 800a2ec:	6a03      	ldr	r3, [r0, #32]
 800a2ee:	b570      	push	{r4, r5, r6, lr}
 800a2f0:	6884      	ldr	r4, [r0, #8]
 800a2f2:	4605      	mov	r5, r0
 800a2f4:	460e      	mov	r6, r1
 800a2f6:	b90b      	cbnz	r3, 800a2fc <_puts_r+0x10>
 800a2f8:	f7ff ffb0 	bl	800a25c <__sinit>
 800a2fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2fe:	07db      	lsls	r3, r3, #31
 800a300:	d405      	bmi.n	800a30e <_puts_r+0x22>
 800a302:	89a3      	ldrh	r3, [r4, #12]
 800a304:	0598      	lsls	r0, r3, #22
 800a306:	d402      	bmi.n	800a30e <_puts_r+0x22>
 800a308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a30a:	f000 f9a0 	bl	800a64e <__retarget_lock_acquire_recursive>
 800a30e:	89a3      	ldrh	r3, [r4, #12]
 800a310:	0719      	lsls	r1, r3, #28
 800a312:	d513      	bpl.n	800a33c <_puts_r+0x50>
 800a314:	6923      	ldr	r3, [r4, #16]
 800a316:	b18b      	cbz	r3, 800a33c <_puts_r+0x50>
 800a318:	3e01      	subs	r6, #1
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a320:	3b01      	subs	r3, #1
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	b9e9      	cbnz	r1, 800a362 <_puts_r+0x76>
 800a326:	2b00      	cmp	r3, #0
 800a328:	da2e      	bge.n	800a388 <_puts_r+0x9c>
 800a32a:	4622      	mov	r2, r4
 800a32c:	210a      	movs	r1, #10
 800a32e:	4628      	mov	r0, r5
 800a330:	f000 f87b 	bl	800a42a <__swbuf_r>
 800a334:	3001      	adds	r0, #1
 800a336:	d007      	beq.n	800a348 <_puts_r+0x5c>
 800a338:	250a      	movs	r5, #10
 800a33a:	e007      	b.n	800a34c <_puts_r+0x60>
 800a33c:	4621      	mov	r1, r4
 800a33e:	4628      	mov	r0, r5
 800a340:	f000 f8b0 	bl	800a4a4 <__swsetup_r>
 800a344:	2800      	cmp	r0, #0
 800a346:	d0e7      	beq.n	800a318 <_puts_r+0x2c>
 800a348:	f04f 35ff 	mov.w	r5, #4294967295
 800a34c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a34e:	07da      	lsls	r2, r3, #31
 800a350:	d405      	bmi.n	800a35e <_puts_r+0x72>
 800a352:	89a3      	ldrh	r3, [r4, #12]
 800a354:	059b      	lsls	r3, r3, #22
 800a356:	d402      	bmi.n	800a35e <_puts_r+0x72>
 800a358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a35a:	f000 f979 	bl	800a650 <__retarget_lock_release_recursive>
 800a35e:	4628      	mov	r0, r5
 800a360:	bd70      	pop	{r4, r5, r6, pc}
 800a362:	2b00      	cmp	r3, #0
 800a364:	da04      	bge.n	800a370 <_puts_r+0x84>
 800a366:	69a2      	ldr	r2, [r4, #24]
 800a368:	429a      	cmp	r2, r3
 800a36a:	dc06      	bgt.n	800a37a <_puts_r+0x8e>
 800a36c:	290a      	cmp	r1, #10
 800a36e:	d004      	beq.n	800a37a <_puts_r+0x8e>
 800a370:	6823      	ldr	r3, [r4, #0]
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	7019      	strb	r1, [r3, #0]
 800a378:	e7cf      	b.n	800a31a <_puts_r+0x2e>
 800a37a:	4622      	mov	r2, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 f854 	bl	800a42a <__swbuf_r>
 800a382:	3001      	adds	r0, #1
 800a384:	d1c9      	bne.n	800a31a <_puts_r+0x2e>
 800a386:	e7df      	b.n	800a348 <_puts_r+0x5c>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	250a      	movs	r5, #10
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	6022      	str	r2, [r4, #0]
 800a390:	701d      	strb	r5, [r3, #0]
 800a392:	e7db      	b.n	800a34c <_puts_r+0x60>

0800a394 <puts>:
 800a394:	4b02      	ldr	r3, [pc, #8]	; (800a3a0 <puts+0xc>)
 800a396:	4601      	mov	r1, r0
 800a398:	6818      	ldr	r0, [r3, #0]
 800a39a:	f7ff bfa7 	b.w	800a2ec <_puts_r>
 800a39e:	bf00      	nop
 800a3a0:	20000068 	.word	0x20000068

0800a3a4 <__sread>:
 800a3a4:	b510      	push	{r4, lr}
 800a3a6:	460c      	mov	r4, r1
 800a3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ac:	f000 f900 	bl	800a5b0 <_read_r>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	bfab      	itete	ge
 800a3b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3b8:	181b      	addge	r3, r3, r0
 800a3ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3be:	bfac      	ite	ge
 800a3c0:	6563      	strge	r3, [r4, #84]	; 0x54
 800a3c2:	81a3      	strhlt	r3, [r4, #12]
 800a3c4:	bd10      	pop	{r4, pc}

0800a3c6 <__swrite>:
 800a3c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ca:	461f      	mov	r7, r3
 800a3cc:	898b      	ldrh	r3, [r1, #12]
 800a3ce:	05db      	lsls	r3, r3, #23
 800a3d0:	4605      	mov	r5, r0
 800a3d2:	460c      	mov	r4, r1
 800a3d4:	4616      	mov	r6, r2
 800a3d6:	d505      	bpl.n	800a3e4 <__swrite+0x1e>
 800a3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3dc:	2302      	movs	r3, #2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f000 f8d4 	bl	800a58c <_lseek_r>
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a3ee:	81a3      	strh	r3, [r4, #12]
 800a3f0:	4632      	mov	r2, r6
 800a3f2:	463b      	mov	r3, r7
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3fa:	f000 b8eb 	b.w	800a5d4 <_write_r>

0800a3fe <__sseek>:
 800a3fe:	b510      	push	{r4, lr}
 800a400:	460c      	mov	r4, r1
 800a402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a406:	f000 f8c1 	bl	800a58c <_lseek_r>
 800a40a:	1c43      	adds	r3, r0, #1
 800a40c:	89a3      	ldrh	r3, [r4, #12]
 800a40e:	bf15      	itete	ne
 800a410:	6560      	strne	r0, [r4, #84]	; 0x54
 800a412:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a416:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a41a:	81a3      	strheq	r3, [r4, #12]
 800a41c:	bf18      	it	ne
 800a41e:	81a3      	strhne	r3, [r4, #12]
 800a420:	bd10      	pop	{r4, pc}

0800a422 <__sclose>:
 800a422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a426:	f000 b8a1 	b.w	800a56c <_close_r>

0800a42a <__swbuf_r>:
 800a42a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42c:	460e      	mov	r6, r1
 800a42e:	4614      	mov	r4, r2
 800a430:	4605      	mov	r5, r0
 800a432:	b118      	cbz	r0, 800a43c <__swbuf_r+0x12>
 800a434:	6a03      	ldr	r3, [r0, #32]
 800a436:	b90b      	cbnz	r3, 800a43c <__swbuf_r+0x12>
 800a438:	f7ff ff10 	bl	800a25c <__sinit>
 800a43c:	69a3      	ldr	r3, [r4, #24]
 800a43e:	60a3      	str	r3, [r4, #8]
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	071a      	lsls	r2, r3, #28
 800a444:	d525      	bpl.n	800a492 <__swbuf_r+0x68>
 800a446:	6923      	ldr	r3, [r4, #16]
 800a448:	b31b      	cbz	r3, 800a492 <__swbuf_r+0x68>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	6922      	ldr	r2, [r4, #16]
 800a44e:	1a98      	subs	r0, r3, r2
 800a450:	6963      	ldr	r3, [r4, #20]
 800a452:	b2f6      	uxtb	r6, r6
 800a454:	4283      	cmp	r3, r0
 800a456:	4637      	mov	r7, r6
 800a458:	dc04      	bgt.n	800a464 <__swbuf_r+0x3a>
 800a45a:	4621      	mov	r1, r4
 800a45c:	4628      	mov	r0, r5
 800a45e:	f001 fdbb 	bl	800bfd8 <_fflush_r>
 800a462:	b9e0      	cbnz	r0, 800a49e <__swbuf_r+0x74>
 800a464:	68a3      	ldr	r3, [r4, #8]
 800a466:	3b01      	subs	r3, #1
 800a468:	60a3      	str	r3, [r4, #8]
 800a46a:	6823      	ldr	r3, [r4, #0]
 800a46c:	1c5a      	adds	r2, r3, #1
 800a46e:	6022      	str	r2, [r4, #0]
 800a470:	701e      	strb	r6, [r3, #0]
 800a472:	6962      	ldr	r2, [r4, #20]
 800a474:	1c43      	adds	r3, r0, #1
 800a476:	429a      	cmp	r2, r3
 800a478:	d004      	beq.n	800a484 <__swbuf_r+0x5a>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	07db      	lsls	r3, r3, #31
 800a47e:	d506      	bpl.n	800a48e <__swbuf_r+0x64>
 800a480:	2e0a      	cmp	r6, #10
 800a482:	d104      	bne.n	800a48e <__swbuf_r+0x64>
 800a484:	4621      	mov	r1, r4
 800a486:	4628      	mov	r0, r5
 800a488:	f001 fda6 	bl	800bfd8 <_fflush_r>
 800a48c:	b938      	cbnz	r0, 800a49e <__swbuf_r+0x74>
 800a48e:	4638      	mov	r0, r7
 800a490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a492:	4621      	mov	r1, r4
 800a494:	4628      	mov	r0, r5
 800a496:	f000 f805 	bl	800a4a4 <__swsetup_r>
 800a49a:	2800      	cmp	r0, #0
 800a49c:	d0d5      	beq.n	800a44a <__swbuf_r+0x20>
 800a49e:	f04f 37ff 	mov.w	r7, #4294967295
 800a4a2:	e7f4      	b.n	800a48e <__swbuf_r+0x64>

0800a4a4 <__swsetup_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	4b2a      	ldr	r3, [pc, #168]	; (800a550 <__swsetup_r+0xac>)
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	6818      	ldr	r0, [r3, #0]
 800a4ac:	460c      	mov	r4, r1
 800a4ae:	b118      	cbz	r0, 800a4b8 <__swsetup_r+0x14>
 800a4b0:	6a03      	ldr	r3, [r0, #32]
 800a4b2:	b90b      	cbnz	r3, 800a4b8 <__swsetup_r+0x14>
 800a4b4:	f7ff fed2 	bl	800a25c <__sinit>
 800a4b8:	89a3      	ldrh	r3, [r4, #12]
 800a4ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4be:	0718      	lsls	r0, r3, #28
 800a4c0:	d422      	bmi.n	800a508 <__swsetup_r+0x64>
 800a4c2:	06d9      	lsls	r1, r3, #27
 800a4c4:	d407      	bmi.n	800a4d6 <__swsetup_r+0x32>
 800a4c6:	2309      	movs	r3, #9
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a4ce:	81a3      	strh	r3, [r4, #12]
 800a4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4d4:	e034      	b.n	800a540 <__swsetup_r+0x9c>
 800a4d6:	0758      	lsls	r0, r3, #29
 800a4d8:	d512      	bpl.n	800a500 <__swsetup_r+0x5c>
 800a4da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4dc:	b141      	cbz	r1, 800a4f0 <__swsetup_r+0x4c>
 800a4de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4e2:	4299      	cmp	r1, r3
 800a4e4:	d002      	beq.n	800a4ec <__swsetup_r+0x48>
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f000 ff30 	bl	800b34c <_free_r>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	6363      	str	r3, [r4, #52]	; 0x34
 800a4f0:	89a3      	ldrh	r3, [r4, #12]
 800a4f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	6063      	str	r3, [r4, #4]
 800a4fc:	6923      	ldr	r3, [r4, #16]
 800a4fe:	6023      	str	r3, [r4, #0]
 800a500:	89a3      	ldrh	r3, [r4, #12]
 800a502:	f043 0308 	orr.w	r3, r3, #8
 800a506:	81a3      	strh	r3, [r4, #12]
 800a508:	6923      	ldr	r3, [r4, #16]
 800a50a:	b94b      	cbnz	r3, 800a520 <__swsetup_r+0x7c>
 800a50c:	89a3      	ldrh	r3, [r4, #12]
 800a50e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a516:	d003      	beq.n	800a520 <__swsetup_r+0x7c>
 800a518:	4621      	mov	r1, r4
 800a51a:	4628      	mov	r0, r5
 800a51c:	f001 fdaa 	bl	800c074 <__smakebuf_r>
 800a520:	89a0      	ldrh	r0, [r4, #12]
 800a522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a526:	f010 0301 	ands.w	r3, r0, #1
 800a52a:	d00a      	beq.n	800a542 <__swsetup_r+0x9e>
 800a52c:	2300      	movs	r3, #0
 800a52e:	60a3      	str	r3, [r4, #8]
 800a530:	6963      	ldr	r3, [r4, #20]
 800a532:	425b      	negs	r3, r3
 800a534:	61a3      	str	r3, [r4, #24]
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	b943      	cbnz	r3, 800a54c <__swsetup_r+0xa8>
 800a53a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a53e:	d1c4      	bne.n	800a4ca <__swsetup_r+0x26>
 800a540:	bd38      	pop	{r3, r4, r5, pc}
 800a542:	0781      	lsls	r1, r0, #30
 800a544:	bf58      	it	pl
 800a546:	6963      	ldrpl	r3, [r4, #20]
 800a548:	60a3      	str	r3, [r4, #8]
 800a54a:	e7f4      	b.n	800a536 <__swsetup_r+0x92>
 800a54c:	2000      	movs	r0, #0
 800a54e:	e7f7      	b.n	800a540 <__swsetup_r+0x9c>
 800a550:	20000068 	.word	0x20000068

0800a554 <memset>:
 800a554:	4402      	add	r2, r0
 800a556:	4603      	mov	r3, r0
 800a558:	4293      	cmp	r3, r2
 800a55a:	d100      	bne.n	800a55e <memset+0xa>
 800a55c:	4770      	bx	lr
 800a55e:	f803 1b01 	strb.w	r1, [r3], #1
 800a562:	e7f9      	b.n	800a558 <memset+0x4>

0800a564 <_localeconv_r>:
 800a564:	4800      	ldr	r0, [pc, #0]	; (800a568 <_localeconv_r+0x4>)
 800a566:	4770      	bx	lr
 800a568:	2000015c 	.word	0x2000015c

0800a56c <_close_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4d06      	ldr	r5, [pc, #24]	; (800a588 <_close_r+0x1c>)
 800a570:	2300      	movs	r3, #0
 800a572:	4604      	mov	r4, r0
 800a574:	4608      	mov	r0, r1
 800a576:	602b      	str	r3, [r5, #0]
 800a578:	f7fa fedd 	bl	8005336 <_close>
 800a57c:	1c43      	adds	r3, r0, #1
 800a57e:	d102      	bne.n	800a586 <_close_r+0x1a>
 800a580:	682b      	ldr	r3, [r5, #0]
 800a582:	b103      	cbz	r3, 800a586 <_close_r+0x1a>
 800a584:	6023      	str	r3, [r4, #0]
 800a586:	bd38      	pop	{r3, r4, r5, pc}
 800a588:	200022ac 	.word	0x200022ac

0800a58c <_lseek_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4d07      	ldr	r5, [pc, #28]	; (800a5ac <_lseek_r+0x20>)
 800a590:	4604      	mov	r4, r0
 800a592:	4608      	mov	r0, r1
 800a594:	4611      	mov	r1, r2
 800a596:	2200      	movs	r2, #0
 800a598:	602a      	str	r2, [r5, #0]
 800a59a:	461a      	mov	r2, r3
 800a59c:	f7fa fef2 	bl	8005384 <_lseek>
 800a5a0:	1c43      	adds	r3, r0, #1
 800a5a2:	d102      	bne.n	800a5aa <_lseek_r+0x1e>
 800a5a4:	682b      	ldr	r3, [r5, #0]
 800a5a6:	b103      	cbz	r3, 800a5aa <_lseek_r+0x1e>
 800a5a8:	6023      	str	r3, [r4, #0]
 800a5aa:	bd38      	pop	{r3, r4, r5, pc}
 800a5ac:	200022ac 	.word	0x200022ac

0800a5b0 <_read_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d07      	ldr	r5, [pc, #28]	; (800a5d0 <_read_r+0x20>)
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4608      	mov	r0, r1
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	602a      	str	r2, [r5, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	f7fa fe80 	bl	80052c4 <_read>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_read_r+0x1e>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_read_r+0x1e>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	200022ac 	.word	0x200022ac

0800a5d4 <_write_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	4d07      	ldr	r5, [pc, #28]	; (800a5f4 <_write_r+0x20>)
 800a5d8:	4604      	mov	r4, r0
 800a5da:	4608      	mov	r0, r1
 800a5dc:	4611      	mov	r1, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	602a      	str	r2, [r5, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f7fa fe8b 	bl	80052fe <_write>
 800a5e8:	1c43      	adds	r3, r0, #1
 800a5ea:	d102      	bne.n	800a5f2 <_write_r+0x1e>
 800a5ec:	682b      	ldr	r3, [r5, #0]
 800a5ee:	b103      	cbz	r3, 800a5f2 <_write_r+0x1e>
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	bd38      	pop	{r3, r4, r5, pc}
 800a5f4:	200022ac 	.word	0x200022ac

0800a5f8 <__errno>:
 800a5f8:	4b01      	ldr	r3, [pc, #4]	; (800a600 <__errno+0x8>)
 800a5fa:	6818      	ldr	r0, [r3, #0]
 800a5fc:	4770      	bx	lr
 800a5fe:	bf00      	nop
 800a600:	20000068 	.word	0x20000068

0800a604 <__libc_init_array>:
 800a604:	b570      	push	{r4, r5, r6, lr}
 800a606:	4d0d      	ldr	r5, [pc, #52]	; (800a63c <__libc_init_array+0x38>)
 800a608:	4c0d      	ldr	r4, [pc, #52]	; (800a640 <__libc_init_array+0x3c>)
 800a60a:	1b64      	subs	r4, r4, r5
 800a60c:	10a4      	asrs	r4, r4, #2
 800a60e:	2600      	movs	r6, #0
 800a610:	42a6      	cmp	r6, r4
 800a612:	d109      	bne.n	800a628 <__libc_init_array+0x24>
 800a614:	4d0b      	ldr	r5, [pc, #44]	; (800a644 <__libc_init_array+0x40>)
 800a616:	4c0c      	ldr	r4, [pc, #48]	; (800a648 <__libc_init_array+0x44>)
 800a618:	f002 fdc0 	bl	800d19c <_init>
 800a61c:	1b64      	subs	r4, r4, r5
 800a61e:	10a4      	asrs	r4, r4, #2
 800a620:	2600      	movs	r6, #0
 800a622:	42a6      	cmp	r6, r4
 800a624:	d105      	bne.n	800a632 <__libc_init_array+0x2e>
 800a626:	bd70      	pop	{r4, r5, r6, pc}
 800a628:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62c:	4798      	blx	r3
 800a62e:	3601      	adds	r6, #1
 800a630:	e7ee      	b.n	800a610 <__libc_init_array+0xc>
 800a632:	f855 3b04 	ldr.w	r3, [r5], #4
 800a636:	4798      	blx	r3
 800a638:	3601      	adds	r6, #1
 800a63a:	e7f2      	b.n	800a622 <__libc_init_array+0x1e>
 800a63c:	0800d618 	.word	0x0800d618
 800a640:	0800d618 	.word	0x0800d618
 800a644:	0800d618 	.word	0x0800d618
 800a648:	0800d61c 	.word	0x0800d61c

0800a64c <__retarget_lock_init_recursive>:
 800a64c:	4770      	bx	lr

0800a64e <__retarget_lock_acquire_recursive>:
 800a64e:	4770      	bx	lr

0800a650 <__retarget_lock_release_recursive>:
 800a650:	4770      	bx	lr

0800a652 <quorem>:
 800a652:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a656:	6903      	ldr	r3, [r0, #16]
 800a658:	690c      	ldr	r4, [r1, #16]
 800a65a:	42a3      	cmp	r3, r4
 800a65c:	4607      	mov	r7, r0
 800a65e:	db7e      	blt.n	800a75e <quorem+0x10c>
 800a660:	3c01      	subs	r4, #1
 800a662:	f101 0814 	add.w	r8, r1, #20
 800a666:	f100 0514 	add.w	r5, r0, #20
 800a66a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a66e:	9301      	str	r3, [sp, #4]
 800a670:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a674:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a678:	3301      	adds	r3, #1
 800a67a:	429a      	cmp	r2, r3
 800a67c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a680:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a684:	fbb2 f6f3 	udiv	r6, r2, r3
 800a688:	d331      	bcc.n	800a6ee <quorem+0x9c>
 800a68a:	f04f 0e00 	mov.w	lr, #0
 800a68e:	4640      	mov	r0, r8
 800a690:	46ac      	mov	ip, r5
 800a692:	46f2      	mov	sl, lr
 800a694:	f850 2b04 	ldr.w	r2, [r0], #4
 800a698:	b293      	uxth	r3, r2
 800a69a:	fb06 e303 	mla	r3, r6, r3, lr
 800a69e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6a2:	0c1a      	lsrs	r2, r3, #16
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	ebaa 0303 	sub.w	r3, sl, r3
 800a6aa:	f8dc a000 	ldr.w	sl, [ip]
 800a6ae:	fa13 f38a 	uxtah	r3, r3, sl
 800a6b2:	fb06 220e 	mla	r2, r6, lr, r2
 800a6b6:	9300      	str	r3, [sp, #0]
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6be:	b292      	uxth	r2, r2
 800a6c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6cc:	4581      	cmp	r9, r0
 800a6ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6d2:	f84c 3b04 	str.w	r3, [ip], #4
 800a6d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6da:	d2db      	bcs.n	800a694 <quorem+0x42>
 800a6dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6e0:	b92b      	cbnz	r3, 800a6ee <quorem+0x9c>
 800a6e2:	9b01      	ldr	r3, [sp, #4]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	d32c      	bcc.n	800a746 <quorem+0xf4>
 800a6ec:	613c      	str	r4, [r7, #16]
 800a6ee:	4638      	mov	r0, r7
 800a6f0:	f001 f9a8 	bl	800ba44 <__mcmp>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	db22      	blt.n	800a73e <quorem+0xec>
 800a6f8:	3601      	adds	r6, #1
 800a6fa:	4629      	mov	r1, r5
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f858 2b04 	ldr.w	r2, [r8], #4
 800a702:	f8d1 c000 	ldr.w	ip, [r1]
 800a706:	b293      	uxth	r3, r2
 800a708:	1ac3      	subs	r3, r0, r3
 800a70a:	0c12      	lsrs	r2, r2, #16
 800a70c:	fa13 f38c 	uxtah	r3, r3, ip
 800a710:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a714:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a718:	b29b      	uxth	r3, r3
 800a71a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a71e:	45c1      	cmp	r9, r8
 800a720:	f841 3b04 	str.w	r3, [r1], #4
 800a724:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a728:	d2e9      	bcs.n	800a6fe <quorem+0xac>
 800a72a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a732:	b922      	cbnz	r2, 800a73e <quorem+0xec>
 800a734:	3b04      	subs	r3, #4
 800a736:	429d      	cmp	r5, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	d30a      	bcc.n	800a752 <quorem+0x100>
 800a73c:	613c      	str	r4, [r7, #16]
 800a73e:	4630      	mov	r0, r6
 800a740:	b003      	add	sp, #12
 800a742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a746:	6812      	ldr	r2, [r2, #0]
 800a748:	3b04      	subs	r3, #4
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	d1ce      	bne.n	800a6ec <quorem+0x9a>
 800a74e:	3c01      	subs	r4, #1
 800a750:	e7c9      	b.n	800a6e6 <quorem+0x94>
 800a752:	6812      	ldr	r2, [r2, #0]
 800a754:	3b04      	subs	r3, #4
 800a756:	2a00      	cmp	r2, #0
 800a758:	d1f0      	bne.n	800a73c <quorem+0xea>
 800a75a:	3c01      	subs	r4, #1
 800a75c:	e7eb      	b.n	800a736 <quorem+0xe4>
 800a75e:	2000      	movs	r0, #0
 800a760:	e7ee      	b.n	800a740 <quorem+0xee>
 800a762:	0000      	movs	r0, r0
 800a764:	0000      	movs	r0, r0
	...

0800a768 <_dtoa_r>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	ed2d 8b04 	vpush	{d8-d9}
 800a770:	69c5      	ldr	r5, [r0, #28]
 800a772:	b093      	sub	sp, #76	; 0x4c
 800a774:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a778:	ec57 6b10 	vmov	r6, r7, d0
 800a77c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a780:	9107      	str	r1, [sp, #28]
 800a782:	4604      	mov	r4, r0
 800a784:	920a      	str	r2, [sp, #40]	; 0x28
 800a786:	930d      	str	r3, [sp, #52]	; 0x34
 800a788:	b975      	cbnz	r5, 800a7a8 <_dtoa_r+0x40>
 800a78a:	2010      	movs	r0, #16
 800a78c:	f000 fe2a 	bl	800b3e4 <malloc>
 800a790:	4602      	mov	r2, r0
 800a792:	61e0      	str	r0, [r4, #28]
 800a794:	b920      	cbnz	r0, 800a7a0 <_dtoa_r+0x38>
 800a796:	4bae      	ldr	r3, [pc, #696]	; (800aa50 <_dtoa_r+0x2e8>)
 800a798:	21ef      	movs	r1, #239	; 0xef
 800a79a:	48ae      	ldr	r0, [pc, #696]	; (800aa54 <_dtoa_r+0x2ec>)
 800a79c:	f001 fce6 	bl	800c16c <__assert_func>
 800a7a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7a4:	6005      	str	r5, [r0, #0]
 800a7a6:	60c5      	str	r5, [r0, #12]
 800a7a8:	69e3      	ldr	r3, [r4, #28]
 800a7aa:	6819      	ldr	r1, [r3, #0]
 800a7ac:	b151      	cbz	r1, 800a7c4 <_dtoa_r+0x5c>
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	604a      	str	r2, [r1, #4]
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	4093      	lsls	r3, r2
 800a7b6:	608b      	str	r3, [r1, #8]
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f000 ff07 	bl	800b5cc <_Bfree>
 800a7be:	69e3      	ldr	r3, [r4, #28]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	1e3b      	subs	r3, r7, #0
 800a7c6:	bfbb      	ittet	lt
 800a7c8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7cc:	9303      	strlt	r3, [sp, #12]
 800a7ce:	2300      	movge	r3, #0
 800a7d0:	2201      	movlt	r2, #1
 800a7d2:	bfac      	ite	ge
 800a7d4:	f8c8 3000 	strge.w	r3, [r8]
 800a7d8:	f8c8 2000 	strlt.w	r2, [r8]
 800a7dc:	4b9e      	ldr	r3, [pc, #632]	; (800aa58 <_dtoa_r+0x2f0>)
 800a7de:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7e2:	ea33 0308 	bics.w	r3, r3, r8
 800a7e6:	d11b      	bne.n	800a820 <_dtoa_r+0xb8>
 800a7e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ea:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7f4:	4333      	orrs	r3, r6
 800a7f6:	f000 8593 	beq.w	800b320 <_dtoa_r+0xbb8>
 800a7fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7fc:	b963      	cbnz	r3, 800a818 <_dtoa_r+0xb0>
 800a7fe:	4b97      	ldr	r3, [pc, #604]	; (800aa5c <_dtoa_r+0x2f4>)
 800a800:	e027      	b.n	800a852 <_dtoa_r+0xea>
 800a802:	4b97      	ldr	r3, [pc, #604]	; (800aa60 <_dtoa_r+0x2f8>)
 800a804:	9300      	str	r3, [sp, #0]
 800a806:	3308      	adds	r3, #8
 800a808:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a80a:	6013      	str	r3, [r2, #0]
 800a80c:	9800      	ldr	r0, [sp, #0]
 800a80e:	b013      	add	sp, #76	; 0x4c
 800a810:	ecbd 8b04 	vpop	{d8-d9}
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	4b90      	ldr	r3, [pc, #576]	; (800aa5c <_dtoa_r+0x2f4>)
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	3303      	adds	r3, #3
 800a81e:	e7f3      	b.n	800a808 <_dtoa_r+0xa0>
 800a820:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a824:	2200      	movs	r2, #0
 800a826:	ec51 0b17 	vmov	r0, r1, d7
 800a82a:	eeb0 8a47 	vmov.f32	s16, s14
 800a82e:	eef0 8a67 	vmov.f32	s17, s15
 800a832:	2300      	movs	r3, #0
 800a834:	f7f6 f970 	bl	8000b18 <__aeabi_dcmpeq>
 800a838:	4681      	mov	r9, r0
 800a83a:	b160      	cbz	r0, 800a856 <_dtoa_r+0xee>
 800a83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a83e:	2301      	movs	r3, #1
 800a840:	6013      	str	r3, [r2, #0]
 800a842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 8568 	beq.w	800b31a <_dtoa_r+0xbb2>
 800a84a:	4b86      	ldr	r3, [pc, #536]	; (800aa64 <_dtoa_r+0x2fc>)
 800a84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	e7da      	b.n	800a80c <_dtoa_r+0xa4>
 800a856:	aa10      	add	r2, sp, #64	; 0x40
 800a858:	a911      	add	r1, sp, #68	; 0x44
 800a85a:	4620      	mov	r0, r4
 800a85c:	eeb0 0a48 	vmov.f32	s0, s16
 800a860:	eef0 0a68 	vmov.f32	s1, s17
 800a864:	f001 f994 	bl	800bb90 <__d2b>
 800a868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a86c:	4682      	mov	sl, r0
 800a86e:	2d00      	cmp	r5, #0
 800a870:	d07f      	beq.n	800a972 <_dtoa_r+0x20a>
 800a872:	ee18 3a90 	vmov	r3, s17
 800a876:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a87a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a87e:	ec51 0b18 	vmov	r0, r1, d8
 800a882:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a886:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a88a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a88e:	4619      	mov	r1, r3
 800a890:	2200      	movs	r2, #0
 800a892:	4b75      	ldr	r3, [pc, #468]	; (800aa68 <_dtoa_r+0x300>)
 800a894:	f7f5 fd20 	bl	80002d8 <__aeabi_dsub>
 800a898:	a367      	add	r3, pc, #412	; (adr r3, 800aa38 <_dtoa_r+0x2d0>)
 800a89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a89e:	f7f5 fed3 	bl	8000648 <__aeabi_dmul>
 800a8a2:	a367      	add	r3, pc, #412	; (adr r3, 800aa40 <_dtoa_r+0x2d8>)
 800a8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a8:	f7f5 fd18 	bl	80002dc <__adddf3>
 800a8ac:	4606      	mov	r6, r0
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	460f      	mov	r7, r1
 800a8b2:	f7f5 fe5f 	bl	8000574 <__aeabi_i2d>
 800a8b6:	a364      	add	r3, pc, #400	; (adr r3, 800aa48 <_dtoa_r+0x2e0>)
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f7f5 fec4 	bl	8000648 <__aeabi_dmul>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	460b      	mov	r3, r1
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	f7f5 fd08 	bl	80002dc <__adddf3>
 800a8cc:	4606      	mov	r6, r0
 800a8ce:	460f      	mov	r7, r1
 800a8d0:	f7f6 f96a 	bl	8000ba8 <__aeabi_d2iz>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	4683      	mov	fp, r0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4630      	mov	r0, r6
 800a8dc:	4639      	mov	r1, r7
 800a8de:	f7f6 f925 	bl	8000b2c <__aeabi_dcmplt>
 800a8e2:	b148      	cbz	r0, 800a8f8 <_dtoa_r+0x190>
 800a8e4:	4658      	mov	r0, fp
 800a8e6:	f7f5 fe45 	bl	8000574 <__aeabi_i2d>
 800a8ea:	4632      	mov	r2, r6
 800a8ec:	463b      	mov	r3, r7
 800a8ee:	f7f6 f913 	bl	8000b18 <__aeabi_dcmpeq>
 800a8f2:	b908      	cbnz	r0, 800a8f8 <_dtoa_r+0x190>
 800a8f4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8f8:	f1bb 0f16 	cmp.w	fp, #22
 800a8fc:	d857      	bhi.n	800a9ae <_dtoa_r+0x246>
 800a8fe:	4b5b      	ldr	r3, [pc, #364]	; (800aa6c <_dtoa_r+0x304>)
 800a900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a908:	ec51 0b18 	vmov	r0, r1, d8
 800a90c:	f7f6 f90e 	bl	8000b2c <__aeabi_dcmplt>
 800a910:	2800      	cmp	r0, #0
 800a912:	d04e      	beq.n	800a9b2 <_dtoa_r+0x24a>
 800a914:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a918:	2300      	movs	r3, #0
 800a91a:	930c      	str	r3, [sp, #48]	; 0x30
 800a91c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a91e:	1b5b      	subs	r3, r3, r5
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	bf45      	ittet	mi
 800a924:	f1c3 0301 	rsbmi	r3, r3, #1
 800a928:	9305      	strmi	r3, [sp, #20]
 800a92a:	2300      	movpl	r3, #0
 800a92c:	2300      	movmi	r3, #0
 800a92e:	9206      	str	r2, [sp, #24]
 800a930:	bf54      	ite	pl
 800a932:	9305      	strpl	r3, [sp, #20]
 800a934:	9306      	strmi	r3, [sp, #24]
 800a936:	f1bb 0f00 	cmp.w	fp, #0
 800a93a:	db3c      	blt.n	800a9b6 <_dtoa_r+0x24e>
 800a93c:	9b06      	ldr	r3, [sp, #24]
 800a93e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a942:	445b      	add	r3, fp
 800a944:	9306      	str	r3, [sp, #24]
 800a946:	2300      	movs	r3, #0
 800a948:	9308      	str	r3, [sp, #32]
 800a94a:	9b07      	ldr	r3, [sp, #28]
 800a94c:	2b09      	cmp	r3, #9
 800a94e:	d868      	bhi.n	800aa22 <_dtoa_r+0x2ba>
 800a950:	2b05      	cmp	r3, #5
 800a952:	bfc4      	itt	gt
 800a954:	3b04      	subgt	r3, #4
 800a956:	9307      	strgt	r3, [sp, #28]
 800a958:	9b07      	ldr	r3, [sp, #28]
 800a95a:	f1a3 0302 	sub.w	r3, r3, #2
 800a95e:	bfcc      	ite	gt
 800a960:	2500      	movgt	r5, #0
 800a962:	2501      	movle	r5, #1
 800a964:	2b03      	cmp	r3, #3
 800a966:	f200 8085 	bhi.w	800aa74 <_dtoa_r+0x30c>
 800a96a:	e8df f003 	tbb	[pc, r3]
 800a96e:	3b2e      	.short	0x3b2e
 800a970:	5839      	.short	0x5839
 800a972:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a976:	441d      	add	r5, r3
 800a978:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a97c:	2b20      	cmp	r3, #32
 800a97e:	bfc1      	itttt	gt
 800a980:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a984:	fa08 f803 	lslgt.w	r8, r8, r3
 800a988:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a98c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a990:	bfd6      	itet	le
 800a992:	f1c3 0320 	rsble	r3, r3, #32
 800a996:	ea48 0003 	orrgt.w	r0, r8, r3
 800a99a:	fa06 f003 	lslle.w	r0, r6, r3
 800a99e:	f7f5 fdd9 	bl	8000554 <__aeabi_ui2d>
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9a8:	3d01      	subs	r5, #1
 800a9aa:	920e      	str	r2, [sp, #56]	; 0x38
 800a9ac:	e76f      	b.n	800a88e <_dtoa_r+0x126>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e7b3      	b.n	800a91a <_dtoa_r+0x1b2>
 800a9b2:	900c      	str	r0, [sp, #48]	; 0x30
 800a9b4:	e7b2      	b.n	800a91c <_dtoa_r+0x1b4>
 800a9b6:	9b05      	ldr	r3, [sp, #20]
 800a9b8:	eba3 030b 	sub.w	r3, r3, fp
 800a9bc:	9305      	str	r3, [sp, #20]
 800a9be:	f1cb 0300 	rsb	r3, fp, #0
 800a9c2:	9308      	str	r3, [sp, #32]
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9c8:	e7bf      	b.n	800a94a <_dtoa_r+0x1e2>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9309      	str	r3, [sp, #36]	; 0x24
 800a9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	dc52      	bgt.n	800aa7a <_dtoa_r+0x312>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	9301      	str	r3, [sp, #4]
 800a9d8:	9304      	str	r3, [sp, #16]
 800a9da:	461a      	mov	r2, r3
 800a9dc:	920a      	str	r2, [sp, #40]	; 0x28
 800a9de:	e00b      	b.n	800a9f8 <_dtoa_r+0x290>
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	e7f3      	b.n	800a9cc <_dtoa_r+0x264>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ea:	445b      	add	r3, fp
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	9304      	str	r3, [sp, #16]
 800a9f4:	bfb8      	it	lt
 800a9f6:	2301      	movlt	r3, #1
 800a9f8:	69e0      	ldr	r0, [r4, #28]
 800a9fa:	2100      	movs	r1, #0
 800a9fc:	2204      	movs	r2, #4
 800a9fe:	f102 0614 	add.w	r6, r2, #20
 800aa02:	429e      	cmp	r6, r3
 800aa04:	d93d      	bls.n	800aa82 <_dtoa_r+0x31a>
 800aa06:	6041      	str	r1, [r0, #4]
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fd9f 	bl	800b54c <_Balloc>
 800aa0e:	9000      	str	r0, [sp, #0]
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d139      	bne.n	800aa88 <_dtoa_r+0x320>
 800aa14:	4b16      	ldr	r3, [pc, #88]	; (800aa70 <_dtoa_r+0x308>)
 800aa16:	4602      	mov	r2, r0
 800aa18:	f240 11af 	movw	r1, #431	; 0x1af
 800aa1c:	e6bd      	b.n	800a79a <_dtoa_r+0x32>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e7e1      	b.n	800a9e6 <_dtoa_r+0x27e>
 800aa22:	2501      	movs	r5, #1
 800aa24:	2300      	movs	r3, #0
 800aa26:	9307      	str	r3, [sp, #28]
 800aa28:	9509      	str	r5, [sp, #36]	; 0x24
 800aa2a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	2200      	movs	r2, #0
 800aa34:	2312      	movs	r3, #18
 800aa36:	e7d1      	b.n	800a9dc <_dtoa_r+0x274>
 800aa38:	636f4361 	.word	0x636f4361
 800aa3c:	3fd287a7 	.word	0x3fd287a7
 800aa40:	8b60c8b3 	.word	0x8b60c8b3
 800aa44:	3fc68a28 	.word	0x3fc68a28
 800aa48:	509f79fb 	.word	0x509f79fb
 800aa4c:	3fd34413 	.word	0x3fd34413
 800aa50:	0800d2ad 	.word	0x0800d2ad
 800aa54:	0800d2c4 	.word	0x0800d2c4
 800aa58:	7ff00000 	.word	0x7ff00000
 800aa5c:	0800d2a9 	.word	0x0800d2a9
 800aa60:	0800d2a0 	.word	0x0800d2a0
 800aa64:	0800d27d 	.word	0x0800d27d
 800aa68:	3ff80000 	.word	0x3ff80000
 800aa6c:	0800d3b0 	.word	0x0800d3b0
 800aa70:	0800d31c 	.word	0x0800d31c
 800aa74:	2301      	movs	r3, #1
 800aa76:	9309      	str	r3, [sp, #36]	; 0x24
 800aa78:	e7d7      	b.n	800aa2a <_dtoa_r+0x2c2>
 800aa7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7c:	9301      	str	r3, [sp, #4]
 800aa7e:	9304      	str	r3, [sp, #16]
 800aa80:	e7ba      	b.n	800a9f8 <_dtoa_r+0x290>
 800aa82:	3101      	adds	r1, #1
 800aa84:	0052      	lsls	r2, r2, #1
 800aa86:	e7ba      	b.n	800a9fe <_dtoa_r+0x296>
 800aa88:	69e3      	ldr	r3, [r4, #28]
 800aa8a:	9a00      	ldr	r2, [sp, #0]
 800aa8c:	601a      	str	r2, [r3, #0]
 800aa8e:	9b04      	ldr	r3, [sp, #16]
 800aa90:	2b0e      	cmp	r3, #14
 800aa92:	f200 80a8 	bhi.w	800abe6 <_dtoa_r+0x47e>
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	f000 80a5 	beq.w	800abe6 <_dtoa_r+0x47e>
 800aa9c:	f1bb 0f00 	cmp.w	fp, #0
 800aaa0:	dd38      	ble.n	800ab14 <_dtoa_r+0x3ac>
 800aaa2:	4bc0      	ldr	r3, [pc, #768]	; (800ada4 <_dtoa_r+0x63c>)
 800aaa4:	f00b 020f 	and.w	r2, fp, #15
 800aaa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aaac:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aab0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aab4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aab8:	d019      	beq.n	800aaee <_dtoa_r+0x386>
 800aaba:	4bbb      	ldr	r3, [pc, #748]	; (800ada8 <_dtoa_r+0x640>)
 800aabc:	ec51 0b18 	vmov	r0, r1, d8
 800aac0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aac4:	f7f5 feea 	bl	800089c <__aeabi_ddiv>
 800aac8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aacc:	f008 080f 	and.w	r8, r8, #15
 800aad0:	2503      	movs	r5, #3
 800aad2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ada8 <_dtoa_r+0x640>
 800aad6:	f1b8 0f00 	cmp.w	r8, #0
 800aada:	d10a      	bne.n	800aaf2 <_dtoa_r+0x38a>
 800aadc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae0:	4632      	mov	r2, r6
 800aae2:	463b      	mov	r3, r7
 800aae4:	f7f5 feda 	bl	800089c <__aeabi_ddiv>
 800aae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaec:	e02b      	b.n	800ab46 <_dtoa_r+0x3de>
 800aaee:	2502      	movs	r5, #2
 800aaf0:	e7ef      	b.n	800aad2 <_dtoa_r+0x36a>
 800aaf2:	f018 0f01 	tst.w	r8, #1
 800aaf6:	d008      	beq.n	800ab0a <_dtoa_r+0x3a2>
 800aaf8:	4630      	mov	r0, r6
 800aafa:	4639      	mov	r1, r7
 800aafc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab00:	f7f5 fda2 	bl	8000648 <__aeabi_dmul>
 800ab04:	3501      	adds	r5, #1
 800ab06:	4606      	mov	r6, r0
 800ab08:	460f      	mov	r7, r1
 800ab0a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab0e:	f109 0908 	add.w	r9, r9, #8
 800ab12:	e7e0      	b.n	800aad6 <_dtoa_r+0x36e>
 800ab14:	f000 809f 	beq.w	800ac56 <_dtoa_r+0x4ee>
 800ab18:	f1cb 0600 	rsb	r6, fp, #0
 800ab1c:	4ba1      	ldr	r3, [pc, #644]	; (800ada4 <_dtoa_r+0x63c>)
 800ab1e:	4fa2      	ldr	r7, [pc, #648]	; (800ada8 <_dtoa_r+0x640>)
 800ab20:	f006 020f 	and.w	r2, r6, #15
 800ab24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	ec51 0b18 	vmov	r0, r1, d8
 800ab30:	f7f5 fd8a 	bl	8000648 <__aeabi_dmul>
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	1136      	asrs	r6, r6, #4
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2502      	movs	r5, #2
 800ab3e:	2e00      	cmp	r6, #0
 800ab40:	d17e      	bne.n	800ac40 <_dtoa_r+0x4d8>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1d0      	bne.n	800aae8 <_dtoa_r+0x380>
 800ab46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab48:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8084 	beq.w	800ac5a <_dtoa_r+0x4f2>
 800ab52:	4b96      	ldr	r3, [pc, #600]	; (800adac <_dtoa_r+0x644>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	4640      	mov	r0, r8
 800ab58:	4649      	mov	r1, r9
 800ab5a:	f7f5 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	d07b      	beq.n	800ac5a <_dtoa_r+0x4f2>
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d078      	beq.n	800ac5a <_dtoa_r+0x4f2>
 800ab68:	9b01      	ldr	r3, [sp, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dd39      	ble.n	800abe2 <_dtoa_r+0x47a>
 800ab6e:	4b90      	ldr	r3, [pc, #576]	; (800adb0 <_dtoa_r+0x648>)
 800ab70:	2200      	movs	r2, #0
 800ab72:	4640      	mov	r0, r8
 800ab74:	4649      	mov	r1, r9
 800ab76:	f7f5 fd67 	bl	8000648 <__aeabi_dmul>
 800ab7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab7e:	9e01      	ldr	r6, [sp, #4]
 800ab80:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab84:	3501      	adds	r5, #1
 800ab86:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	f7f5 fcf2 	bl	8000574 <__aeabi_i2d>
 800ab90:	4642      	mov	r2, r8
 800ab92:	464b      	mov	r3, r9
 800ab94:	f7f5 fd58 	bl	8000648 <__aeabi_dmul>
 800ab98:	4b86      	ldr	r3, [pc, #536]	; (800adb4 <_dtoa_r+0x64c>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f7f5 fb9e 	bl	80002dc <__adddf3>
 800aba0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800aba4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aba8:	9303      	str	r3, [sp, #12]
 800abaa:	2e00      	cmp	r6, #0
 800abac:	d158      	bne.n	800ac60 <_dtoa_r+0x4f8>
 800abae:	4b82      	ldr	r3, [pc, #520]	; (800adb8 <_dtoa_r+0x650>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	4640      	mov	r0, r8
 800abb4:	4649      	mov	r1, r9
 800abb6:	f7f5 fb8f 	bl	80002d8 <__aeabi_dsub>
 800abba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abbe:	4680      	mov	r8, r0
 800abc0:	4689      	mov	r9, r1
 800abc2:	f7f5 ffd1 	bl	8000b68 <__aeabi_dcmpgt>
 800abc6:	2800      	cmp	r0, #0
 800abc8:	f040 8296 	bne.w	800b0f8 <_dtoa_r+0x990>
 800abcc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abd0:	4640      	mov	r0, r8
 800abd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abd6:	4649      	mov	r1, r9
 800abd8:	f7f5 ffa8 	bl	8000b2c <__aeabi_dcmplt>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f040 8289 	bne.w	800b0f4 <_dtoa_r+0x98c>
 800abe2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abe6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f2c0 814e 	blt.w	800ae8a <_dtoa_r+0x722>
 800abee:	f1bb 0f0e 	cmp.w	fp, #14
 800abf2:	f300 814a 	bgt.w	800ae8a <_dtoa_r+0x722>
 800abf6:	4b6b      	ldr	r3, [pc, #428]	; (800ada4 <_dtoa_r+0x63c>)
 800abf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	f280 80dc 	bge.w	800adc0 <_dtoa_r+0x658>
 800ac08:	9b04      	ldr	r3, [sp, #16]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f300 80d8 	bgt.w	800adc0 <_dtoa_r+0x658>
 800ac10:	f040 826f 	bne.w	800b0f2 <_dtoa_r+0x98a>
 800ac14:	4b68      	ldr	r3, [pc, #416]	; (800adb8 <_dtoa_r+0x650>)
 800ac16:	2200      	movs	r2, #0
 800ac18:	4640      	mov	r0, r8
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	f7f5 fd14 	bl	8000648 <__aeabi_dmul>
 800ac20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac24:	f7f5 ff96 	bl	8000b54 <__aeabi_dcmpge>
 800ac28:	9e04      	ldr	r6, [sp, #16]
 800ac2a:	4637      	mov	r7, r6
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	f040 8245 	bne.w	800b0bc <_dtoa_r+0x954>
 800ac32:	9d00      	ldr	r5, [sp, #0]
 800ac34:	2331      	movs	r3, #49	; 0x31
 800ac36:	f805 3b01 	strb.w	r3, [r5], #1
 800ac3a:	f10b 0b01 	add.w	fp, fp, #1
 800ac3e:	e241      	b.n	800b0c4 <_dtoa_r+0x95c>
 800ac40:	07f2      	lsls	r2, r6, #31
 800ac42:	d505      	bpl.n	800ac50 <_dtoa_r+0x4e8>
 800ac44:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac48:	f7f5 fcfe 	bl	8000648 <__aeabi_dmul>
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	2301      	movs	r3, #1
 800ac50:	1076      	asrs	r6, r6, #1
 800ac52:	3708      	adds	r7, #8
 800ac54:	e773      	b.n	800ab3e <_dtoa_r+0x3d6>
 800ac56:	2502      	movs	r5, #2
 800ac58:	e775      	b.n	800ab46 <_dtoa_r+0x3de>
 800ac5a:	9e04      	ldr	r6, [sp, #16]
 800ac5c:	465f      	mov	r7, fp
 800ac5e:	e792      	b.n	800ab86 <_dtoa_r+0x41e>
 800ac60:	9900      	ldr	r1, [sp, #0]
 800ac62:	4b50      	ldr	r3, [pc, #320]	; (800ada4 <_dtoa_r+0x63c>)
 800ac64:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac68:	4431      	add	r1, r6
 800ac6a:	9102      	str	r1, [sp, #8]
 800ac6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac6e:	eeb0 9a47 	vmov.f32	s18, s14
 800ac72:	eef0 9a67 	vmov.f32	s19, s15
 800ac76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac7e:	2900      	cmp	r1, #0
 800ac80:	d044      	beq.n	800ad0c <_dtoa_r+0x5a4>
 800ac82:	494e      	ldr	r1, [pc, #312]	; (800adbc <_dtoa_r+0x654>)
 800ac84:	2000      	movs	r0, #0
 800ac86:	f7f5 fe09 	bl	800089c <__aeabi_ddiv>
 800ac8a:	ec53 2b19 	vmov	r2, r3, d9
 800ac8e:	f7f5 fb23 	bl	80002d8 <__aeabi_dsub>
 800ac92:	9d00      	ldr	r5, [sp, #0]
 800ac94:	ec41 0b19 	vmov	d9, r0, r1
 800ac98:	4649      	mov	r1, r9
 800ac9a:	4640      	mov	r0, r8
 800ac9c:	f7f5 ff84 	bl	8000ba8 <__aeabi_d2iz>
 800aca0:	4606      	mov	r6, r0
 800aca2:	f7f5 fc67 	bl	8000574 <__aeabi_i2d>
 800aca6:	4602      	mov	r2, r0
 800aca8:	460b      	mov	r3, r1
 800acaa:	4640      	mov	r0, r8
 800acac:	4649      	mov	r1, r9
 800acae:	f7f5 fb13 	bl	80002d8 <__aeabi_dsub>
 800acb2:	3630      	adds	r6, #48	; 0x30
 800acb4:	f805 6b01 	strb.w	r6, [r5], #1
 800acb8:	ec53 2b19 	vmov	r2, r3, d9
 800acbc:	4680      	mov	r8, r0
 800acbe:	4689      	mov	r9, r1
 800acc0:	f7f5 ff34 	bl	8000b2c <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d164      	bne.n	800ad92 <_dtoa_r+0x62a>
 800acc8:	4642      	mov	r2, r8
 800acca:	464b      	mov	r3, r9
 800accc:	4937      	ldr	r1, [pc, #220]	; (800adac <_dtoa_r+0x644>)
 800acce:	2000      	movs	r0, #0
 800acd0:	f7f5 fb02 	bl	80002d8 <__aeabi_dsub>
 800acd4:	ec53 2b19 	vmov	r2, r3, d9
 800acd8:	f7f5 ff28 	bl	8000b2c <__aeabi_dcmplt>
 800acdc:	2800      	cmp	r0, #0
 800acde:	f040 80b6 	bne.w	800ae4e <_dtoa_r+0x6e6>
 800ace2:	9b02      	ldr	r3, [sp, #8]
 800ace4:	429d      	cmp	r5, r3
 800ace6:	f43f af7c 	beq.w	800abe2 <_dtoa_r+0x47a>
 800acea:	4b31      	ldr	r3, [pc, #196]	; (800adb0 <_dtoa_r+0x648>)
 800acec:	ec51 0b19 	vmov	r0, r1, d9
 800acf0:	2200      	movs	r2, #0
 800acf2:	f7f5 fca9 	bl	8000648 <__aeabi_dmul>
 800acf6:	4b2e      	ldr	r3, [pc, #184]	; (800adb0 <_dtoa_r+0x648>)
 800acf8:	ec41 0b19 	vmov	d9, r0, r1
 800acfc:	2200      	movs	r2, #0
 800acfe:	4640      	mov	r0, r8
 800ad00:	4649      	mov	r1, r9
 800ad02:	f7f5 fca1 	bl	8000648 <__aeabi_dmul>
 800ad06:	4680      	mov	r8, r0
 800ad08:	4689      	mov	r9, r1
 800ad0a:	e7c5      	b.n	800ac98 <_dtoa_r+0x530>
 800ad0c:	ec51 0b17 	vmov	r0, r1, d7
 800ad10:	f7f5 fc9a 	bl	8000648 <__aeabi_dmul>
 800ad14:	9b02      	ldr	r3, [sp, #8]
 800ad16:	9d00      	ldr	r5, [sp, #0]
 800ad18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad1a:	ec41 0b19 	vmov	d9, r0, r1
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4640      	mov	r0, r8
 800ad22:	f7f5 ff41 	bl	8000ba8 <__aeabi_d2iz>
 800ad26:	4606      	mov	r6, r0
 800ad28:	f7f5 fc24 	bl	8000574 <__aeabi_i2d>
 800ad2c:	3630      	adds	r6, #48	; 0x30
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4640      	mov	r0, r8
 800ad34:	4649      	mov	r1, r9
 800ad36:	f7f5 facf 	bl	80002d8 <__aeabi_dsub>
 800ad3a:	f805 6b01 	strb.w	r6, [r5], #1
 800ad3e:	9b02      	ldr	r3, [sp, #8]
 800ad40:	429d      	cmp	r5, r3
 800ad42:	4680      	mov	r8, r0
 800ad44:	4689      	mov	r9, r1
 800ad46:	f04f 0200 	mov.w	r2, #0
 800ad4a:	d124      	bne.n	800ad96 <_dtoa_r+0x62e>
 800ad4c:	4b1b      	ldr	r3, [pc, #108]	; (800adbc <_dtoa_r+0x654>)
 800ad4e:	ec51 0b19 	vmov	r0, r1, d9
 800ad52:	f7f5 fac3 	bl	80002dc <__adddf3>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4640      	mov	r0, r8
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	f7f5 ff03 	bl	8000b68 <__aeabi_dcmpgt>
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d173      	bne.n	800ae4e <_dtoa_r+0x6e6>
 800ad66:	ec53 2b19 	vmov	r2, r3, d9
 800ad6a:	4914      	ldr	r1, [pc, #80]	; (800adbc <_dtoa_r+0x654>)
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f7f5 fab3 	bl	80002d8 <__aeabi_dsub>
 800ad72:	4602      	mov	r2, r0
 800ad74:	460b      	mov	r3, r1
 800ad76:	4640      	mov	r0, r8
 800ad78:	4649      	mov	r1, r9
 800ad7a:	f7f5 fed7 	bl	8000b2c <__aeabi_dcmplt>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	f43f af2f 	beq.w	800abe2 <_dtoa_r+0x47a>
 800ad84:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad86:	1e6b      	subs	r3, r5, #1
 800ad88:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad8e:	2b30      	cmp	r3, #48	; 0x30
 800ad90:	d0f8      	beq.n	800ad84 <_dtoa_r+0x61c>
 800ad92:	46bb      	mov	fp, r7
 800ad94:	e04a      	b.n	800ae2c <_dtoa_r+0x6c4>
 800ad96:	4b06      	ldr	r3, [pc, #24]	; (800adb0 <_dtoa_r+0x648>)
 800ad98:	f7f5 fc56 	bl	8000648 <__aeabi_dmul>
 800ad9c:	4680      	mov	r8, r0
 800ad9e:	4689      	mov	r9, r1
 800ada0:	e7bd      	b.n	800ad1e <_dtoa_r+0x5b6>
 800ada2:	bf00      	nop
 800ada4:	0800d3b0 	.word	0x0800d3b0
 800ada8:	0800d388 	.word	0x0800d388
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	40240000 	.word	0x40240000
 800adb4:	401c0000 	.word	0x401c0000
 800adb8:	40140000 	.word	0x40140000
 800adbc:	3fe00000 	.word	0x3fe00000
 800adc0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adc4:	9d00      	ldr	r5, [sp, #0]
 800adc6:	4642      	mov	r2, r8
 800adc8:	464b      	mov	r3, r9
 800adca:	4630      	mov	r0, r6
 800adcc:	4639      	mov	r1, r7
 800adce:	f7f5 fd65 	bl	800089c <__aeabi_ddiv>
 800add2:	f7f5 fee9 	bl	8000ba8 <__aeabi_d2iz>
 800add6:	9001      	str	r0, [sp, #4]
 800add8:	f7f5 fbcc 	bl	8000574 <__aeabi_i2d>
 800addc:	4642      	mov	r2, r8
 800adde:	464b      	mov	r3, r9
 800ade0:	f7f5 fc32 	bl	8000648 <__aeabi_dmul>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fa74 	bl	80002d8 <__aeabi_dsub>
 800adf0:	9e01      	ldr	r6, [sp, #4]
 800adf2:	9f04      	ldr	r7, [sp, #16]
 800adf4:	3630      	adds	r6, #48	; 0x30
 800adf6:	f805 6b01 	strb.w	r6, [r5], #1
 800adfa:	9e00      	ldr	r6, [sp, #0]
 800adfc:	1bae      	subs	r6, r5, r6
 800adfe:	42b7      	cmp	r7, r6
 800ae00:	4602      	mov	r2, r0
 800ae02:	460b      	mov	r3, r1
 800ae04:	d134      	bne.n	800ae70 <_dtoa_r+0x708>
 800ae06:	f7f5 fa69 	bl	80002dc <__adddf3>
 800ae0a:	4642      	mov	r2, r8
 800ae0c:	464b      	mov	r3, r9
 800ae0e:	4606      	mov	r6, r0
 800ae10:	460f      	mov	r7, r1
 800ae12:	f7f5 fea9 	bl	8000b68 <__aeabi_dcmpgt>
 800ae16:	b9c8      	cbnz	r0, 800ae4c <_dtoa_r+0x6e4>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	464b      	mov	r3, r9
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 800ae24:	b110      	cbz	r0, 800ae2c <_dtoa_r+0x6c4>
 800ae26:	9b01      	ldr	r3, [sp, #4]
 800ae28:	07db      	lsls	r3, r3, #31
 800ae2a:	d40f      	bmi.n	800ae4c <_dtoa_r+0x6e4>
 800ae2c:	4651      	mov	r1, sl
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f000 fbcc 	bl	800b5cc <_Bfree>
 800ae34:	2300      	movs	r3, #0
 800ae36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae38:	702b      	strb	r3, [r5, #0]
 800ae3a:	f10b 0301 	add.w	r3, fp, #1
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f43f ace2 	beq.w	800a80c <_dtoa_r+0xa4>
 800ae48:	601d      	str	r5, [r3, #0]
 800ae4a:	e4df      	b.n	800a80c <_dtoa_r+0xa4>
 800ae4c:	465f      	mov	r7, fp
 800ae4e:	462b      	mov	r3, r5
 800ae50:	461d      	mov	r5, r3
 800ae52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae56:	2a39      	cmp	r2, #57	; 0x39
 800ae58:	d106      	bne.n	800ae68 <_dtoa_r+0x700>
 800ae5a:	9a00      	ldr	r2, [sp, #0]
 800ae5c:	429a      	cmp	r2, r3
 800ae5e:	d1f7      	bne.n	800ae50 <_dtoa_r+0x6e8>
 800ae60:	9900      	ldr	r1, [sp, #0]
 800ae62:	2230      	movs	r2, #48	; 0x30
 800ae64:	3701      	adds	r7, #1
 800ae66:	700a      	strb	r2, [r1, #0]
 800ae68:	781a      	ldrb	r2, [r3, #0]
 800ae6a:	3201      	adds	r2, #1
 800ae6c:	701a      	strb	r2, [r3, #0]
 800ae6e:	e790      	b.n	800ad92 <_dtoa_r+0x62a>
 800ae70:	4ba3      	ldr	r3, [pc, #652]	; (800b100 <_dtoa_r+0x998>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7f5 fbe8 	bl	8000648 <__aeabi_dmul>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	f7f5 fe4a 	bl	8000b18 <__aeabi_dcmpeq>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d09e      	beq.n	800adc6 <_dtoa_r+0x65e>
 800ae88:	e7d0      	b.n	800ae2c <_dtoa_r+0x6c4>
 800ae8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	f000 80ca 	beq.w	800b026 <_dtoa_r+0x8be>
 800ae92:	9a07      	ldr	r2, [sp, #28]
 800ae94:	2a01      	cmp	r2, #1
 800ae96:	f300 80ad 	bgt.w	800aff4 <_dtoa_r+0x88c>
 800ae9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae9c:	2a00      	cmp	r2, #0
 800ae9e:	f000 80a5 	beq.w	800afec <_dtoa_r+0x884>
 800aea2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aea6:	9e08      	ldr	r6, [sp, #32]
 800aea8:	9d05      	ldr	r5, [sp, #20]
 800aeaa:	9a05      	ldr	r2, [sp, #20]
 800aeac:	441a      	add	r2, r3
 800aeae:	9205      	str	r2, [sp, #20]
 800aeb0:	9a06      	ldr	r2, [sp, #24]
 800aeb2:	2101      	movs	r1, #1
 800aeb4:	441a      	add	r2, r3
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	9206      	str	r2, [sp, #24]
 800aeba:	f000 fc3d 	bl	800b738 <__i2b>
 800aebe:	4607      	mov	r7, r0
 800aec0:	b165      	cbz	r5, 800aedc <_dtoa_r+0x774>
 800aec2:	9b06      	ldr	r3, [sp, #24]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	dd09      	ble.n	800aedc <_dtoa_r+0x774>
 800aec8:	42ab      	cmp	r3, r5
 800aeca:	9a05      	ldr	r2, [sp, #20]
 800aecc:	bfa8      	it	ge
 800aece:	462b      	movge	r3, r5
 800aed0:	1ad2      	subs	r2, r2, r3
 800aed2:	9205      	str	r2, [sp, #20]
 800aed4:	9a06      	ldr	r2, [sp, #24]
 800aed6:	1aed      	subs	r5, r5, r3
 800aed8:	1ad3      	subs	r3, r2, r3
 800aeda:	9306      	str	r3, [sp, #24]
 800aedc:	9b08      	ldr	r3, [sp, #32]
 800aede:	b1f3      	cbz	r3, 800af1e <_dtoa_r+0x7b6>
 800aee0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f000 80a3 	beq.w	800b02e <_dtoa_r+0x8c6>
 800aee8:	2e00      	cmp	r6, #0
 800aeea:	dd10      	ble.n	800af0e <_dtoa_r+0x7a6>
 800aeec:	4639      	mov	r1, r7
 800aeee:	4632      	mov	r2, r6
 800aef0:	4620      	mov	r0, r4
 800aef2:	f000 fce1 	bl	800b8b8 <__pow5mult>
 800aef6:	4652      	mov	r2, sl
 800aef8:	4601      	mov	r1, r0
 800aefa:	4607      	mov	r7, r0
 800aefc:	4620      	mov	r0, r4
 800aefe:	f000 fc31 	bl	800b764 <__multiply>
 800af02:	4651      	mov	r1, sl
 800af04:	4680      	mov	r8, r0
 800af06:	4620      	mov	r0, r4
 800af08:	f000 fb60 	bl	800b5cc <_Bfree>
 800af0c:	46c2      	mov	sl, r8
 800af0e:	9b08      	ldr	r3, [sp, #32]
 800af10:	1b9a      	subs	r2, r3, r6
 800af12:	d004      	beq.n	800af1e <_dtoa_r+0x7b6>
 800af14:	4651      	mov	r1, sl
 800af16:	4620      	mov	r0, r4
 800af18:	f000 fcce 	bl	800b8b8 <__pow5mult>
 800af1c:	4682      	mov	sl, r0
 800af1e:	2101      	movs	r1, #1
 800af20:	4620      	mov	r0, r4
 800af22:	f000 fc09 	bl	800b738 <__i2b>
 800af26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af28:	2b00      	cmp	r3, #0
 800af2a:	4606      	mov	r6, r0
 800af2c:	f340 8081 	ble.w	800b032 <_dtoa_r+0x8ca>
 800af30:	461a      	mov	r2, r3
 800af32:	4601      	mov	r1, r0
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fcbf 	bl	800b8b8 <__pow5mult>
 800af3a:	9b07      	ldr	r3, [sp, #28]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	4606      	mov	r6, r0
 800af40:	dd7a      	ble.n	800b038 <_dtoa_r+0x8d0>
 800af42:	f04f 0800 	mov.w	r8, #0
 800af46:	6933      	ldr	r3, [r6, #16]
 800af48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af4c:	6918      	ldr	r0, [r3, #16]
 800af4e:	f000 fba5 	bl	800b69c <__hi0bits>
 800af52:	f1c0 0020 	rsb	r0, r0, #32
 800af56:	9b06      	ldr	r3, [sp, #24]
 800af58:	4418      	add	r0, r3
 800af5a:	f010 001f 	ands.w	r0, r0, #31
 800af5e:	f000 8094 	beq.w	800b08a <_dtoa_r+0x922>
 800af62:	f1c0 0320 	rsb	r3, r0, #32
 800af66:	2b04      	cmp	r3, #4
 800af68:	f340 8085 	ble.w	800b076 <_dtoa_r+0x90e>
 800af6c:	9b05      	ldr	r3, [sp, #20]
 800af6e:	f1c0 001c 	rsb	r0, r0, #28
 800af72:	4403      	add	r3, r0
 800af74:	9305      	str	r3, [sp, #20]
 800af76:	9b06      	ldr	r3, [sp, #24]
 800af78:	4403      	add	r3, r0
 800af7a:	4405      	add	r5, r0
 800af7c:	9306      	str	r3, [sp, #24]
 800af7e:	9b05      	ldr	r3, [sp, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	dd05      	ble.n	800af90 <_dtoa_r+0x828>
 800af84:	4651      	mov	r1, sl
 800af86:	461a      	mov	r2, r3
 800af88:	4620      	mov	r0, r4
 800af8a:	f000 fcef 	bl	800b96c <__lshift>
 800af8e:	4682      	mov	sl, r0
 800af90:	9b06      	ldr	r3, [sp, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	dd05      	ble.n	800afa2 <_dtoa_r+0x83a>
 800af96:	4631      	mov	r1, r6
 800af98:	461a      	mov	r2, r3
 800af9a:	4620      	mov	r0, r4
 800af9c:	f000 fce6 	bl	800b96c <__lshift>
 800afa0:	4606      	mov	r6, r0
 800afa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d072      	beq.n	800b08e <_dtoa_r+0x926>
 800afa8:	4631      	mov	r1, r6
 800afaa:	4650      	mov	r0, sl
 800afac:	f000 fd4a 	bl	800ba44 <__mcmp>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	da6c      	bge.n	800b08e <_dtoa_r+0x926>
 800afb4:	2300      	movs	r3, #0
 800afb6:	4651      	mov	r1, sl
 800afb8:	220a      	movs	r2, #10
 800afba:	4620      	mov	r0, r4
 800afbc:	f000 fb28 	bl	800b610 <__multadd>
 800afc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afc2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afc6:	4682      	mov	sl, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 81b0 	beq.w	800b32e <_dtoa_r+0xbc6>
 800afce:	2300      	movs	r3, #0
 800afd0:	4639      	mov	r1, r7
 800afd2:	220a      	movs	r2, #10
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 fb1b 	bl	800b610 <__multadd>
 800afda:	9b01      	ldr	r3, [sp, #4]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	4607      	mov	r7, r0
 800afe0:	f300 8096 	bgt.w	800b110 <_dtoa_r+0x9a8>
 800afe4:	9b07      	ldr	r3, [sp, #28]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	dc59      	bgt.n	800b09e <_dtoa_r+0x936>
 800afea:	e091      	b.n	800b110 <_dtoa_r+0x9a8>
 800afec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800afee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aff2:	e758      	b.n	800aea6 <_dtoa_r+0x73e>
 800aff4:	9b04      	ldr	r3, [sp, #16]
 800aff6:	1e5e      	subs	r6, r3, #1
 800aff8:	9b08      	ldr	r3, [sp, #32]
 800affa:	42b3      	cmp	r3, r6
 800affc:	bfbf      	itttt	lt
 800affe:	9b08      	ldrlt	r3, [sp, #32]
 800b000:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b002:	9608      	strlt	r6, [sp, #32]
 800b004:	1af3      	sublt	r3, r6, r3
 800b006:	bfb4      	ite	lt
 800b008:	18d2      	addlt	r2, r2, r3
 800b00a:	1b9e      	subge	r6, r3, r6
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	bfbc      	itt	lt
 800b010:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b012:	2600      	movlt	r6, #0
 800b014:	2b00      	cmp	r3, #0
 800b016:	bfb7      	itett	lt
 800b018:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b01c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b020:	1a9d      	sublt	r5, r3, r2
 800b022:	2300      	movlt	r3, #0
 800b024:	e741      	b.n	800aeaa <_dtoa_r+0x742>
 800b026:	9e08      	ldr	r6, [sp, #32]
 800b028:	9d05      	ldr	r5, [sp, #20]
 800b02a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b02c:	e748      	b.n	800aec0 <_dtoa_r+0x758>
 800b02e:	9a08      	ldr	r2, [sp, #32]
 800b030:	e770      	b.n	800af14 <_dtoa_r+0x7ac>
 800b032:	9b07      	ldr	r3, [sp, #28]
 800b034:	2b01      	cmp	r3, #1
 800b036:	dc19      	bgt.n	800b06c <_dtoa_r+0x904>
 800b038:	9b02      	ldr	r3, [sp, #8]
 800b03a:	b9bb      	cbnz	r3, 800b06c <_dtoa_r+0x904>
 800b03c:	9b03      	ldr	r3, [sp, #12]
 800b03e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b042:	b99b      	cbnz	r3, 800b06c <_dtoa_r+0x904>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b04a:	0d1b      	lsrs	r3, r3, #20
 800b04c:	051b      	lsls	r3, r3, #20
 800b04e:	b183      	cbz	r3, 800b072 <_dtoa_r+0x90a>
 800b050:	9b05      	ldr	r3, [sp, #20]
 800b052:	3301      	adds	r3, #1
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	9b06      	ldr	r3, [sp, #24]
 800b058:	3301      	adds	r3, #1
 800b05a:	9306      	str	r3, [sp, #24]
 800b05c:	f04f 0801 	mov.w	r8, #1
 800b060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b062:	2b00      	cmp	r3, #0
 800b064:	f47f af6f 	bne.w	800af46 <_dtoa_r+0x7de>
 800b068:	2001      	movs	r0, #1
 800b06a:	e774      	b.n	800af56 <_dtoa_r+0x7ee>
 800b06c:	f04f 0800 	mov.w	r8, #0
 800b070:	e7f6      	b.n	800b060 <_dtoa_r+0x8f8>
 800b072:	4698      	mov	r8, r3
 800b074:	e7f4      	b.n	800b060 <_dtoa_r+0x8f8>
 800b076:	d082      	beq.n	800af7e <_dtoa_r+0x816>
 800b078:	9a05      	ldr	r2, [sp, #20]
 800b07a:	331c      	adds	r3, #28
 800b07c:	441a      	add	r2, r3
 800b07e:	9205      	str	r2, [sp, #20]
 800b080:	9a06      	ldr	r2, [sp, #24]
 800b082:	441a      	add	r2, r3
 800b084:	441d      	add	r5, r3
 800b086:	9206      	str	r2, [sp, #24]
 800b088:	e779      	b.n	800af7e <_dtoa_r+0x816>
 800b08a:	4603      	mov	r3, r0
 800b08c:	e7f4      	b.n	800b078 <_dtoa_r+0x910>
 800b08e:	9b04      	ldr	r3, [sp, #16]
 800b090:	2b00      	cmp	r3, #0
 800b092:	dc37      	bgt.n	800b104 <_dtoa_r+0x99c>
 800b094:	9b07      	ldr	r3, [sp, #28]
 800b096:	2b02      	cmp	r3, #2
 800b098:	dd34      	ble.n	800b104 <_dtoa_r+0x99c>
 800b09a:	9b04      	ldr	r3, [sp, #16]
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	9b01      	ldr	r3, [sp, #4]
 800b0a0:	b963      	cbnz	r3, 800b0bc <_dtoa_r+0x954>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	2205      	movs	r2, #5
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f000 fab2 	bl	800b610 <__multadd>
 800b0ac:	4601      	mov	r1, r0
 800b0ae:	4606      	mov	r6, r0
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	f000 fcc7 	bl	800ba44 <__mcmp>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f73f adbb 	bgt.w	800ac32 <_dtoa_r+0x4ca>
 800b0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0be:	9d00      	ldr	r5, [sp, #0]
 800b0c0:	ea6f 0b03 	mvn.w	fp, r3
 800b0c4:	f04f 0800 	mov.w	r8, #0
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	f000 fa7e 	bl	800b5cc <_Bfree>
 800b0d0:	2f00      	cmp	r7, #0
 800b0d2:	f43f aeab 	beq.w	800ae2c <_dtoa_r+0x6c4>
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	d005      	beq.n	800b0e8 <_dtoa_r+0x980>
 800b0dc:	45b8      	cmp	r8, r7
 800b0de:	d003      	beq.n	800b0e8 <_dtoa_r+0x980>
 800b0e0:	4641      	mov	r1, r8
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fa72 	bl	800b5cc <_Bfree>
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fa6e 	bl	800b5cc <_Bfree>
 800b0f0:	e69c      	b.n	800ae2c <_dtoa_r+0x6c4>
 800b0f2:	2600      	movs	r6, #0
 800b0f4:	4637      	mov	r7, r6
 800b0f6:	e7e1      	b.n	800b0bc <_dtoa_r+0x954>
 800b0f8:	46bb      	mov	fp, r7
 800b0fa:	4637      	mov	r7, r6
 800b0fc:	e599      	b.n	800ac32 <_dtoa_r+0x4ca>
 800b0fe:	bf00      	nop
 800b100:	40240000 	.word	0x40240000
 800b104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 80c8 	beq.w	800b29c <_dtoa_r+0xb34>
 800b10c:	9b04      	ldr	r3, [sp, #16]
 800b10e:	9301      	str	r3, [sp, #4]
 800b110:	2d00      	cmp	r5, #0
 800b112:	dd05      	ble.n	800b120 <_dtoa_r+0x9b8>
 800b114:	4639      	mov	r1, r7
 800b116:	462a      	mov	r2, r5
 800b118:	4620      	mov	r0, r4
 800b11a:	f000 fc27 	bl	800b96c <__lshift>
 800b11e:	4607      	mov	r7, r0
 800b120:	f1b8 0f00 	cmp.w	r8, #0
 800b124:	d05b      	beq.n	800b1de <_dtoa_r+0xa76>
 800b126:	6879      	ldr	r1, [r7, #4]
 800b128:	4620      	mov	r0, r4
 800b12a:	f000 fa0f 	bl	800b54c <_Balloc>
 800b12e:	4605      	mov	r5, r0
 800b130:	b928      	cbnz	r0, 800b13e <_dtoa_r+0x9d6>
 800b132:	4b83      	ldr	r3, [pc, #524]	; (800b340 <_dtoa_r+0xbd8>)
 800b134:	4602      	mov	r2, r0
 800b136:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b13a:	f7ff bb2e 	b.w	800a79a <_dtoa_r+0x32>
 800b13e:	693a      	ldr	r2, [r7, #16]
 800b140:	3202      	adds	r2, #2
 800b142:	0092      	lsls	r2, r2, #2
 800b144:	f107 010c 	add.w	r1, r7, #12
 800b148:	300c      	adds	r0, #12
 800b14a:	f001 f801 	bl	800c150 <memcpy>
 800b14e:	2201      	movs	r2, #1
 800b150:	4629      	mov	r1, r5
 800b152:	4620      	mov	r0, r4
 800b154:	f000 fc0a 	bl	800b96c <__lshift>
 800b158:	9b00      	ldr	r3, [sp, #0]
 800b15a:	3301      	adds	r3, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b162:	4413      	add	r3, r2
 800b164:	9308      	str	r3, [sp, #32]
 800b166:	9b02      	ldr	r3, [sp, #8]
 800b168:	f003 0301 	and.w	r3, r3, #1
 800b16c:	46b8      	mov	r8, r7
 800b16e:	9306      	str	r3, [sp, #24]
 800b170:	4607      	mov	r7, r0
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	4631      	mov	r1, r6
 800b176:	3b01      	subs	r3, #1
 800b178:	4650      	mov	r0, sl
 800b17a:	9301      	str	r3, [sp, #4]
 800b17c:	f7ff fa69 	bl	800a652 <quorem>
 800b180:	4641      	mov	r1, r8
 800b182:	9002      	str	r0, [sp, #8]
 800b184:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b188:	4650      	mov	r0, sl
 800b18a:	f000 fc5b 	bl	800ba44 <__mcmp>
 800b18e:	463a      	mov	r2, r7
 800b190:	9005      	str	r0, [sp, #20]
 800b192:	4631      	mov	r1, r6
 800b194:	4620      	mov	r0, r4
 800b196:	f000 fc71 	bl	800ba7c <__mdiff>
 800b19a:	68c2      	ldr	r2, [r0, #12]
 800b19c:	4605      	mov	r5, r0
 800b19e:	bb02      	cbnz	r2, 800b1e2 <_dtoa_r+0xa7a>
 800b1a0:	4601      	mov	r1, r0
 800b1a2:	4650      	mov	r0, sl
 800b1a4:	f000 fc4e 	bl	800ba44 <__mcmp>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b0:	f000 fa0c 	bl	800b5cc <_Bfree>
 800b1b4:	9b07      	ldr	r3, [sp, #28]
 800b1b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1b8:	9d04      	ldr	r5, [sp, #16]
 800b1ba:	ea43 0102 	orr.w	r1, r3, r2
 800b1be:	9b06      	ldr	r3, [sp, #24]
 800b1c0:	4319      	orrs	r1, r3
 800b1c2:	d110      	bne.n	800b1e6 <_dtoa_r+0xa7e>
 800b1c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1c8:	d029      	beq.n	800b21e <_dtoa_r+0xab6>
 800b1ca:	9b05      	ldr	r3, [sp, #20]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	dd02      	ble.n	800b1d6 <_dtoa_r+0xa6e>
 800b1d0:	9b02      	ldr	r3, [sp, #8]
 800b1d2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	f883 9000 	strb.w	r9, [r3]
 800b1dc:	e774      	b.n	800b0c8 <_dtoa_r+0x960>
 800b1de:	4638      	mov	r0, r7
 800b1e0:	e7ba      	b.n	800b158 <_dtoa_r+0x9f0>
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	e7e1      	b.n	800b1aa <_dtoa_r+0xa42>
 800b1e6:	9b05      	ldr	r3, [sp, #20]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	db04      	blt.n	800b1f6 <_dtoa_r+0xa8e>
 800b1ec:	9907      	ldr	r1, [sp, #28]
 800b1ee:	430b      	orrs	r3, r1
 800b1f0:	9906      	ldr	r1, [sp, #24]
 800b1f2:	430b      	orrs	r3, r1
 800b1f4:	d120      	bne.n	800b238 <_dtoa_r+0xad0>
 800b1f6:	2a00      	cmp	r2, #0
 800b1f8:	dded      	ble.n	800b1d6 <_dtoa_r+0xa6e>
 800b1fa:	4651      	mov	r1, sl
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	4620      	mov	r0, r4
 800b200:	f000 fbb4 	bl	800b96c <__lshift>
 800b204:	4631      	mov	r1, r6
 800b206:	4682      	mov	sl, r0
 800b208:	f000 fc1c 	bl	800ba44 <__mcmp>
 800b20c:	2800      	cmp	r0, #0
 800b20e:	dc03      	bgt.n	800b218 <_dtoa_r+0xab0>
 800b210:	d1e1      	bne.n	800b1d6 <_dtoa_r+0xa6e>
 800b212:	f019 0f01 	tst.w	r9, #1
 800b216:	d0de      	beq.n	800b1d6 <_dtoa_r+0xa6e>
 800b218:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b21c:	d1d8      	bne.n	800b1d0 <_dtoa_r+0xa68>
 800b21e:	9a01      	ldr	r2, [sp, #4]
 800b220:	2339      	movs	r3, #57	; 0x39
 800b222:	7013      	strb	r3, [r2, #0]
 800b224:	462b      	mov	r3, r5
 800b226:	461d      	mov	r5, r3
 800b228:	3b01      	subs	r3, #1
 800b22a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b22e:	2a39      	cmp	r2, #57	; 0x39
 800b230:	d06c      	beq.n	800b30c <_dtoa_r+0xba4>
 800b232:	3201      	adds	r2, #1
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e747      	b.n	800b0c8 <_dtoa_r+0x960>
 800b238:	2a00      	cmp	r2, #0
 800b23a:	dd07      	ble.n	800b24c <_dtoa_r+0xae4>
 800b23c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b240:	d0ed      	beq.n	800b21e <_dtoa_r+0xab6>
 800b242:	9a01      	ldr	r2, [sp, #4]
 800b244:	f109 0301 	add.w	r3, r9, #1
 800b248:	7013      	strb	r3, [r2, #0]
 800b24a:	e73d      	b.n	800b0c8 <_dtoa_r+0x960>
 800b24c:	9b04      	ldr	r3, [sp, #16]
 800b24e:	9a08      	ldr	r2, [sp, #32]
 800b250:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b254:	4293      	cmp	r3, r2
 800b256:	d043      	beq.n	800b2e0 <_dtoa_r+0xb78>
 800b258:	4651      	mov	r1, sl
 800b25a:	2300      	movs	r3, #0
 800b25c:	220a      	movs	r2, #10
 800b25e:	4620      	mov	r0, r4
 800b260:	f000 f9d6 	bl	800b610 <__multadd>
 800b264:	45b8      	cmp	r8, r7
 800b266:	4682      	mov	sl, r0
 800b268:	f04f 0300 	mov.w	r3, #0
 800b26c:	f04f 020a 	mov.w	r2, #10
 800b270:	4641      	mov	r1, r8
 800b272:	4620      	mov	r0, r4
 800b274:	d107      	bne.n	800b286 <_dtoa_r+0xb1e>
 800b276:	f000 f9cb 	bl	800b610 <__multadd>
 800b27a:	4680      	mov	r8, r0
 800b27c:	4607      	mov	r7, r0
 800b27e:	9b04      	ldr	r3, [sp, #16]
 800b280:	3301      	adds	r3, #1
 800b282:	9304      	str	r3, [sp, #16]
 800b284:	e775      	b.n	800b172 <_dtoa_r+0xa0a>
 800b286:	f000 f9c3 	bl	800b610 <__multadd>
 800b28a:	4639      	mov	r1, r7
 800b28c:	4680      	mov	r8, r0
 800b28e:	2300      	movs	r3, #0
 800b290:	220a      	movs	r2, #10
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f9bc 	bl	800b610 <__multadd>
 800b298:	4607      	mov	r7, r0
 800b29a:	e7f0      	b.n	800b27e <_dtoa_r+0xb16>
 800b29c:	9b04      	ldr	r3, [sp, #16]
 800b29e:	9301      	str	r3, [sp, #4]
 800b2a0:	9d00      	ldr	r5, [sp, #0]
 800b2a2:	4631      	mov	r1, r6
 800b2a4:	4650      	mov	r0, sl
 800b2a6:	f7ff f9d4 	bl	800a652 <quorem>
 800b2aa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2ae:	9b00      	ldr	r3, [sp, #0]
 800b2b0:	f805 9b01 	strb.w	r9, [r5], #1
 800b2b4:	1aea      	subs	r2, r5, r3
 800b2b6:	9b01      	ldr	r3, [sp, #4]
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	dd07      	ble.n	800b2cc <_dtoa_r+0xb64>
 800b2bc:	4651      	mov	r1, sl
 800b2be:	2300      	movs	r3, #0
 800b2c0:	220a      	movs	r2, #10
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f000 f9a4 	bl	800b610 <__multadd>
 800b2c8:	4682      	mov	sl, r0
 800b2ca:	e7ea      	b.n	800b2a2 <_dtoa_r+0xb3a>
 800b2cc:	9b01      	ldr	r3, [sp, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfc8      	it	gt
 800b2d2:	461d      	movgt	r5, r3
 800b2d4:	9b00      	ldr	r3, [sp, #0]
 800b2d6:	bfd8      	it	le
 800b2d8:	2501      	movle	r5, #1
 800b2da:	441d      	add	r5, r3
 800b2dc:	f04f 0800 	mov.w	r8, #0
 800b2e0:	4651      	mov	r1, sl
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	f000 fb41 	bl	800b96c <__lshift>
 800b2ea:	4631      	mov	r1, r6
 800b2ec:	4682      	mov	sl, r0
 800b2ee:	f000 fba9 	bl	800ba44 <__mcmp>
 800b2f2:	2800      	cmp	r0, #0
 800b2f4:	dc96      	bgt.n	800b224 <_dtoa_r+0xabc>
 800b2f6:	d102      	bne.n	800b2fe <_dtoa_r+0xb96>
 800b2f8:	f019 0f01 	tst.w	r9, #1
 800b2fc:	d192      	bne.n	800b224 <_dtoa_r+0xabc>
 800b2fe:	462b      	mov	r3, r5
 800b300:	461d      	mov	r5, r3
 800b302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b306:	2a30      	cmp	r2, #48	; 0x30
 800b308:	d0fa      	beq.n	800b300 <_dtoa_r+0xb98>
 800b30a:	e6dd      	b.n	800b0c8 <_dtoa_r+0x960>
 800b30c:	9a00      	ldr	r2, [sp, #0]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d189      	bne.n	800b226 <_dtoa_r+0xabe>
 800b312:	f10b 0b01 	add.w	fp, fp, #1
 800b316:	2331      	movs	r3, #49	; 0x31
 800b318:	e796      	b.n	800b248 <_dtoa_r+0xae0>
 800b31a:	4b0a      	ldr	r3, [pc, #40]	; (800b344 <_dtoa_r+0xbdc>)
 800b31c:	f7ff ba99 	b.w	800a852 <_dtoa_r+0xea>
 800b320:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b322:	2b00      	cmp	r3, #0
 800b324:	f47f aa6d 	bne.w	800a802 <_dtoa_r+0x9a>
 800b328:	4b07      	ldr	r3, [pc, #28]	; (800b348 <_dtoa_r+0xbe0>)
 800b32a:	f7ff ba92 	b.w	800a852 <_dtoa_r+0xea>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dcb5      	bgt.n	800b2a0 <_dtoa_r+0xb38>
 800b334:	9b07      	ldr	r3, [sp, #28]
 800b336:	2b02      	cmp	r3, #2
 800b338:	f73f aeb1 	bgt.w	800b09e <_dtoa_r+0x936>
 800b33c:	e7b0      	b.n	800b2a0 <_dtoa_r+0xb38>
 800b33e:	bf00      	nop
 800b340:	0800d31c 	.word	0x0800d31c
 800b344:	0800d27c 	.word	0x0800d27c
 800b348:	0800d2a0 	.word	0x0800d2a0

0800b34c <_free_r>:
 800b34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b34e:	2900      	cmp	r1, #0
 800b350:	d044      	beq.n	800b3dc <_free_r+0x90>
 800b352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b356:	9001      	str	r0, [sp, #4]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f1a1 0404 	sub.w	r4, r1, #4
 800b35e:	bfb8      	it	lt
 800b360:	18e4      	addlt	r4, r4, r3
 800b362:	f000 f8e7 	bl	800b534 <__malloc_lock>
 800b366:	4a1e      	ldr	r2, [pc, #120]	; (800b3e0 <_free_r+0x94>)
 800b368:	9801      	ldr	r0, [sp, #4]
 800b36a:	6813      	ldr	r3, [r2, #0]
 800b36c:	b933      	cbnz	r3, 800b37c <_free_r+0x30>
 800b36e:	6063      	str	r3, [r4, #4]
 800b370:	6014      	str	r4, [r2, #0]
 800b372:	b003      	add	sp, #12
 800b374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b378:	f000 b8e2 	b.w	800b540 <__malloc_unlock>
 800b37c:	42a3      	cmp	r3, r4
 800b37e:	d908      	bls.n	800b392 <_free_r+0x46>
 800b380:	6825      	ldr	r5, [r4, #0]
 800b382:	1961      	adds	r1, r4, r5
 800b384:	428b      	cmp	r3, r1
 800b386:	bf01      	itttt	eq
 800b388:	6819      	ldreq	r1, [r3, #0]
 800b38a:	685b      	ldreq	r3, [r3, #4]
 800b38c:	1949      	addeq	r1, r1, r5
 800b38e:	6021      	streq	r1, [r4, #0]
 800b390:	e7ed      	b.n	800b36e <_free_r+0x22>
 800b392:	461a      	mov	r2, r3
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	b10b      	cbz	r3, 800b39c <_free_r+0x50>
 800b398:	42a3      	cmp	r3, r4
 800b39a:	d9fa      	bls.n	800b392 <_free_r+0x46>
 800b39c:	6811      	ldr	r1, [r2, #0]
 800b39e:	1855      	adds	r5, r2, r1
 800b3a0:	42a5      	cmp	r5, r4
 800b3a2:	d10b      	bne.n	800b3bc <_free_r+0x70>
 800b3a4:	6824      	ldr	r4, [r4, #0]
 800b3a6:	4421      	add	r1, r4
 800b3a8:	1854      	adds	r4, r2, r1
 800b3aa:	42a3      	cmp	r3, r4
 800b3ac:	6011      	str	r1, [r2, #0]
 800b3ae:	d1e0      	bne.n	800b372 <_free_r+0x26>
 800b3b0:	681c      	ldr	r4, [r3, #0]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	6053      	str	r3, [r2, #4]
 800b3b6:	440c      	add	r4, r1
 800b3b8:	6014      	str	r4, [r2, #0]
 800b3ba:	e7da      	b.n	800b372 <_free_r+0x26>
 800b3bc:	d902      	bls.n	800b3c4 <_free_r+0x78>
 800b3be:	230c      	movs	r3, #12
 800b3c0:	6003      	str	r3, [r0, #0]
 800b3c2:	e7d6      	b.n	800b372 <_free_r+0x26>
 800b3c4:	6825      	ldr	r5, [r4, #0]
 800b3c6:	1961      	adds	r1, r4, r5
 800b3c8:	428b      	cmp	r3, r1
 800b3ca:	bf04      	itt	eq
 800b3cc:	6819      	ldreq	r1, [r3, #0]
 800b3ce:	685b      	ldreq	r3, [r3, #4]
 800b3d0:	6063      	str	r3, [r4, #4]
 800b3d2:	bf04      	itt	eq
 800b3d4:	1949      	addeq	r1, r1, r5
 800b3d6:	6021      	streq	r1, [r4, #0]
 800b3d8:	6054      	str	r4, [r2, #4]
 800b3da:	e7ca      	b.n	800b372 <_free_r+0x26>
 800b3dc:	b003      	add	sp, #12
 800b3de:	bd30      	pop	{r4, r5, pc}
 800b3e0:	200022b4 	.word	0x200022b4

0800b3e4 <malloc>:
 800b3e4:	4b02      	ldr	r3, [pc, #8]	; (800b3f0 <malloc+0xc>)
 800b3e6:	4601      	mov	r1, r0
 800b3e8:	6818      	ldr	r0, [r3, #0]
 800b3ea:	f000 b823 	b.w	800b434 <_malloc_r>
 800b3ee:	bf00      	nop
 800b3f0:	20000068 	.word	0x20000068

0800b3f4 <sbrk_aligned>:
 800b3f4:	b570      	push	{r4, r5, r6, lr}
 800b3f6:	4e0e      	ldr	r6, [pc, #56]	; (800b430 <sbrk_aligned+0x3c>)
 800b3f8:	460c      	mov	r4, r1
 800b3fa:	6831      	ldr	r1, [r6, #0]
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	b911      	cbnz	r1, 800b406 <sbrk_aligned+0x12>
 800b400:	f000 fe96 	bl	800c130 <_sbrk_r>
 800b404:	6030      	str	r0, [r6, #0]
 800b406:	4621      	mov	r1, r4
 800b408:	4628      	mov	r0, r5
 800b40a:	f000 fe91 	bl	800c130 <_sbrk_r>
 800b40e:	1c43      	adds	r3, r0, #1
 800b410:	d00a      	beq.n	800b428 <sbrk_aligned+0x34>
 800b412:	1cc4      	adds	r4, r0, #3
 800b414:	f024 0403 	bic.w	r4, r4, #3
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d007      	beq.n	800b42c <sbrk_aligned+0x38>
 800b41c:	1a21      	subs	r1, r4, r0
 800b41e:	4628      	mov	r0, r5
 800b420:	f000 fe86 	bl	800c130 <_sbrk_r>
 800b424:	3001      	adds	r0, #1
 800b426:	d101      	bne.n	800b42c <sbrk_aligned+0x38>
 800b428:	f04f 34ff 	mov.w	r4, #4294967295
 800b42c:	4620      	mov	r0, r4
 800b42e:	bd70      	pop	{r4, r5, r6, pc}
 800b430:	200022b8 	.word	0x200022b8

0800b434 <_malloc_r>:
 800b434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b438:	1ccd      	adds	r5, r1, #3
 800b43a:	f025 0503 	bic.w	r5, r5, #3
 800b43e:	3508      	adds	r5, #8
 800b440:	2d0c      	cmp	r5, #12
 800b442:	bf38      	it	cc
 800b444:	250c      	movcc	r5, #12
 800b446:	2d00      	cmp	r5, #0
 800b448:	4607      	mov	r7, r0
 800b44a:	db01      	blt.n	800b450 <_malloc_r+0x1c>
 800b44c:	42a9      	cmp	r1, r5
 800b44e:	d905      	bls.n	800b45c <_malloc_r+0x28>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	2600      	movs	r6, #0
 800b456:	4630      	mov	r0, r6
 800b458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b45c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b530 <_malloc_r+0xfc>
 800b460:	f000 f868 	bl	800b534 <__malloc_lock>
 800b464:	f8d8 3000 	ldr.w	r3, [r8]
 800b468:	461c      	mov	r4, r3
 800b46a:	bb5c      	cbnz	r4, 800b4c4 <_malloc_r+0x90>
 800b46c:	4629      	mov	r1, r5
 800b46e:	4638      	mov	r0, r7
 800b470:	f7ff ffc0 	bl	800b3f4 <sbrk_aligned>
 800b474:	1c43      	adds	r3, r0, #1
 800b476:	4604      	mov	r4, r0
 800b478:	d155      	bne.n	800b526 <_malloc_r+0xf2>
 800b47a:	f8d8 4000 	ldr.w	r4, [r8]
 800b47e:	4626      	mov	r6, r4
 800b480:	2e00      	cmp	r6, #0
 800b482:	d145      	bne.n	800b510 <_malloc_r+0xdc>
 800b484:	2c00      	cmp	r4, #0
 800b486:	d048      	beq.n	800b51a <_malloc_r+0xe6>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	4631      	mov	r1, r6
 800b48c:	4638      	mov	r0, r7
 800b48e:	eb04 0903 	add.w	r9, r4, r3
 800b492:	f000 fe4d 	bl	800c130 <_sbrk_r>
 800b496:	4581      	cmp	r9, r0
 800b498:	d13f      	bne.n	800b51a <_malloc_r+0xe6>
 800b49a:	6821      	ldr	r1, [r4, #0]
 800b49c:	1a6d      	subs	r5, r5, r1
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ffa7 	bl	800b3f4 <sbrk_aligned>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d037      	beq.n	800b51a <_malloc_r+0xe6>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	442b      	add	r3, r5
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d038      	beq.n	800b52a <_malloc_r+0xf6>
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	42a2      	cmp	r2, r4
 800b4bc:	d12b      	bne.n	800b516 <_malloc_r+0xe2>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	605a      	str	r2, [r3, #4]
 800b4c2:	e00f      	b.n	800b4e4 <_malloc_r+0xb0>
 800b4c4:	6822      	ldr	r2, [r4, #0]
 800b4c6:	1b52      	subs	r2, r2, r5
 800b4c8:	d41f      	bmi.n	800b50a <_malloc_r+0xd6>
 800b4ca:	2a0b      	cmp	r2, #11
 800b4cc:	d917      	bls.n	800b4fe <_malloc_r+0xca>
 800b4ce:	1961      	adds	r1, r4, r5
 800b4d0:	42a3      	cmp	r3, r4
 800b4d2:	6025      	str	r5, [r4, #0]
 800b4d4:	bf18      	it	ne
 800b4d6:	6059      	strne	r1, [r3, #4]
 800b4d8:	6863      	ldr	r3, [r4, #4]
 800b4da:	bf08      	it	eq
 800b4dc:	f8c8 1000 	streq.w	r1, [r8]
 800b4e0:	5162      	str	r2, [r4, r5]
 800b4e2:	604b      	str	r3, [r1, #4]
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f104 060b 	add.w	r6, r4, #11
 800b4ea:	f000 f829 	bl	800b540 <__malloc_unlock>
 800b4ee:	f026 0607 	bic.w	r6, r6, #7
 800b4f2:	1d23      	adds	r3, r4, #4
 800b4f4:	1af2      	subs	r2, r6, r3
 800b4f6:	d0ae      	beq.n	800b456 <_malloc_r+0x22>
 800b4f8:	1b9b      	subs	r3, r3, r6
 800b4fa:	50a3      	str	r3, [r4, r2]
 800b4fc:	e7ab      	b.n	800b456 <_malloc_r+0x22>
 800b4fe:	42a3      	cmp	r3, r4
 800b500:	6862      	ldr	r2, [r4, #4]
 800b502:	d1dd      	bne.n	800b4c0 <_malloc_r+0x8c>
 800b504:	f8c8 2000 	str.w	r2, [r8]
 800b508:	e7ec      	b.n	800b4e4 <_malloc_r+0xb0>
 800b50a:	4623      	mov	r3, r4
 800b50c:	6864      	ldr	r4, [r4, #4]
 800b50e:	e7ac      	b.n	800b46a <_malloc_r+0x36>
 800b510:	4634      	mov	r4, r6
 800b512:	6876      	ldr	r6, [r6, #4]
 800b514:	e7b4      	b.n	800b480 <_malloc_r+0x4c>
 800b516:	4613      	mov	r3, r2
 800b518:	e7cc      	b.n	800b4b4 <_malloc_r+0x80>
 800b51a:	230c      	movs	r3, #12
 800b51c:	603b      	str	r3, [r7, #0]
 800b51e:	4638      	mov	r0, r7
 800b520:	f000 f80e 	bl	800b540 <__malloc_unlock>
 800b524:	e797      	b.n	800b456 <_malloc_r+0x22>
 800b526:	6025      	str	r5, [r4, #0]
 800b528:	e7dc      	b.n	800b4e4 <_malloc_r+0xb0>
 800b52a:	605b      	str	r3, [r3, #4]
 800b52c:	deff      	udf	#255	; 0xff
 800b52e:	bf00      	nop
 800b530:	200022b4 	.word	0x200022b4

0800b534 <__malloc_lock>:
 800b534:	4801      	ldr	r0, [pc, #4]	; (800b53c <__malloc_lock+0x8>)
 800b536:	f7ff b88a 	b.w	800a64e <__retarget_lock_acquire_recursive>
 800b53a:	bf00      	nop
 800b53c:	200022b0 	.word	0x200022b0

0800b540 <__malloc_unlock>:
 800b540:	4801      	ldr	r0, [pc, #4]	; (800b548 <__malloc_unlock+0x8>)
 800b542:	f7ff b885 	b.w	800a650 <__retarget_lock_release_recursive>
 800b546:	bf00      	nop
 800b548:	200022b0 	.word	0x200022b0

0800b54c <_Balloc>:
 800b54c:	b570      	push	{r4, r5, r6, lr}
 800b54e:	69c6      	ldr	r6, [r0, #28]
 800b550:	4604      	mov	r4, r0
 800b552:	460d      	mov	r5, r1
 800b554:	b976      	cbnz	r6, 800b574 <_Balloc+0x28>
 800b556:	2010      	movs	r0, #16
 800b558:	f7ff ff44 	bl	800b3e4 <malloc>
 800b55c:	4602      	mov	r2, r0
 800b55e:	61e0      	str	r0, [r4, #28]
 800b560:	b920      	cbnz	r0, 800b56c <_Balloc+0x20>
 800b562:	4b18      	ldr	r3, [pc, #96]	; (800b5c4 <_Balloc+0x78>)
 800b564:	4818      	ldr	r0, [pc, #96]	; (800b5c8 <_Balloc+0x7c>)
 800b566:	216b      	movs	r1, #107	; 0x6b
 800b568:	f000 fe00 	bl	800c16c <__assert_func>
 800b56c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b570:	6006      	str	r6, [r0, #0]
 800b572:	60c6      	str	r6, [r0, #12]
 800b574:	69e6      	ldr	r6, [r4, #28]
 800b576:	68f3      	ldr	r3, [r6, #12]
 800b578:	b183      	cbz	r3, 800b59c <_Balloc+0x50>
 800b57a:	69e3      	ldr	r3, [r4, #28]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b582:	b9b8      	cbnz	r0, 800b5b4 <_Balloc+0x68>
 800b584:	2101      	movs	r1, #1
 800b586:	fa01 f605 	lsl.w	r6, r1, r5
 800b58a:	1d72      	adds	r2, r6, #5
 800b58c:	0092      	lsls	r2, r2, #2
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 fe0a 	bl	800c1a8 <_calloc_r>
 800b594:	b160      	cbz	r0, 800b5b0 <_Balloc+0x64>
 800b596:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b59a:	e00e      	b.n	800b5ba <_Balloc+0x6e>
 800b59c:	2221      	movs	r2, #33	; 0x21
 800b59e:	2104      	movs	r1, #4
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f000 fe01 	bl	800c1a8 <_calloc_r>
 800b5a6:	69e3      	ldr	r3, [r4, #28]
 800b5a8:	60f0      	str	r0, [r6, #12]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d1e4      	bne.n	800b57a <_Balloc+0x2e>
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	bd70      	pop	{r4, r5, r6, pc}
 800b5b4:	6802      	ldr	r2, [r0, #0]
 800b5b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5c0:	e7f7      	b.n	800b5b2 <_Balloc+0x66>
 800b5c2:	bf00      	nop
 800b5c4:	0800d2ad 	.word	0x0800d2ad
 800b5c8:	0800d32d 	.word	0x0800d32d

0800b5cc <_Bfree>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	69c6      	ldr	r6, [r0, #28]
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	b976      	cbnz	r6, 800b5f4 <_Bfree+0x28>
 800b5d6:	2010      	movs	r0, #16
 800b5d8:	f7ff ff04 	bl	800b3e4 <malloc>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	61e8      	str	r0, [r5, #28]
 800b5e0:	b920      	cbnz	r0, 800b5ec <_Bfree+0x20>
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <_Bfree+0x3c>)
 800b5e4:	4809      	ldr	r0, [pc, #36]	; (800b60c <_Bfree+0x40>)
 800b5e6:	218f      	movs	r1, #143	; 0x8f
 800b5e8:	f000 fdc0 	bl	800c16c <__assert_func>
 800b5ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5f0:	6006      	str	r6, [r0, #0]
 800b5f2:	60c6      	str	r6, [r0, #12]
 800b5f4:	b13c      	cbz	r4, 800b606 <_Bfree+0x3a>
 800b5f6:	69eb      	ldr	r3, [r5, #28]
 800b5f8:	6862      	ldr	r2, [r4, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b600:	6021      	str	r1, [r4, #0]
 800b602:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b606:	bd70      	pop	{r4, r5, r6, pc}
 800b608:	0800d2ad 	.word	0x0800d2ad
 800b60c:	0800d32d 	.word	0x0800d32d

0800b610 <__multadd>:
 800b610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b614:	690d      	ldr	r5, [r1, #16]
 800b616:	4607      	mov	r7, r0
 800b618:	460c      	mov	r4, r1
 800b61a:	461e      	mov	r6, r3
 800b61c:	f101 0c14 	add.w	ip, r1, #20
 800b620:	2000      	movs	r0, #0
 800b622:	f8dc 3000 	ldr.w	r3, [ip]
 800b626:	b299      	uxth	r1, r3
 800b628:	fb02 6101 	mla	r1, r2, r1, r6
 800b62c:	0c1e      	lsrs	r6, r3, #16
 800b62e:	0c0b      	lsrs	r3, r1, #16
 800b630:	fb02 3306 	mla	r3, r2, r6, r3
 800b634:	b289      	uxth	r1, r1
 800b636:	3001      	adds	r0, #1
 800b638:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b63c:	4285      	cmp	r5, r0
 800b63e:	f84c 1b04 	str.w	r1, [ip], #4
 800b642:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b646:	dcec      	bgt.n	800b622 <__multadd+0x12>
 800b648:	b30e      	cbz	r6, 800b68e <__multadd+0x7e>
 800b64a:	68a3      	ldr	r3, [r4, #8]
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	dc19      	bgt.n	800b684 <__multadd+0x74>
 800b650:	6861      	ldr	r1, [r4, #4]
 800b652:	4638      	mov	r0, r7
 800b654:	3101      	adds	r1, #1
 800b656:	f7ff ff79 	bl	800b54c <_Balloc>
 800b65a:	4680      	mov	r8, r0
 800b65c:	b928      	cbnz	r0, 800b66a <__multadd+0x5a>
 800b65e:	4602      	mov	r2, r0
 800b660:	4b0c      	ldr	r3, [pc, #48]	; (800b694 <__multadd+0x84>)
 800b662:	480d      	ldr	r0, [pc, #52]	; (800b698 <__multadd+0x88>)
 800b664:	21ba      	movs	r1, #186	; 0xba
 800b666:	f000 fd81 	bl	800c16c <__assert_func>
 800b66a:	6922      	ldr	r2, [r4, #16]
 800b66c:	3202      	adds	r2, #2
 800b66e:	f104 010c 	add.w	r1, r4, #12
 800b672:	0092      	lsls	r2, r2, #2
 800b674:	300c      	adds	r0, #12
 800b676:	f000 fd6b 	bl	800c150 <memcpy>
 800b67a:	4621      	mov	r1, r4
 800b67c:	4638      	mov	r0, r7
 800b67e:	f7ff ffa5 	bl	800b5cc <_Bfree>
 800b682:	4644      	mov	r4, r8
 800b684:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b688:	3501      	adds	r5, #1
 800b68a:	615e      	str	r6, [r3, #20]
 800b68c:	6125      	str	r5, [r4, #16]
 800b68e:	4620      	mov	r0, r4
 800b690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b694:	0800d31c 	.word	0x0800d31c
 800b698:	0800d32d 	.word	0x0800d32d

0800b69c <__hi0bits>:
 800b69c:	0c03      	lsrs	r3, r0, #16
 800b69e:	041b      	lsls	r3, r3, #16
 800b6a0:	b9d3      	cbnz	r3, 800b6d8 <__hi0bits+0x3c>
 800b6a2:	0400      	lsls	r0, r0, #16
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6aa:	bf04      	itt	eq
 800b6ac:	0200      	lsleq	r0, r0, #8
 800b6ae:	3308      	addeq	r3, #8
 800b6b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6b4:	bf04      	itt	eq
 800b6b6:	0100      	lsleq	r0, r0, #4
 800b6b8:	3304      	addeq	r3, #4
 800b6ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6be:	bf04      	itt	eq
 800b6c0:	0080      	lsleq	r0, r0, #2
 800b6c2:	3302      	addeq	r3, #2
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	db05      	blt.n	800b6d4 <__hi0bits+0x38>
 800b6c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6cc:	f103 0301 	add.w	r3, r3, #1
 800b6d0:	bf08      	it	eq
 800b6d2:	2320      	moveq	r3, #32
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	4770      	bx	lr
 800b6d8:	2300      	movs	r3, #0
 800b6da:	e7e4      	b.n	800b6a6 <__hi0bits+0xa>

0800b6dc <__lo0bits>:
 800b6dc:	6803      	ldr	r3, [r0, #0]
 800b6de:	f013 0207 	ands.w	r2, r3, #7
 800b6e2:	d00c      	beq.n	800b6fe <__lo0bits+0x22>
 800b6e4:	07d9      	lsls	r1, r3, #31
 800b6e6:	d422      	bmi.n	800b72e <__lo0bits+0x52>
 800b6e8:	079a      	lsls	r2, r3, #30
 800b6ea:	bf49      	itett	mi
 800b6ec:	085b      	lsrmi	r3, r3, #1
 800b6ee:	089b      	lsrpl	r3, r3, #2
 800b6f0:	6003      	strmi	r3, [r0, #0]
 800b6f2:	2201      	movmi	r2, #1
 800b6f4:	bf5c      	itt	pl
 800b6f6:	6003      	strpl	r3, [r0, #0]
 800b6f8:	2202      	movpl	r2, #2
 800b6fa:	4610      	mov	r0, r2
 800b6fc:	4770      	bx	lr
 800b6fe:	b299      	uxth	r1, r3
 800b700:	b909      	cbnz	r1, 800b706 <__lo0bits+0x2a>
 800b702:	0c1b      	lsrs	r3, r3, #16
 800b704:	2210      	movs	r2, #16
 800b706:	b2d9      	uxtb	r1, r3
 800b708:	b909      	cbnz	r1, 800b70e <__lo0bits+0x32>
 800b70a:	3208      	adds	r2, #8
 800b70c:	0a1b      	lsrs	r3, r3, #8
 800b70e:	0719      	lsls	r1, r3, #28
 800b710:	bf04      	itt	eq
 800b712:	091b      	lsreq	r3, r3, #4
 800b714:	3204      	addeq	r2, #4
 800b716:	0799      	lsls	r1, r3, #30
 800b718:	bf04      	itt	eq
 800b71a:	089b      	lsreq	r3, r3, #2
 800b71c:	3202      	addeq	r2, #2
 800b71e:	07d9      	lsls	r1, r3, #31
 800b720:	d403      	bmi.n	800b72a <__lo0bits+0x4e>
 800b722:	085b      	lsrs	r3, r3, #1
 800b724:	f102 0201 	add.w	r2, r2, #1
 800b728:	d003      	beq.n	800b732 <__lo0bits+0x56>
 800b72a:	6003      	str	r3, [r0, #0]
 800b72c:	e7e5      	b.n	800b6fa <__lo0bits+0x1e>
 800b72e:	2200      	movs	r2, #0
 800b730:	e7e3      	b.n	800b6fa <__lo0bits+0x1e>
 800b732:	2220      	movs	r2, #32
 800b734:	e7e1      	b.n	800b6fa <__lo0bits+0x1e>
	...

0800b738 <__i2b>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	2101      	movs	r1, #1
 800b73e:	f7ff ff05 	bl	800b54c <_Balloc>
 800b742:	4602      	mov	r2, r0
 800b744:	b928      	cbnz	r0, 800b752 <__i2b+0x1a>
 800b746:	4b05      	ldr	r3, [pc, #20]	; (800b75c <__i2b+0x24>)
 800b748:	4805      	ldr	r0, [pc, #20]	; (800b760 <__i2b+0x28>)
 800b74a:	f240 1145 	movw	r1, #325	; 0x145
 800b74e:	f000 fd0d 	bl	800c16c <__assert_func>
 800b752:	2301      	movs	r3, #1
 800b754:	6144      	str	r4, [r0, #20]
 800b756:	6103      	str	r3, [r0, #16]
 800b758:	bd10      	pop	{r4, pc}
 800b75a:	bf00      	nop
 800b75c:	0800d31c 	.word	0x0800d31c
 800b760:	0800d32d 	.word	0x0800d32d

0800b764 <__multiply>:
 800b764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b768:	4691      	mov	r9, r2
 800b76a:	690a      	ldr	r2, [r1, #16]
 800b76c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b770:	429a      	cmp	r2, r3
 800b772:	bfb8      	it	lt
 800b774:	460b      	movlt	r3, r1
 800b776:	460c      	mov	r4, r1
 800b778:	bfbc      	itt	lt
 800b77a:	464c      	movlt	r4, r9
 800b77c:	4699      	movlt	r9, r3
 800b77e:	6927      	ldr	r7, [r4, #16]
 800b780:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b784:	68a3      	ldr	r3, [r4, #8]
 800b786:	6861      	ldr	r1, [r4, #4]
 800b788:	eb07 060a 	add.w	r6, r7, sl
 800b78c:	42b3      	cmp	r3, r6
 800b78e:	b085      	sub	sp, #20
 800b790:	bfb8      	it	lt
 800b792:	3101      	addlt	r1, #1
 800b794:	f7ff feda 	bl	800b54c <_Balloc>
 800b798:	b930      	cbnz	r0, 800b7a8 <__multiply+0x44>
 800b79a:	4602      	mov	r2, r0
 800b79c:	4b44      	ldr	r3, [pc, #272]	; (800b8b0 <__multiply+0x14c>)
 800b79e:	4845      	ldr	r0, [pc, #276]	; (800b8b4 <__multiply+0x150>)
 800b7a0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7a4:	f000 fce2 	bl	800c16c <__assert_func>
 800b7a8:	f100 0514 	add.w	r5, r0, #20
 800b7ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7b0:	462b      	mov	r3, r5
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	4543      	cmp	r3, r8
 800b7b6:	d321      	bcc.n	800b7fc <__multiply+0x98>
 800b7b8:	f104 0314 	add.w	r3, r4, #20
 800b7bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7c0:	f109 0314 	add.w	r3, r9, #20
 800b7c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7c8:	9202      	str	r2, [sp, #8]
 800b7ca:	1b3a      	subs	r2, r7, r4
 800b7cc:	3a15      	subs	r2, #21
 800b7ce:	f022 0203 	bic.w	r2, r2, #3
 800b7d2:	3204      	adds	r2, #4
 800b7d4:	f104 0115 	add.w	r1, r4, #21
 800b7d8:	428f      	cmp	r7, r1
 800b7da:	bf38      	it	cc
 800b7dc:	2204      	movcc	r2, #4
 800b7de:	9201      	str	r2, [sp, #4]
 800b7e0:	9a02      	ldr	r2, [sp, #8]
 800b7e2:	9303      	str	r3, [sp, #12]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d80c      	bhi.n	800b802 <__multiply+0x9e>
 800b7e8:	2e00      	cmp	r6, #0
 800b7ea:	dd03      	ble.n	800b7f4 <__multiply+0x90>
 800b7ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d05b      	beq.n	800b8ac <__multiply+0x148>
 800b7f4:	6106      	str	r6, [r0, #16]
 800b7f6:	b005      	add	sp, #20
 800b7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7fc:	f843 2b04 	str.w	r2, [r3], #4
 800b800:	e7d8      	b.n	800b7b4 <__multiply+0x50>
 800b802:	f8b3 a000 	ldrh.w	sl, [r3]
 800b806:	f1ba 0f00 	cmp.w	sl, #0
 800b80a:	d024      	beq.n	800b856 <__multiply+0xf2>
 800b80c:	f104 0e14 	add.w	lr, r4, #20
 800b810:	46a9      	mov	r9, r5
 800b812:	f04f 0c00 	mov.w	ip, #0
 800b816:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b81a:	f8d9 1000 	ldr.w	r1, [r9]
 800b81e:	fa1f fb82 	uxth.w	fp, r2
 800b822:	b289      	uxth	r1, r1
 800b824:	fb0a 110b 	mla	r1, sl, fp, r1
 800b828:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b82c:	f8d9 2000 	ldr.w	r2, [r9]
 800b830:	4461      	add	r1, ip
 800b832:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b836:	fb0a c20b 	mla	r2, sl, fp, ip
 800b83a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b83e:	b289      	uxth	r1, r1
 800b840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b844:	4577      	cmp	r7, lr
 800b846:	f849 1b04 	str.w	r1, [r9], #4
 800b84a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b84e:	d8e2      	bhi.n	800b816 <__multiply+0xb2>
 800b850:	9a01      	ldr	r2, [sp, #4]
 800b852:	f845 c002 	str.w	ip, [r5, r2]
 800b856:	9a03      	ldr	r2, [sp, #12]
 800b858:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b85c:	3304      	adds	r3, #4
 800b85e:	f1b9 0f00 	cmp.w	r9, #0
 800b862:	d021      	beq.n	800b8a8 <__multiply+0x144>
 800b864:	6829      	ldr	r1, [r5, #0]
 800b866:	f104 0c14 	add.w	ip, r4, #20
 800b86a:	46ae      	mov	lr, r5
 800b86c:	f04f 0a00 	mov.w	sl, #0
 800b870:	f8bc b000 	ldrh.w	fp, [ip]
 800b874:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b878:	fb09 220b 	mla	r2, r9, fp, r2
 800b87c:	4452      	add	r2, sl
 800b87e:	b289      	uxth	r1, r1
 800b880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b884:	f84e 1b04 	str.w	r1, [lr], #4
 800b888:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b88c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b890:	f8be 1000 	ldrh.w	r1, [lr]
 800b894:	fb09 110a 	mla	r1, r9, sl, r1
 800b898:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b89c:	4567      	cmp	r7, ip
 800b89e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8a2:	d8e5      	bhi.n	800b870 <__multiply+0x10c>
 800b8a4:	9a01      	ldr	r2, [sp, #4]
 800b8a6:	50a9      	str	r1, [r5, r2]
 800b8a8:	3504      	adds	r5, #4
 800b8aa:	e799      	b.n	800b7e0 <__multiply+0x7c>
 800b8ac:	3e01      	subs	r6, #1
 800b8ae:	e79b      	b.n	800b7e8 <__multiply+0x84>
 800b8b0:	0800d31c 	.word	0x0800d31c
 800b8b4:	0800d32d 	.word	0x0800d32d

0800b8b8 <__pow5mult>:
 800b8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8bc:	4615      	mov	r5, r2
 800b8be:	f012 0203 	ands.w	r2, r2, #3
 800b8c2:	4606      	mov	r6, r0
 800b8c4:	460f      	mov	r7, r1
 800b8c6:	d007      	beq.n	800b8d8 <__pow5mult+0x20>
 800b8c8:	4c25      	ldr	r4, [pc, #148]	; (800b960 <__pow5mult+0xa8>)
 800b8ca:	3a01      	subs	r2, #1
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8d2:	f7ff fe9d 	bl	800b610 <__multadd>
 800b8d6:	4607      	mov	r7, r0
 800b8d8:	10ad      	asrs	r5, r5, #2
 800b8da:	d03d      	beq.n	800b958 <__pow5mult+0xa0>
 800b8dc:	69f4      	ldr	r4, [r6, #28]
 800b8de:	b97c      	cbnz	r4, 800b900 <__pow5mult+0x48>
 800b8e0:	2010      	movs	r0, #16
 800b8e2:	f7ff fd7f 	bl	800b3e4 <malloc>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	61f0      	str	r0, [r6, #28]
 800b8ea:	b928      	cbnz	r0, 800b8f8 <__pow5mult+0x40>
 800b8ec:	4b1d      	ldr	r3, [pc, #116]	; (800b964 <__pow5mult+0xac>)
 800b8ee:	481e      	ldr	r0, [pc, #120]	; (800b968 <__pow5mult+0xb0>)
 800b8f0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8f4:	f000 fc3a 	bl	800c16c <__assert_func>
 800b8f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8fc:	6004      	str	r4, [r0, #0]
 800b8fe:	60c4      	str	r4, [r0, #12]
 800b900:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b904:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b908:	b94c      	cbnz	r4, 800b91e <__pow5mult+0x66>
 800b90a:	f240 2171 	movw	r1, #625	; 0x271
 800b90e:	4630      	mov	r0, r6
 800b910:	f7ff ff12 	bl	800b738 <__i2b>
 800b914:	2300      	movs	r3, #0
 800b916:	f8c8 0008 	str.w	r0, [r8, #8]
 800b91a:	4604      	mov	r4, r0
 800b91c:	6003      	str	r3, [r0, #0]
 800b91e:	f04f 0900 	mov.w	r9, #0
 800b922:	07eb      	lsls	r3, r5, #31
 800b924:	d50a      	bpl.n	800b93c <__pow5mult+0x84>
 800b926:	4639      	mov	r1, r7
 800b928:	4622      	mov	r2, r4
 800b92a:	4630      	mov	r0, r6
 800b92c:	f7ff ff1a 	bl	800b764 <__multiply>
 800b930:	4639      	mov	r1, r7
 800b932:	4680      	mov	r8, r0
 800b934:	4630      	mov	r0, r6
 800b936:	f7ff fe49 	bl	800b5cc <_Bfree>
 800b93a:	4647      	mov	r7, r8
 800b93c:	106d      	asrs	r5, r5, #1
 800b93e:	d00b      	beq.n	800b958 <__pow5mult+0xa0>
 800b940:	6820      	ldr	r0, [r4, #0]
 800b942:	b938      	cbnz	r0, 800b954 <__pow5mult+0x9c>
 800b944:	4622      	mov	r2, r4
 800b946:	4621      	mov	r1, r4
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff ff0b 	bl	800b764 <__multiply>
 800b94e:	6020      	str	r0, [r4, #0]
 800b950:	f8c0 9000 	str.w	r9, [r0]
 800b954:	4604      	mov	r4, r0
 800b956:	e7e4      	b.n	800b922 <__pow5mult+0x6a>
 800b958:	4638      	mov	r0, r7
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	bf00      	nop
 800b960:	0800d478 	.word	0x0800d478
 800b964:	0800d2ad 	.word	0x0800d2ad
 800b968:	0800d32d 	.word	0x0800d32d

0800b96c <__lshift>:
 800b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	460c      	mov	r4, r1
 800b972:	6849      	ldr	r1, [r1, #4]
 800b974:	6923      	ldr	r3, [r4, #16]
 800b976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b97a:	68a3      	ldr	r3, [r4, #8]
 800b97c:	4607      	mov	r7, r0
 800b97e:	4691      	mov	r9, r2
 800b980:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b984:	f108 0601 	add.w	r6, r8, #1
 800b988:	42b3      	cmp	r3, r6
 800b98a:	db0b      	blt.n	800b9a4 <__lshift+0x38>
 800b98c:	4638      	mov	r0, r7
 800b98e:	f7ff fddd 	bl	800b54c <_Balloc>
 800b992:	4605      	mov	r5, r0
 800b994:	b948      	cbnz	r0, 800b9aa <__lshift+0x3e>
 800b996:	4602      	mov	r2, r0
 800b998:	4b28      	ldr	r3, [pc, #160]	; (800ba3c <__lshift+0xd0>)
 800b99a:	4829      	ldr	r0, [pc, #164]	; (800ba40 <__lshift+0xd4>)
 800b99c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9a0:	f000 fbe4 	bl	800c16c <__assert_func>
 800b9a4:	3101      	adds	r1, #1
 800b9a6:	005b      	lsls	r3, r3, #1
 800b9a8:	e7ee      	b.n	800b988 <__lshift+0x1c>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f100 0114 	add.w	r1, r0, #20
 800b9b0:	f100 0210 	add.w	r2, r0, #16
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	4553      	cmp	r3, sl
 800b9b8:	db33      	blt.n	800ba22 <__lshift+0xb6>
 800b9ba:	6920      	ldr	r0, [r4, #16]
 800b9bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9c0:	f104 0314 	add.w	r3, r4, #20
 800b9c4:	f019 091f 	ands.w	r9, r9, #31
 800b9c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9d0:	d02b      	beq.n	800ba2a <__lshift+0xbe>
 800b9d2:	f1c9 0e20 	rsb	lr, r9, #32
 800b9d6:	468a      	mov	sl, r1
 800b9d8:	2200      	movs	r2, #0
 800b9da:	6818      	ldr	r0, [r3, #0]
 800b9dc:	fa00 f009 	lsl.w	r0, r0, r9
 800b9e0:	4310      	orrs	r0, r2
 800b9e2:	f84a 0b04 	str.w	r0, [sl], #4
 800b9e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ea:	459c      	cmp	ip, r3
 800b9ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9f0:	d8f3      	bhi.n	800b9da <__lshift+0x6e>
 800b9f2:	ebac 0304 	sub.w	r3, ip, r4
 800b9f6:	3b15      	subs	r3, #21
 800b9f8:	f023 0303 	bic.w	r3, r3, #3
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	f104 0015 	add.w	r0, r4, #21
 800ba02:	4584      	cmp	ip, r0
 800ba04:	bf38      	it	cc
 800ba06:	2304      	movcc	r3, #4
 800ba08:	50ca      	str	r2, [r1, r3]
 800ba0a:	b10a      	cbz	r2, 800ba10 <__lshift+0xa4>
 800ba0c:	f108 0602 	add.w	r6, r8, #2
 800ba10:	3e01      	subs	r6, #1
 800ba12:	4638      	mov	r0, r7
 800ba14:	612e      	str	r6, [r5, #16]
 800ba16:	4621      	mov	r1, r4
 800ba18:	f7ff fdd8 	bl	800b5cc <_Bfree>
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba22:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba26:	3301      	adds	r3, #1
 800ba28:	e7c5      	b.n	800b9b6 <__lshift+0x4a>
 800ba2a:	3904      	subs	r1, #4
 800ba2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba30:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba34:	459c      	cmp	ip, r3
 800ba36:	d8f9      	bhi.n	800ba2c <__lshift+0xc0>
 800ba38:	e7ea      	b.n	800ba10 <__lshift+0xa4>
 800ba3a:	bf00      	nop
 800ba3c:	0800d31c 	.word	0x0800d31c
 800ba40:	0800d32d 	.word	0x0800d32d

0800ba44 <__mcmp>:
 800ba44:	b530      	push	{r4, r5, lr}
 800ba46:	6902      	ldr	r2, [r0, #16]
 800ba48:	690c      	ldr	r4, [r1, #16]
 800ba4a:	1b12      	subs	r2, r2, r4
 800ba4c:	d10e      	bne.n	800ba6c <__mcmp+0x28>
 800ba4e:	f100 0314 	add.w	r3, r0, #20
 800ba52:	3114      	adds	r1, #20
 800ba54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba64:	42a5      	cmp	r5, r4
 800ba66:	d003      	beq.n	800ba70 <__mcmp+0x2c>
 800ba68:	d305      	bcc.n	800ba76 <__mcmp+0x32>
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	bd30      	pop	{r4, r5, pc}
 800ba70:	4283      	cmp	r3, r0
 800ba72:	d3f3      	bcc.n	800ba5c <__mcmp+0x18>
 800ba74:	e7fa      	b.n	800ba6c <__mcmp+0x28>
 800ba76:	f04f 32ff 	mov.w	r2, #4294967295
 800ba7a:	e7f7      	b.n	800ba6c <__mcmp+0x28>

0800ba7c <__mdiff>:
 800ba7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba80:	460c      	mov	r4, r1
 800ba82:	4606      	mov	r6, r0
 800ba84:	4611      	mov	r1, r2
 800ba86:	4620      	mov	r0, r4
 800ba88:	4690      	mov	r8, r2
 800ba8a:	f7ff ffdb 	bl	800ba44 <__mcmp>
 800ba8e:	1e05      	subs	r5, r0, #0
 800ba90:	d110      	bne.n	800bab4 <__mdiff+0x38>
 800ba92:	4629      	mov	r1, r5
 800ba94:	4630      	mov	r0, r6
 800ba96:	f7ff fd59 	bl	800b54c <_Balloc>
 800ba9a:	b930      	cbnz	r0, 800baaa <__mdiff+0x2e>
 800ba9c:	4b3a      	ldr	r3, [pc, #232]	; (800bb88 <__mdiff+0x10c>)
 800ba9e:	4602      	mov	r2, r0
 800baa0:	f240 2137 	movw	r1, #567	; 0x237
 800baa4:	4839      	ldr	r0, [pc, #228]	; (800bb8c <__mdiff+0x110>)
 800baa6:	f000 fb61 	bl	800c16c <__assert_func>
 800baaa:	2301      	movs	r3, #1
 800baac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab4:	bfa4      	itt	ge
 800bab6:	4643      	movge	r3, r8
 800bab8:	46a0      	movge	r8, r4
 800baba:	4630      	mov	r0, r6
 800babc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bac0:	bfa6      	itte	ge
 800bac2:	461c      	movge	r4, r3
 800bac4:	2500      	movge	r5, #0
 800bac6:	2501      	movlt	r5, #1
 800bac8:	f7ff fd40 	bl	800b54c <_Balloc>
 800bacc:	b920      	cbnz	r0, 800bad8 <__mdiff+0x5c>
 800bace:	4b2e      	ldr	r3, [pc, #184]	; (800bb88 <__mdiff+0x10c>)
 800bad0:	4602      	mov	r2, r0
 800bad2:	f240 2145 	movw	r1, #581	; 0x245
 800bad6:	e7e5      	b.n	800baa4 <__mdiff+0x28>
 800bad8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800badc:	6926      	ldr	r6, [r4, #16]
 800bade:	60c5      	str	r5, [r0, #12]
 800bae0:	f104 0914 	add.w	r9, r4, #20
 800bae4:	f108 0514 	add.w	r5, r8, #20
 800bae8:	f100 0e14 	add.w	lr, r0, #20
 800baec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800baf4:	f108 0210 	add.w	r2, r8, #16
 800baf8:	46f2      	mov	sl, lr
 800bafa:	2100      	movs	r1, #0
 800bafc:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb04:	fa11 f88b 	uxtah	r8, r1, fp
 800bb08:	b299      	uxth	r1, r3
 800bb0a:	0c1b      	lsrs	r3, r3, #16
 800bb0c:	eba8 0801 	sub.w	r8, r8, r1
 800bb10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb18:	fa1f f888 	uxth.w	r8, r8
 800bb1c:	1419      	asrs	r1, r3, #16
 800bb1e:	454e      	cmp	r6, r9
 800bb20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb24:	f84a 3b04 	str.w	r3, [sl], #4
 800bb28:	d8e8      	bhi.n	800bafc <__mdiff+0x80>
 800bb2a:	1b33      	subs	r3, r6, r4
 800bb2c:	3b15      	subs	r3, #21
 800bb2e:	f023 0303 	bic.w	r3, r3, #3
 800bb32:	3304      	adds	r3, #4
 800bb34:	3415      	adds	r4, #21
 800bb36:	42a6      	cmp	r6, r4
 800bb38:	bf38      	it	cc
 800bb3a:	2304      	movcc	r3, #4
 800bb3c:	441d      	add	r5, r3
 800bb3e:	4473      	add	r3, lr
 800bb40:	469e      	mov	lr, r3
 800bb42:	462e      	mov	r6, r5
 800bb44:	4566      	cmp	r6, ip
 800bb46:	d30e      	bcc.n	800bb66 <__mdiff+0xea>
 800bb48:	f10c 0203 	add.w	r2, ip, #3
 800bb4c:	1b52      	subs	r2, r2, r5
 800bb4e:	f022 0203 	bic.w	r2, r2, #3
 800bb52:	3d03      	subs	r5, #3
 800bb54:	45ac      	cmp	ip, r5
 800bb56:	bf38      	it	cc
 800bb58:	2200      	movcc	r2, #0
 800bb5a:	4413      	add	r3, r2
 800bb5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb60:	b17a      	cbz	r2, 800bb82 <__mdiff+0x106>
 800bb62:	6107      	str	r7, [r0, #16]
 800bb64:	e7a4      	b.n	800bab0 <__mdiff+0x34>
 800bb66:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb6a:	fa11 f288 	uxtah	r2, r1, r8
 800bb6e:	1414      	asrs	r4, r2, #16
 800bb70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb74:	b292      	uxth	r2, r2
 800bb76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb7a:	f84e 2b04 	str.w	r2, [lr], #4
 800bb7e:	1421      	asrs	r1, r4, #16
 800bb80:	e7e0      	b.n	800bb44 <__mdiff+0xc8>
 800bb82:	3f01      	subs	r7, #1
 800bb84:	e7ea      	b.n	800bb5c <__mdiff+0xe0>
 800bb86:	bf00      	nop
 800bb88:	0800d31c 	.word	0x0800d31c
 800bb8c:	0800d32d 	.word	0x0800d32d

0800bb90 <__d2b>:
 800bb90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb94:	460f      	mov	r7, r1
 800bb96:	2101      	movs	r1, #1
 800bb98:	ec59 8b10 	vmov	r8, r9, d0
 800bb9c:	4616      	mov	r6, r2
 800bb9e:	f7ff fcd5 	bl	800b54c <_Balloc>
 800bba2:	4604      	mov	r4, r0
 800bba4:	b930      	cbnz	r0, 800bbb4 <__d2b+0x24>
 800bba6:	4602      	mov	r2, r0
 800bba8:	4b24      	ldr	r3, [pc, #144]	; (800bc3c <__d2b+0xac>)
 800bbaa:	4825      	ldr	r0, [pc, #148]	; (800bc40 <__d2b+0xb0>)
 800bbac:	f240 310f 	movw	r1, #783	; 0x30f
 800bbb0:	f000 fadc 	bl	800c16c <__assert_func>
 800bbb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbbc:	bb2d      	cbnz	r5, 800bc0a <__d2b+0x7a>
 800bbbe:	9301      	str	r3, [sp, #4]
 800bbc0:	f1b8 0300 	subs.w	r3, r8, #0
 800bbc4:	d026      	beq.n	800bc14 <__d2b+0x84>
 800bbc6:	4668      	mov	r0, sp
 800bbc8:	9300      	str	r3, [sp, #0]
 800bbca:	f7ff fd87 	bl	800b6dc <__lo0bits>
 800bbce:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbd2:	b1e8      	cbz	r0, 800bc10 <__d2b+0x80>
 800bbd4:	f1c0 0320 	rsb	r3, r0, #32
 800bbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	40c2      	lsrs	r2, r0
 800bbe0:	6163      	str	r3, [r4, #20]
 800bbe2:	9201      	str	r2, [sp, #4]
 800bbe4:	9b01      	ldr	r3, [sp, #4]
 800bbe6:	61a3      	str	r3, [r4, #24]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	bf14      	ite	ne
 800bbec:	2202      	movne	r2, #2
 800bbee:	2201      	moveq	r2, #1
 800bbf0:	6122      	str	r2, [r4, #16]
 800bbf2:	b1bd      	cbz	r5, 800bc24 <__d2b+0x94>
 800bbf4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbf8:	4405      	add	r5, r0
 800bbfa:	603d      	str	r5, [r7, #0]
 800bbfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc00:	6030      	str	r0, [r6, #0]
 800bc02:	4620      	mov	r0, r4
 800bc04:	b003      	add	sp, #12
 800bc06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc0e:	e7d6      	b.n	800bbbe <__d2b+0x2e>
 800bc10:	6161      	str	r1, [r4, #20]
 800bc12:	e7e7      	b.n	800bbe4 <__d2b+0x54>
 800bc14:	a801      	add	r0, sp, #4
 800bc16:	f7ff fd61 	bl	800b6dc <__lo0bits>
 800bc1a:	9b01      	ldr	r3, [sp, #4]
 800bc1c:	6163      	str	r3, [r4, #20]
 800bc1e:	3020      	adds	r0, #32
 800bc20:	2201      	movs	r2, #1
 800bc22:	e7e5      	b.n	800bbf0 <__d2b+0x60>
 800bc24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc2c:	6038      	str	r0, [r7, #0]
 800bc2e:	6918      	ldr	r0, [r3, #16]
 800bc30:	f7ff fd34 	bl	800b69c <__hi0bits>
 800bc34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc38:	e7e2      	b.n	800bc00 <__d2b+0x70>
 800bc3a:	bf00      	nop
 800bc3c:	0800d31c 	.word	0x0800d31c
 800bc40:	0800d32d 	.word	0x0800d32d

0800bc44 <__sfputc_r>:
 800bc44:	6893      	ldr	r3, [r2, #8]
 800bc46:	3b01      	subs	r3, #1
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	b410      	push	{r4}
 800bc4c:	6093      	str	r3, [r2, #8]
 800bc4e:	da08      	bge.n	800bc62 <__sfputc_r+0x1e>
 800bc50:	6994      	ldr	r4, [r2, #24]
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	db01      	blt.n	800bc5a <__sfputc_r+0x16>
 800bc56:	290a      	cmp	r1, #10
 800bc58:	d103      	bne.n	800bc62 <__sfputc_r+0x1e>
 800bc5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc5e:	f7fe bbe4 	b.w	800a42a <__swbuf_r>
 800bc62:	6813      	ldr	r3, [r2, #0]
 800bc64:	1c58      	adds	r0, r3, #1
 800bc66:	6010      	str	r0, [r2, #0]
 800bc68:	7019      	strb	r1, [r3, #0]
 800bc6a:	4608      	mov	r0, r1
 800bc6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <__sfputs_r>:
 800bc72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc74:	4606      	mov	r6, r0
 800bc76:	460f      	mov	r7, r1
 800bc78:	4614      	mov	r4, r2
 800bc7a:	18d5      	adds	r5, r2, r3
 800bc7c:	42ac      	cmp	r4, r5
 800bc7e:	d101      	bne.n	800bc84 <__sfputs_r+0x12>
 800bc80:	2000      	movs	r0, #0
 800bc82:	e007      	b.n	800bc94 <__sfputs_r+0x22>
 800bc84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc88:	463a      	mov	r2, r7
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	f7ff ffda 	bl	800bc44 <__sfputc_r>
 800bc90:	1c43      	adds	r3, r0, #1
 800bc92:	d1f3      	bne.n	800bc7c <__sfputs_r+0xa>
 800bc94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc98 <_vfiprintf_r>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	460d      	mov	r5, r1
 800bc9e:	b09d      	sub	sp, #116	; 0x74
 800bca0:	4614      	mov	r4, r2
 800bca2:	4698      	mov	r8, r3
 800bca4:	4606      	mov	r6, r0
 800bca6:	b118      	cbz	r0, 800bcb0 <_vfiprintf_r+0x18>
 800bca8:	6a03      	ldr	r3, [r0, #32]
 800bcaa:	b90b      	cbnz	r3, 800bcb0 <_vfiprintf_r+0x18>
 800bcac:	f7fe fad6 	bl	800a25c <__sinit>
 800bcb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcb2:	07d9      	lsls	r1, r3, #31
 800bcb4:	d405      	bmi.n	800bcc2 <_vfiprintf_r+0x2a>
 800bcb6:	89ab      	ldrh	r3, [r5, #12]
 800bcb8:	059a      	lsls	r2, r3, #22
 800bcba:	d402      	bmi.n	800bcc2 <_vfiprintf_r+0x2a>
 800bcbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcbe:	f7fe fcc6 	bl	800a64e <__retarget_lock_acquire_recursive>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	071b      	lsls	r3, r3, #28
 800bcc6:	d501      	bpl.n	800bccc <_vfiprintf_r+0x34>
 800bcc8:	692b      	ldr	r3, [r5, #16]
 800bcca:	b99b      	cbnz	r3, 800bcf4 <_vfiprintf_r+0x5c>
 800bccc:	4629      	mov	r1, r5
 800bcce:	4630      	mov	r0, r6
 800bcd0:	f7fe fbe8 	bl	800a4a4 <__swsetup_r>
 800bcd4:	b170      	cbz	r0, 800bcf4 <_vfiprintf_r+0x5c>
 800bcd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcd8:	07dc      	lsls	r4, r3, #31
 800bcda:	d504      	bpl.n	800bce6 <_vfiprintf_r+0x4e>
 800bcdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bce0:	b01d      	add	sp, #116	; 0x74
 800bce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce6:	89ab      	ldrh	r3, [r5, #12]
 800bce8:	0598      	lsls	r0, r3, #22
 800bcea:	d4f7      	bmi.n	800bcdc <_vfiprintf_r+0x44>
 800bcec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcee:	f7fe fcaf 	bl	800a650 <__retarget_lock_release_recursive>
 800bcf2:	e7f3      	b.n	800bcdc <_vfiprintf_r+0x44>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	2320      	movs	r3, #32
 800bcfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bcfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd02:	2330      	movs	r3, #48	; 0x30
 800bd04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800beb8 <_vfiprintf_r+0x220>
 800bd08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd0c:	f04f 0901 	mov.w	r9, #1
 800bd10:	4623      	mov	r3, r4
 800bd12:	469a      	mov	sl, r3
 800bd14:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd18:	b10a      	cbz	r2, 800bd1e <_vfiprintf_r+0x86>
 800bd1a:	2a25      	cmp	r2, #37	; 0x25
 800bd1c:	d1f9      	bne.n	800bd12 <_vfiprintf_r+0x7a>
 800bd1e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd22:	d00b      	beq.n	800bd3c <_vfiprintf_r+0xa4>
 800bd24:	465b      	mov	r3, fp
 800bd26:	4622      	mov	r2, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	f7ff ffa1 	bl	800bc72 <__sfputs_r>
 800bd30:	3001      	adds	r0, #1
 800bd32:	f000 80a9 	beq.w	800be88 <_vfiprintf_r+0x1f0>
 800bd36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd38:	445a      	add	r2, fp
 800bd3a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd3c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	f000 80a1 	beq.w	800be88 <_vfiprintf_r+0x1f0>
 800bd46:	2300      	movs	r3, #0
 800bd48:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd50:	f10a 0a01 	add.w	sl, sl, #1
 800bd54:	9304      	str	r3, [sp, #16]
 800bd56:	9307      	str	r3, [sp, #28]
 800bd58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd5c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd5e:	4654      	mov	r4, sl
 800bd60:	2205      	movs	r2, #5
 800bd62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd66:	4854      	ldr	r0, [pc, #336]	; (800beb8 <_vfiprintf_r+0x220>)
 800bd68:	f7f4 fa5a 	bl	8000220 <memchr>
 800bd6c:	9a04      	ldr	r2, [sp, #16]
 800bd6e:	b9d8      	cbnz	r0, 800bda8 <_vfiprintf_r+0x110>
 800bd70:	06d1      	lsls	r1, r2, #27
 800bd72:	bf44      	itt	mi
 800bd74:	2320      	movmi	r3, #32
 800bd76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd7a:	0713      	lsls	r3, r2, #28
 800bd7c:	bf44      	itt	mi
 800bd7e:	232b      	movmi	r3, #43	; 0x2b
 800bd80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd84:	f89a 3000 	ldrb.w	r3, [sl]
 800bd88:	2b2a      	cmp	r3, #42	; 0x2a
 800bd8a:	d015      	beq.n	800bdb8 <_vfiprintf_r+0x120>
 800bd8c:	9a07      	ldr	r2, [sp, #28]
 800bd8e:	4654      	mov	r4, sl
 800bd90:	2000      	movs	r0, #0
 800bd92:	f04f 0c0a 	mov.w	ip, #10
 800bd96:	4621      	mov	r1, r4
 800bd98:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd9c:	3b30      	subs	r3, #48	; 0x30
 800bd9e:	2b09      	cmp	r3, #9
 800bda0:	d94d      	bls.n	800be3e <_vfiprintf_r+0x1a6>
 800bda2:	b1b0      	cbz	r0, 800bdd2 <_vfiprintf_r+0x13a>
 800bda4:	9207      	str	r2, [sp, #28]
 800bda6:	e014      	b.n	800bdd2 <_vfiprintf_r+0x13a>
 800bda8:	eba0 0308 	sub.w	r3, r0, r8
 800bdac:	fa09 f303 	lsl.w	r3, r9, r3
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	9304      	str	r3, [sp, #16]
 800bdb4:	46a2      	mov	sl, r4
 800bdb6:	e7d2      	b.n	800bd5e <_vfiprintf_r+0xc6>
 800bdb8:	9b03      	ldr	r3, [sp, #12]
 800bdba:	1d19      	adds	r1, r3, #4
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	9103      	str	r1, [sp, #12]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	bfbb      	ittet	lt
 800bdc4:	425b      	neglt	r3, r3
 800bdc6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdca:	9307      	strge	r3, [sp, #28]
 800bdcc:	9307      	strlt	r3, [sp, #28]
 800bdce:	bfb8      	it	lt
 800bdd0:	9204      	strlt	r2, [sp, #16]
 800bdd2:	7823      	ldrb	r3, [r4, #0]
 800bdd4:	2b2e      	cmp	r3, #46	; 0x2e
 800bdd6:	d10c      	bne.n	800bdf2 <_vfiprintf_r+0x15a>
 800bdd8:	7863      	ldrb	r3, [r4, #1]
 800bdda:	2b2a      	cmp	r3, #42	; 0x2a
 800bddc:	d134      	bne.n	800be48 <_vfiprintf_r+0x1b0>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	1d1a      	adds	r2, r3, #4
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	9203      	str	r2, [sp, #12]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfb8      	it	lt
 800bdea:	f04f 33ff 	movlt.w	r3, #4294967295
 800bdee:	3402      	adds	r4, #2
 800bdf0:	9305      	str	r3, [sp, #20]
 800bdf2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bec8 <_vfiprintf_r+0x230>
 800bdf6:	7821      	ldrb	r1, [r4, #0]
 800bdf8:	2203      	movs	r2, #3
 800bdfa:	4650      	mov	r0, sl
 800bdfc:	f7f4 fa10 	bl	8000220 <memchr>
 800be00:	b138      	cbz	r0, 800be12 <_vfiprintf_r+0x17a>
 800be02:	9b04      	ldr	r3, [sp, #16]
 800be04:	eba0 000a 	sub.w	r0, r0, sl
 800be08:	2240      	movs	r2, #64	; 0x40
 800be0a:	4082      	lsls	r2, r0
 800be0c:	4313      	orrs	r3, r2
 800be0e:	3401      	adds	r4, #1
 800be10:	9304      	str	r3, [sp, #16]
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4829      	ldr	r0, [pc, #164]	; (800bebc <_vfiprintf_r+0x224>)
 800be18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be1c:	2206      	movs	r2, #6
 800be1e:	f7f4 f9ff 	bl	8000220 <memchr>
 800be22:	2800      	cmp	r0, #0
 800be24:	d03f      	beq.n	800bea6 <_vfiprintf_r+0x20e>
 800be26:	4b26      	ldr	r3, [pc, #152]	; (800bec0 <_vfiprintf_r+0x228>)
 800be28:	bb1b      	cbnz	r3, 800be72 <_vfiprintf_r+0x1da>
 800be2a:	9b03      	ldr	r3, [sp, #12]
 800be2c:	3307      	adds	r3, #7
 800be2e:	f023 0307 	bic.w	r3, r3, #7
 800be32:	3308      	adds	r3, #8
 800be34:	9303      	str	r3, [sp, #12]
 800be36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be38:	443b      	add	r3, r7
 800be3a:	9309      	str	r3, [sp, #36]	; 0x24
 800be3c:	e768      	b.n	800bd10 <_vfiprintf_r+0x78>
 800be3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800be42:	460c      	mov	r4, r1
 800be44:	2001      	movs	r0, #1
 800be46:	e7a6      	b.n	800bd96 <_vfiprintf_r+0xfe>
 800be48:	2300      	movs	r3, #0
 800be4a:	3401      	adds	r4, #1
 800be4c:	9305      	str	r3, [sp, #20]
 800be4e:	4619      	mov	r1, r3
 800be50:	f04f 0c0a 	mov.w	ip, #10
 800be54:	4620      	mov	r0, r4
 800be56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be5a:	3a30      	subs	r2, #48	; 0x30
 800be5c:	2a09      	cmp	r2, #9
 800be5e:	d903      	bls.n	800be68 <_vfiprintf_r+0x1d0>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d0c6      	beq.n	800bdf2 <_vfiprintf_r+0x15a>
 800be64:	9105      	str	r1, [sp, #20]
 800be66:	e7c4      	b.n	800bdf2 <_vfiprintf_r+0x15a>
 800be68:	fb0c 2101 	mla	r1, ip, r1, r2
 800be6c:	4604      	mov	r4, r0
 800be6e:	2301      	movs	r3, #1
 800be70:	e7f0      	b.n	800be54 <_vfiprintf_r+0x1bc>
 800be72:	ab03      	add	r3, sp, #12
 800be74:	9300      	str	r3, [sp, #0]
 800be76:	462a      	mov	r2, r5
 800be78:	4b12      	ldr	r3, [pc, #72]	; (800bec4 <_vfiprintf_r+0x22c>)
 800be7a:	a904      	add	r1, sp, #16
 800be7c:	4630      	mov	r0, r6
 800be7e:	f7fd fd9b 	bl	80099b8 <_printf_float>
 800be82:	4607      	mov	r7, r0
 800be84:	1c78      	adds	r0, r7, #1
 800be86:	d1d6      	bne.n	800be36 <_vfiprintf_r+0x19e>
 800be88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be8a:	07d9      	lsls	r1, r3, #31
 800be8c:	d405      	bmi.n	800be9a <_vfiprintf_r+0x202>
 800be8e:	89ab      	ldrh	r3, [r5, #12]
 800be90:	059a      	lsls	r2, r3, #22
 800be92:	d402      	bmi.n	800be9a <_vfiprintf_r+0x202>
 800be94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be96:	f7fe fbdb 	bl	800a650 <__retarget_lock_release_recursive>
 800be9a:	89ab      	ldrh	r3, [r5, #12]
 800be9c:	065b      	lsls	r3, r3, #25
 800be9e:	f53f af1d 	bmi.w	800bcdc <_vfiprintf_r+0x44>
 800bea2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bea4:	e71c      	b.n	800bce0 <_vfiprintf_r+0x48>
 800bea6:	ab03      	add	r3, sp, #12
 800bea8:	9300      	str	r3, [sp, #0]
 800beaa:	462a      	mov	r2, r5
 800beac:	4b05      	ldr	r3, [pc, #20]	; (800bec4 <_vfiprintf_r+0x22c>)
 800beae:	a904      	add	r1, sp, #16
 800beb0:	4630      	mov	r0, r6
 800beb2:	f7fe f825 	bl	8009f00 <_printf_i>
 800beb6:	e7e4      	b.n	800be82 <_vfiprintf_r+0x1ea>
 800beb8:	0800d484 	.word	0x0800d484
 800bebc:	0800d48e 	.word	0x0800d48e
 800bec0:	080099b9 	.word	0x080099b9
 800bec4:	0800bc73 	.word	0x0800bc73
 800bec8:	0800d48a 	.word	0x0800d48a

0800becc <__sflush_r>:
 800becc:	898a      	ldrh	r2, [r1, #12]
 800bece:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bed2:	4605      	mov	r5, r0
 800bed4:	0710      	lsls	r0, r2, #28
 800bed6:	460c      	mov	r4, r1
 800bed8:	d458      	bmi.n	800bf8c <__sflush_r+0xc0>
 800beda:	684b      	ldr	r3, [r1, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	dc05      	bgt.n	800beec <__sflush_r+0x20>
 800bee0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	dc02      	bgt.n	800beec <__sflush_r+0x20>
 800bee6:	2000      	movs	r0, #0
 800bee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beee:	2e00      	cmp	r6, #0
 800bef0:	d0f9      	beq.n	800bee6 <__sflush_r+0x1a>
 800bef2:	2300      	movs	r3, #0
 800bef4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bef8:	682f      	ldr	r7, [r5, #0]
 800befa:	6a21      	ldr	r1, [r4, #32]
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	d032      	beq.n	800bf66 <__sflush_r+0x9a>
 800bf00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf02:	89a3      	ldrh	r3, [r4, #12]
 800bf04:	075a      	lsls	r2, r3, #29
 800bf06:	d505      	bpl.n	800bf14 <__sflush_r+0x48>
 800bf08:	6863      	ldr	r3, [r4, #4]
 800bf0a:	1ac0      	subs	r0, r0, r3
 800bf0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf0e:	b10b      	cbz	r3, 800bf14 <__sflush_r+0x48>
 800bf10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf12:	1ac0      	subs	r0, r0, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	4602      	mov	r2, r0
 800bf18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1a:	6a21      	ldr	r1, [r4, #32]
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	47b0      	blx	r6
 800bf20:	1c43      	adds	r3, r0, #1
 800bf22:	89a3      	ldrh	r3, [r4, #12]
 800bf24:	d106      	bne.n	800bf34 <__sflush_r+0x68>
 800bf26:	6829      	ldr	r1, [r5, #0]
 800bf28:	291d      	cmp	r1, #29
 800bf2a:	d82b      	bhi.n	800bf84 <__sflush_r+0xb8>
 800bf2c:	4a29      	ldr	r2, [pc, #164]	; (800bfd4 <__sflush_r+0x108>)
 800bf2e:	410a      	asrs	r2, r1
 800bf30:	07d6      	lsls	r6, r2, #31
 800bf32:	d427      	bmi.n	800bf84 <__sflush_r+0xb8>
 800bf34:	2200      	movs	r2, #0
 800bf36:	6062      	str	r2, [r4, #4]
 800bf38:	04d9      	lsls	r1, r3, #19
 800bf3a:	6922      	ldr	r2, [r4, #16]
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	d504      	bpl.n	800bf4a <__sflush_r+0x7e>
 800bf40:	1c42      	adds	r2, r0, #1
 800bf42:	d101      	bne.n	800bf48 <__sflush_r+0x7c>
 800bf44:	682b      	ldr	r3, [r5, #0]
 800bf46:	b903      	cbnz	r3, 800bf4a <__sflush_r+0x7e>
 800bf48:	6560      	str	r0, [r4, #84]	; 0x54
 800bf4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf4c:	602f      	str	r7, [r5, #0]
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d0c9      	beq.n	800bee6 <__sflush_r+0x1a>
 800bf52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf56:	4299      	cmp	r1, r3
 800bf58:	d002      	beq.n	800bf60 <__sflush_r+0x94>
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f7ff f9f6 	bl	800b34c <_free_r>
 800bf60:	2000      	movs	r0, #0
 800bf62:	6360      	str	r0, [r4, #52]	; 0x34
 800bf64:	e7c0      	b.n	800bee8 <__sflush_r+0x1c>
 800bf66:	2301      	movs	r3, #1
 800bf68:	4628      	mov	r0, r5
 800bf6a:	47b0      	blx	r6
 800bf6c:	1c41      	adds	r1, r0, #1
 800bf6e:	d1c8      	bne.n	800bf02 <__sflush_r+0x36>
 800bf70:	682b      	ldr	r3, [r5, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d0c5      	beq.n	800bf02 <__sflush_r+0x36>
 800bf76:	2b1d      	cmp	r3, #29
 800bf78:	d001      	beq.n	800bf7e <__sflush_r+0xb2>
 800bf7a:	2b16      	cmp	r3, #22
 800bf7c:	d101      	bne.n	800bf82 <__sflush_r+0xb6>
 800bf7e:	602f      	str	r7, [r5, #0]
 800bf80:	e7b1      	b.n	800bee6 <__sflush_r+0x1a>
 800bf82:	89a3      	ldrh	r3, [r4, #12]
 800bf84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf88:	81a3      	strh	r3, [r4, #12]
 800bf8a:	e7ad      	b.n	800bee8 <__sflush_r+0x1c>
 800bf8c:	690f      	ldr	r7, [r1, #16]
 800bf8e:	2f00      	cmp	r7, #0
 800bf90:	d0a9      	beq.n	800bee6 <__sflush_r+0x1a>
 800bf92:	0793      	lsls	r3, r2, #30
 800bf94:	680e      	ldr	r6, [r1, #0]
 800bf96:	bf08      	it	eq
 800bf98:	694b      	ldreq	r3, [r1, #20]
 800bf9a:	600f      	str	r7, [r1, #0]
 800bf9c:	bf18      	it	ne
 800bf9e:	2300      	movne	r3, #0
 800bfa0:	eba6 0807 	sub.w	r8, r6, r7
 800bfa4:	608b      	str	r3, [r1, #8]
 800bfa6:	f1b8 0f00 	cmp.w	r8, #0
 800bfaa:	dd9c      	ble.n	800bee6 <__sflush_r+0x1a>
 800bfac:	6a21      	ldr	r1, [r4, #32]
 800bfae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfb0:	4643      	mov	r3, r8
 800bfb2:	463a      	mov	r2, r7
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b0      	blx	r6
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	dc06      	bgt.n	800bfca <__sflush_r+0xfe>
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc2:	81a3      	strh	r3, [r4, #12]
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	e78e      	b.n	800bee8 <__sflush_r+0x1c>
 800bfca:	4407      	add	r7, r0
 800bfcc:	eba8 0800 	sub.w	r8, r8, r0
 800bfd0:	e7e9      	b.n	800bfa6 <__sflush_r+0xda>
 800bfd2:	bf00      	nop
 800bfd4:	dfbffffe 	.word	0xdfbffffe

0800bfd8 <_fflush_r>:
 800bfd8:	b538      	push	{r3, r4, r5, lr}
 800bfda:	690b      	ldr	r3, [r1, #16]
 800bfdc:	4605      	mov	r5, r0
 800bfde:	460c      	mov	r4, r1
 800bfe0:	b913      	cbnz	r3, 800bfe8 <_fflush_r+0x10>
 800bfe2:	2500      	movs	r5, #0
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	bd38      	pop	{r3, r4, r5, pc}
 800bfe8:	b118      	cbz	r0, 800bff2 <_fflush_r+0x1a>
 800bfea:	6a03      	ldr	r3, [r0, #32]
 800bfec:	b90b      	cbnz	r3, 800bff2 <_fflush_r+0x1a>
 800bfee:	f7fe f935 	bl	800a25c <__sinit>
 800bff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0f3      	beq.n	800bfe2 <_fflush_r+0xa>
 800bffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bffc:	07d0      	lsls	r0, r2, #31
 800bffe:	d404      	bmi.n	800c00a <_fflush_r+0x32>
 800c000:	0599      	lsls	r1, r3, #22
 800c002:	d402      	bmi.n	800c00a <_fflush_r+0x32>
 800c004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c006:	f7fe fb22 	bl	800a64e <__retarget_lock_acquire_recursive>
 800c00a:	4628      	mov	r0, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	f7ff ff5d 	bl	800becc <__sflush_r>
 800c012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c014:	07da      	lsls	r2, r3, #31
 800c016:	4605      	mov	r5, r0
 800c018:	d4e4      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	059b      	lsls	r3, r3, #22
 800c01e:	d4e1      	bmi.n	800bfe4 <_fflush_r+0xc>
 800c020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c022:	f7fe fb15 	bl	800a650 <__retarget_lock_release_recursive>
 800c026:	e7dd      	b.n	800bfe4 <_fflush_r+0xc>

0800c028 <__swhatbuf_r>:
 800c028:	b570      	push	{r4, r5, r6, lr}
 800c02a:	460c      	mov	r4, r1
 800c02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c030:	2900      	cmp	r1, #0
 800c032:	b096      	sub	sp, #88	; 0x58
 800c034:	4615      	mov	r5, r2
 800c036:	461e      	mov	r6, r3
 800c038:	da0d      	bge.n	800c056 <__swhatbuf_r+0x2e>
 800c03a:	89a3      	ldrh	r3, [r4, #12]
 800c03c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c040:	f04f 0100 	mov.w	r1, #0
 800c044:	bf0c      	ite	eq
 800c046:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c04a:	2340      	movne	r3, #64	; 0x40
 800c04c:	2000      	movs	r0, #0
 800c04e:	6031      	str	r1, [r6, #0]
 800c050:	602b      	str	r3, [r5, #0]
 800c052:	b016      	add	sp, #88	; 0x58
 800c054:	bd70      	pop	{r4, r5, r6, pc}
 800c056:	466a      	mov	r2, sp
 800c058:	f000 f848 	bl	800c0ec <_fstat_r>
 800c05c:	2800      	cmp	r0, #0
 800c05e:	dbec      	blt.n	800c03a <__swhatbuf_r+0x12>
 800c060:	9901      	ldr	r1, [sp, #4]
 800c062:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c066:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c06a:	4259      	negs	r1, r3
 800c06c:	4159      	adcs	r1, r3
 800c06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c072:	e7eb      	b.n	800c04c <__swhatbuf_r+0x24>

0800c074 <__smakebuf_r>:
 800c074:	898b      	ldrh	r3, [r1, #12]
 800c076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c078:	079d      	lsls	r5, r3, #30
 800c07a:	4606      	mov	r6, r0
 800c07c:	460c      	mov	r4, r1
 800c07e:	d507      	bpl.n	800c090 <__smakebuf_r+0x1c>
 800c080:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c084:	6023      	str	r3, [r4, #0]
 800c086:	6123      	str	r3, [r4, #16]
 800c088:	2301      	movs	r3, #1
 800c08a:	6163      	str	r3, [r4, #20]
 800c08c:	b002      	add	sp, #8
 800c08e:	bd70      	pop	{r4, r5, r6, pc}
 800c090:	ab01      	add	r3, sp, #4
 800c092:	466a      	mov	r2, sp
 800c094:	f7ff ffc8 	bl	800c028 <__swhatbuf_r>
 800c098:	9900      	ldr	r1, [sp, #0]
 800c09a:	4605      	mov	r5, r0
 800c09c:	4630      	mov	r0, r6
 800c09e:	f7ff f9c9 	bl	800b434 <_malloc_r>
 800c0a2:	b948      	cbnz	r0, 800c0b8 <__smakebuf_r+0x44>
 800c0a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0a8:	059a      	lsls	r2, r3, #22
 800c0aa:	d4ef      	bmi.n	800c08c <__smakebuf_r+0x18>
 800c0ac:	f023 0303 	bic.w	r3, r3, #3
 800c0b0:	f043 0302 	orr.w	r3, r3, #2
 800c0b4:	81a3      	strh	r3, [r4, #12]
 800c0b6:	e7e3      	b.n	800c080 <__smakebuf_r+0xc>
 800c0b8:	89a3      	ldrh	r3, [r4, #12]
 800c0ba:	6020      	str	r0, [r4, #0]
 800c0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0c0:	81a3      	strh	r3, [r4, #12]
 800c0c2:	9b00      	ldr	r3, [sp, #0]
 800c0c4:	6163      	str	r3, [r4, #20]
 800c0c6:	9b01      	ldr	r3, [sp, #4]
 800c0c8:	6120      	str	r0, [r4, #16]
 800c0ca:	b15b      	cbz	r3, 800c0e4 <__smakebuf_r+0x70>
 800c0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0d0:	4630      	mov	r0, r6
 800c0d2:	f000 f81d 	bl	800c110 <_isatty_r>
 800c0d6:	b128      	cbz	r0, 800c0e4 <__smakebuf_r+0x70>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	f023 0303 	bic.w	r3, r3, #3
 800c0de:	f043 0301 	orr.w	r3, r3, #1
 800c0e2:	81a3      	strh	r3, [r4, #12]
 800c0e4:	89a3      	ldrh	r3, [r4, #12]
 800c0e6:	431d      	orrs	r5, r3
 800c0e8:	81a5      	strh	r5, [r4, #12]
 800c0ea:	e7cf      	b.n	800c08c <__smakebuf_r+0x18>

0800c0ec <_fstat_r>:
 800c0ec:	b538      	push	{r3, r4, r5, lr}
 800c0ee:	4d07      	ldr	r5, [pc, #28]	; (800c10c <_fstat_r+0x20>)
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	4608      	mov	r0, r1
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	602b      	str	r3, [r5, #0]
 800c0fa:	f7f9 f928 	bl	800534e <_fstat>
 800c0fe:	1c43      	adds	r3, r0, #1
 800c100:	d102      	bne.n	800c108 <_fstat_r+0x1c>
 800c102:	682b      	ldr	r3, [r5, #0]
 800c104:	b103      	cbz	r3, 800c108 <_fstat_r+0x1c>
 800c106:	6023      	str	r3, [r4, #0]
 800c108:	bd38      	pop	{r3, r4, r5, pc}
 800c10a:	bf00      	nop
 800c10c:	200022ac 	.word	0x200022ac

0800c110 <_isatty_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	4d06      	ldr	r5, [pc, #24]	; (800c12c <_isatty_r+0x1c>)
 800c114:	2300      	movs	r3, #0
 800c116:	4604      	mov	r4, r0
 800c118:	4608      	mov	r0, r1
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	f7f9 f927 	bl	800536e <_isatty>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_isatty_r+0x1a>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_isatty_r+0x1a>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	200022ac 	.word	0x200022ac

0800c130 <_sbrk_r>:
 800c130:	b538      	push	{r3, r4, r5, lr}
 800c132:	4d06      	ldr	r5, [pc, #24]	; (800c14c <_sbrk_r+0x1c>)
 800c134:	2300      	movs	r3, #0
 800c136:	4604      	mov	r4, r0
 800c138:	4608      	mov	r0, r1
 800c13a:	602b      	str	r3, [r5, #0]
 800c13c:	f7f9 f930 	bl	80053a0 <_sbrk>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d102      	bne.n	800c14a <_sbrk_r+0x1a>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	b103      	cbz	r3, 800c14a <_sbrk_r+0x1a>
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	200022ac 	.word	0x200022ac

0800c150 <memcpy>:
 800c150:	440a      	add	r2, r1
 800c152:	4291      	cmp	r1, r2
 800c154:	f100 33ff 	add.w	r3, r0, #4294967295
 800c158:	d100      	bne.n	800c15c <memcpy+0xc>
 800c15a:	4770      	bx	lr
 800c15c:	b510      	push	{r4, lr}
 800c15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c162:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c166:	4291      	cmp	r1, r2
 800c168:	d1f9      	bne.n	800c15e <memcpy+0xe>
 800c16a:	bd10      	pop	{r4, pc}

0800c16c <__assert_func>:
 800c16c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c16e:	4614      	mov	r4, r2
 800c170:	461a      	mov	r2, r3
 800c172:	4b09      	ldr	r3, [pc, #36]	; (800c198 <__assert_func+0x2c>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4605      	mov	r5, r0
 800c178:	68d8      	ldr	r0, [r3, #12]
 800c17a:	b14c      	cbz	r4, 800c190 <__assert_func+0x24>
 800c17c:	4b07      	ldr	r3, [pc, #28]	; (800c19c <__assert_func+0x30>)
 800c17e:	9100      	str	r1, [sp, #0]
 800c180:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c184:	4906      	ldr	r1, [pc, #24]	; (800c1a0 <__assert_func+0x34>)
 800c186:	462b      	mov	r3, r5
 800c188:	f000 f844 	bl	800c214 <fiprintf>
 800c18c:	f000 f854 	bl	800c238 <abort>
 800c190:	4b04      	ldr	r3, [pc, #16]	; (800c1a4 <__assert_func+0x38>)
 800c192:	461c      	mov	r4, r3
 800c194:	e7f3      	b.n	800c17e <__assert_func+0x12>
 800c196:	bf00      	nop
 800c198:	20000068 	.word	0x20000068
 800c19c:	0800d49f 	.word	0x0800d49f
 800c1a0:	0800d4ac 	.word	0x0800d4ac
 800c1a4:	0800d4da 	.word	0x0800d4da

0800c1a8 <_calloc_r>:
 800c1a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c1aa:	fba1 2402 	umull	r2, r4, r1, r2
 800c1ae:	b94c      	cbnz	r4, 800c1c4 <_calloc_r+0x1c>
 800c1b0:	4611      	mov	r1, r2
 800c1b2:	9201      	str	r2, [sp, #4]
 800c1b4:	f7ff f93e 	bl	800b434 <_malloc_r>
 800c1b8:	9a01      	ldr	r2, [sp, #4]
 800c1ba:	4605      	mov	r5, r0
 800c1bc:	b930      	cbnz	r0, 800c1cc <_calloc_r+0x24>
 800c1be:	4628      	mov	r0, r5
 800c1c0:	b003      	add	sp, #12
 800c1c2:	bd30      	pop	{r4, r5, pc}
 800c1c4:	220c      	movs	r2, #12
 800c1c6:	6002      	str	r2, [r0, #0]
 800c1c8:	2500      	movs	r5, #0
 800c1ca:	e7f8      	b.n	800c1be <_calloc_r+0x16>
 800c1cc:	4621      	mov	r1, r4
 800c1ce:	f7fe f9c1 	bl	800a554 <memset>
 800c1d2:	e7f4      	b.n	800c1be <_calloc_r+0x16>

0800c1d4 <__ascii_mbtowc>:
 800c1d4:	b082      	sub	sp, #8
 800c1d6:	b901      	cbnz	r1, 800c1da <__ascii_mbtowc+0x6>
 800c1d8:	a901      	add	r1, sp, #4
 800c1da:	b142      	cbz	r2, 800c1ee <__ascii_mbtowc+0x1a>
 800c1dc:	b14b      	cbz	r3, 800c1f2 <__ascii_mbtowc+0x1e>
 800c1de:	7813      	ldrb	r3, [r2, #0]
 800c1e0:	600b      	str	r3, [r1, #0]
 800c1e2:	7812      	ldrb	r2, [r2, #0]
 800c1e4:	1e10      	subs	r0, r2, #0
 800c1e6:	bf18      	it	ne
 800c1e8:	2001      	movne	r0, #1
 800c1ea:	b002      	add	sp, #8
 800c1ec:	4770      	bx	lr
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	e7fb      	b.n	800c1ea <__ascii_mbtowc+0x16>
 800c1f2:	f06f 0001 	mvn.w	r0, #1
 800c1f6:	e7f8      	b.n	800c1ea <__ascii_mbtowc+0x16>

0800c1f8 <__ascii_wctomb>:
 800c1f8:	b149      	cbz	r1, 800c20e <__ascii_wctomb+0x16>
 800c1fa:	2aff      	cmp	r2, #255	; 0xff
 800c1fc:	bf85      	ittet	hi
 800c1fe:	238a      	movhi	r3, #138	; 0x8a
 800c200:	6003      	strhi	r3, [r0, #0]
 800c202:	700a      	strbls	r2, [r1, #0]
 800c204:	f04f 30ff 	movhi.w	r0, #4294967295
 800c208:	bf98      	it	ls
 800c20a:	2001      	movls	r0, #1
 800c20c:	4770      	bx	lr
 800c20e:	4608      	mov	r0, r1
 800c210:	4770      	bx	lr
	...

0800c214 <fiprintf>:
 800c214:	b40e      	push	{r1, r2, r3}
 800c216:	b503      	push	{r0, r1, lr}
 800c218:	4601      	mov	r1, r0
 800c21a:	ab03      	add	r3, sp, #12
 800c21c:	4805      	ldr	r0, [pc, #20]	; (800c234 <fiprintf+0x20>)
 800c21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c222:	6800      	ldr	r0, [r0, #0]
 800c224:	9301      	str	r3, [sp, #4]
 800c226:	f7ff fd37 	bl	800bc98 <_vfiprintf_r>
 800c22a:	b002      	add	sp, #8
 800c22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c230:	b003      	add	sp, #12
 800c232:	4770      	bx	lr
 800c234:	20000068 	.word	0x20000068

0800c238 <abort>:
 800c238:	b508      	push	{r3, lr}
 800c23a:	2006      	movs	r0, #6
 800c23c:	f000 f82c 	bl	800c298 <raise>
 800c240:	2001      	movs	r0, #1
 800c242:	f7f9 f835 	bl	80052b0 <_exit>

0800c246 <_raise_r>:
 800c246:	291f      	cmp	r1, #31
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	4604      	mov	r4, r0
 800c24c:	460d      	mov	r5, r1
 800c24e:	d904      	bls.n	800c25a <_raise_r+0x14>
 800c250:	2316      	movs	r3, #22
 800c252:	6003      	str	r3, [r0, #0]
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	bd38      	pop	{r3, r4, r5, pc}
 800c25a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c25c:	b112      	cbz	r2, 800c264 <_raise_r+0x1e>
 800c25e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c262:	b94b      	cbnz	r3, 800c278 <_raise_r+0x32>
 800c264:	4620      	mov	r0, r4
 800c266:	f000 f831 	bl	800c2cc <_getpid_r>
 800c26a:	462a      	mov	r2, r5
 800c26c:	4601      	mov	r1, r0
 800c26e:	4620      	mov	r0, r4
 800c270:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c274:	f000 b818 	b.w	800c2a8 <_kill_r>
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d00a      	beq.n	800c292 <_raise_r+0x4c>
 800c27c:	1c59      	adds	r1, r3, #1
 800c27e:	d103      	bne.n	800c288 <_raise_r+0x42>
 800c280:	2316      	movs	r3, #22
 800c282:	6003      	str	r3, [r0, #0]
 800c284:	2001      	movs	r0, #1
 800c286:	e7e7      	b.n	800c258 <_raise_r+0x12>
 800c288:	2400      	movs	r4, #0
 800c28a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c28e:	4628      	mov	r0, r5
 800c290:	4798      	blx	r3
 800c292:	2000      	movs	r0, #0
 800c294:	e7e0      	b.n	800c258 <_raise_r+0x12>
	...

0800c298 <raise>:
 800c298:	4b02      	ldr	r3, [pc, #8]	; (800c2a4 <raise+0xc>)
 800c29a:	4601      	mov	r1, r0
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	f7ff bfd2 	b.w	800c246 <_raise_r>
 800c2a2:	bf00      	nop
 800c2a4:	20000068 	.word	0x20000068

0800c2a8 <_kill_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_kill_r+0x20>)
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	4611      	mov	r1, r2
 800c2b4:	602b      	str	r3, [r5, #0]
 800c2b6:	f7f8 ffeb 	bl	8005290 <_kill>
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	d102      	bne.n	800c2c4 <_kill_r+0x1c>
 800c2be:	682b      	ldr	r3, [r5, #0]
 800c2c0:	b103      	cbz	r3, 800c2c4 <_kill_r+0x1c>
 800c2c2:	6023      	str	r3, [r4, #0]
 800c2c4:	bd38      	pop	{r3, r4, r5, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200022ac 	.word	0x200022ac

0800c2cc <_getpid_r>:
 800c2cc:	f7f8 bfd8 	b.w	8005280 <_getpid>

0800c2d0 <pow>:
 800c2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2d2:	ed2d 8b02 	vpush	{d8}
 800c2d6:	eeb0 8a40 	vmov.f32	s16, s0
 800c2da:	eef0 8a60 	vmov.f32	s17, s1
 800c2de:	ec55 4b11 	vmov	r4, r5, d1
 800c2e2:	f000 f979 	bl	800c5d8 <__ieee754_pow>
 800c2e6:	4622      	mov	r2, r4
 800c2e8:	462b      	mov	r3, r5
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	4629      	mov	r1, r5
 800c2ee:	ec57 6b10 	vmov	r6, r7, d0
 800c2f2:	f7f4 fc43 	bl	8000b7c <__aeabi_dcmpun>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d13b      	bne.n	800c372 <pow+0xa2>
 800c2fa:	ec51 0b18 	vmov	r0, r1, d8
 800c2fe:	2200      	movs	r2, #0
 800c300:	2300      	movs	r3, #0
 800c302:	f7f4 fc09 	bl	8000b18 <__aeabi_dcmpeq>
 800c306:	b1b8      	cbz	r0, 800c338 <pow+0x68>
 800c308:	2200      	movs	r2, #0
 800c30a:	2300      	movs	r3, #0
 800c30c:	4620      	mov	r0, r4
 800c30e:	4629      	mov	r1, r5
 800c310:	f7f4 fc02 	bl	8000b18 <__aeabi_dcmpeq>
 800c314:	2800      	cmp	r0, #0
 800c316:	d146      	bne.n	800c3a6 <pow+0xd6>
 800c318:	ec45 4b10 	vmov	d0, r4, r5
 800c31c:	f000 f874 	bl	800c408 <finite>
 800c320:	b338      	cbz	r0, 800c372 <pow+0xa2>
 800c322:	2200      	movs	r2, #0
 800c324:	2300      	movs	r3, #0
 800c326:	4620      	mov	r0, r4
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f4 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800c32e:	b300      	cbz	r0, 800c372 <pow+0xa2>
 800c330:	f7fe f962 	bl	800a5f8 <__errno>
 800c334:	2322      	movs	r3, #34	; 0x22
 800c336:	e01b      	b.n	800c370 <pow+0xa0>
 800c338:	ec47 6b10 	vmov	d0, r6, r7
 800c33c:	f000 f864 	bl	800c408 <finite>
 800c340:	b9e0      	cbnz	r0, 800c37c <pow+0xac>
 800c342:	eeb0 0a48 	vmov.f32	s0, s16
 800c346:	eef0 0a68 	vmov.f32	s1, s17
 800c34a:	f000 f85d 	bl	800c408 <finite>
 800c34e:	b1a8      	cbz	r0, 800c37c <pow+0xac>
 800c350:	ec45 4b10 	vmov	d0, r4, r5
 800c354:	f000 f858 	bl	800c408 <finite>
 800c358:	b180      	cbz	r0, 800c37c <pow+0xac>
 800c35a:	4632      	mov	r2, r6
 800c35c:	463b      	mov	r3, r7
 800c35e:	4630      	mov	r0, r6
 800c360:	4639      	mov	r1, r7
 800c362:	f7f4 fc0b 	bl	8000b7c <__aeabi_dcmpun>
 800c366:	2800      	cmp	r0, #0
 800c368:	d0e2      	beq.n	800c330 <pow+0x60>
 800c36a:	f7fe f945 	bl	800a5f8 <__errno>
 800c36e:	2321      	movs	r3, #33	; 0x21
 800c370:	6003      	str	r3, [r0, #0]
 800c372:	ecbd 8b02 	vpop	{d8}
 800c376:	ec47 6b10 	vmov	d0, r6, r7
 800c37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c37c:	2200      	movs	r2, #0
 800c37e:	2300      	movs	r3, #0
 800c380:	4630      	mov	r0, r6
 800c382:	4639      	mov	r1, r7
 800c384:	f7f4 fbc8 	bl	8000b18 <__aeabi_dcmpeq>
 800c388:	2800      	cmp	r0, #0
 800c38a:	d0f2      	beq.n	800c372 <pow+0xa2>
 800c38c:	eeb0 0a48 	vmov.f32	s0, s16
 800c390:	eef0 0a68 	vmov.f32	s1, s17
 800c394:	f000 f838 	bl	800c408 <finite>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d0ea      	beq.n	800c372 <pow+0xa2>
 800c39c:	ec45 4b10 	vmov	d0, r4, r5
 800c3a0:	f000 f832 	bl	800c408 <finite>
 800c3a4:	e7c3      	b.n	800c32e <pow+0x5e>
 800c3a6:	4f01      	ldr	r7, [pc, #4]	; (800c3ac <pow+0xdc>)
 800c3a8:	2600      	movs	r6, #0
 800c3aa:	e7e2      	b.n	800c372 <pow+0xa2>
 800c3ac:	3ff00000 	.word	0x3ff00000

0800c3b0 <sqrt>:
 800c3b0:	b538      	push	{r3, r4, r5, lr}
 800c3b2:	ed2d 8b02 	vpush	{d8}
 800c3b6:	ec55 4b10 	vmov	r4, r5, d0
 800c3ba:	f000 f831 	bl	800c420 <__ieee754_sqrt>
 800c3be:	4622      	mov	r2, r4
 800c3c0:	462b      	mov	r3, r5
 800c3c2:	4620      	mov	r0, r4
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c3ca:	eef0 8a60 	vmov.f32	s17, s1
 800c3ce:	f7f4 fbd5 	bl	8000b7c <__aeabi_dcmpun>
 800c3d2:	b990      	cbnz	r0, 800c3fa <sqrt+0x4a>
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	4620      	mov	r0, r4
 800c3da:	4629      	mov	r1, r5
 800c3dc:	f7f4 fba6 	bl	8000b2c <__aeabi_dcmplt>
 800c3e0:	b158      	cbz	r0, 800c3fa <sqrt+0x4a>
 800c3e2:	f7fe f909 	bl	800a5f8 <__errno>
 800c3e6:	2321      	movs	r3, #33	; 0x21
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f7f4 fa53 	bl	800089c <__aeabi_ddiv>
 800c3f6:	ec41 0b18 	vmov	d8, r0, r1
 800c3fa:	eeb0 0a48 	vmov.f32	s0, s16
 800c3fe:	eef0 0a68 	vmov.f32	s1, s17
 800c402:	ecbd 8b02 	vpop	{d8}
 800c406:	bd38      	pop	{r3, r4, r5, pc}

0800c408 <finite>:
 800c408:	b082      	sub	sp, #8
 800c40a:	ed8d 0b00 	vstr	d0, [sp]
 800c40e:	9801      	ldr	r0, [sp, #4]
 800c410:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c414:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c418:	0fc0      	lsrs	r0, r0, #31
 800c41a:	b002      	add	sp, #8
 800c41c:	4770      	bx	lr
	...

0800c420 <__ieee754_sqrt>:
 800c420:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c424:	ec55 4b10 	vmov	r4, r5, d0
 800c428:	4e67      	ldr	r6, [pc, #412]	; (800c5c8 <__ieee754_sqrt+0x1a8>)
 800c42a:	43ae      	bics	r6, r5
 800c42c:	ee10 0a10 	vmov	r0, s0
 800c430:	ee10 2a10 	vmov	r2, s0
 800c434:	4629      	mov	r1, r5
 800c436:	462b      	mov	r3, r5
 800c438:	d10d      	bne.n	800c456 <__ieee754_sqrt+0x36>
 800c43a:	f7f4 f905 	bl	8000648 <__aeabi_dmul>
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4620      	mov	r0, r4
 800c444:	4629      	mov	r1, r5
 800c446:	f7f3 ff49 	bl	80002dc <__adddf3>
 800c44a:	4604      	mov	r4, r0
 800c44c:	460d      	mov	r5, r1
 800c44e:	ec45 4b10 	vmov	d0, r4, r5
 800c452:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c456:	2d00      	cmp	r5, #0
 800c458:	dc0b      	bgt.n	800c472 <__ieee754_sqrt+0x52>
 800c45a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c45e:	4326      	orrs	r6, r4
 800c460:	d0f5      	beq.n	800c44e <__ieee754_sqrt+0x2e>
 800c462:	b135      	cbz	r5, 800c472 <__ieee754_sqrt+0x52>
 800c464:	f7f3 ff38 	bl	80002d8 <__aeabi_dsub>
 800c468:	4602      	mov	r2, r0
 800c46a:	460b      	mov	r3, r1
 800c46c:	f7f4 fa16 	bl	800089c <__aeabi_ddiv>
 800c470:	e7eb      	b.n	800c44a <__ieee754_sqrt+0x2a>
 800c472:	1509      	asrs	r1, r1, #20
 800c474:	f000 808d 	beq.w	800c592 <__ieee754_sqrt+0x172>
 800c478:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c47c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c480:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c484:	07c9      	lsls	r1, r1, #31
 800c486:	bf5c      	itt	pl
 800c488:	005b      	lslpl	r3, r3, #1
 800c48a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c48e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c492:	bf58      	it	pl
 800c494:	0052      	lslpl	r2, r2, #1
 800c496:	2500      	movs	r5, #0
 800c498:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c49c:	1076      	asrs	r6, r6, #1
 800c49e:	0052      	lsls	r2, r2, #1
 800c4a0:	f04f 0e16 	mov.w	lr, #22
 800c4a4:	46ac      	mov	ip, r5
 800c4a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4aa:	eb0c 0001 	add.w	r0, ip, r1
 800c4ae:	4298      	cmp	r0, r3
 800c4b0:	bfde      	ittt	le
 800c4b2:	1a1b      	suble	r3, r3, r0
 800c4b4:	eb00 0c01 	addle.w	ip, r0, r1
 800c4b8:	186d      	addle	r5, r5, r1
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	f1be 0e01 	subs.w	lr, lr, #1
 800c4c0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c4c4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c4c8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c4cc:	d1ed      	bne.n	800c4aa <__ieee754_sqrt+0x8a>
 800c4ce:	4674      	mov	r4, lr
 800c4d0:	2720      	movs	r7, #32
 800c4d2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c4d6:	4563      	cmp	r3, ip
 800c4d8:	eb01 000e 	add.w	r0, r1, lr
 800c4dc:	dc02      	bgt.n	800c4e4 <__ieee754_sqrt+0xc4>
 800c4de:	d113      	bne.n	800c508 <__ieee754_sqrt+0xe8>
 800c4e0:	4290      	cmp	r0, r2
 800c4e2:	d811      	bhi.n	800c508 <__ieee754_sqrt+0xe8>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	eb00 0e01 	add.w	lr, r0, r1
 800c4ea:	da57      	bge.n	800c59c <__ieee754_sqrt+0x17c>
 800c4ec:	f1be 0f00 	cmp.w	lr, #0
 800c4f0:	db54      	blt.n	800c59c <__ieee754_sqrt+0x17c>
 800c4f2:	f10c 0801 	add.w	r8, ip, #1
 800c4f6:	eba3 030c 	sub.w	r3, r3, ip
 800c4fa:	4290      	cmp	r0, r2
 800c4fc:	bf88      	it	hi
 800c4fe:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c502:	1a12      	subs	r2, r2, r0
 800c504:	440c      	add	r4, r1
 800c506:	46c4      	mov	ip, r8
 800c508:	005b      	lsls	r3, r3, #1
 800c50a:	3f01      	subs	r7, #1
 800c50c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c510:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c514:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c518:	d1dd      	bne.n	800c4d6 <__ieee754_sqrt+0xb6>
 800c51a:	4313      	orrs	r3, r2
 800c51c:	d01b      	beq.n	800c556 <__ieee754_sqrt+0x136>
 800c51e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c5cc <__ieee754_sqrt+0x1ac>
 800c522:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c5d0 <__ieee754_sqrt+0x1b0>
 800c526:	e9da 0100 	ldrd	r0, r1, [sl]
 800c52a:	e9db 2300 	ldrd	r2, r3, [fp]
 800c52e:	f7f3 fed3 	bl	80002d8 <__aeabi_dsub>
 800c532:	e9da 8900 	ldrd	r8, r9, [sl]
 800c536:	4602      	mov	r2, r0
 800c538:	460b      	mov	r3, r1
 800c53a:	4640      	mov	r0, r8
 800c53c:	4649      	mov	r1, r9
 800c53e:	f7f4 faff 	bl	8000b40 <__aeabi_dcmple>
 800c542:	b140      	cbz	r0, 800c556 <__ieee754_sqrt+0x136>
 800c544:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c548:	e9da 0100 	ldrd	r0, r1, [sl]
 800c54c:	e9db 2300 	ldrd	r2, r3, [fp]
 800c550:	d126      	bne.n	800c5a0 <__ieee754_sqrt+0x180>
 800c552:	3501      	adds	r5, #1
 800c554:	463c      	mov	r4, r7
 800c556:	106a      	asrs	r2, r5, #1
 800c558:	0863      	lsrs	r3, r4, #1
 800c55a:	07e9      	lsls	r1, r5, #31
 800c55c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c560:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c564:	bf48      	it	mi
 800c566:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c56a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c56e:	461c      	mov	r4, r3
 800c570:	e76d      	b.n	800c44e <__ieee754_sqrt+0x2e>
 800c572:	0ad3      	lsrs	r3, r2, #11
 800c574:	3815      	subs	r0, #21
 800c576:	0552      	lsls	r2, r2, #21
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d0fa      	beq.n	800c572 <__ieee754_sqrt+0x152>
 800c57c:	02dc      	lsls	r4, r3, #11
 800c57e:	d50a      	bpl.n	800c596 <__ieee754_sqrt+0x176>
 800c580:	f1c1 0420 	rsb	r4, r1, #32
 800c584:	fa22 f404 	lsr.w	r4, r2, r4
 800c588:	1e4d      	subs	r5, r1, #1
 800c58a:	408a      	lsls	r2, r1
 800c58c:	4323      	orrs	r3, r4
 800c58e:	1b41      	subs	r1, r0, r5
 800c590:	e772      	b.n	800c478 <__ieee754_sqrt+0x58>
 800c592:	4608      	mov	r0, r1
 800c594:	e7f0      	b.n	800c578 <__ieee754_sqrt+0x158>
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	3101      	adds	r1, #1
 800c59a:	e7ef      	b.n	800c57c <__ieee754_sqrt+0x15c>
 800c59c:	46e0      	mov	r8, ip
 800c59e:	e7aa      	b.n	800c4f6 <__ieee754_sqrt+0xd6>
 800c5a0:	f7f3 fe9c 	bl	80002dc <__adddf3>
 800c5a4:	e9da 8900 	ldrd	r8, r9, [sl]
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	4649      	mov	r1, r9
 800c5b0:	f7f4 fabc 	bl	8000b2c <__aeabi_dcmplt>
 800c5b4:	b120      	cbz	r0, 800c5c0 <__ieee754_sqrt+0x1a0>
 800c5b6:	1ca0      	adds	r0, r4, #2
 800c5b8:	bf08      	it	eq
 800c5ba:	3501      	addeq	r5, #1
 800c5bc:	3402      	adds	r4, #2
 800c5be:	e7ca      	b.n	800c556 <__ieee754_sqrt+0x136>
 800c5c0:	3401      	adds	r4, #1
 800c5c2:	f024 0401 	bic.w	r4, r4, #1
 800c5c6:	e7c6      	b.n	800c556 <__ieee754_sqrt+0x136>
 800c5c8:	7ff00000 	.word	0x7ff00000
 800c5cc:	200001d8 	.word	0x200001d8
 800c5d0:	200001e0 	.word	0x200001e0
 800c5d4:	00000000 	.word	0x00000000

0800c5d8 <__ieee754_pow>:
 800c5d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5dc:	ed2d 8b06 	vpush	{d8-d10}
 800c5e0:	b089      	sub	sp, #36	; 0x24
 800c5e2:	ed8d 1b00 	vstr	d1, [sp]
 800c5e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c5ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c5ee:	ea58 0102 	orrs.w	r1, r8, r2
 800c5f2:	ec57 6b10 	vmov	r6, r7, d0
 800c5f6:	d115      	bne.n	800c624 <__ieee754_pow+0x4c>
 800c5f8:	19b3      	adds	r3, r6, r6
 800c5fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c5fe:	4152      	adcs	r2, r2
 800c600:	4299      	cmp	r1, r3
 800c602:	4b89      	ldr	r3, [pc, #548]	; (800c828 <__ieee754_pow+0x250>)
 800c604:	4193      	sbcs	r3, r2
 800c606:	f080 84d1 	bcs.w	800cfac <__ieee754_pow+0x9d4>
 800c60a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c60e:	4630      	mov	r0, r6
 800c610:	4639      	mov	r1, r7
 800c612:	f7f3 fe63 	bl	80002dc <__adddf3>
 800c616:	ec41 0b10 	vmov	d0, r0, r1
 800c61a:	b009      	add	sp, #36	; 0x24
 800c61c:	ecbd 8b06 	vpop	{d8-d10}
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	4b81      	ldr	r3, [pc, #516]	; (800c82c <__ieee754_pow+0x254>)
 800c626:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c62a:	429c      	cmp	r4, r3
 800c62c:	ee10 aa10 	vmov	sl, s0
 800c630:	463d      	mov	r5, r7
 800c632:	dc06      	bgt.n	800c642 <__ieee754_pow+0x6a>
 800c634:	d101      	bne.n	800c63a <__ieee754_pow+0x62>
 800c636:	2e00      	cmp	r6, #0
 800c638:	d1e7      	bne.n	800c60a <__ieee754_pow+0x32>
 800c63a:	4598      	cmp	r8, r3
 800c63c:	dc01      	bgt.n	800c642 <__ieee754_pow+0x6a>
 800c63e:	d10f      	bne.n	800c660 <__ieee754_pow+0x88>
 800c640:	b172      	cbz	r2, 800c660 <__ieee754_pow+0x88>
 800c642:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c646:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c64a:	ea55 050a 	orrs.w	r5, r5, sl
 800c64e:	d1dc      	bne.n	800c60a <__ieee754_pow+0x32>
 800c650:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c654:	18db      	adds	r3, r3, r3
 800c656:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c65a:	4152      	adcs	r2, r2
 800c65c:	429d      	cmp	r5, r3
 800c65e:	e7d0      	b.n	800c602 <__ieee754_pow+0x2a>
 800c660:	2d00      	cmp	r5, #0
 800c662:	da3b      	bge.n	800c6dc <__ieee754_pow+0x104>
 800c664:	4b72      	ldr	r3, [pc, #456]	; (800c830 <__ieee754_pow+0x258>)
 800c666:	4598      	cmp	r8, r3
 800c668:	dc51      	bgt.n	800c70e <__ieee754_pow+0x136>
 800c66a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c66e:	4598      	cmp	r8, r3
 800c670:	f340 84ab 	ble.w	800cfca <__ieee754_pow+0x9f2>
 800c674:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c678:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c67c:	2b14      	cmp	r3, #20
 800c67e:	dd0f      	ble.n	800c6a0 <__ieee754_pow+0xc8>
 800c680:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c684:	fa22 f103 	lsr.w	r1, r2, r3
 800c688:	fa01 f303 	lsl.w	r3, r1, r3
 800c68c:	4293      	cmp	r3, r2
 800c68e:	f040 849c 	bne.w	800cfca <__ieee754_pow+0x9f2>
 800c692:	f001 0101 	and.w	r1, r1, #1
 800c696:	f1c1 0302 	rsb	r3, r1, #2
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	b182      	cbz	r2, 800c6c0 <__ieee754_pow+0xe8>
 800c69e:	e05f      	b.n	800c760 <__ieee754_pow+0x188>
 800c6a0:	2a00      	cmp	r2, #0
 800c6a2:	d15b      	bne.n	800c75c <__ieee754_pow+0x184>
 800c6a4:	f1c3 0314 	rsb	r3, r3, #20
 800c6a8:	fa48 f103 	asr.w	r1, r8, r3
 800c6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b0:	4543      	cmp	r3, r8
 800c6b2:	f040 8487 	bne.w	800cfc4 <__ieee754_pow+0x9ec>
 800c6b6:	f001 0101 	and.w	r1, r1, #1
 800c6ba:	f1c1 0302 	rsb	r3, r1, #2
 800c6be:	9304      	str	r3, [sp, #16]
 800c6c0:	4b5c      	ldr	r3, [pc, #368]	; (800c834 <__ieee754_pow+0x25c>)
 800c6c2:	4598      	cmp	r8, r3
 800c6c4:	d132      	bne.n	800c72c <__ieee754_pow+0x154>
 800c6c6:	f1b9 0f00 	cmp.w	r9, #0
 800c6ca:	f280 8477 	bge.w	800cfbc <__ieee754_pow+0x9e4>
 800c6ce:	4959      	ldr	r1, [pc, #356]	; (800c834 <__ieee754_pow+0x25c>)
 800c6d0:	4632      	mov	r2, r6
 800c6d2:	463b      	mov	r3, r7
 800c6d4:	2000      	movs	r0, #0
 800c6d6:	f7f4 f8e1 	bl	800089c <__aeabi_ddiv>
 800c6da:	e79c      	b.n	800c616 <__ieee754_pow+0x3e>
 800c6dc:	2300      	movs	r3, #0
 800c6de:	9304      	str	r3, [sp, #16]
 800c6e0:	2a00      	cmp	r2, #0
 800c6e2:	d13d      	bne.n	800c760 <__ieee754_pow+0x188>
 800c6e4:	4b51      	ldr	r3, [pc, #324]	; (800c82c <__ieee754_pow+0x254>)
 800c6e6:	4598      	cmp	r8, r3
 800c6e8:	d1ea      	bne.n	800c6c0 <__ieee754_pow+0xe8>
 800c6ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c6ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c6f2:	ea53 030a 	orrs.w	r3, r3, sl
 800c6f6:	f000 8459 	beq.w	800cfac <__ieee754_pow+0x9d4>
 800c6fa:	4b4f      	ldr	r3, [pc, #316]	; (800c838 <__ieee754_pow+0x260>)
 800c6fc:	429c      	cmp	r4, r3
 800c6fe:	dd08      	ble.n	800c712 <__ieee754_pow+0x13a>
 800c700:	f1b9 0f00 	cmp.w	r9, #0
 800c704:	f2c0 8456 	blt.w	800cfb4 <__ieee754_pow+0x9dc>
 800c708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c70c:	e783      	b.n	800c616 <__ieee754_pow+0x3e>
 800c70e:	2302      	movs	r3, #2
 800c710:	e7e5      	b.n	800c6de <__ieee754_pow+0x106>
 800c712:	f1b9 0f00 	cmp.w	r9, #0
 800c716:	f04f 0000 	mov.w	r0, #0
 800c71a:	f04f 0100 	mov.w	r1, #0
 800c71e:	f6bf af7a 	bge.w	800c616 <__ieee754_pow+0x3e>
 800c722:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c726:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c72a:	e774      	b.n	800c616 <__ieee754_pow+0x3e>
 800c72c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c730:	d106      	bne.n	800c740 <__ieee754_pow+0x168>
 800c732:	4632      	mov	r2, r6
 800c734:	463b      	mov	r3, r7
 800c736:	4630      	mov	r0, r6
 800c738:	4639      	mov	r1, r7
 800c73a:	f7f3 ff85 	bl	8000648 <__aeabi_dmul>
 800c73e:	e76a      	b.n	800c616 <__ieee754_pow+0x3e>
 800c740:	4b3e      	ldr	r3, [pc, #248]	; (800c83c <__ieee754_pow+0x264>)
 800c742:	4599      	cmp	r9, r3
 800c744:	d10c      	bne.n	800c760 <__ieee754_pow+0x188>
 800c746:	2d00      	cmp	r5, #0
 800c748:	db0a      	blt.n	800c760 <__ieee754_pow+0x188>
 800c74a:	ec47 6b10 	vmov	d0, r6, r7
 800c74e:	b009      	add	sp, #36	; 0x24
 800c750:	ecbd 8b06 	vpop	{d8-d10}
 800c754:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c758:	f7ff be62 	b.w	800c420 <__ieee754_sqrt>
 800c75c:	2300      	movs	r3, #0
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	ec47 6b10 	vmov	d0, r6, r7
 800c764:	f000 fc62 	bl	800d02c <fabs>
 800c768:	ec51 0b10 	vmov	r0, r1, d0
 800c76c:	f1ba 0f00 	cmp.w	sl, #0
 800c770:	d129      	bne.n	800c7c6 <__ieee754_pow+0x1ee>
 800c772:	b124      	cbz	r4, 800c77e <__ieee754_pow+0x1a6>
 800c774:	4b2f      	ldr	r3, [pc, #188]	; (800c834 <__ieee754_pow+0x25c>)
 800c776:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d123      	bne.n	800c7c6 <__ieee754_pow+0x1ee>
 800c77e:	f1b9 0f00 	cmp.w	r9, #0
 800c782:	da05      	bge.n	800c790 <__ieee754_pow+0x1b8>
 800c784:	4602      	mov	r2, r0
 800c786:	460b      	mov	r3, r1
 800c788:	2000      	movs	r0, #0
 800c78a:	492a      	ldr	r1, [pc, #168]	; (800c834 <__ieee754_pow+0x25c>)
 800c78c:	f7f4 f886 	bl	800089c <__aeabi_ddiv>
 800c790:	2d00      	cmp	r5, #0
 800c792:	f6bf af40 	bge.w	800c616 <__ieee754_pow+0x3e>
 800c796:	9b04      	ldr	r3, [sp, #16]
 800c798:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c79c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c7a0:	431c      	orrs	r4, r3
 800c7a2:	d108      	bne.n	800c7b6 <__ieee754_pow+0x1de>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	460b      	mov	r3, r1
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f7f3 fd94 	bl	80002d8 <__aeabi_dsub>
 800c7b0:	4602      	mov	r2, r0
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	e78f      	b.n	800c6d6 <__ieee754_pow+0xfe>
 800c7b6:	9b04      	ldr	r3, [sp, #16]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	f47f af2c 	bne.w	800c616 <__ieee754_pow+0x3e>
 800c7be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	e727      	b.n	800c616 <__ieee754_pow+0x3e>
 800c7c6:	0feb      	lsrs	r3, r5, #31
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	9306      	str	r3, [sp, #24]
 800c7cc:	9a06      	ldr	r2, [sp, #24]
 800c7ce:	9b04      	ldr	r3, [sp, #16]
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	d102      	bne.n	800c7da <__ieee754_pow+0x202>
 800c7d4:	4632      	mov	r2, r6
 800c7d6:	463b      	mov	r3, r7
 800c7d8:	e7e6      	b.n	800c7a8 <__ieee754_pow+0x1d0>
 800c7da:	4b19      	ldr	r3, [pc, #100]	; (800c840 <__ieee754_pow+0x268>)
 800c7dc:	4598      	cmp	r8, r3
 800c7de:	f340 80fb 	ble.w	800c9d8 <__ieee754_pow+0x400>
 800c7e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c7e6:	4598      	cmp	r8, r3
 800c7e8:	4b13      	ldr	r3, [pc, #76]	; (800c838 <__ieee754_pow+0x260>)
 800c7ea:	dd0c      	ble.n	800c806 <__ieee754_pow+0x22e>
 800c7ec:	429c      	cmp	r4, r3
 800c7ee:	dc0f      	bgt.n	800c810 <__ieee754_pow+0x238>
 800c7f0:	f1b9 0f00 	cmp.w	r9, #0
 800c7f4:	da0f      	bge.n	800c816 <__ieee754_pow+0x23e>
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	b009      	add	sp, #36	; 0x24
 800c7fa:	ecbd 8b06 	vpop	{d8-d10}
 800c7fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c802:	f000 bcc2 	b.w	800d18a <__math_oflow>
 800c806:	429c      	cmp	r4, r3
 800c808:	dbf2      	blt.n	800c7f0 <__ieee754_pow+0x218>
 800c80a:	4b0a      	ldr	r3, [pc, #40]	; (800c834 <__ieee754_pow+0x25c>)
 800c80c:	429c      	cmp	r4, r3
 800c80e:	dd19      	ble.n	800c844 <__ieee754_pow+0x26c>
 800c810:	f1b9 0f00 	cmp.w	r9, #0
 800c814:	dcef      	bgt.n	800c7f6 <__ieee754_pow+0x21e>
 800c816:	2000      	movs	r0, #0
 800c818:	b009      	add	sp, #36	; 0x24
 800c81a:	ecbd 8b06 	vpop	{d8-d10}
 800c81e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c822:	f000 bca9 	b.w	800d178 <__math_uflow>
 800c826:	bf00      	nop
 800c828:	fff00000 	.word	0xfff00000
 800c82c:	7ff00000 	.word	0x7ff00000
 800c830:	433fffff 	.word	0x433fffff
 800c834:	3ff00000 	.word	0x3ff00000
 800c838:	3fefffff 	.word	0x3fefffff
 800c83c:	3fe00000 	.word	0x3fe00000
 800c840:	41e00000 	.word	0x41e00000
 800c844:	4b60      	ldr	r3, [pc, #384]	; (800c9c8 <__ieee754_pow+0x3f0>)
 800c846:	2200      	movs	r2, #0
 800c848:	f7f3 fd46 	bl	80002d8 <__aeabi_dsub>
 800c84c:	a354      	add	r3, pc, #336	; (adr r3, 800c9a0 <__ieee754_pow+0x3c8>)
 800c84e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c852:	4604      	mov	r4, r0
 800c854:	460d      	mov	r5, r1
 800c856:	f7f3 fef7 	bl	8000648 <__aeabi_dmul>
 800c85a:	a353      	add	r3, pc, #332	; (adr r3, 800c9a8 <__ieee754_pow+0x3d0>)
 800c85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	4620      	mov	r0, r4
 800c866:	4629      	mov	r1, r5
 800c868:	f7f3 feee 	bl	8000648 <__aeabi_dmul>
 800c86c:	4b57      	ldr	r3, [pc, #348]	; (800c9cc <__ieee754_pow+0x3f4>)
 800c86e:	4682      	mov	sl, r0
 800c870:	468b      	mov	fp, r1
 800c872:	2200      	movs	r2, #0
 800c874:	4620      	mov	r0, r4
 800c876:	4629      	mov	r1, r5
 800c878:	f7f3 fee6 	bl	8000648 <__aeabi_dmul>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	a14b      	add	r1, pc, #300	; (adr r1, 800c9b0 <__ieee754_pow+0x3d8>)
 800c882:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c886:	f7f3 fd27 	bl	80002d8 <__aeabi_dsub>
 800c88a:	4622      	mov	r2, r4
 800c88c:	462b      	mov	r3, r5
 800c88e:	f7f3 fedb 	bl	8000648 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	2000      	movs	r0, #0
 800c898:	494d      	ldr	r1, [pc, #308]	; (800c9d0 <__ieee754_pow+0x3f8>)
 800c89a:	f7f3 fd1d 	bl	80002d8 <__aeabi_dsub>
 800c89e:	4622      	mov	r2, r4
 800c8a0:	4680      	mov	r8, r0
 800c8a2:	4689      	mov	r9, r1
 800c8a4:	462b      	mov	r3, r5
 800c8a6:	4620      	mov	r0, r4
 800c8a8:	4629      	mov	r1, r5
 800c8aa:	f7f3 fecd 	bl	8000648 <__aeabi_dmul>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	460b      	mov	r3, r1
 800c8b2:	4640      	mov	r0, r8
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	f7f3 fec7 	bl	8000648 <__aeabi_dmul>
 800c8ba:	a33f      	add	r3, pc, #252	; (adr r3, 800c9b8 <__ieee754_pow+0x3e0>)
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	f7f3 fec2 	bl	8000648 <__aeabi_dmul>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	460b      	mov	r3, r1
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f7f3 fd04 	bl	80002d8 <__aeabi_dsub>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4680      	mov	r8, r0
 800c8d6:	4689      	mov	r9, r1
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fcfe 	bl	80002dc <__adddf3>
 800c8e0:	2000      	movs	r0, #0
 800c8e2:	4632      	mov	r2, r6
 800c8e4:	463b      	mov	r3, r7
 800c8e6:	4604      	mov	r4, r0
 800c8e8:	460d      	mov	r5, r1
 800c8ea:	f7f3 fcf5 	bl	80002d8 <__aeabi_dsub>
 800c8ee:	4602      	mov	r2, r0
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	4640      	mov	r0, r8
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	f7f3 fcef 	bl	80002d8 <__aeabi_dsub>
 800c8fa:	9b04      	ldr	r3, [sp, #16]
 800c8fc:	9a06      	ldr	r2, [sp, #24]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	4313      	orrs	r3, r2
 800c902:	4682      	mov	sl, r0
 800c904:	468b      	mov	fp, r1
 800c906:	f040 81e7 	bne.w	800ccd8 <__ieee754_pow+0x700>
 800c90a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c9c0 <__ieee754_pow+0x3e8>
 800c90e:	eeb0 8a47 	vmov.f32	s16, s14
 800c912:	eef0 8a67 	vmov.f32	s17, s15
 800c916:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c91a:	2600      	movs	r6, #0
 800c91c:	4632      	mov	r2, r6
 800c91e:	463b      	mov	r3, r7
 800c920:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c924:	f7f3 fcd8 	bl	80002d8 <__aeabi_dsub>
 800c928:	4622      	mov	r2, r4
 800c92a:	462b      	mov	r3, r5
 800c92c:	f7f3 fe8c 	bl	8000648 <__aeabi_dmul>
 800c930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c934:	4680      	mov	r8, r0
 800c936:	4689      	mov	r9, r1
 800c938:	4650      	mov	r0, sl
 800c93a:	4659      	mov	r1, fp
 800c93c:	f7f3 fe84 	bl	8000648 <__aeabi_dmul>
 800c940:	4602      	mov	r2, r0
 800c942:	460b      	mov	r3, r1
 800c944:	4640      	mov	r0, r8
 800c946:	4649      	mov	r1, r9
 800c948:	f7f3 fcc8 	bl	80002dc <__adddf3>
 800c94c:	4632      	mov	r2, r6
 800c94e:	463b      	mov	r3, r7
 800c950:	4680      	mov	r8, r0
 800c952:	4689      	mov	r9, r1
 800c954:	4620      	mov	r0, r4
 800c956:	4629      	mov	r1, r5
 800c958:	f7f3 fe76 	bl	8000648 <__aeabi_dmul>
 800c95c:	460b      	mov	r3, r1
 800c95e:	4604      	mov	r4, r0
 800c960:	460d      	mov	r5, r1
 800c962:	4602      	mov	r2, r0
 800c964:	4649      	mov	r1, r9
 800c966:	4640      	mov	r0, r8
 800c968:	f7f3 fcb8 	bl	80002dc <__adddf3>
 800c96c:	4b19      	ldr	r3, [pc, #100]	; (800c9d4 <__ieee754_pow+0x3fc>)
 800c96e:	4299      	cmp	r1, r3
 800c970:	ec45 4b19 	vmov	d9, r4, r5
 800c974:	4606      	mov	r6, r0
 800c976:	460f      	mov	r7, r1
 800c978:	468b      	mov	fp, r1
 800c97a:	f340 82f0 	ble.w	800cf5e <__ieee754_pow+0x986>
 800c97e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c982:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c986:	4303      	orrs	r3, r0
 800c988:	f000 81e4 	beq.w	800cd54 <__ieee754_pow+0x77c>
 800c98c:	ec51 0b18 	vmov	r0, r1, d8
 800c990:	2200      	movs	r2, #0
 800c992:	2300      	movs	r3, #0
 800c994:	f7f4 f8ca 	bl	8000b2c <__aeabi_dcmplt>
 800c998:	3800      	subs	r0, #0
 800c99a:	bf18      	it	ne
 800c99c:	2001      	movne	r0, #1
 800c99e:	e72b      	b.n	800c7f8 <__ieee754_pow+0x220>
 800c9a0:	60000000 	.word	0x60000000
 800c9a4:	3ff71547 	.word	0x3ff71547
 800c9a8:	f85ddf44 	.word	0xf85ddf44
 800c9ac:	3e54ae0b 	.word	0x3e54ae0b
 800c9b0:	55555555 	.word	0x55555555
 800c9b4:	3fd55555 	.word	0x3fd55555
 800c9b8:	652b82fe 	.word	0x652b82fe
 800c9bc:	3ff71547 	.word	0x3ff71547
 800c9c0:	00000000 	.word	0x00000000
 800c9c4:	bff00000 	.word	0xbff00000
 800c9c8:	3ff00000 	.word	0x3ff00000
 800c9cc:	3fd00000 	.word	0x3fd00000
 800c9d0:	3fe00000 	.word	0x3fe00000
 800c9d4:	408fffff 	.word	0x408fffff
 800c9d8:	4bd5      	ldr	r3, [pc, #852]	; (800cd30 <__ieee754_pow+0x758>)
 800c9da:	402b      	ands	r3, r5
 800c9dc:	2200      	movs	r2, #0
 800c9de:	b92b      	cbnz	r3, 800c9ec <__ieee754_pow+0x414>
 800c9e0:	4bd4      	ldr	r3, [pc, #848]	; (800cd34 <__ieee754_pow+0x75c>)
 800c9e2:	f7f3 fe31 	bl	8000648 <__aeabi_dmul>
 800c9e6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c9ea:	460c      	mov	r4, r1
 800c9ec:	1523      	asrs	r3, r4, #20
 800c9ee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c9f2:	4413      	add	r3, r2
 800c9f4:	9305      	str	r3, [sp, #20]
 800c9f6:	4bd0      	ldr	r3, [pc, #832]	; (800cd38 <__ieee754_pow+0x760>)
 800c9f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c9fc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ca00:	429c      	cmp	r4, r3
 800ca02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ca06:	dd08      	ble.n	800ca1a <__ieee754_pow+0x442>
 800ca08:	4bcc      	ldr	r3, [pc, #816]	; (800cd3c <__ieee754_pow+0x764>)
 800ca0a:	429c      	cmp	r4, r3
 800ca0c:	f340 8162 	ble.w	800ccd4 <__ieee754_pow+0x6fc>
 800ca10:	9b05      	ldr	r3, [sp, #20]
 800ca12:	3301      	adds	r3, #1
 800ca14:	9305      	str	r3, [sp, #20]
 800ca16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ca1a:	2400      	movs	r4, #0
 800ca1c:	00e3      	lsls	r3, r4, #3
 800ca1e:	9307      	str	r3, [sp, #28]
 800ca20:	4bc7      	ldr	r3, [pc, #796]	; (800cd40 <__ieee754_pow+0x768>)
 800ca22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ca26:	ed93 7b00 	vldr	d7, [r3]
 800ca2a:	4629      	mov	r1, r5
 800ca2c:	ec53 2b17 	vmov	r2, r3, d7
 800ca30:	eeb0 9a47 	vmov.f32	s18, s14
 800ca34:	eef0 9a67 	vmov.f32	s19, s15
 800ca38:	4682      	mov	sl, r0
 800ca3a:	f7f3 fc4d 	bl	80002d8 <__aeabi_dsub>
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4606      	mov	r6, r0
 800ca42:	460f      	mov	r7, r1
 800ca44:	462b      	mov	r3, r5
 800ca46:	ec51 0b19 	vmov	r0, r1, d9
 800ca4a:	f7f3 fc47 	bl	80002dc <__adddf3>
 800ca4e:	4602      	mov	r2, r0
 800ca50:	460b      	mov	r3, r1
 800ca52:	2000      	movs	r0, #0
 800ca54:	49bb      	ldr	r1, [pc, #748]	; (800cd44 <__ieee754_pow+0x76c>)
 800ca56:	f7f3 ff21 	bl	800089c <__aeabi_ddiv>
 800ca5a:	ec41 0b1a 	vmov	d10, r0, r1
 800ca5e:	4602      	mov	r2, r0
 800ca60:	460b      	mov	r3, r1
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fdef 	bl	8000648 <__aeabi_dmul>
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca70:	9302      	str	r3, [sp, #8]
 800ca72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca76:	46ab      	mov	fp, r5
 800ca78:	106d      	asrs	r5, r5, #1
 800ca7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca82:	ec41 0b18 	vmov	d8, r0, r1
 800ca86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	4649      	mov	r1, r9
 800ca90:	4614      	mov	r4, r2
 800ca92:	461d      	mov	r5, r3
 800ca94:	f7f3 fdd8 	bl	8000648 <__aeabi_dmul>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4630      	mov	r0, r6
 800ca9e:	4639      	mov	r1, r7
 800caa0:	f7f3 fc1a 	bl	80002d8 <__aeabi_dsub>
 800caa4:	ec53 2b19 	vmov	r2, r3, d9
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	4620      	mov	r0, r4
 800caae:	4629      	mov	r1, r5
 800cab0:	f7f3 fc12 	bl	80002d8 <__aeabi_dsub>
 800cab4:	4602      	mov	r2, r0
 800cab6:	460b      	mov	r3, r1
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f3 fc0c 	bl	80002d8 <__aeabi_dsub>
 800cac0:	4642      	mov	r2, r8
 800cac2:	464b      	mov	r3, r9
 800cac4:	f7f3 fdc0 	bl	8000648 <__aeabi_dmul>
 800cac8:	4602      	mov	r2, r0
 800caca:	460b      	mov	r3, r1
 800cacc:	4630      	mov	r0, r6
 800cace:	4639      	mov	r1, r7
 800cad0:	f7f3 fc02 	bl	80002d8 <__aeabi_dsub>
 800cad4:	ec53 2b1a 	vmov	r2, r3, d10
 800cad8:	f7f3 fdb6 	bl	8000648 <__aeabi_dmul>
 800cadc:	ec53 2b18 	vmov	r2, r3, d8
 800cae0:	ec41 0b19 	vmov	d9, r0, r1
 800cae4:	ec51 0b18 	vmov	r0, r1, d8
 800cae8:	f7f3 fdae 	bl	8000648 <__aeabi_dmul>
 800caec:	a37c      	add	r3, pc, #496	; (adr r3, 800cce0 <__ieee754_pow+0x708>)
 800caee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf2:	4604      	mov	r4, r0
 800caf4:	460d      	mov	r5, r1
 800caf6:	f7f3 fda7 	bl	8000648 <__aeabi_dmul>
 800cafa:	a37b      	add	r3, pc, #492	; (adr r3, 800cce8 <__ieee754_pow+0x710>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fbec 	bl	80002dc <__adddf3>
 800cb04:	4622      	mov	r2, r4
 800cb06:	462b      	mov	r3, r5
 800cb08:	f7f3 fd9e 	bl	8000648 <__aeabi_dmul>
 800cb0c:	a378      	add	r3, pc, #480	; (adr r3, 800ccf0 <__ieee754_pow+0x718>)
 800cb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb12:	f7f3 fbe3 	bl	80002dc <__adddf3>
 800cb16:	4622      	mov	r2, r4
 800cb18:	462b      	mov	r3, r5
 800cb1a:	f7f3 fd95 	bl	8000648 <__aeabi_dmul>
 800cb1e:	a376      	add	r3, pc, #472	; (adr r3, 800ccf8 <__ieee754_pow+0x720>)
 800cb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb24:	f7f3 fbda 	bl	80002dc <__adddf3>
 800cb28:	4622      	mov	r2, r4
 800cb2a:	462b      	mov	r3, r5
 800cb2c:	f7f3 fd8c 	bl	8000648 <__aeabi_dmul>
 800cb30:	a373      	add	r3, pc, #460	; (adr r3, 800cd00 <__ieee754_pow+0x728>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fbd1 	bl	80002dc <__adddf3>
 800cb3a:	4622      	mov	r2, r4
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	f7f3 fd83 	bl	8000648 <__aeabi_dmul>
 800cb42:	a371      	add	r3, pc, #452	; (adr r3, 800cd08 <__ieee754_pow+0x730>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7f3 fbc8 	bl	80002dc <__adddf3>
 800cb4c:	4622      	mov	r2, r4
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	462b      	mov	r3, r5
 800cb54:	4620      	mov	r0, r4
 800cb56:	4629      	mov	r1, r5
 800cb58:	f7f3 fd76 	bl	8000648 <__aeabi_dmul>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	460b      	mov	r3, r1
 800cb60:	4630      	mov	r0, r6
 800cb62:	4639      	mov	r1, r7
 800cb64:	f7f3 fd70 	bl	8000648 <__aeabi_dmul>
 800cb68:	4642      	mov	r2, r8
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	464b      	mov	r3, r9
 800cb70:	ec51 0b18 	vmov	r0, r1, d8
 800cb74:	f7f3 fbb2 	bl	80002dc <__adddf3>
 800cb78:	ec53 2b19 	vmov	r2, r3, d9
 800cb7c:	f7f3 fd64 	bl	8000648 <__aeabi_dmul>
 800cb80:	4622      	mov	r2, r4
 800cb82:	462b      	mov	r3, r5
 800cb84:	f7f3 fbaa 	bl	80002dc <__adddf3>
 800cb88:	4642      	mov	r2, r8
 800cb8a:	4682      	mov	sl, r0
 800cb8c:	468b      	mov	fp, r1
 800cb8e:	464b      	mov	r3, r9
 800cb90:	4640      	mov	r0, r8
 800cb92:	4649      	mov	r1, r9
 800cb94:	f7f3 fd58 	bl	8000648 <__aeabi_dmul>
 800cb98:	4b6b      	ldr	r3, [pc, #428]	; (800cd48 <__ieee754_pow+0x770>)
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	4606      	mov	r6, r0
 800cb9e:	460f      	mov	r7, r1
 800cba0:	f7f3 fb9c 	bl	80002dc <__adddf3>
 800cba4:	4652      	mov	r2, sl
 800cba6:	465b      	mov	r3, fp
 800cba8:	f7f3 fb98 	bl	80002dc <__adddf3>
 800cbac:	2000      	movs	r0, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	4649      	mov	r1, r9
 800cbba:	f7f3 fd45 	bl	8000648 <__aeabi_dmul>
 800cbbe:	4b62      	ldr	r3, [pc, #392]	; (800cd48 <__ieee754_pow+0x770>)
 800cbc0:	4680      	mov	r8, r0
 800cbc2:	4689      	mov	r9, r1
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	4620      	mov	r0, r4
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7f3 fb85 	bl	80002d8 <__aeabi_dsub>
 800cbce:	4632      	mov	r2, r6
 800cbd0:	463b      	mov	r3, r7
 800cbd2:	f7f3 fb81 	bl	80002d8 <__aeabi_dsub>
 800cbd6:	4602      	mov	r2, r0
 800cbd8:	460b      	mov	r3, r1
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 fb7b 	bl	80002d8 <__aeabi_dsub>
 800cbe2:	ec53 2b18 	vmov	r2, r3, d8
 800cbe6:	f7f3 fd2f 	bl	8000648 <__aeabi_dmul>
 800cbea:	4622      	mov	r2, r4
 800cbec:	4606      	mov	r6, r0
 800cbee:	460f      	mov	r7, r1
 800cbf0:	462b      	mov	r3, r5
 800cbf2:	ec51 0b19 	vmov	r0, r1, d9
 800cbf6:	f7f3 fd27 	bl	8000648 <__aeabi_dmul>
 800cbfa:	4602      	mov	r2, r0
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	4630      	mov	r0, r6
 800cc00:	4639      	mov	r1, r7
 800cc02:	f7f3 fb6b 	bl	80002dc <__adddf3>
 800cc06:	4606      	mov	r6, r0
 800cc08:	460f      	mov	r7, r1
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	f7f3 fb63 	bl	80002dc <__adddf3>
 800cc16:	a33e      	add	r3, pc, #248	; (adr r3, 800cd10 <__ieee754_pow+0x738>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	4604      	mov	r4, r0
 800cc20:	460d      	mov	r5, r1
 800cc22:	f7f3 fd11 	bl	8000648 <__aeabi_dmul>
 800cc26:	4642      	mov	r2, r8
 800cc28:	ec41 0b18 	vmov	d8, r0, r1
 800cc2c:	464b      	mov	r3, r9
 800cc2e:	4620      	mov	r0, r4
 800cc30:	4629      	mov	r1, r5
 800cc32:	f7f3 fb51 	bl	80002d8 <__aeabi_dsub>
 800cc36:	4602      	mov	r2, r0
 800cc38:	460b      	mov	r3, r1
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	4639      	mov	r1, r7
 800cc3e:	f7f3 fb4b 	bl	80002d8 <__aeabi_dsub>
 800cc42:	a335      	add	r3, pc, #212	; (adr r3, 800cd18 <__ieee754_pow+0x740>)
 800cc44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc48:	f7f3 fcfe 	bl	8000648 <__aeabi_dmul>
 800cc4c:	a334      	add	r3, pc, #208	; (adr r3, 800cd20 <__ieee754_pow+0x748>)
 800cc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc52:	4606      	mov	r6, r0
 800cc54:	460f      	mov	r7, r1
 800cc56:	4620      	mov	r0, r4
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7f3 fcf5 	bl	8000648 <__aeabi_dmul>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	460b      	mov	r3, r1
 800cc62:	4630      	mov	r0, r6
 800cc64:	4639      	mov	r1, r7
 800cc66:	f7f3 fb39 	bl	80002dc <__adddf3>
 800cc6a:	9a07      	ldr	r2, [sp, #28]
 800cc6c:	4b37      	ldr	r3, [pc, #220]	; (800cd4c <__ieee754_pow+0x774>)
 800cc6e:	4413      	add	r3, r2
 800cc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc74:	f7f3 fb32 	bl	80002dc <__adddf3>
 800cc78:	4682      	mov	sl, r0
 800cc7a:	9805      	ldr	r0, [sp, #20]
 800cc7c:	468b      	mov	fp, r1
 800cc7e:	f7f3 fc79 	bl	8000574 <__aeabi_i2d>
 800cc82:	9a07      	ldr	r2, [sp, #28]
 800cc84:	4b32      	ldr	r3, [pc, #200]	; (800cd50 <__ieee754_pow+0x778>)
 800cc86:	4413      	add	r3, r2
 800cc88:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc8c:	4606      	mov	r6, r0
 800cc8e:	460f      	mov	r7, r1
 800cc90:	4652      	mov	r2, sl
 800cc92:	465b      	mov	r3, fp
 800cc94:	ec51 0b18 	vmov	r0, r1, d8
 800cc98:	f7f3 fb20 	bl	80002dc <__adddf3>
 800cc9c:	4642      	mov	r2, r8
 800cc9e:	464b      	mov	r3, r9
 800cca0:	f7f3 fb1c 	bl	80002dc <__adddf3>
 800cca4:	4632      	mov	r2, r6
 800cca6:	463b      	mov	r3, r7
 800cca8:	f7f3 fb18 	bl	80002dc <__adddf3>
 800ccac:	2000      	movs	r0, #0
 800ccae:	4632      	mov	r2, r6
 800ccb0:	463b      	mov	r3, r7
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	460d      	mov	r5, r1
 800ccb6:	f7f3 fb0f 	bl	80002d8 <__aeabi_dsub>
 800ccba:	4642      	mov	r2, r8
 800ccbc:	464b      	mov	r3, r9
 800ccbe:	f7f3 fb0b 	bl	80002d8 <__aeabi_dsub>
 800ccc2:	ec53 2b18 	vmov	r2, r3, d8
 800ccc6:	f7f3 fb07 	bl	80002d8 <__aeabi_dsub>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
 800ccce:	4650      	mov	r0, sl
 800ccd0:	4659      	mov	r1, fp
 800ccd2:	e610      	b.n	800c8f6 <__ieee754_pow+0x31e>
 800ccd4:	2401      	movs	r4, #1
 800ccd6:	e6a1      	b.n	800ca1c <__ieee754_pow+0x444>
 800ccd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cd28 <__ieee754_pow+0x750>
 800ccdc:	e617      	b.n	800c90e <__ieee754_pow+0x336>
 800ccde:	bf00      	nop
 800cce0:	4a454eef 	.word	0x4a454eef
 800cce4:	3fca7e28 	.word	0x3fca7e28
 800cce8:	93c9db65 	.word	0x93c9db65
 800ccec:	3fcd864a 	.word	0x3fcd864a
 800ccf0:	a91d4101 	.word	0xa91d4101
 800ccf4:	3fd17460 	.word	0x3fd17460
 800ccf8:	518f264d 	.word	0x518f264d
 800ccfc:	3fd55555 	.word	0x3fd55555
 800cd00:	db6fabff 	.word	0xdb6fabff
 800cd04:	3fdb6db6 	.word	0x3fdb6db6
 800cd08:	33333303 	.word	0x33333303
 800cd0c:	3fe33333 	.word	0x3fe33333
 800cd10:	e0000000 	.word	0xe0000000
 800cd14:	3feec709 	.word	0x3feec709
 800cd18:	dc3a03fd 	.word	0xdc3a03fd
 800cd1c:	3feec709 	.word	0x3feec709
 800cd20:	145b01f5 	.word	0x145b01f5
 800cd24:	be3e2fe0 	.word	0xbe3e2fe0
 800cd28:	00000000 	.word	0x00000000
 800cd2c:	3ff00000 	.word	0x3ff00000
 800cd30:	7ff00000 	.word	0x7ff00000
 800cd34:	43400000 	.word	0x43400000
 800cd38:	0003988e 	.word	0x0003988e
 800cd3c:	000bb679 	.word	0x000bb679
 800cd40:	0800d5e0 	.word	0x0800d5e0
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	40080000 	.word	0x40080000
 800cd4c:	0800d600 	.word	0x0800d600
 800cd50:	0800d5f0 	.word	0x0800d5f0
 800cd54:	a3b3      	add	r3, pc, #716	; (adr r3, 800d024 <__ieee754_pow+0xa4c>)
 800cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5a:	4640      	mov	r0, r8
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	f7f3 fabd 	bl	80002dc <__adddf3>
 800cd62:	4622      	mov	r2, r4
 800cd64:	ec41 0b1a 	vmov	d10, r0, r1
 800cd68:	462b      	mov	r3, r5
 800cd6a:	4630      	mov	r0, r6
 800cd6c:	4639      	mov	r1, r7
 800cd6e:	f7f3 fab3 	bl	80002d8 <__aeabi_dsub>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	ec51 0b1a 	vmov	r0, r1, d10
 800cd7a:	f7f3 fef5 	bl	8000b68 <__aeabi_dcmpgt>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	f47f ae04 	bne.w	800c98c <__ieee754_pow+0x3b4>
 800cd84:	4aa2      	ldr	r2, [pc, #648]	; (800d010 <__ieee754_pow+0xa38>)
 800cd86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	f340 8107 	ble.w	800cf9e <__ieee754_pow+0x9c6>
 800cd90:	151b      	asrs	r3, r3, #20
 800cd92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd9a:	fa4a fa03 	asr.w	sl, sl, r3
 800cd9e:	44da      	add	sl, fp
 800cda0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cda4:	489b      	ldr	r0, [pc, #620]	; (800d014 <__ieee754_pow+0xa3c>)
 800cda6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cdaa:	4108      	asrs	r0, r1
 800cdac:	ea00 030a 	and.w	r3, r0, sl
 800cdb0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cdb4:	f1c1 0114 	rsb	r1, r1, #20
 800cdb8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cdbc:	fa4a fa01 	asr.w	sl, sl, r1
 800cdc0:	f1bb 0f00 	cmp.w	fp, #0
 800cdc4:	f04f 0200 	mov.w	r2, #0
 800cdc8:	4620      	mov	r0, r4
 800cdca:	4629      	mov	r1, r5
 800cdcc:	bfb8      	it	lt
 800cdce:	f1ca 0a00 	rsblt	sl, sl, #0
 800cdd2:	f7f3 fa81 	bl	80002d8 <__aeabi_dsub>
 800cdd6:	ec41 0b19 	vmov	d9, r0, r1
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	ec51 0b19 	vmov	r0, r1, d9
 800cde2:	f7f3 fa7b 	bl	80002dc <__adddf3>
 800cde6:	a37a      	add	r3, pc, #488	; (adr r3, 800cfd0 <__ieee754_pow+0x9f8>)
 800cde8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdec:	2000      	movs	r0, #0
 800cdee:	4604      	mov	r4, r0
 800cdf0:	460d      	mov	r5, r1
 800cdf2:	f7f3 fc29 	bl	8000648 <__aeabi_dmul>
 800cdf6:	ec53 2b19 	vmov	r2, r3, d9
 800cdfa:	4606      	mov	r6, r0
 800cdfc:	460f      	mov	r7, r1
 800cdfe:	4620      	mov	r0, r4
 800ce00:	4629      	mov	r1, r5
 800ce02:	f7f3 fa69 	bl	80002d8 <__aeabi_dsub>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4640      	mov	r0, r8
 800ce0c:	4649      	mov	r1, r9
 800ce0e:	f7f3 fa63 	bl	80002d8 <__aeabi_dsub>
 800ce12:	a371      	add	r3, pc, #452	; (adr r3, 800cfd8 <__ieee754_pow+0xa00>)
 800ce14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce18:	f7f3 fc16 	bl	8000648 <__aeabi_dmul>
 800ce1c:	a370      	add	r3, pc, #448	; (adr r3, 800cfe0 <__ieee754_pow+0xa08>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	4680      	mov	r8, r0
 800ce24:	4689      	mov	r9, r1
 800ce26:	4620      	mov	r0, r4
 800ce28:	4629      	mov	r1, r5
 800ce2a:	f7f3 fc0d 	bl	8000648 <__aeabi_dmul>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4640      	mov	r0, r8
 800ce34:	4649      	mov	r1, r9
 800ce36:	f7f3 fa51 	bl	80002dc <__adddf3>
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	460d      	mov	r5, r1
 800ce3e:	4602      	mov	r2, r0
 800ce40:	460b      	mov	r3, r1
 800ce42:	4630      	mov	r0, r6
 800ce44:	4639      	mov	r1, r7
 800ce46:	f7f3 fa49 	bl	80002dc <__adddf3>
 800ce4a:	4632      	mov	r2, r6
 800ce4c:	463b      	mov	r3, r7
 800ce4e:	4680      	mov	r8, r0
 800ce50:	4689      	mov	r9, r1
 800ce52:	f7f3 fa41 	bl	80002d8 <__aeabi_dsub>
 800ce56:	4602      	mov	r2, r0
 800ce58:	460b      	mov	r3, r1
 800ce5a:	4620      	mov	r0, r4
 800ce5c:	4629      	mov	r1, r5
 800ce5e:	f7f3 fa3b 	bl	80002d8 <__aeabi_dsub>
 800ce62:	4642      	mov	r2, r8
 800ce64:	4606      	mov	r6, r0
 800ce66:	460f      	mov	r7, r1
 800ce68:	464b      	mov	r3, r9
 800ce6a:	4640      	mov	r0, r8
 800ce6c:	4649      	mov	r1, r9
 800ce6e:	f7f3 fbeb 	bl	8000648 <__aeabi_dmul>
 800ce72:	a35d      	add	r3, pc, #372	; (adr r3, 800cfe8 <__ieee754_pow+0xa10>)
 800ce74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce78:	4604      	mov	r4, r0
 800ce7a:	460d      	mov	r5, r1
 800ce7c:	f7f3 fbe4 	bl	8000648 <__aeabi_dmul>
 800ce80:	a35b      	add	r3, pc, #364	; (adr r3, 800cff0 <__ieee754_pow+0xa18>)
 800ce82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce86:	f7f3 fa27 	bl	80002d8 <__aeabi_dsub>
 800ce8a:	4622      	mov	r2, r4
 800ce8c:	462b      	mov	r3, r5
 800ce8e:	f7f3 fbdb 	bl	8000648 <__aeabi_dmul>
 800ce92:	a359      	add	r3, pc, #356	; (adr r3, 800cff8 <__ieee754_pow+0xa20>)
 800ce94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce98:	f7f3 fa20 	bl	80002dc <__adddf3>
 800ce9c:	4622      	mov	r2, r4
 800ce9e:	462b      	mov	r3, r5
 800cea0:	f7f3 fbd2 	bl	8000648 <__aeabi_dmul>
 800cea4:	a356      	add	r3, pc, #344	; (adr r3, 800d000 <__ieee754_pow+0xa28>)
 800cea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceaa:	f7f3 fa15 	bl	80002d8 <__aeabi_dsub>
 800ceae:	4622      	mov	r2, r4
 800ceb0:	462b      	mov	r3, r5
 800ceb2:	f7f3 fbc9 	bl	8000648 <__aeabi_dmul>
 800ceb6:	a354      	add	r3, pc, #336	; (adr r3, 800d008 <__ieee754_pow+0xa30>)
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f7f3 fa0e 	bl	80002dc <__adddf3>
 800cec0:	4622      	mov	r2, r4
 800cec2:	462b      	mov	r3, r5
 800cec4:	f7f3 fbc0 	bl	8000648 <__aeabi_dmul>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4640      	mov	r0, r8
 800cece:	4649      	mov	r1, r9
 800ced0:	f7f3 fa02 	bl	80002d8 <__aeabi_dsub>
 800ced4:	4604      	mov	r4, r0
 800ced6:	460d      	mov	r5, r1
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 fbb2 	bl	8000648 <__aeabi_dmul>
 800cee4:	2200      	movs	r2, #0
 800cee6:	ec41 0b19 	vmov	d9, r0, r1
 800ceea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ceee:	4620      	mov	r0, r4
 800cef0:	4629      	mov	r1, r5
 800cef2:	f7f3 f9f1 	bl	80002d8 <__aeabi_dsub>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	ec51 0b19 	vmov	r0, r1, d9
 800cefe:	f7f3 fccd 	bl	800089c <__aeabi_ddiv>
 800cf02:	4632      	mov	r2, r6
 800cf04:	4604      	mov	r4, r0
 800cf06:	460d      	mov	r5, r1
 800cf08:	463b      	mov	r3, r7
 800cf0a:	4640      	mov	r0, r8
 800cf0c:	4649      	mov	r1, r9
 800cf0e:	f7f3 fb9b 	bl	8000648 <__aeabi_dmul>
 800cf12:	4632      	mov	r2, r6
 800cf14:	463b      	mov	r3, r7
 800cf16:	f7f3 f9e1 	bl	80002dc <__adddf3>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4620      	mov	r0, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	f7f3 f9d9 	bl	80002d8 <__aeabi_dsub>
 800cf26:	4642      	mov	r2, r8
 800cf28:	464b      	mov	r3, r9
 800cf2a:	f7f3 f9d5 	bl	80002d8 <__aeabi_dsub>
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4602      	mov	r2, r0
 800cf32:	4939      	ldr	r1, [pc, #228]	; (800d018 <__ieee754_pow+0xa40>)
 800cf34:	2000      	movs	r0, #0
 800cf36:	f7f3 f9cf 	bl	80002d8 <__aeabi_dsub>
 800cf3a:	ec41 0b10 	vmov	d0, r0, r1
 800cf3e:	ee10 3a90 	vmov	r3, s1
 800cf42:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cf46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf4a:	da2b      	bge.n	800cfa4 <__ieee754_pow+0x9cc>
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	f000 f877 	bl	800d040 <scalbn>
 800cf52:	ec51 0b10 	vmov	r0, r1, d0
 800cf56:	ec53 2b18 	vmov	r2, r3, d8
 800cf5a:	f7ff bbee 	b.w	800c73a <__ieee754_pow+0x162>
 800cf5e:	4b2f      	ldr	r3, [pc, #188]	; (800d01c <__ieee754_pow+0xa44>)
 800cf60:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cf64:	429e      	cmp	r6, r3
 800cf66:	f77f af0d 	ble.w	800cd84 <__ieee754_pow+0x7ac>
 800cf6a:	4b2d      	ldr	r3, [pc, #180]	; (800d020 <__ieee754_pow+0xa48>)
 800cf6c:	440b      	add	r3, r1
 800cf6e:	4303      	orrs	r3, r0
 800cf70:	d009      	beq.n	800cf86 <__ieee754_pow+0x9ae>
 800cf72:	ec51 0b18 	vmov	r0, r1, d8
 800cf76:	2200      	movs	r2, #0
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f7f3 fdd7 	bl	8000b2c <__aeabi_dcmplt>
 800cf7e:	3800      	subs	r0, #0
 800cf80:	bf18      	it	ne
 800cf82:	2001      	movne	r0, #1
 800cf84:	e448      	b.n	800c818 <__ieee754_pow+0x240>
 800cf86:	4622      	mov	r2, r4
 800cf88:	462b      	mov	r3, r5
 800cf8a:	f7f3 f9a5 	bl	80002d8 <__aeabi_dsub>
 800cf8e:	4642      	mov	r2, r8
 800cf90:	464b      	mov	r3, r9
 800cf92:	f7f3 fddf 	bl	8000b54 <__aeabi_dcmpge>
 800cf96:	2800      	cmp	r0, #0
 800cf98:	f43f aef4 	beq.w	800cd84 <__ieee754_pow+0x7ac>
 800cf9c:	e7e9      	b.n	800cf72 <__ieee754_pow+0x99a>
 800cf9e:	f04f 0a00 	mov.w	sl, #0
 800cfa2:	e71a      	b.n	800cdda <__ieee754_pow+0x802>
 800cfa4:	ec51 0b10 	vmov	r0, r1, d0
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	e7d4      	b.n	800cf56 <__ieee754_pow+0x97e>
 800cfac:	491a      	ldr	r1, [pc, #104]	; (800d018 <__ieee754_pow+0xa40>)
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7ff bb31 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfb4:	2000      	movs	r0, #0
 800cfb6:	2100      	movs	r1, #0
 800cfb8:	f7ff bb2d 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfbc:	4630      	mov	r0, r6
 800cfbe:	4639      	mov	r1, r7
 800cfc0:	f7ff bb29 	b.w	800c616 <__ieee754_pow+0x3e>
 800cfc4:	9204      	str	r2, [sp, #16]
 800cfc6:	f7ff bb7b 	b.w	800c6c0 <__ieee754_pow+0xe8>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	f7ff bb65 	b.w	800c69a <__ieee754_pow+0xc2>
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	3fe62e43 	.word	0x3fe62e43
 800cfd8:	fefa39ef 	.word	0xfefa39ef
 800cfdc:	3fe62e42 	.word	0x3fe62e42
 800cfe0:	0ca86c39 	.word	0x0ca86c39
 800cfe4:	be205c61 	.word	0xbe205c61
 800cfe8:	72bea4d0 	.word	0x72bea4d0
 800cfec:	3e663769 	.word	0x3e663769
 800cff0:	c5d26bf1 	.word	0xc5d26bf1
 800cff4:	3ebbbd41 	.word	0x3ebbbd41
 800cff8:	af25de2c 	.word	0xaf25de2c
 800cffc:	3f11566a 	.word	0x3f11566a
 800d000:	16bebd93 	.word	0x16bebd93
 800d004:	3f66c16c 	.word	0x3f66c16c
 800d008:	5555553e 	.word	0x5555553e
 800d00c:	3fc55555 	.word	0x3fc55555
 800d010:	3fe00000 	.word	0x3fe00000
 800d014:	fff00000 	.word	0xfff00000
 800d018:	3ff00000 	.word	0x3ff00000
 800d01c:	4090cbff 	.word	0x4090cbff
 800d020:	3f6f3400 	.word	0x3f6f3400
 800d024:	652b82fe 	.word	0x652b82fe
 800d028:	3c971547 	.word	0x3c971547

0800d02c <fabs>:
 800d02c:	ec51 0b10 	vmov	r0, r1, d0
 800d030:	ee10 2a10 	vmov	r2, s0
 800d034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d038:	ec43 2b10 	vmov	d0, r2, r3
 800d03c:	4770      	bx	lr
	...

0800d040 <scalbn>:
 800d040:	b570      	push	{r4, r5, r6, lr}
 800d042:	ec55 4b10 	vmov	r4, r5, d0
 800d046:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800d04a:	4606      	mov	r6, r0
 800d04c:	462b      	mov	r3, r5
 800d04e:	b999      	cbnz	r1, 800d078 <scalbn+0x38>
 800d050:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d054:	4323      	orrs	r3, r4
 800d056:	d03f      	beq.n	800d0d8 <scalbn+0x98>
 800d058:	4b35      	ldr	r3, [pc, #212]	; (800d130 <scalbn+0xf0>)
 800d05a:	4629      	mov	r1, r5
 800d05c:	ee10 0a10 	vmov	r0, s0
 800d060:	2200      	movs	r2, #0
 800d062:	f7f3 faf1 	bl	8000648 <__aeabi_dmul>
 800d066:	4b33      	ldr	r3, [pc, #204]	; (800d134 <scalbn+0xf4>)
 800d068:	429e      	cmp	r6, r3
 800d06a:	4604      	mov	r4, r0
 800d06c:	460d      	mov	r5, r1
 800d06e:	da10      	bge.n	800d092 <scalbn+0x52>
 800d070:	a327      	add	r3, pc, #156	; (adr r3, 800d110 <scalbn+0xd0>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	e01f      	b.n	800d0b8 <scalbn+0x78>
 800d078:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d07c:	4291      	cmp	r1, r2
 800d07e:	d10c      	bne.n	800d09a <scalbn+0x5a>
 800d080:	ee10 2a10 	vmov	r2, s0
 800d084:	4620      	mov	r0, r4
 800d086:	4629      	mov	r1, r5
 800d088:	f7f3 f928 	bl	80002dc <__adddf3>
 800d08c:	4604      	mov	r4, r0
 800d08e:	460d      	mov	r5, r1
 800d090:	e022      	b.n	800d0d8 <scalbn+0x98>
 800d092:	460b      	mov	r3, r1
 800d094:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d098:	3936      	subs	r1, #54	; 0x36
 800d09a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d09e:	4296      	cmp	r6, r2
 800d0a0:	dd0d      	ble.n	800d0be <scalbn+0x7e>
 800d0a2:	2d00      	cmp	r5, #0
 800d0a4:	a11c      	add	r1, pc, #112	; (adr r1, 800d118 <scalbn+0xd8>)
 800d0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0aa:	da02      	bge.n	800d0b2 <scalbn+0x72>
 800d0ac:	a11c      	add	r1, pc, #112	; (adr r1, 800d120 <scalbn+0xe0>)
 800d0ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0b2:	a319      	add	r3, pc, #100	; (adr r3, 800d118 <scalbn+0xd8>)
 800d0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b8:	f7f3 fac6 	bl	8000648 <__aeabi_dmul>
 800d0bc:	e7e6      	b.n	800d08c <scalbn+0x4c>
 800d0be:	1872      	adds	r2, r6, r1
 800d0c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d0c4:	428a      	cmp	r2, r1
 800d0c6:	dcec      	bgt.n	800d0a2 <scalbn+0x62>
 800d0c8:	2a00      	cmp	r2, #0
 800d0ca:	dd08      	ble.n	800d0de <scalbn+0x9e>
 800d0cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d0d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d0d8:	ec45 4b10 	vmov	d0, r4, r5
 800d0dc:	bd70      	pop	{r4, r5, r6, pc}
 800d0de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d0e2:	da08      	bge.n	800d0f6 <scalbn+0xb6>
 800d0e4:	2d00      	cmp	r5, #0
 800d0e6:	a10a      	add	r1, pc, #40	; (adr r1, 800d110 <scalbn+0xd0>)
 800d0e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0ec:	dac0      	bge.n	800d070 <scalbn+0x30>
 800d0ee:	a10e      	add	r1, pc, #56	; (adr r1, 800d128 <scalbn+0xe8>)
 800d0f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d0f4:	e7bc      	b.n	800d070 <scalbn+0x30>
 800d0f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d0fa:	3236      	adds	r2, #54	; 0x36
 800d0fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d100:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d104:	4620      	mov	r0, r4
 800d106:	4b0c      	ldr	r3, [pc, #48]	; (800d138 <scalbn+0xf8>)
 800d108:	2200      	movs	r2, #0
 800d10a:	e7d5      	b.n	800d0b8 <scalbn+0x78>
 800d10c:	f3af 8000 	nop.w
 800d110:	c2f8f359 	.word	0xc2f8f359
 800d114:	01a56e1f 	.word	0x01a56e1f
 800d118:	8800759c 	.word	0x8800759c
 800d11c:	7e37e43c 	.word	0x7e37e43c
 800d120:	8800759c 	.word	0x8800759c
 800d124:	fe37e43c 	.word	0xfe37e43c
 800d128:	c2f8f359 	.word	0xc2f8f359
 800d12c:	81a56e1f 	.word	0x81a56e1f
 800d130:	43500000 	.word	0x43500000
 800d134:	ffff3cb0 	.word	0xffff3cb0
 800d138:	3c900000 	.word	0x3c900000

0800d13c <with_errno>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	4604      	mov	r4, r0
 800d140:	460d      	mov	r5, r1
 800d142:	4616      	mov	r6, r2
 800d144:	f7fd fa58 	bl	800a5f8 <__errno>
 800d148:	4629      	mov	r1, r5
 800d14a:	6006      	str	r6, [r0, #0]
 800d14c:	4620      	mov	r0, r4
 800d14e:	bd70      	pop	{r4, r5, r6, pc}

0800d150 <xflow>:
 800d150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d152:	4614      	mov	r4, r2
 800d154:	461d      	mov	r5, r3
 800d156:	b108      	cbz	r0, 800d15c <xflow+0xc>
 800d158:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d15c:	e9cd 2300 	strd	r2, r3, [sp]
 800d160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d164:	4620      	mov	r0, r4
 800d166:	4629      	mov	r1, r5
 800d168:	f7f3 fa6e 	bl	8000648 <__aeabi_dmul>
 800d16c:	2222      	movs	r2, #34	; 0x22
 800d16e:	b003      	add	sp, #12
 800d170:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d174:	f7ff bfe2 	b.w	800d13c <with_errno>

0800d178 <__math_uflow>:
 800d178:	b508      	push	{r3, lr}
 800d17a:	2200      	movs	r2, #0
 800d17c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d180:	f7ff ffe6 	bl	800d150 <xflow>
 800d184:	ec41 0b10 	vmov	d0, r0, r1
 800d188:	bd08      	pop	{r3, pc}

0800d18a <__math_oflow>:
 800d18a:	b508      	push	{r3, lr}
 800d18c:	2200      	movs	r2, #0
 800d18e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d192:	f7ff ffdd 	bl	800d150 <xflow>
 800d196:	ec41 0b10 	vmov	d0, r0, r1
 800d19a:	bd08      	pop	{r3, pc}

0800d19c <_init>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	bf00      	nop
 800d1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a2:	bc08      	pop	{r3}
 800d1a4:	469e      	mov	lr, r3
 800d1a6:	4770      	bx	lr

0800d1a8 <_fini>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	bf00      	nop
 800d1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ae:	bc08      	pop	{r3}
 800d1b0:	469e      	mov	lr, r3
 800d1b2:	4770      	bx	lr
