
MX90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800d148  0800d148  0001d148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5a0  0800d5a0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5a0  0800d5a0  0001d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5a8  0800d5a8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5a8  0800d5a8  0001d5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5ac  0800d5ac  0001d5ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d5b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020d4  200001e8  0800d798  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200022bc  0800d798  000222bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000162af  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f06  00000000  00000000  0003650a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001410  00000000  00000000  00039410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f93  00000000  00000000  0003a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e45  00000000  00000000  0003b7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001836e  00000000  00000000  0005e5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de210  00000000  00000000  00076966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006978  00000000  00000000  00154b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0015b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d12c 	.word	0x0800d12c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800d12c 	.word	0x0800d12c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(const I2C_TypeDef *I2Cx)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXE) == (I2C_ISR_TXE)) ? 1UL : 0UL);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <LL_I2C_IsActiveFlag_TXE+0x18>
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e000      	b.n	8000fee <LL_I2C_IsActiveFlag_TXE+0x1a>
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	2b04      	cmp	r3, #4
 800100c:	d101      	bne.n	8001012 <LL_I2C_IsActiveFlag_RXNE+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0320 	and.w	r3, r3, #32
 8001030:	2b20      	cmp	r3, #32
 8001032:	d101      	bne.n	8001038 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001034:	2301      	movs	r3, #1
 8001036:	e000      	b.n	800103a <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_I2C_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_I2C_IsActiveFlag_TC
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TC(const I2C_TypeDef *I2Cx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TC) == (I2C_ISR_TC)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001056:	2b40      	cmp	r3, #64	; 0x40
 8001058:	d101      	bne.n	800105e <LL_I2C_IsActiveFlag_TC+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_I2C_IsActiveFlag_TC+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll ISR          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(const I2C_TypeDef *I2Cx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_BUSY) == (I2C_ISR_BUSY)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800107c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001080:	d101      	bne.n	8001086 <LL_I2C_IsActiveFlag_BUSY+0x1a>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_I2C_IsActiveFlag_BUSY+0x1c>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	f043 0210 	orr.w	r2, r3, #16
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	61da      	str	r2, [r3, #28]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69db      	ldr	r3, [r3, #28]
 80010c0:	f043 0220 	orr.w	r2, r3, #32
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	61da      	str	r2, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010ee:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
                             ((uint32_t)SlaveAddrSize & I2C_CR2_ADD10) | \
 80010f8:	431a      	orrs	r2, r3
                             (((uint32_t)TransferSize << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80010fa:	6a3b      	ldr	r3, [r7, #32]
 80010fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)SlaveAddr & I2C_CR2_SADD) | \
 80010fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001100:	4313      	orrs	r3, r2
 8001102:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001106:	617b      	str	r3, [r7, #20]
                             (uint32_t)EndMode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	0d5b      	lsrs	r3, r3, #21
 8001110:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <LL_I2C_HandleTransfer+0x5c>)
 8001116:	430b      	orrs	r3, r1
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	431a      	orrs	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             tmp);
}
 8001124:	bf00      	nop
 8001126:	371c      	adds	r7, #28
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	03ff7bff 	.word	0x03ff7bff

08001134 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	b2db      	uxtb	r3, r3
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
 8001156:	460b      	mov	r3, r1
 8001158:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800115a:	78fa      	ldrb	r2, [r7, #3]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <MLX90640_I2CInit>:
#include "main.h"

//I2C_HandleTypeDef _hi2c;

void MLX90640_I2CInit(/*I2C_HandleTypeDef hi2c*/)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
//	_hi2c = hi2c;
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <MLX90640_I2CReadWord>:

uint16_t MLX90640_I2CReadWord(uint8_t slaveAddress, uint16_t start_address)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	4603      	mov	r3, r0
 8001184:	460a      	mov	r2, r1
 8001186:	71fb      	strb	r3, [r7, #7]
 8001188:	4613      	mov	r3, r2
 800118a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Mem_Read(&_hi2c, slaveAddress, start_address, 2, buf, 2, 100);
	return ((buf[0] << 8) | (buf[1] & 0xFF));
*/
	volatile uint8_t reg_m,reg_l,dat_m,dat_l;

	reg_m = (uint8_t) ((start_address & 0xFF00) >> 8);	//Address MSB
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (start_address & 0x00FF); 	    //Address LSB
 8001196:	88bb      	ldrh	r3, [r7, #4]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	73bb      	strb	r3, [r7, #14]


	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {};
 800119c:	bf00      	nop
 800119e:	483a      	ldr	r0, [pc, #232]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011a0:	f7ff ff64 	bl	800106c <LL_I2C_IsActiveFlag_BUSY>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1f9      	bne.n	800119e <MLX90640_I2CReadWord+0x22>

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 80011aa:	79f9      	ldrb	r1, [r7, #7]
 80011ac:	4b37      	ldr	r3, [pc, #220]	; (800128c <MLX90640_I2CReadWord+0x110>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2300      	movs	r3, #0
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2302      	movs	r3, #2
 80011b6:	2200      	movs	r2, #0
 80011b8:	4833      	ldr	r0, [pc, #204]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011ba:	f7ff ff8b 	bl	80010d4 <LL_I2C_HandleTransfer>
    		LL_I2C_MODE_SOFTEND, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXE(I2C1)){};
 80011be:	bf00      	nop
 80011c0:	4831      	ldr	r0, [pc, #196]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011c2:	f7ff ff07 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f9      	beq.n	80011c0 <MLX90640_I2CReadWord+0x44>

    LL_I2C_TransmitData8(I2C1, reg_m);
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	4619      	mov	r1, r3
 80011d2:	482d      	ldr	r0, [pc, #180]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011d4:	f7ff ffbb 	bl	800114e <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 80011d8:	bf00      	nop
 80011da:	482b      	ldr	r0, [pc, #172]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011dc:	f7ff fefa 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d0f9      	beq.n	80011da <MLX90640_I2CReadWord+0x5e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 80011e6:	7bbb      	ldrb	r3, [r7, #14]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	4826      	ldr	r0, [pc, #152]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011ee:	f7ff ffae 	bl	800114e <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TC(I2C1)) {};
 80011f2:	bf00      	nop
 80011f4:	4824      	ldr	r0, [pc, #144]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 80011f6:	f7ff ff26 	bl	8001046 <LL_I2C_IsActiveFlag_TC>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d0f9      	beq.n	80011f4 <MLX90640_I2CReadWord+0x78>

    LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2,
 8001200:	79f9      	ldrb	r1, [r7, #7]
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <MLX90640_I2CReadWord+0x114>)
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2302      	movs	r3, #2
 800120e:	2200      	movs	r2, #0
 8001210:	481d      	ldr	r0, [pc, #116]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001212:	f7ff ff5f 	bl	80010d4 <LL_I2C_HandleTransfer>
                              I2C_CR2_AUTOEND ,LL_I2C_GENERATE_START_READ);

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 8001216:	bf00      	nop
 8001218:	481b      	ldr	r0, [pc, #108]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 800121a:	f7ff feee 	bl	8000ffa <LL_I2C_IsActiveFlag_RXNE>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f9      	beq.n	8001218 <MLX90640_I2CReadWord+0x9c>

    dat_m = LL_I2C_ReceiveData8(I2C1);
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001226:	f7ff ff85 	bl	8001134 <LL_I2C_ReceiveData8>
 800122a:	4603      	mov	r3, r0
 800122c:	737b      	strb	r3, [r7, #13]

    while (!LL_I2C_IsActiveFlag_RXNE(I2C1)) {};
 800122e:	bf00      	nop
 8001230:	4815      	ldr	r0, [pc, #84]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001232:	f7ff fee2 	bl	8000ffa <LL_I2C_IsActiveFlag_RXNE>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d0f9      	beq.n	8001230 <MLX90640_I2CReadWord+0xb4>

    dat_l = LL_I2C_ReceiveData8(I2C1);
 800123c:	4812      	ldr	r0, [pc, #72]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 800123e:	f7ff ff79 	bl	8001134 <LL_I2C_ReceiveData8>
 8001242:	4603      	mov	r3, r0
 8001244:	733b      	strb	r3, [r7, #12]

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 8001246:	bf00      	nop
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 800124a:	f7ff fee9 	bl	8001020 <LL_I2C_IsActiveFlag_STOP>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0f9      	beq.n	8001248 <MLX90640_I2CReadWord+0xcc>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001256:	f7ff ff1d 	bl	8001094 <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 800125a:	480b      	ldr	r0, [pc, #44]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 800125c:	f7ff ff2a 	bl	80010b4 <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4908      	ldr	r1, [pc, #32]	; (8001288 <MLX90640_I2CReadWord+0x10c>)
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MLX90640_I2CReadWord+0x118>)
 8001268:	4013      	ands	r3, r2
 800126a:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));

	return ((uint16_t) (dat_m << 8)) | ((uint16_t)((dat_l) & 0x00FF));
 800126c:	7b7b      	ldrb	r3, [r7, #13]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	b29b      	uxth	r3, r3
 8001272:	021b      	lsls	r3, r3, #8
 8001274:	b29a      	uxth	r2, r3
 8001276:	7b3b      	ldrb	r3, [r7, #12]
 8001278:	b2db      	uxtb	r3, r3
 800127a:	b29b      	uxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	b29b      	uxth	r3, r3

}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	40005400 	.word	0x40005400
 800128c:	80002000 	.word	0x80002000
 8001290:	80002400 	.word	0x80002400
 8001294:	fe00e800 	.word	0xfe00e800

08001298 <MLX90640_I2CRead>:
{
	return 0;
}

int MLX90640_I2CRead(uint8_t slaveAddr,uint16_t startAddress, uint16_t nMemAddressRead, uint16_t *data)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4603      	mov	r3, r0
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	460b      	mov	r3, r1
 80012a6:	81bb      	strh	r3, [r7, #12]
 80012a8:	4613      	mov	r3, r2
 80012aa:	817b      	strh	r3, [r7, #10]
	slaveAddr <<= 1;
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]

	uint16_t temp_address = startAddress;
 80012b2:	89bb      	ldrh	r3, [r7, #12]
 80012b4:	83fb      	strh	r3, [r7, #30]
	uint16_t temp_data;
	for(int i=0; i < nMemAddressRead; i++){
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	e013      	b.n	80012e4 <MLX90640_I2CRead+0x4c>

		temp_data = MLX90640_I2CReadWord(slaveAddr,temp_address);
 80012bc:	8bfa      	ldrh	r2, [r7, #30]
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4611      	mov	r1, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff ff5a 	bl	800117c <MLX90640_I2CReadWord>
 80012c8:	4603      	mov	r3, r0
 80012ca:	82fb      	strh	r3, [r7, #22]
		temp_address++;
 80012cc:	8bfb      	ldrh	r3, [r7, #30]
 80012ce:	3301      	adds	r3, #1
 80012d0:	83fb      	strh	r3, [r7, #30]
		*(data + i) = temp_data;
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	8afa      	ldrh	r2, [r7, #22]
 80012dc:	801a      	strh	r2, [r3, #0]
	for(int i=0; i < nMemAddressRead; i++){
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	3301      	adds	r3, #1
 80012e2:	61bb      	str	r3, [r7, #24]
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbe7      	blt.n	80012bc <MLX90640_I2CRead+0x24>

	}
	return 0;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3720      	adds	r7, #32
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <MLX90640_I2CWrite>:

int MLX90640_I2CWrite(uint8_t slaveAddr,uint16_t writeAddress, uint16_t data)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af02      	add	r7, sp, #8
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
 8001302:	460b      	mov	r3, r1
 8001304:	80bb      	strh	r3, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	807b      	strh	r3, [r7, #2]
	buf[0] = (data >> 8) & 0xFF;
	slaveAddr <<= 1;
	HAL_I2C_Mem_Write(&_hi2c, slaveAddr, writeAddress, 2, buf, 2, 100);
	return 0;
*/
	slaveAddr <<= 1;
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_m,reg_l,dat_m,dat_l;
	reg_m = (uint8_t) ((writeAddress & 0xFF00) >> 8);			//Address MSB
 8001310:	88bb      	ldrh	r3, [r7, #4]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	b29b      	uxth	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
	reg_l = (uint8_t) (writeAddress & 0x00FF); 				//Address LSB
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	73bb      	strb	r3, [r7, #14]
	dat_m = (uint8_t) ((data & 0xFF00) >> 8);	// Data MSB
 800131c:	887b      	ldrh	r3, [r7, #2]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	737b      	strb	r3, [r7, #13]
	dat_l = (uint8_t) (data & 0x00FF);			//Data LSB
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	733b      	strb	r3, [r7, #12]

	while (LL_I2C_IsActiveFlag_BUSY(I2C1)) {};
 8001328:	bf00      	nop
 800132a:	482c      	ldr	r0, [pc, #176]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 800132c:	f7ff fe9e 	bl	800106c <LL_I2C_IsActiveFlag_BUSY>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f9      	bne.n	800132a <MLX90640_I2CWrite+0x32>


    LL_I2C_HandleTransfer(I2C1, slaveAddr, LL_I2C_ADDRSLAVE_7BIT, 4,
 8001336:	79f9      	ldrb	r1, [r7, #7]
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <MLX90640_I2CWrite+0xe8>)
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	2304      	movs	r3, #4
 8001344:	2200      	movs	r2, #0
 8001346:	4825      	ldr	r0, [pc, #148]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001348:	f7ff fec4 	bl	80010d4 <LL_I2C_HandleTransfer>
    		LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);


    while (!LL_I2C_IsActiveFlag_TXE(I2C1)){};
 800134c:	bf00      	nop
 800134e:	4823      	ldr	r0, [pc, #140]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001350:	f7ff fe40 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f9      	beq.n	800134e <MLX90640_I2CWrite+0x56>

    LL_I2C_TransmitData8(I2C1, reg_m);
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	4619      	mov	r1, r3
 800135e:	481f      	ldr	r0, [pc, #124]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001360:	f7ff fef5 	bl	800114e <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 8001364:	bf00      	nop
 8001366:	481d      	ldr	r0, [pc, #116]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001368:	f7ff fe34 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <MLX90640_I2CWrite+0x6e>

    LL_I2C_TransmitData8(I2C1, reg_l);
 8001372:	7bbb      	ldrb	r3, [r7, #14]
 8001374:	4619      	mov	r1, r3
 8001376:	4819      	ldr	r0, [pc, #100]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001378:	f7ff fee9 	bl	800114e <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 800137c:	bf00      	nop
 800137e:	4817      	ldr	r0, [pc, #92]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001380:	f7ff fe28 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d0f9      	beq.n	800137e <MLX90640_I2CWrite+0x86>

    LL_I2C_TransmitData8(I2C1, dat_m);
 800138a:	7b7b      	ldrb	r3, [r7, #13]
 800138c:	4619      	mov	r1, r3
 800138e:	4813      	ldr	r0, [pc, #76]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001390:	f7ff fedd 	bl	800114e <LL_I2C_TransmitData8>

    while (!LL_I2C_IsActiveFlag_TXE(I2C1)) {};
 8001394:	bf00      	nop
 8001396:	4811      	ldr	r0, [pc, #68]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 8001398:	f7ff fe1c 	bl	8000fd4 <LL_I2C_IsActiveFlag_TXE>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f9      	beq.n	8001396 <MLX90640_I2CWrite+0x9e>

    LL_I2C_TransmitData8(I2C1, dat_l);
 80013a2:	7b3b      	ldrb	r3, [r7, #12]
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013a8:	f7ff fed1 	bl	800114e <LL_I2C_TransmitData8>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically
     * generated.
     * Wait until STOPF flag is reset */
    while (!LL_I2C_IsActiveFlag_STOP(I2C1)) {};
 80013ac:	bf00      	nop
 80013ae:	480b      	ldr	r0, [pc, #44]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013b0:	f7ff fe36 	bl	8001020 <LL_I2C_IsActiveFlag_STOP>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f9      	beq.n	80013ae <MLX90640_I2CWrite+0xb6>

	/* Clear NACKF Flag */
    LL_I2C_ClearFlag_NACK(I2C1);
 80013ba:	4808      	ldr	r0, [pc, #32]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013bc:	f7ff fe6a 	bl	8001094 <LL_I2C_ClearFlag_NACK>

    /* Clear STOP Flag */
    LL_I2C_ClearFlag_STOP(I2C1);
 80013c0:	4806      	ldr	r0, [pc, #24]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013c2:	f7ff fe77 	bl	80010b4 <LL_I2C_ClearFlag_STOP>

    /* Clear Configuration Register 2 */
    I2C1->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R |
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4904      	ldr	r1, [pc, #16]	; (80013dc <MLX90640_I2CWrite+0xe4>)
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <MLX90640_I2CWrite+0xec>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
    		I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN));


	return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40005400 	.word	0x40005400
 80013e0:	80002000 	.word	0x80002000
 80013e4:	fe00e800 	.word	0xfe00e800

080013e8 <MLX90640_DumpEE>:
static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params);
static int ValidateFrameData(uint16_t *frameData);
static int ValidateAuxData(uint16_t *auxData);

int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, MLX90640_EEPROM_START_ADDRESS, MLX90640_EEPROM_DUMP_NUM, eeData);
 80013f4:	79f8      	ldrb	r0, [r7, #7]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 7250 	mov.w	r2, #832	; 0x340
 80013fc:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8001400:	f7ff ff4a 	bl	8001298 <MLX90640_I2CRead>
 8001404:	4603      	mov	r3, r0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <MLX90640_GetFrameData>:

    return MLX90640_NO_ERROR;
}

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b0a6      	sub	sp, #152	; 0x98
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	6039      	str	r1, [r7, #0]
 8001418:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8001420:	2301      	movs	r3, #1
 8001422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    uint16_t data[64];
    uint8_t cnt = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

    while(dataReady == 0)
 800142c:	e016      	b.n	800145c <MLX90640_GetFrameData+0x4e>
    {
        error = MLX90640_I2CRead(slaveAddr, MLX90640_STATUS_REG, 1, &statusRegister);
 800142e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001432:	79f8      	ldrb	r0, [r7, #7]
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800143a:	f7ff ff2d 	bl	8001298 <MLX90640_I2CRead>
 800143e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
        if(error != MLX90640_NO_ERROR)
 8001442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001446:	2b00      	cmp	r3, #0
 8001448:	d002      	beq.n	8001450 <MLX90640_GetFrameData+0x42>
        {
            return error;
 800144a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800144e:	e093      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
        }
        //dataReady = statusRegister & 0x0008;
        dataReady = MLX90640_GET_DATA_READY(statusRegister);
 8001450:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001454:	f003 0308 	and.w	r3, r3, #8
 8001458:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
    while(dataReady == 0)
 800145c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001460:	2b00      	cmp	r3, #0
 8001462:	d0e4      	beq.n	800142e <MLX90640_GetFrameData+0x20>
    }

    error = MLX90640_I2CWrite(slaveAddr, MLX90640_STATUS_REG, MLX90640_INIT_STATUS_VALUE);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff43 	bl	80012f8 <MLX90640_I2CWrite>
 8001472:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == -MLX90640_I2C_NACK_ERROR)
 8001476:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800147e:	d102      	bne.n	8001486 <MLX90640_GetFrameData+0x78>
    {
        return error;
 8001480:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001484:	e078      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_PIXEL_DATA_START_ADDRESS, MLX90640_PIXEL_NUM, frameData);
 8001486:	79f8      	ldrb	r0, [r7, #7]
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800148e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001492:	f7ff ff01 	bl	8001298 <MLX90640_I2CRead>
 8001496:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 800149a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d002      	beq.n	80014a8 <MLX90640_GetFrameData+0x9a>
    {
        return error;
 80014a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014a6:	e067      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_AUX_DATA_START_ADDRESS, MLX90640_AUX_NUM, data);
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	79f8      	ldrb	r0, [r7, #7]
 80014ae:	2240      	movs	r2, #64	; 0x40
 80014b0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80014b4:	f7ff fef0 	bl	8001298 <MLX90640_I2CRead>
 80014b8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error != MLX90640_NO_ERROR)
 80014bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <MLX90640_GetFrameData+0xbc>
    {
        return error;
 80014c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014c8:	e056      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
    }

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80014ca:	f107 038e 	add.w	r3, r7, #142	; 0x8e
 80014ce:	79f8      	ldrb	r0, [r7, #7]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f248 010d 	movw	r1, #32781	; 0x800d
 80014d6:	f7ff fedf 	bl	8001298 <MLX90640_I2CRead>
 80014da:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    frameData[832] = controlRegister1;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 80014e4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80014e8:	801a      	strh	r2, [r3, #0]
    //frameData[833] = statusRegister & 0x0001;
    frameData[833] = MLX90640_GET_FRAME(statusRegister);
 80014ea:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80014f4:	f002 0201 	and.w	r2, r2, #1
 80014f8:	b292      	uxth	r2, r2
 80014fa:	801a      	strh	r2, [r3, #0]

    if(error != MLX90640_NO_ERROR)
 80014fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <MLX90640_GetFrameData+0xfc>
    {
        return error;
 8001504:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001508:	e036      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
    }

    error = ValidateAuxData(data);
 800150a:	f107 030c 	add.w	r3, r7, #12
 800150e:	4618      	mov	r0, r3
 8001510:	f000 f867 	bl	80015e2 <ValidateAuxData>
 8001514:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if(error == MLX90640_NO_ERROR)
 8001518:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800151c:	2b00      	cmp	r3, #0
 800151e:	d11b      	bne.n	8001558 <MLX90640_GetFrameData+0x14a>
    {
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001520:	2300      	movs	r3, #0
 8001522:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001526:	e013      	b.n	8001550 <MLX90640_GetFrameData+0x142>
        {
            frameData[cnt+MLX90640_PIXEL_NUM] = data[cnt];
 8001528:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800152c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001530:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8001534:	0052      	lsls	r2, r2, #1
 8001536:	6839      	ldr	r1, [r7, #0]
 8001538:	440a      	add	r2, r1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	3398      	adds	r3, #152	; 0x98
 800153e:	443b      	add	r3, r7
 8001540:	f833 3c8c 	ldrh.w	r3, [r3, #-140]
 8001544:	8013      	strh	r3, [r2, #0]
        for(cnt=0; cnt<MLX90640_AUX_NUM; cnt++)
 8001546:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800154a:	3301      	adds	r3, #1
 800154c:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8001550:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001554:	2b3f      	cmp	r3, #63	; 0x3f
 8001556:	d9e7      	bls.n	8001528 <MLX90640_GetFrameData+0x11a>
        }
    }

    error = ValidateFrameData(frameData);
 8001558:	6838      	ldr	r0, [r7, #0]
 800155a:	f000 f811 	bl	8001580 <ValidateFrameData>
 800155e:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    if (error != MLX90640_NO_ERROR)
 8001562:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <MLX90640_GetFrameData+0x162>
    {
        return error;
 800156a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800156e:	e003      	b.n	8001578 <MLX90640_GetFrameData+0x16a>
    }

    return frameData[833];
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8001576:	881b      	ldrh	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3798      	adds	r7, #152	; 0x98
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <ValidateFrameData>:

static int ValidateFrameData(uint16_t *frameData)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
    uint8_t line = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 800158c:	2300      	movs	r3, #0
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	e01c      	b.n	80015cc <ValidateFrameData+0x4c>
    {
        if((frameData[i] == 0x7FFF) && (line%2 == frameData[833])) return -MLX90640_FRAME_DATA_ERROR;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d10d      	bne.n	80015c0 <ValidateFrameData+0x40>
 80015a4:	7bfb      	ldrb	r3, [r7, #15]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f203 6382 	addw	r3, r3, #1666	; 0x682
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d102      	bne.n	80015c0 <ValidateFrameData+0x40>
 80015ba:	f06f 0307 	mvn.w	r3, #7
 80015be:	e00a      	b.n	80015d6 <ValidateFrameData+0x56>
        line = line + 1;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	3301      	adds	r3, #1
 80015c4:	73fb      	strb	r3, [r7, #15]
    for(int i=0; i<MLX90640_PIXEL_NUM; i+=MLX90640_LINE_SIZE)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	3320      	adds	r3, #32
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80015d2:	dbde      	blt.n	8001592 <ValidateFrameData+0x12>
    }

    return MLX90640_NO_ERROR;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <ValidateAuxData>:

static int ValidateAuxData(uint16_t *auxData)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b089      	sub	sp, #36	; 0x24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]

    if(auxData[0] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d102      	bne.n	80015fc <ValidateAuxData+0x1a>
 80015f6:	f06f 0307 	mvn.w	r3, #7
 80015fa:	e07e      	b.n	80016fa <ValidateAuxData+0x118>

    for(int i=8; i<19; i++)
 80015fc:	2308      	movs	r3, #8
 80015fe:	61fb      	str	r3, [r7, #28]
 8001600:	e00e      	b.n	8001620 <ValidateAuxData+0x3e>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	881b      	ldrh	r3, [r3, #0]
 800160c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001610:	4293      	cmp	r3, r2
 8001612:	d102      	bne.n	800161a <ValidateAuxData+0x38>
 8001614:	f06f 0307 	mvn.w	r3, #7
 8001618:	e06f      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=8; i<19; i++)
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	3301      	adds	r3, #1
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	2b12      	cmp	r3, #18
 8001624:	dded      	ble.n	8001602 <ValidateAuxData+0x20>
    }

    for(int i=20; i<23; i++)
 8001626:	2314      	movs	r3, #20
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	e00e      	b.n	800164a <ValidateAuxData+0x68>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	4413      	add	r3, r2
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800163a:	4293      	cmp	r3, r2
 800163c:	d102      	bne.n	8001644 <ValidateAuxData+0x62>
 800163e:	f06f 0307 	mvn.w	r3, #7
 8001642:	e05a      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=20; i<23; i++)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	3301      	adds	r3, #1
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b16      	cmp	r3, #22
 800164e:	dded      	ble.n	800162c <ValidateAuxData+0x4a>
    }

    for(int i=24; i<33; i++)
 8001650:	2318      	movs	r3, #24
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	e00e      	b.n	8001674 <ValidateAuxData+0x92>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	881b      	ldrh	r3, [r3, #0]
 8001660:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <ValidateAuxData+0x8c>
 8001668:	f06f 0307 	mvn.w	r3, #7
 800166c:	e045      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=24; i<33; i++)
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	3301      	adds	r3, #1
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2b20      	cmp	r3, #32
 8001678:	dded      	ble.n	8001656 <ValidateAuxData+0x74>
    }

    for(int i=40; i<51; i++)
 800167a:	2328      	movs	r3, #40	; 0x28
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	e00e      	b.n	800169e <ValidateAuxData+0xbc>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	4413      	add	r3, r2
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800168e:	4293      	cmp	r3, r2
 8001690:	d102      	bne.n	8001698 <ValidateAuxData+0xb6>
 8001692:	f06f 0307 	mvn.w	r3, #7
 8001696:	e030      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=40; i<51; i++)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	3301      	adds	r3, #1
 800169c:	613b      	str	r3, [r7, #16]
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b32      	cmp	r3, #50	; 0x32
 80016a2:	dded      	ble.n	8001680 <ValidateAuxData+0x9e>
    }

    for(int i=52; i<55; i++)
 80016a4:	2334      	movs	r3, #52	; 0x34
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	e00e      	b.n	80016c8 <ValidateAuxData+0xe6>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	881b      	ldrh	r3, [r3, #0]
 80016b4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <ValidateAuxData+0xe0>
 80016bc:	f06f 0307 	mvn.w	r3, #7
 80016c0:	e01b      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=52; i<55; i++)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3301      	adds	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2b36      	cmp	r3, #54	; 0x36
 80016cc:	dded      	ble.n	80016aa <ValidateAuxData+0xc8>
    }

    for(int i=56; i<64; i++)
 80016ce:	2338      	movs	r3, #56	; 0x38
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	e00e      	b.n	80016f2 <ValidateAuxData+0x110>
    {
        if(auxData[i] == 0x7FFF) return -MLX90640_FRAME_DATA_ERROR;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d102      	bne.n	80016ec <ValidateAuxData+0x10a>
 80016e6:	f06f 0307 	mvn.w	r3, #7
 80016ea:	e006      	b.n	80016fa <ValidateAuxData+0x118>
    for(int i=56; i<64; i++)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b3f      	cmp	r3, #63	; 0x3f
 80016f6:	dded      	ble.n	80016d4 <ValidateAuxData+0xf2>
    }

    return MLX90640_NO_ERROR;
 80016f8:	2300      	movs	r3, #0

}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
    int error = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]

    ExtractVDDParameters(eeData, mlx90640);
 8001714:	6839      	ldr	r1, [r7, #0]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f001 f974 	bl	8002a04 <ExtractVDDParameters>
    ExtractPTATParameters(eeData, mlx90640);
 800171c:	6839      	ldr	r1, [r7, #0]
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f001 f99c 	bl	8002a5c <ExtractPTATParameters>
    ExtractGainParameters(eeData, mlx90640);
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f001 fa24 	bl	8002b74 <ExtractGainParameters>
    ExtractTgcParameters(eeData, mlx90640);
 800172c:	6839      	ldr	r1, [r7, #0]
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f001 fa32 	bl	8002b98 <ExtractTgcParameters>
    ExtractResolutionParameters(eeData, mlx90640);
 8001734:	6839      	ldr	r1, [r7, #0]
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f001 fa4a 	bl	8002bd0 <ExtractResolutionParameters>
    ExtractKsTaParameters(eeData, mlx90640);
 800173c:	6839      	ldr	r1, [r7, #0]
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f001 fa5e 	bl	8002c00 <ExtractKsTaParameters>
    ExtractKsToParameters(eeData, mlx90640);
 8001744:	6839      	ldr	r1, [r7, #0]
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f001 fa78 	bl	8002c3c <ExtractKsToParameters>
    ExtractCPParameters(eeData, mlx90640);
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f002 fd46 	bl	80041e0 <ExtractCPParameters>
    ExtractAlphaParameters(eeData, mlx90640);
 8001754:	6839      	ldr	r1, [r7, #0]
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f001 fb2e 	bl	8002db8 <ExtractAlphaParameters>
    ExtractOffsetParameters(eeData, mlx90640);
 800175c:	6839      	ldr	r1, [r7, #0]
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f001 feb2 	bl	80034c8 <ExtractOffsetParameters>
    ExtractKtaPixelParameters(eeData, mlx90640);
 8001764:	6839      	ldr	r1, [r7, #0]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f002 f8ea 	bl	8003940 <ExtractKtaPixelParameters>
    ExtractKvPixelParameters(eeData, mlx90640);
 800176c:	6839      	ldr	r1, [r7, #0]
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f002 fb2e 	bl	8003dd0 <ExtractKvPixelParameters>
    ExtractCILCParameters(eeData, mlx90640);
 8001774:	6839      	ldr	r1, [r7, #0]
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f002 fe6e 	bl	8004458 <ExtractCILCParameters>
    error = ExtractDeviatingPixels(eeData, mlx90640);
 800177c:	6839      	ldr	r1, [r7, #0]
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f002 ff0a 	bl	8004598 <ExtractDeviatingPixels>
 8001784:	60f8      	str	r0, [r7, #12]

    return error;
 8001786:	68fb      	ldr	r3, [r7, #12]

}
 8001788:	4618      	mov	r0, r3
 800178a:	3710      	adds	r7, #16
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    uint16_t value;
    int error;

    //value = (refreshRate & 0x07)<<7;
    value = ((uint16_t)refreshRate << MLX90640_CTRL_REFRESH_SHIFT);
 80017a0:	79bb      	ldrb	r3, [r7, #6]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	01db      	lsls	r3, r3, #7
 80017a6:	817b      	strh	r3, [r7, #10]
    value &= ~MLX90640_CTRL_REFRESH_MASK;
 80017a8:	897b      	ldrh	r3, [r7, #10]
 80017aa:	f403 7360 	and.w	r3, r3, #896	; 0x380
 80017ae:	817b      	strh	r3, [r7, #10]

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80017b0:	f107 0308 	add.w	r3, r7, #8
 80017b4:	79f8      	ldrb	r0, [r7, #7]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f248 010d 	movw	r1, #32781	; 0x800d
 80017bc:	f7ff fd6c 	bl	8001298 <MLX90640_I2CRead>
 80017c0:	60f8      	str	r0, [r7, #12]
    if(error == MLX90640_NO_ERROR)
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d10e      	bne.n	80017e6 <MLX90640_SetRefreshRate+0x56>
    {
        value = (controlRegister1 & MLX90640_CTRL_REFRESH_MASK) | value;
 80017c8:	893b      	ldrh	r3, [r7, #8]
 80017ca:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	897b      	ldrh	r3, [r7, #10]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	817b      	strh	r3, [r7, #10]
        error = MLX90640_I2CWrite(slaveAddr, MLX90640_CTRL_REG, value);
 80017d6:	897a      	ldrh	r2, [r7, #10]
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f248 010d 	movw	r1, #32781	; 0x800d
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fd8a 	bl	80012f8 <MLX90640_I2CWrite>
 80017e4:	60f8      	str	r0, [r7, #12]
    }

    return error;
 80017e6:	68fb      	ldr	r3, [r7, #12]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <MLX90640_GetCurMode>:
}

//------------------------------------------------------------------------------

int MLX90640_GetCurMode(uint8_t slaveAddr)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int modeRAM;
    int error;

    error = MLX90640_I2CRead(slaveAddr, MLX90640_CTRL_REG, 1, &controlRegister1);
 80017fa:	f107 030e 	add.w	r3, r7, #14
 80017fe:	79f8      	ldrb	r0, [r7, #7]
 8001800:	2201      	movs	r2, #1
 8001802:	f248 010d 	movw	r1, #32781	; 0x800d
 8001806:	f7ff fd47 	bl	8001298 <MLX90640_I2CRead>
 800180a:	6178      	str	r0, [r7, #20]
    if(error != 0)
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MLX90640_GetCurMode+0x26>
    {
        return error;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	e005      	b.n	8001822 <MLX90640_GetCurMode+0x32>
    }
    modeRAM = (controlRegister1 & MLX90640_CTRL_MEAS_MODE_MASK) >> MLX90640_CTRL_MEAS_MODE_SHIFT;
 8001816:	89fb      	ldrh	r3, [r7, #14]
 8001818:	0b1b      	lsrs	r3, r3, #12
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	613b      	str	r3, [r7, #16]

    return modeRAM;
 8001820:	693b      	ldr	r3, [r7, #16]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	0000      	movs	r0, r0
 800182c:	0000      	movs	r0, r0
	...

08001830 <MLX90640_CalculateTo>:

//------------------------------------------------------------------------------

void MLX90640_CalculateTo(uint16_t *frameData, const paramsMLX90640 *params, float emissivity, float tr, float *result)
{
 8001830:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001834:	b0a0      	sub	sp, #128	; 0x80
 8001836:	af00      	add	r7, sp, #0
 8001838:	6178      	str	r0, [r7, #20]
 800183a:	6139      	str	r1, [r7, #16]
 800183c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001840:	edc7 0a02 	vstr	s1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
    float kvScale;
    float alphaScale;
    float kta;
    float kv;

    subPage = frameData[833];
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 800184c:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    vdd = MLX90640_GetVdd(frameData, params);
 8001850:	6939      	ldr	r1, [r7, #16]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f000 fd04 	bl	8002260 <MLX90640_GetVdd>
 8001858:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
    ta = MLX90640_GetTa(frameData, params);
 800185c:	6939      	ldr	r1, [r7, #16]
 800185e:	6978      	ldr	r0, [r7, #20]
 8001860:	f000 fd76 	bl	8002350 <MLX90640_GetTa>
 8001864:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

    ta4 = (ta + 273.15);
 8001868:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800186a:	f7fe fe95 	bl	8000598 <__aeabi_f2d>
 800186e:	a3e6      	add	r3, pc, #920	; (adr r3, 8001c08 <MLX90640_CalculateTo+0x3d8>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe fd32 	bl	80002dc <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4610      	mov	r0, r2
 800187e:	4619      	mov	r1, r3
 8001880:	f7ff f9da 	bl	8000c38 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	667b      	str	r3, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 8001888:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800188c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001890:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    ta4 = ta4 * ta4;
 8001894:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8001898:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800189c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
    tr4 = (tr + 273.15);
 80018a0:	68b8      	ldr	r0, [r7, #8]
 80018a2:	f7fe fe79 	bl	8000598 <__aeabi_f2d>
 80018a6:	a3d8      	add	r3, pc, #864	; (adr r3, 8001c08 <MLX90640_CalculateTo+0x3d8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fd16 	bl	80002dc <__adddf3>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f9be 	bl	8000c38 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	663b      	str	r3, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 80018c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018c8:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    tr4 = tr4 * tr4;
 80018cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80018d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80018d4:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    taTr = tr4 - (tr4-ta4)/emissivity;
 80018d8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018dc:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80018e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80018e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80018e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

    ktaScale = POW2(params->ktaScale);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	f893 3f4c 	ldrb.w	r3, [r3, #3916]	; 0xf4c
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe28 	bl	8000554 <__aeabi_ui2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	ec43 2b11 	vmov	d1, r2, r3
 800190c:	ed9f 0bb8 	vldr	d0, [pc, #736]	; 8001bf0 <MLX90640_CalculateTo+0x3c0>
 8001910:	f00a fca6 	bl	800c260 <pow>
 8001914:	ec53 2b10 	vmov	r2, r3, d0
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7ff f98c 	bl	8000c38 <__aeabi_d2f>
 8001920:	4603      	mov	r3, r0
 8001922:	65bb      	str	r3, [r7, #88]	; 0x58
    kvScale = POW2(params->kvScale);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800192a:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe10 	bl	8000554 <__aeabi_ui2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	ec43 2b11 	vmov	d1, r2, r3
 800193c:	ed9f 0bac 	vldr	d0, [pc, #688]	; 8001bf0 <MLX90640_CalculateTo+0x3c0>
 8001940:	f00a fc8e 	bl	800c260 <pow>
 8001944:	ec53 2b10 	vmov	r2, r3, d0
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f974 	bl	8000c38 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	657b      	str	r3, [r7, #84]	; 0x54
    alphaScale = POW2(params->alphaScale);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	f893 364a 	ldrb.w	r3, [r3, #1610]	; 0x64a
 800195a:	4618      	mov	r0, r3
 800195c:	f7fe fdfa 	bl	8000554 <__aeabi_ui2d>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	ec43 2b11 	vmov	d1, r2, r3
 8001968:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 8001bf0 <MLX90640_CalculateTo+0x3c0>
 800196c:	f00a fc78 	bl	800c260 <pow>
 8001970:	ec53 2b10 	vmov	r2, r3, d0
 8001974:	4610      	mov	r0, r2
 8001976:	4619      	mov	r1, r3
 8001978:	f7ff f95e 	bl	8000c38 <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
 800197e:	653b      	str	r3, [r7, #80]	; 0x50

    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001986:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8001c00 <MLX90640_CalculateTo+0x3d0>
 800198a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800198e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001992:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800199a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800199e:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 80019a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019a6:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[1] * params->ct[2]);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019c8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[2] * (params->ct[3] - params->ct[2]));
 80019cc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80019dc:	461a      	mov	r2, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

//------------------------- Gain calculation -----------------------------------

    gain = (float)params->gainEE / (int16_t)frameData[778];
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a08:	ee07 3a90 	vmov	s15, r3
 8001a0c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8001a16:	881b      	ldrh	r3, [r3, #0]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a26:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

//------------------------- To calculation -------------------------------------
    mode = (frameData[832] & MLX90640_CTRL_MEAS_MODE_MASK) >> 5;
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8001a30:	881b      	ldrh	r3, [r3, #0]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a3a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

    irDataCP[0] = (int16_t)frameData[776] * gain;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a58:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    irDataCP[1] = (int16_t)frameData[808] * gain;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8001a62:	881b      	ldrh	r3, [r3, #0]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	ee07 3a90 	vmov	s15, r3
 8001a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6e:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8001a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd8b 	bl	8000598 <__aeabi_f2d>
 8001a82:	4604      	mov	r4, r0
 8001a84:	460d      	mov	r5, r1
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8c:	f9b3 3258 	ldrsh.w	r3, [r3, #600]	; 0x258
 8001a90:	ee07 3a90 	vmov	s15, r3
 8001a94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a9e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001aa2:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001aa6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	ee17 0a90 	vmov	r0, s15
 8001abe:	f7fe fd6b 	bl	8000598 <__aeabi_f2d>
 8001ac2:	4680      	mov	r8, r0
 8001ac4:	4689      	mov	r9, r1
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7fe fd64 	bl	8000598 <__aeabi_f2d>
 8001ad0:	4682      	mov	sl, r0
 8001ad2:	468b      	mov	fp, r1
 8001ad4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ad6:	f7fe fd5f 	bl	8000598 <__aeabi_f2d>
 8001ada:	a347      	add	r3, pc, #284	; (adr r3, 8001bf8 <MLX90640_CalculateTo+0x3c8>)
 8001adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae0:	f7fe fbfa 	bl	80002d8 <__aeabi_dsub>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4650      	mov	r0, sl
 8001aea:	4659      	mov	r1, fp
 8001aec:	f7fe fdac 	bl	8000648 <__aeabi_dmul>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4610      	mov	r0, r2
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b41      	ldr	r3, [pc, #260]	; (8001c04 <MLX90640_CalculateTo+0x3d4>)
 8001afe:	f7fe fbed 	bl	80002dc <__adddf3>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	4640      	mov	r0, r8
 8001b08:	4649      	mov	r1, r9
 8001b0a:	f7fe fd9d 	bl	8000648 <__aeabi_dmul>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4620      	mov	r0, r4
 8001b14:	4629      	mov	r1, r5
 8001b16:	f7fe fbdf 	bl	80002d8 <__aeabi_dsub>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f889 	bl	8000c38 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    if( mode ==  params->calibrationModeEE)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b30:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d16b      	bne.n	8001c10 <MLX90640_CalculateTo+0x3e0>
    {
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd2c 	bl	8000598 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	edd3 6a08 	vldr	s13, [r3, #32]
 8001b5c:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b60:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001b64:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001b68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b78:	ee17 0a90 	vmov	r0, s15
 8001b7c:	f7fe fd0c 	bl	8000598 <__aeabi_f2d>
 8001b80:	4680      	mov	r8, r0
 8001b82:	4689      	mov	r9, r1
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fd05 	bl	8000598 <__aeabi_f2d>
 8001b8e:	4682      	mov	sl, r0
 8001b90:	468b      	mov	fp, r1
 8001b92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001b94:	f7fe fd00 	bl	8000598 <__aeabi_f2d>
 8001b98:	a317      	add	r3, pc, #92	; (adr r3, 8001bf8 <MLX90640_CalculateTo+0x3c8>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fb9b 	bl	80002d8 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4650      	mov	r0, sl
 8001ba8:	4659      	mov	r1, fp
 8001baa:	f7fe fd4d 	bl	8000648 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <MLX90640_CalculateTo+0x3d4>)
 8001bbc:	f7fe fb8e 	bl	80002dc <__adddf3>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4640      	mov	r0, r8
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	f7fe fd3e 	bl	8000648 <__aeabi_dmul>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	460b      	mov	r3, r1
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	4629      	mov	r1, r5
 8001bd4:	f7fe fb80 	bl	80002d8 <__aeabi_dsub>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7ff f82a 	bl	8000c38 <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	633b      	str	r3, [r7, #48]	; 0x30
 8001be8:	e071      	b.n	8001cce <MLX90640_CalculateTo+0x49e>
 8001bea:	bf00      	nop
 8001bec:	f3af 8000 	nop.w
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	40000000 	.word	0x40000000
 8001bf8:	66666666 	.word	0x66666666
 8001bfc:	400a6666 	.word	0x400a6666
 8001c00:	42200000 	.word	0x42200000
 8001c04:	3ff00000 	.word	0x3ff00000
 8001c08:	66666666 	.word	0x66666666
 8001c0c:	40711266 	.word	0x40711266
    }
    else
    {
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3));
 8001c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7fe fcc0 	bl	8000598 <__aeabi_f2d>
 8001c18:	4604      	mov	r4, r0
 8001c1a:	460d      	mov	r5, r1
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c22:	f9b3 325a 	ldrsh.w	r3, [r3, #602]	; 0x25a
 8001c26:	ee07 3a90 	vmov	s15, r3
 8001c2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c34:	edd3 7a97 	vldr	s15, [r3, #604]	; 0x25c
 8001c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	edd3 6a08 	vldr	s13, [r3, #32]
 8001c42:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001c46:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8001c4a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c5e:	ee17 0a90 	vmov	r0, s15
 8001c62:	f7fe fc99 	bl	8000598 <__aeabi_f2d>
 8001c66:	4680      	mov	r8, r0
 8001c68:	4689      	mov	r9, r1
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fc92 	bl	8000598 <__aeabi_f2d>
 8001c74:	4682      	mov	sl, r0
 8001c76:	468b      	mov	fp, r1
 8001c78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c7a:	f7fe fc8d 	bl	8000598 <__aeabi_f2d>
 8001c7e:	a33e      	add	r3, pc, #248	; (adr r3, 8001d78 <MLX90640_CalculateTo+0x548>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fb28 	bl	80002d8 <__aeabi_dsub>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4650      	mov	r0, sl
 8001c8e:	4659      	mov	r1, fp
 8001c90:	f7fe fcda 	bl	8000648 <__aeabi_dmul>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b37      	ldr	r3, [pc, #220]	; (8001d80 <MLX90640_CalculateTo+0x550>)
 8001ca2:	f7fe fb1b 	bl	80002dc <__adddf3>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4640      	mov	r0, r8
 8001cac:	4649      	mov	r1, r9
 8001cae:	f7fe fccb 	bl	8000648 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4620      	mov	r0, r4
 8001cb8:	4629      	mov	r1, r5
 8001cba:	f7fe fb0d 	bl	80002d8 <__aeabi_dsub>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	4610      	mov	r0, r2
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	f7fe ffb7 	bl	8000c38 <__aeabi_d2f>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
    }

    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	677b      	str	r3, [r7, #116]	; 0x74
 8001cd2:	e2b5      	b.n	8002240 <MLX90640_CalculateTo+0xa10>
    {
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2;
 8001cd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da00      	bge.n	8001cdc <MLX90640_CalculateTo+0x4ac>
 8001cda:	331f      	adds	r3, #31
 8001cdc:	115b      	asrs	r3, r3, #5
 8001cde:	b2da      	uxtb	r2, r3
 8001ce0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	da00      	bge.n	8001ce8 <MLX90640_CalculateTo+0x4b8>
 8001ce6:	333f      	adds	r3, #63	; 0x3f
 8001ce8:	119b      	asrs	r3, r3, #6
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2);
 8001cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	bfb8      	it	lt
 8001d02:	425b      	neglt	r3, r3
 8001d04:	b25a      	sxtb	r2, r3
 8001d06:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d0a:	4053      	eors	r3, r2
 8001d0c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8001d10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d12:	3302      	adds	r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	da00      	bge.n	8001d1a <MLX90640_CalculateTo+0x4ea>
 8001d18:	3303      	adds	r3, #3
 8001d1a:	109b      	asrs	r3, r3, #2
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d20:	3303      	adds	r3, #3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	da00      	bge.n	8001d28 <MLX90640_CalculateTo+0x4f8>
 8001d26:	3303      	adds	r3, #3
 8001d28:	109b      	asrs	r3, r3, #2
 8001d2a:	425b      	negs	r3, r3
 8001d2c:	441a      	add	r2, r3
 8001d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d30:	3301      	adds	r3, #1
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <MLX90640_CalculateTo+0x508>
 8001d36:	3303      	adds	r3, #3
 8001d38:	109b      	asrs	r3, r3, #2
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	da00      	bge.n	8001d44 <MLX90640_CalculateTo+0x514>
 8001d42:	3303      	adds	r3, #3
 8001d44:	109b      	asrs	r3, r3, #2
 8001d46:	425b      	negs	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	f1c3 0301 	rsb	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	fb12 f303 	smulbb	r3, r2, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

        if(mode == 0)
 8001d62:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <MLX90640_CalculateTo+0x554>
        {
          pattern = ilPattern;
 8001d6a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8001d6e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8001d72:	e00b      	b.n	8001d8c <MLX90640_CalculateTo+0x55c>
 8001d74:	f3af 8000 	nop.w
 8001d78:	66666666 	.word	0x66666666
 8001d7c:	400a6666 	.word	0x400a6666
 8001d80:	3ff00000 	.word	0x3ff00000
        }
        else
        {
          pattern = chessPattern;
 8001d84:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8001d88:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
        }

        if(pattern == frameData[833])
 8001d8c:	f997 307b 	ldrsb.w	r3, [r7, #123]	; 0x7b
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	f202 6282 	addw	r2, r2, #1666	; 0x682
 8001d96:	8812      	ldrh	r2, [r2, #0]
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	f040 824e 	bne.w	800223a <MLX90640_CalculateTo+0xa0a>
        {
            irData = (int16_t)frameData[pixelNumber] * gain;
 8001d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4413      	add	r3, r2
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	ee07 3a90 	vmov	s15, r3
 8001dae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dba:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            kta = params->kta[pixelNumber]/ktaScale;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dc2:	4413      	add	r3, r2
 8001dc4:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8001dc8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dcc:	ee07 3a90 	vmov	s15, r3
 8001dd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001dd4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ddc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            kv = params->kv[pixelNumber]/kvScale;
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001de4:	4413      	add	r3, r2
 8001de6:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8001dea:	f993 3000 	ldrsb.w	r3, [r3]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001df6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001dfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dfe:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
            irData = irData - params->offset[pixelNumber]*(1 + kta*(ta - 25))*(1 + kv*(vdd - 3.3));
 8001e02:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001e04:	f7fe fbc8 	bl	8000598 <__aeabi_f2d>
 8001e08:	4604      	mov	r4, r0
 8001e0a:	460d      	mov	r5, r1
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e10:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4413      	add	r3, r2
 8001e18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e24:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001e28:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001e2c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001e30:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001e34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001e3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001e40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e44:	ee17 0a90 	vmov	r0, s15
 8001e48:	f7fe fba6 	bl	8000598 <__aeabi_f2d>
 8001e4c:	4680      	mov	r8, r0
 8001e4e:	4689      	mov	r9, r1
 8001e50:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e52:	f7fe fba1 	bl	8000598 <__aeabi_f2d>
 8001e56:	4682      	mov	sl, r0
 8001e58:	468b      	mov	fp, r1
 8001e5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001e5c:	f7fe fb9c 	bl	8000598 <__aeabi_f2d>
 8001e60:	a3c4      	add	r3, pc, #784	; (adr r3, 8002174 <MLX90640_CalculateTo+0x944>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	f7fe fa37 	bl	80002d8 <__aeabi_dsub>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4650      	mov	r0, sl
 8001e70:	4659      	mov	r1, fp
 8001e72:	f7fe fbe9 	bl	8000648 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	4bbb      	ldr	r3, [pc, #748]	; (8002170 <MLX90640_CalculateTo+0x940>)
 8001e84:	f7fe fa2a 	bl	80002dc <__adddf3>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4640      	mov	r0, r8
 8001e8e:	4649      	mov	r1, r9
 8001e90:	f7fe fbda 	bl	8000648 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fa1c 	bl	80002d8 <__aeabi_dsub>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fec6 	bl	8000c38 <__aeabi_d2f>
 8001eac:	4603      	mov	r3, r0
 8001eae:	67fb      	str	r3, [r7, #124]	; 0x7c

            if(mode !=  params->calibrationModeEE)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001eb6:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d023      	beq.n	8001f06 <MLX90640_CalculateTo+0x6d6>
            {
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern;
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	ed93 7a99 	vldr	s14, [r3, #612]	; 0x264
 8001ec8:	f997 304a 	ldrsb.w	r3, [r7, #74]	; 0x4a
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	ee07 3a90 	vmov	s15, r3
 8001ed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001ee0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eea:	edd3 6a98 	vldr	s13, [r3, #608]	; 0x260
 8001eee:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f02:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            }

            irData = irData - params->tgc * irDataCP[subPage];
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f0c:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3380      	adds	r3, #128	; 0x80
 8001f14:	443b      	add	r3, r7
 8001f16:	3b54      	subs	r3, #84	; 0x54
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f20:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8001f24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f28:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
            irData = irData / emissivity;
 8001f2c:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 8001f30:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c

            alphaCompensated = SCALEALPHA*alphaScale/params->alpha[pixelNumber];
 8001f3c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001f3e:	f7fe fb2b 	bl	8000598 <__aeabi_f2d>
 8001f42:	a387      	add	r3, pc, #540	; (adr r3, 8002160 <MLX90640_CalculateTo+0x930>)
 8001f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f48:	f7fe fb7e 	bl	8000648 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4614      	mov	r4, r2
 8001f52:	461d      	mov	r5, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f58:	3324      	adds	r3, #36	; 0x24
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7fe fb07 	bl	8000574 <__aeabi_i2d>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	4629      	mov	r1, r5
 8001f6e:	f7fe fc95 	bl	800089c <__aeabi_ddiv>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f7fe fe5d 	bl	8000c38 <__aeabi_d2f>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	63fb      	str	r3, [r7, #60]	; 0x3c
            alphaCompensated = alphaCompensated*(1 + params->KsTa * (ta - 25));
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001f88:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001f8c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

            Sx = alphaCompensated * alphaCompensated * alphaCompensated * (irData + alphaCompensated * taTr);
 8001fac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001fb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fbc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8001fc0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001fc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001fc8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001fcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 8001fd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001fda:	f7fe fadd 	bl	8000598 <__aeabi_f2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	ec43 2b10 	vmov	d0, r2, r3
 8001fe6:	f00a f9ab 	bl	800c340 <sqrt>
 8001fea:	eeb0 7a40 	vmov.f32	s14, s0
 8001fee:	eef0 7a60 	vmov.f32	s15, s1
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	f00a f9a1 	bl	800c340 <sqrt>
 8001ffe:	ec55 4b10 	vmov	r4, r5, d0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fac6 	bl	8000598 <__aeabi_f2d>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4620      	mov	r0, r4
 8002012:	4629      	mov	r1, r5
 8002014:	f7fe fb18 	bl	8000648 <__aeabi_dmul>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fe0a 	bl	8000c38 <__aeabi_d2f>
 8002024:	4603      	mov	r3, r0
 8002026:	63bb      	str	r3, [r7, #56]	; 0x38

            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15) + Sx) + taTr)) - 273.15;
 8002028:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800202a:	f7fe fab5 	bl	8000598 <__aeabi_f2d>
 800202e:	4604      	mov	r4, r0
 8002030:	460d      	mov	r5, r1
 8002032:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002034:	f7fe fab0 	bl	8000598 <__aeabi_f2d>
 8002038:	4680      	mov	r8, r0
 800203a:	4689      	mov	r9, r1
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe faa9 	bl	8000598 <__aeabi_f2d>
 8002046:	a348      	add	r3, pc, #288	; (adr r3, 8002168 <MLX90640_CalculateTo+0x938>)
 8002048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204c:	f7fe fafc 	bl	8000648 <__aeabi_dmul>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	f04f 0000 	mov.w	r0, #0
 8002058:	4945      	ldr	r1, [pc, #276]	; (8002170 <MLX90640_CalculateTo+0x940>)
 800205a:	f7fe f93d 	bl	80002d8 <__aeabi_dsub>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4640      	mov	r0, r8
 8002064:	4649      	mov	r1, r9
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4690      	mov	r8, r2
 8002070:	4699      	mov	r9, r3
 8002072:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002074:	f7fe fa90 	bl	8000598 <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4640      	mov	r0, r8
 800207e:	4649      	mov	r1, r9
 8002080:	f7fe f92c 	bl	80002dc <__adddf3>
 8002084:	4602      	mov	r2, r0
 8002086:	460b      	mov	r3, r1
 8002088:	4620      	mov	r0, r4
 800208a:	4629      	mov	r1, r5
 800208c:	f7fe fc06 	bl	800089c <__aeabi_ddiv>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4614      	mov	r4, r2
 8002096:	461d      	mov	r5, r3
 8002098:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800209a:	f7fe fa7d 	bl	8000598 <__aeabi_f2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	4620      	mov	r0, r4
 80020a4:	4629      	mov	r1, r5
 80020a6:	f7fe f919 	bl	80002dc <__adddf3>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ec43 2b17 	vmov	d7, r2, r3
 80020b2:	eeb0 0a47 	vmov.f32	s0, s14
 80020b6:	eef0 0a67 	vmov.f32	s1, s15
 80020ba:	f00a f941 	bl	800c340 <sqrt>
 80020be:	eeb0 7a40 	vmov.f32	s14, s0
 80020c2:	eef0 7a60 	vmov.f32	s15, s1
 80020c6:	eeb0 0a47 	vmov.f32	s0, s14
 80020ca:	eef0 0a67 	vmov.f32	s1, s15
 80020ce:	f00a f937 	bl	800c340 <sqrt>
 80020d2:	ec51 0b10 	vmov	r0, r1, d0
 80020d6:	a324      	add	r3, pc, #144	; (adr r3, 8002168 <MLX90640_CalculateTo+0x938>)
 80020d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020dc:	f7fe f8fc 	bl	80002d8 <__aeabi_dsub>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fda6 	bl	8000c38 <__aeabi_d2f>
 80020ec:	4603      	mov	r3, r0
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34

            if(To < params->ct[1])
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80020f6:	ee07 3a90 	vmov	s15, r3
 80020fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002102:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800210a:	d503      	bpl.n	8002114 <MLX90640_CalculateTo+0x8e4>
            {
                range = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8002112:	e036      	b.n	8002182 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[2])
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800211a:	ee07 3a90 	vmov	s15, r3
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002122:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800212a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800212e:	d503      	bpl.n	8002138 <MLX90640_CalculateTo+0x908>
            {
                range = 1;
 8002130:	2301      	movs	r3, #1
 8002132:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 8002136:	e024      	b.n	8002182 <MLX90640_CalculateTo+0x952>
            }
            else if(To < params->ct[3])
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002146:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800214a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800214e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002152:	d513      	bpl.n	800217c <MLX90640_CalculateTo+0x94c>
            {
                range = 2;
 8002154:	2302      	movs	r3, #2
 8002156:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
 800215a:	e012      	b.n	8002182 <MLX90640_CalculateTo+0x952>
 800215c:	f3af 8000 	nop.w
 8002160:	a0b5ed8d 	.word	0xa0b5ed8d
 8002164:	3eb0c6f7 	.word	0x3eb0c6f7
 8002168:	66666666 	.word	0x66666666
 800216c:	40711266 	.word	0x40711266
 8002170:	3ff00000 	.word	0x3ff00000
 8002174:	66666666 	.word	0x66666666
 8002178:	400a6666 	.word	0x400a6666
            }
            else
            {
                range = 3;
 800217c:	2303      	movs	r3, #3
 800217e:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
            }

            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8002182:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	3380      	adds	r3, #128	; 0x80
 800218a:	443b      	add	r3, r7
 800218c:	3b64      	subs	r3, #100	; 0x64
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002196:	ee27 7a27 	vmul.f32	s14, s14, s15
 800219a:	f997 307a 	ldrsb.w	r3, [r7, #122]	; 0x7a
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	330a      	adds	r3, #10
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3304      	adds	r3, #4
 80021a8:	edd3 6a00 	vldr	s13, [r3]
 80021ac:	f997 207a 	ldrsb.w	r2, [r7, #122]	; 0x7a
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	3220      	adds	r2, #32
 80021b4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80021b8:	ee07 3a90 	vmov	s15, r3
 80021bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c0:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 80021c4:	ee76 7a67 	vsub.f32	s15, s12, s15
 80021c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	edd7 6a1f 	vldr	s13, [r7, #124]	; 0x7c
 80021dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	ee17 0a90 	vmov	r0, s15
 80021ec:	f7fe f9d4 	bl	8000598 <__aeabi_f2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	ec43 2b10 	vmov	d0, r2, r3
 80021f8:	f00a f8a2 	bl	800c340 <sqrt>
 80021fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002200:	eef0 7a60 	vmov.f32	s15, s1
 8002204:	eeb0 0a47 	vmov.f32	s0, s14
 8002208:	eef0 0a67 	vmov.f32	s1, s15
 800220c:	f00a f898 	bl	800c340 <sqrt>
 8002210:	ec51 0b10 	vmov	r0, r1, d0
 8002214:	a310      	add	r3, pc, #64	; (adr r3, 8002258 <MLX90640_CalculateTo+0xa28>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f85d 	bl	80002d8 <__aeabi_dsub>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4610      	mov	r0, r2
 8002224:	4619      	mov	r1, r3
 8002226:	f7fe fd07 	bl	8000c38 <__aeabi_d2f>
 800222a:	4603      	mov	r3, r0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34

            result[pixelNumber] = To;
 800222e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002238:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 800223a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800223c:	3301      	adds	r3, #1
 800223e:	677b      	str	r3, [r7, #116]	; 0x74
 8002240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002246:	f6ff ad45 	blt.w	8001cd4 <MLX90640_CalculateTo+0x4a4>
        }
    }
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	3780      	adds	r7, #128	; 0x80
 8002250:	46bd      	mov	sp, r7
 8002252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002256:	bf00      	nop
 8002258:	66666666 	.word	0x66666666
 800225c:	40711266 	.word	0x40711266

08002260 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 8002260:	b5b0      	push	{r4, r5, r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    uint16_t resolutionRAM;

    resolutionRAM = (frameData[832] & ~MLX90640_CTRL_RESOLUTION_MASK) >> MLX90640_CTRL_RESOLUTION_SHIFT;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	0a9b      	lsrs	r3, r3, #10
 8002274:	b29b      	uxth	r3, r3
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	82fb      	strh	r3, [r7, #22]
    resolutionCorrection = POW2(params->resolutionEE) / POW2(resolutionRAM);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002282:	4618      	mov	r0, r3
 8002284:	f7fe f966 	bl	8000554 <__aeabi_ui2d>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	ec43 2b11 	vmov	d1, r2, r3
 8002290:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8002340 <MLX90640_GetVdd+0xe0>
 8002294:	f009 ffe4 	bl	800c260 <pow>
 8002298:	ec55 4b10 	vmov	r4, r5, d0
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f958 	bl	8000554 <__aeabi_ui2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	ec43 2b11 	vmov	d1, r2, r3
 80022ac:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8002340 <MLX90640_GetVdd+0xe0>
 80022b0:	f009 ffd6 	bl	800c260 <pow>
 80022b4:	ec53 2b10 	vmov	r2, r3, d0
 80022b8:	4620      	mov	r0, r4
 80022ba:	4629      	mov	r1, r5
 80022bc:	f7fe faee 	bl	800089c <__aeabi_ddiv>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4610      	mov	r0, r2
 80022c6:	4619      	mov	r1, r3
 80022c8:	f7fe fcb6 	bl	8000c38 <__aeabi_d2f>
 80022cc:	4603      	mov	r3, r0
 80022ce:	613b      	str	r3, [r7, #16]
    vdd = (resolutionCorrection * (int16_t)frameData[810] - params->vdd25) / params->kVdd + 3.3;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	b21b      	sxth	r3, r3
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002302:	ee07 3a90 	vmov	s15, r3
 8002306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800230e:	ee16 0a90 	vmov	r0, s13
 8002312:	f7fe f941 	bl	8000598 <__aeabi_f2d>
 8002316:	a30c      	add	r3, pc, #48	; (adr r3, 8002348 <MLX90640_GetVdd+0xe8>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffde 	bl	80002dc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4610      	mov	r0, r2
 8002326:	4619      	mov	r1, r3
 8002328:	f7fe fc86 	bl	8000c38 <__aeabi_d2f>
 800232c:	4603      	mov	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]

    return vdd;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	ee07 3a90 	vmov	s15, r3
}
 8002336:	eeb0 0a67 	vmov.f32	s0, s15
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bdb0      	pop	{r4, r5, r7, pc}
 8002340:	00000000 	.word	0x00000000
 8002344:	40000000 	.word	0x40000000
 8002348:	66666666 	.word	0x66666666
 800234c:	400a6666 	.word	0x400a6666

08002350 <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 8002350:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002354:	b086      	sub	sp, #24
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	6039      	str	r1, [r7, #0]
    int16_t ptat;
    float ptatArt;
    float vdd;
    float ta;

    vdd = MLX90640_GetVdd(frameData, params);
 800235c:	6839      	ldr	r1, [r7, #0]
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ff7e 	bl	8002260 <MLX90640_GetVdd>
 8002364:	ed87 0a05 	vstr	s0, [r7, #20]

    ptat = (int16_t)frameData[800];
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800236e:	881b      	ldrh	r3, [r3, #0]
 8002370:	827b      	strh	r3, [r7, #18]

    ptatArt = (ptat / (ptat * params->alphaPTAT + (int16_t)frameData[768])) * POW2(18);
 8002372:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800237e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002382:	ee07 3a90 	vmov	s15, r3
 8002386:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	b21b      	sxth	r3, r3
 800239e:	ee07 3a90 	vmov	s15, r3
 80023a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ae:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002470 <MLX90640_GetTa+0x120>
 80023b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023b6:	edc7 7a03 	vstr	s15, [r7, #12]

    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3)) - params->vPTAT25);
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f7fe f8ec 	bl	8000598 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8e5 	bl	8000598 <__aeabi_f2d>
 80023ce:	4680      	mov	r8, r0
 80023d0:	4689      	mov	r9, r1
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7fe f8e0 	bl	8000598 <__aeabi_f2d>
 80023d8:	a323      	add	r3, pc, #140	; (adr r3, 8002468 <MLX90640_GetTa+0x118>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	f7fd ff7b 	bl	80002d8 <__aeabi_dsub>
 80023e2:	4602      	mov	r2, r0
 80023e4:	460b      	mov	r3, r1
 80023e6:	4640      	mov	r0, r8
 80023e8:	4649      	mov	r1, r9
 80023ea:	f7fe f92d 	bl	8000648 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <MLX90640_GetTa+0x124>)
 80023fc:	f7fd ff6e 	bl	80002dc <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4620      	mov	r0, r4
 8002406:	4629      	mov	r1, r5
 8002408:	f7fe fa48 	bl	800089c <__aeabi_ddiv>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	899b      	ldrh	r3, [r3, #12]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f8ab 	bl	8000574 <__aeabi_i2d>
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	4620      	mov	r0, r4
 8002424:	4629      	mov	r1, r5
 8002426:	f7fd ff57 	bl	80002d8 <__aeabi_dsub>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f7fe fc01 	bl	8000c38 <__aeabi_d2f>
 8002436:	4603      	mov	r3, r0
 8002438:	60bb      	str	r3, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002440:	edd7 6a02 	vldr	s13, [r7, #8]
 8002444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002448:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800244c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002450:	edc7 7a02 	vstr	s15, [r7, #8]

    return ta;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	ee07 3a90 	vmov	s15, r3
}
 800245a:	eeb0 0a67 	vmov.f32	s0, s15
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002466:	bf00      	nop
 8002468:	66666666 	.word	0x66666666
 800246c:	400a6666 	.word	0x400a6666
 8002470:	48800000 	.word	0x48800000
 8002474:	3ff00000 	.word	0x3ff00000

08002478 <MLX90640_BadPixelsCorrection>:

}

//------------------------------------------------------------------------------
void MLX90640_BadPixelsCorrection(uint16_t *pixels, float *to, int mode, paramsMLX90640 *params)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
    float ap[4];
    uint8_t pix;
    uint8_t line;
    uint8_t column;

    pix = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 800248c:	e2aa      	b.n	80029e4 <MLX90640_BadPixelsCorrection+0x56c>
    {
        line = pixels[pix]>>5;
 800248e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	68fa      	ldr	r2, [r7, #12]
 8002496:	4413      	add	r3, r2
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	095b      	lsrs	r3, r3, #5
 800249c:	b29b      	uxth	r3, r3
 800249e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        column = pixels[pix] - (line<<5);
 80024a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024b4:	015b      	lsls	r3, r3, #5
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

        if(mode == 1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	f040 8152 	bne.w	800276a <MLX90640_BadPixelsCorrection+0x2f2>
        {
            if(line == 0)
 80024c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d14d      	bne.n	800256a <MLX90640_BadPixelsCorrection+0xf2>
            {
                if(column == 0)
 80024ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10d      	bne.n	80024f2 <MLX90640_BadPixelsCorrection+0x7a>
                {
                    to[pixels[pix]] = to[33];
 80024d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	4413      	add	r3, r2
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	e273      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 80024f2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80024f6:	2b1f      	cmp	r3, #31
 80024f8:	d10d      	bne.n	8002516 <MLX90640_BadPixelsCorrection+0x9e>
                {
                    to[pixels[pix]] = to[62];
 80024fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	4413      	add	r3, r2
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e261      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]+31] + to[pixels[pix]+33])/2.0;
 8002516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	331f      	adds	r3, #31
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	68ba      	ldr	r2, [r7, #8]
 8002528:	4413      	add	r3, r2
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	3321      	adds	r3, #33	; 0x21
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	4413      	add	r3, r2
 8002542:	edd3 7a00 	vldr	s15, [r3]
 8002546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800254a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	4413      	add	r3, r2
 800255c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002560:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002564:	edc3 7a00 	vstr	s15, [r3]
 8002568:	e237      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(line == 23)
 800256a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800256e:	2b17      	cmp	r3, #23
 8002570:	d153      	bne.n	800261a <MLX90640_BadPixelsCorrection+0x1a2>
            {
                if(column == 0)
 8002572:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10e      	bne.n	8002598 <MLX90640_BadPixelsCorrection+0x120>
                {
                    to[pixels[pix]] = to[705];
 800257a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	4413      	add	r3, r2
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	f602 3204 	addw	r2, r2, #2820	; 0xb04
 8002592:	6812      	ldr	r2, [r2, #0]
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e220      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
                else if(column == 31)
 8002598:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800259c:	2b1f      	cmp	r3, #31
 800259e:	d10e      	bne.n	80025be <MLX90640_BadPixelsCorrection+0x146>
                {
                    to[pixels[pix]] = to[734];
 80025a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4413      	add	r3, r2
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4413      	add	r3, r2
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f602 3278 	addw	r2, r2, #2936	; 0xb78
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e20d      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]-31])/2.0;
 80025be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ce:	3b21      	subs	r3, #33	; 0x21
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4413      	add	r3, r2
 80025d6:	ed93 7a00 	vldr	s14, [r3]
 80025da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4413      	add	r3, r2
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025ea:	3b1f      	subs	r3, #31
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	edd3 7a00 	vldr	s15, [r3]
 80025f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	4413      	add	r3, r2
 800260c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002610:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002614:	edc3 7a00 	vstr	s15, [r3]
 8002618:	e1df      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                }
            }
            else if(column == 0)
 800261a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800261e:	2b00      	cmp	r3, #0
 8002620:	d12b      	bne.n	800267a <MLX90640_BadPixelsCorrection+0x202>
            {
                to[pixels[pix]] = (to[pixels[pix]-31] + to[pixels[pix]+33])/2.0;
 8002622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	881b      	ldrh	r3, [r3, #0]
 800262e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002632:	3b1f      	subs	r3, #31
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	4413      	add	r3, r2
 800263a:	ed93 7a00 	vldr	s14, [r3]
 800263e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4413      	add	r3, r2
 8002648:	881b      	ldrh	r3, [r3, #0]
 800264a:	3321      	adds	r3, #33	; 0x21
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	4413      	add	r3, r2
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	ee37 7a27 	vadd.f32	s14, s14, s15
 800265a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4413      	add	r3, r2
 800266c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002674:	edc3 7a00 	vstr	s15, [r3]
 8002678:	e1af      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 800267a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800267e:	2b1f      	cmp	r3, #31
 8002680:	d12b      	bne.n	80026da <MLX90640_BadPixelsCorrection+0x262>
            {
                to[pixels[pix]] = (to[pixels[pix]-33] + to[pixels[pix]+31])/2.0;
 8002682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002692:	3b21      	subs	r3, #33	; 0x21
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	ed93 7a00 	vldr	s14, [r3]
 800269e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4413      	add	r3, r2
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	331f      	adds	r3, #31
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	4413      	add	r3, r2
 80026cc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026d4:	edc3 7a00 	vstr	s15, [r3]
 80026d8:	e17f      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                ap[0] = to[pixels[pix]-33];
 80026da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4413      	add	r3, r2
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80026ea:	3b21      	subs	r3, #33	; 0x21
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	4413      	add	r3, r2
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
                ap[1] = to[pixels[pix]-31];
 80026f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	4413      	add	r3, r2
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002706:	3b1f      	subs	r3, #31
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	4413      	add	r3, r2
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	61bb      	str	r3, [r7, #24]
                ap[2] = to[pixels[pix]+31];
 8002712:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	331f      	adds	r3, #31
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	4413      	add	r3, r2
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	61fb      	str	r3, [r7, #28]
                ap[3] = to[pixels[pix]+33];
 800272a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	4413      	add	r3, r2
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	3321      	adds	r3, #33	; 0x21
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4413      	add	r3, r2
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	623b      	str	r3, [r7, #32]
                to[pixels[pix]] = GetMedian(ap,4);
 8002742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4413      	add	r3, r2
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	18d4      	adds	r4, r2, r3
 8002754:	f107 0314 	add.w	r3, r7, #20
 8002758:	2104      	movs	r1, #4
 800275a:	4618      	mov	r0, r3
 800275c:	f002 f851 	bl	8004802 <GetMedian>
 8002760:	eef0 7a40 	vmov.f32	s15, s0
 8002764:	edc4 7a00 	vstr	s15, [r4]
 8002768:	e137      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
        }
        else
        {
            if(column == 0)
 800276a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <MLX90640_BadPixelsCorrection+0x326>
            {
                to[pixels[pix]] = to[pixels[pix]+1];
 8002772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	441a      	add	r2, r3
 8002786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	440b      	add	r3, r1
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	440b      	add	r3, r1
 8002798:	6812      	ldr	r2, [r2, #0]
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	e11d      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 1 || column == 30)
 800279e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d003      	beq.n	80027ae <MLX90640_BadPixelsCorrection+0x336>
 80027a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80027aa:	2b1e      	cmp	r3, #30
 80027ac:	d12b      	bne.n	8002806 <MLX90640_BadPixelsCorrection+0x38e>
            {
                to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 80027ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027be:	3b01      	subs	r3, #1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4413      	add	r3, r2
 80027c6:	ed93 7a00 	vldr	s14, [r3]
 80027ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4413      	add	r3, r2
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4413      	add	r3, r2
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	68ba      	ldr	r2, [r7, #8]
 80027f6:	4413      	add	r3, r2
 80027f8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80027fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002800:	edc3 7a00 	vstr	s15, [r3]
 8002804:	e0e9      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
            else if(column == 31)
 8002806:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800280a:	2b1f      	cmp	r3, #31
 800280c:	d117      	bne.n	800283e <MLX90640_BadPixelsCorrection+0x3c6>
            {
                to[pixels[pix]] = to[pixels[pix]-1];
 800280e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4413      	add	r3, r2
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800281e:	3b01      	subs	r3, #1
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	441a      	add	r2, r3
 8002826:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	68f9      	ldr	r1, [r7, #12]
 800282e:	440b      	add	r3, r1
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	440b      	add	r3, r1
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	e0cd      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
            }
            else
            {
                if(IsPixelBad(pixels[pix]-2,params) == 0 && IsPixelBad(pixels[pix]+2,params) == 0)
 800283e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4413      	add	r3, r2
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	3b02      	subs	r3, #2
 800284c:	b29b      	uxth	r3, r3
 800284e:	6839      	ldr	r1, [r7, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 f849 	bl	80048e8 <IsPixelBad>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f040 8093 	bne.w	8002984 <MLX90640_BadPixelsCorrection+0x50c>
 800285e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	3302      	adds	r3, #2
 800286c:	b29b      	uxth	r3, r3
 800286e:	6839      	ldr	r1, [r7, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f002 f839 	bl	80048e8 <IsPixelBad>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f040 8083 	bne.w	8002984 <MLX90640_BadPixelsCorrection+0x50c>
                {
                    ap[0] = to[pixels[pix]+1] - to[pixels[pix]+2];
 800287e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	4413      	add	r3, r2
 8002892:	ed93 7a00 	vldr	s14, [r3]
 8002896:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	4413      	add	r3, r2
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	3302      	adds	r3, #2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	4413      	add	r3, r2
 80028aa:	edd3 7a00 	vldr	s15, [r3]
 80028ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028b2:	edc7 7a05 	vstr	s15, [r7, #20]
                    ap[1] = to[pixels[pix]-1] - to[pixels[pix]-2];
 80028b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028c6:	3b01      	subs	r3, #1
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	68ba      	ldr	r2, [r7, #8]
 80028cc:	4413      	add	r3, r2
 80028ce:	ed93 7a00 	vldr	s14, [r3]
 80028d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028e2:	3b02      	subs	r3, #2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	edd3 7a00 	vldr	s15, [r3]
 80028ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f2:	edc7 7a06 	vstr	s15, [r7, #24]
                    if(fabs(ap[0]) > fabs(ap[1]))
 80028f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80028fa:	eeb0 7ae7 	vabs.f32	s14, s15
 80028fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002902:	eef0 7ae7 	vabs.f32	s15, s15
 8002906:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800290a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290e:	dd1d      	ble.n	800294c <MLX90640_BadPixelsCorrection+0x4d4>
                    {
                        to[pixels[pix]] = to[pixels[pix]-1] + ap[1];
 8002910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4413      	add	r3, r2
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002920:	3b01      	subs	r3, #1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	68ba      	ldr	r2, [r7, #8]
 8002926:	4413      	add	r3, r2
 8002928:	ed93 7a00 	vldr	s14, [r3]
 800292c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4413      	add	r3, r2
 800293a:	881b      	ldrh	r3, [r3, #0]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4413      	add	r3, r2
 8002942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002946:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 800294a:	e046      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                    }
                    else
                    {
                        to[pixels[pix]] = to[pixels[pix]+1] + ap[0];
 800294c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	4413      	add	r3, r2
 8002960:	ed93 7a00 	vldr	s14, [r3]
 8002964:	edd7 7a05 	vldr	s15, [r7, #20]
 8002968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	4413      	add	r3, r2
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	4413      	add	r3, r2
 800297a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297e:	edc3 7a00 	vstr	s15, [r3]
                    if(fabs(ap[0]) > fabs(ap[1]))
 8002982:	e02a      	b.n	80029da <MLX90640_BadPixelsCorrection+0x562>
                    }
                }
                else
                {
                    to[pixels[pix]] = (to[pixels[pix]-1]+to[pixels[pix]+1])/2.0;
 8002984:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	4413      	add	r3, r2
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002994:	3b01      	subs	r3, #1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	4413      	add	r3, r2
 800299c:	ed93 7a00 	vldr	s14, [r3]
 80029a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4413      	add	r3, r2
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	4413      	add	r3, r2
 80029b4:	edd3 7a00 	vldr	s15, [r3]
 80029b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	4413      	add	r3, r2
 80029ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80029d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029d6:	edc3 7a00 	vstr	s15, [r3]
                }
            }
        }
        pix = pix + 1;
 80029da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029de:	3301      	adds	r3, #1
 80029e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while(pixels[pix] != 0xFFFF)
 80029e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	4413      	add	r3, r2
 80029ee:	881b      	ldrh	r3, [r3, #0]
 80029f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029f4:	4293      	cmp	r3, r2
 80029f6:	f47f ad4a 	bne.w	800248e <MLX90640_BadPixelsCorrection+0x16>
    }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	372c      	adds	r7, #44	; 0x2c
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd90      	pop	{r4, r7, pc}

08002a04 <ExtractVDDParameters>:

//------------------------------------------------------------------------------

static void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
    int8_t kVdd;
    int16_t vdd25;

    kVdd = MLX90640_MS_BYTE(eeData[51]);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3366      	adds	r3, #102	; 0x66
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	73fb      	strb	r3, [r7, #15]

    vdd25 = MLX90640_LS_BYTE(eeData[51]);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3366      	adds	r3, #102	; 0x66
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8002a26:	89bb      	ldrh	r3, [r7, #12]
 8002a28:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	015b      	lsls	r3, r3, #5
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	81bb      	strh	r3, [r7, #12]

    mlx90640->kVdd = 32 * kVdd;
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	015b      	lsls	r3, r3, #5
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b21a      	sxth	r2, r3
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	89ba      	ldrh	r2, [r7, #12]
 8002a4e:	805a      	strh	r2, [r3, #2]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <ExtractPTATParameters>:

//------------------------------------------------------------------------------

static void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;

    KvPTAT = (eeData[50] & MLX90640_MSBITS_6_MASK) >> 10;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3364      	adds	r3, #100	; 0x64
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	0a9b      	lsrs	r3, r3, #10
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	ee07 3a90 	vmov	s15, r3
 8002a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a78:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 8002a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a80:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002a84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8c:	dd07      	ble.n	8002a9e <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 8002a8e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a92:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002b5c <ExtractPTATParameters+0x100>
 8002a96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a9a:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 8002a9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002aa2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8002b60 <ExtractPTATParameters+0x104>
 8002aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aaa:	edc7 7a05 	vstr	s15, [r7, #20]

    KtPTAT = eeData[50] & MLX90640_LSBITS_10_MASK;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	3364      	adds	r3, #100	; 0x64
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab8:	ee07 3a90 	vmov	s15, r3
 8002abc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac0:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 8002ac4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ac8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002b64 <ExtractPTATParameters+0x108>
 8002acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad4:	dd07      	ble.n	8002ae6 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 8002ad6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ada:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b68 <ExtractPTATParameters+0x10c>
 8002ade:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ae2:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8002ae6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002aea:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002aee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af2:	edc7 7a04 	vstr	s15, [r7, #16]

    vPTAT25 = eeData[49];
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	3362      	adds	r3, #98	; 0x62
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	81fb      	strh	r3, [r7, #14]

    alphaPTAT = (eeData[16] & MLX90640_NIBBLE4_MASK) / POW2(14) + 8.0f;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3320      	adds	r3, #32
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd33 	bl	8000574 <__aeabi_i2d>
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <ExtractPTATParameters+0x110>)
 8002b14:	f7fd fec2 	bl	800089c <__aeabi_ddiv>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	4619      	mov	r1, r3
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <ExtractPTATParameters+0x114>)
 8002b26:	f7fd fbd9 	bl	80002dc <__adddf3>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	f7fe f881 	bl	8000c38 <__aeabi_d2f>
 8002b36:	4603      	mov	r3, r0
 8002b38:	60bb      	str	r3, [r7, #8]

    mlx90640->KvPTAT = KvPTAT;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8002b46:	89fa      	ldrh	r2, [r7, #14]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	611a      	str	r2, [r3, #16]
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	42800000 	.word	0x42800000
 8002b60:	45800000 	.word	0x45800000
 8002b64:	43ff8000 	.word	0x43ff8000
 8002b68:	44800000 	.word	0x44800000
 8002b6c:	40d00000 	.word	0x40d00000
 8002b70:	40200000 	.word	0x40200000

08002b74 <ExtractGainParameters>:

//------------------------------------------------------------------------------

static void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
    mlx90640->gainEE = (int16_t)eeData[48];;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3360      	adds	r3, #96	; 0x60
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	b21a      	sxth	r2, r3
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	829a      	strh	r2, [r3, #20]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

static void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
    mlx90640->tgc = (int8_t)MLX90640_LS_BYTE(eeData[60]) / 32.0f;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3378      	adds	r3, #120	; 0x78
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	b25b      	sxtb	r3, r3
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb2:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002bcc <ExtractTgcParameters+0x34>
 8002bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	42000000 	.word	0x42000000

08002bd0 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

static void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3370      	adds	r3, #112	; 0x70
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	131b      	asrs	r3, r3, #12
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	73fb      	strb	r3, [r7, #15]

    mlx90640->resolutionEE = resolutionEE;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

static void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
    mlx90640->KsTa = (int8_t)MLX90640_MS_BYTE(eeData[60]) / 8192.0f;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3378      	adds	r3, #120	; 0x78
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	b25b      	sxtb	r3, r3
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c1e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8002c38 <ExtractKsTaParameters+0x38>
 8002c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	46000000 	.word	0x46000000

08002c3c <ExtractKsToParameters>:

//------------------------------------------------------------------------------

static void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
    int32_t KsToScale;
    int8_t step;

    step = ((eeData[63] & 0x3000) >> 12) * 10;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	337e      	adds	r3, #126	; 0x7e
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	131b      	asrs	r3, r3, #12
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	461a      	mov	r2, r3
 8002c58:	0092      	lsls	r2, r2, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	73fb      	strb	r3, [r7, #15]

    mlx90640->ct[0] = -40;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 8002c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[1] = 0;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    mlx90640->ct[2] = MLX90640_NIBBLE2(eeData[63]);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	337e      	adds	r3, #126	; 0x7e
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	111b      	asrs	r3, r3, #4
 8002c7c:	b21b      	sxth	r3, r3
 8002c7e:	f003 030f 	and.w	r3, r3, #15
 8002c82:	b21a      	sxth	r2, r3
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = MLX90640_NIBBLE3(eeData[63]);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	337e      	adds	r3, #126	; 0x7e
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	121b      	asrs	r3, r3, #8
 8002c92:	b21b      	sxth	r3, r3
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	b21a      	sxth	r2, r3
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	fb12 f303 	smulbb	r3, r2, r3
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	b21a      	sxth	r2, r3
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8002cca:	b299      	uxth	r1, r3
 8002ccc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	fb11 f303 	smulbb	r3, r1, r3
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4413      	add	r3, r2
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	b21a      	sxth	r2, r3
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    mlx90640->ct[4] = 400;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002cea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

    KsToScale = MLX90640_NIBBLE1(eeData[63]) + 8;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	337e      	adds	r3, #126	; 0x7e
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	60bb      	str	r3, [r7, #8]
    KsToScale = 1UL << KsToScale;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	60bb      	str	r3, [r7, #8]

    mlx90640->ksTo[0] = (int8_t)MLX90640_LS_BYTE(eeData[61]) / (float)KsToScale;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	337a      	adds	r3, #122	; 0x7a
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b25b      	sxtb	r3, r3
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	ee07 3a90 	vmov	s15, r3
 8002d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (int8_t)MLX90640_MS_BYTE(eeData[61]) / (float)KsToScale;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	337a      	adds	r3, #122	; 0x7a
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	ee07 3a90 	vmov	s15, r3
 8002d44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = (int8_t)MLX90640_LS_BYTE(eeData[62]) / (float)KsToScale;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	337c      	adds	r3, #124	; 0x7c
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b25b      	sxtb	r3, r3
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	ee07 3a90 	vmov	s15, r3
 8002d68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (int8_t)MLX90640_MS_BYTE(eeData[62]) / (float)KsToScale;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	337c      	adds	r3, #124	; 0x7c
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	0a1b      	lsrs	r3, r3, #8
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	b25b      	sxtb	r3, r3
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    mlx90640->ksTo[4] = -0.0002;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	4a03      	ldr	r2, [pc, #12]	; (8002db0 <ExtractKsToParameters+0x174>)
 8002da2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002da4:	bf00      	nop
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	b951b717 	.word	0xb951b717
 8002db4:	00000000 	.word	0x00000000

08002db8 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

static void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	f5ad 6d52 	sub.w	sp, sp, #3360	; 0xd20
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002dc4:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002dc8:	6018      	str	r0, [r3, #0]
 8002dca:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002dce:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8002dd2:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
    uint8_t accRemScale;
    float alphaTemp[768];
    float temp;


    accRemScale = MLX90640_NIBBLE1(eeData[32]);
 8002dda:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002dde:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3340      	adds	r3, #64	; 0x40
 8002de6:	881b      	ldrh	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	f887 3cf3 	strb.w	r3, [r7, #3315]	; 0xcf3
    accColumnScale = MLX90640_NIBBLE2(eeData[32]);
 8002df2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002df6:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3340      	adds	r3, #64	; 0x40
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	111b      	asrs	r3, r3, #4
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	f887 3cf2 	strb.w	r3, [r7, #3314]	; 0xcf2
    accRowScale = MLX90640_NIBBLE3(eeData[32]);
 8002e0c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e10:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3340      	adds	r3, #64	; 0x40
 8002e18:	881b      	ldrh	r3, [r3, #0]
 8002e1a:	121b      	asrs	r3, r3, #8
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	f887 3cf1 	strb.w	r3, [r7, #3313]	; 0xcf1
    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 30;
 8002e26:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e2a:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	0b1b      	lsrs	r3, r3, #12
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	331e      	adds	r3, #30
 8002e3c:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    alphaRef = eeData[33];
 8002e40:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002e44:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3342      	adds	r3, #66	; 0x42
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	f8c7 3cec 	str.w	r3, [r7, #3308]	; 0xcec

    for(int i = 0; i < 6; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002e58:	e062      	b.n	8002f20 <ExtractAlphaParameters+0x168>
    {
        p = i * 4;
 8002e5a:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accRow[p + 0] = MLX90640_NIBBLE1(eeData[34 + i]);
 8002e64:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002e68:	3322      	adds	r3, #34	; 0x22
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002e70:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	4413      	add	r3, r2
 8002e78:	881b      	ldrh	r3, [r3, #0]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002e88:	443b      	add	r3, r7
 8002e8a:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 1] = MLX90640_NIBBLE2(eeData[34 + i]);
 8002e8e:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002e92:	3322      	adds	r3, #34	; 0x22
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002e9a:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	111a      	asrs	r2, r3, #4
 8002ea6:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f002 020f 	and.w	r2, r2, #15
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002eb6:	443b      	add	r3, r7
 8002eb8:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 2] = MLX90640_NIBBLE3(eeData[34 + i]);
 8002ebc:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002ec0:	3322      	adds	r3, #34	; 0x22
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002ec8:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002ecc:	6812      	ldr	r2, [r2, #0]
 8002ece:	4413      	add	r3, r2
 8002ed0:	881b      	ldrh	r3, [r3, #0]
 8002ed2:	121a      	asrs	r2, r3, #8
 8002ed4:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f002 020f 	and.w	r2, r2, #15
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002ee4:	443b      	add	r3, r7
 8002ee6:	f843 2c94 	str.w	r2, [r3, #-148]
        accRow[p + 3] = MLX90640_NIBBLE4(eeData[34 + i]);
 8002eea:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002eee:	3322      	adds	r3, #34	; 0x22
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002ef6:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	0b1b      	lsrs	r3, r3, #12
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8002f08:	3303      	adds	r3, #3
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f10:	443b      	add	r3, r7
 8002f12:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < 6; i++)
 8002f16:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f8c7 3d14 	str.w	r3, [r7, #3348]	; 0xd14
 8002f20:	f8d7 3d14 	ldr.w	r3, [r7, #3348]	; 0xd14
 8002f24:	2b05      	cmp	r3, #5
 8002f26:	dd98      	ble.n	8002e5a <ExtractAlphaParameters+0xa2>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002f2e:	e020      	b.n	8002f72 <ExtractAlphaParameters+0x1ba>
    {
        if (accRow[i] > 7)
 8002f30:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f3a:	443b      	add	r3, r7
 8002f3c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	dd11      	ble.n	8002f68 <ExtractAlphaParameters+0x1b0>
        {
            accRow[i] = accRow[i] - 16;
 8002f44:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f4e:	443b      	add	r3, r7
 8002f50:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8002f54:	f1a3 0210 	sub.w	r2, r3, #16
 8002f58:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8002f62:	443b      	add	r3, r7
 8002f64:	f843 2c94 	str.w	r2, [r3, #-148]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8002f68:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f8c7 3d10 	str.w	r3, [r7, #3344]	; 0xd10
 8002f72:	f8d7 3d10 	ldr.w	r3, [r7, #3344]	; 0xd10
 8002f76:	2b17      	cmp	r3, #23
 8002f78:	ddda      	ble.n	8002f30 <ExtractAlphaParameters+0x178>
        }
    }

    for(int i = 0; i < 8; i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8002f80:	e062      	b.n	8003048 <ExtractAlphaParameters+0x290>
    {
        p = i * 4;
 8002f82:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
        accColumn[p + 0] = MLX90640_NIBBLE1(eeData[40 + i]);
 8002f8c:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002f90:	3328      	adds	r3, #40	; 0x28
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002f98:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	881b      	ldrh	r3, [r3, #0]
 8002fa2:	f003 010f 	and.w	r1, r3, #15
 8002fa6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002faa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fae:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8002fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = MLX90640_NIBBLE2(eeData[40 + i]);
 8002fb6:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002fba:	3328      	adds	r3, #40	; 0x28
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002fc2:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	4413      	add	r3, r2
 8002fca:	881b      	ldrh	r3, [r3, #0]
 8002fcc:	111b      	asrs	r3, r3, #4
 8002fce:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8002fd2:	3201      	adds	r2, #1
 8002fd4:	f003 010f 	and.w	r1, r3, #15
 8002fd8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8002fdc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = MLX90640_NIBBLE3(eeData[40 + i]);
 8002fe4:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8002fe8:	3328      	adds	r3, #40	; 0x28
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8002ff0:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	121b      	asrs	r3, r3, #8
 8002ffc:	f8d7 2cf4 	ldr.w	r2, [r7, #3316]	; 0xcf4
 8003000:	3202      	adds	r2, #2
 8003002:	f003 010f 	and.w	r1, r3, #15
 8003006:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800300a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800300e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = MLX90640_NIBBLE4(eeData[40 + i]);
 8003012:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003016:	3328      	adds	r3, #40	; 0x28
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800301e:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 8003022:	6812      	ldr	r2, [r2, #0]
 8003024:	4413      	add	r3, r2
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	0b1b      	lsrs	r3, r3, #12
 800302a:	b299      	uxth	r1, r3
 800302c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003030:	1cda      	adds	r2, r3, #3
 8003032:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003036:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800303a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800303e:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 8003042:	3301      	adds	r3, #1
 8003044:	f8c7 3d0c 	str.w	r3, [r7, #3340]	; 0xd0c
 8003048:	f8d7 3d0c 	ldr.w	r3, [r7, #3340]	; 0xd0c
 800304c:	2b07      	cmp	r3, #7
 800304e:	dd98      	ble.n	8002f82 <ExtractAlphaParameters+0x1ca>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 8003056:	e020      	b.n	800309a <ExtractAlphaParameters+0x2e2>
    {
        if (accColumn[i] > 7)
 8003058:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800305c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003060:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	2b07      	cmp	r3, #7
 800306a:	dd11      	ble.n	8003090 <ExtractAlphaParameters+0x2d8>
        {
            accColumn[i] = accColumn[i] - 16;
 800306c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003070:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003074:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	f1a3 0110 	sub.w	r1, r3, #16
 8003080:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003084:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003088:	f8d7 2d08 	ldr.w	r2, [r7, #3336]	; 0xd08
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i++)
 8003090:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 8003094:	3301      	adds	r3, #1
 8003096:	f8c7 3d08 	str.w	r3, [r7, #3336]	; 0xd08
 800309a:	f8d7 3d08 	ldr.w	r3, [r7, #3336]	; 0xd08
 800309e:	2b1f      	cmp	r3, #31
 80030a0:	ddda      	ble.n	8003058 <ExtractAlphaParameters+0x2a0>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 80030a8:	e13e      	b.n	8003328 <ExtractAlphaParameters+0x570>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 80030b0:	e130      	b.n	8003314 <ExtractAlphaParameters+0x55c>
        {
            p = 32 * i +j;
 80030b2:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 80030b6:	015b      	lsls	r3, r3, #5
 80030b8:	f8d7 2d00 	ldr.w	r2, [r7, #3328]	; 0xd00
 80030bc:	4413      	add	r3, r2
 80030be:	f8c7 3cf4 	str.w	r3, [r7, #3316]	; 0xcf4
            alphaTemp[p] = (eeData[64 + p] & 0x03F0) >> 4;
 80030c2:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80030c6:	3340      	adds	r3, #64	; 0x40
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 80030ce:	f6a2 521c 	subw	r2, r2, #3356	; 0xd1c
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	111b      	asrs	r3, r3, #4
 80030da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030ea:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80030ee:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	edc3 7a00 	vstr	s15, [r3]
            if (alphaTemp[p] > 31)
 80030fa:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80030fe:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003102:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	edd3 7a00 	vldr	s15, [r3]
 800310e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8003112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	dd17      	ble.n	800314c <ExtractAlphaParameters+0x394>
            {
                alphaTemp[p] = alphaTemp[p] - 64;
 800311c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003120:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003124:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4413      	add	r3, r2
 800312c:	edd3 7a00 	vldr	s15, [r3]
 8003130:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 80034c0 <ExtractAlphaParameters+0x708>
 8003134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003138:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800313c:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003140:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4413      	add	r3, r2
 8003148:	edc3 7a00 	vstr	s15, [r3]
            }
            alphaTemp[p] = alphaTemp[p]*(1 << accRemScale);
 800314c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003150:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003154:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	f897 3cf3 	ldrb.w	r3, [r7, #3315]	; 0xcf3
 8003164:	2201      	movs	r2, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003176:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800317a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800317e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + alphaTemp[p]);
 800318a:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f503 6352 	add.w	r3, r3, #3360	; 0xd20
 8003194:	443b      	add	r3, r7
 8003196:	f853 2c94 	ldr.w	r2, [r3, #-148]
 800319a:	f897 3cf1 	ldrb.w	r3, [r7, #3313]	; 0xcf1
 800319e:	409a      	lsls	r2, r3
 80031a0:	f8d7 3cec 	ldr.w	r3, [r7, #3308]	; 0xcec
 80031a4:	441a      	add	r2, r3
 80031a6:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031aa:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80031ae:	f8d7 1d00 	ldr.w	r1, [r7, #3328]	; 0xd00
 80031b2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80031b6:	f897 3cf2 	ldrb.w	r3, [r7, #3314]	; 0xcf2
 80031ba:	fa01 f303 	lsl.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	ee07 3a90 	vmov	s15, r3
 80031c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031c8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031cc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031d0:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	edd3 7a00 	vldr	s15, [r3]
 80031dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031e4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031e8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = alphaTemp[p] / POW2(alphaScale);
 80031f4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80031f8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80031fc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f7fd f9c6 	bl	8000598 <__aeabi_f2d>
 800320c:	4604      	mov	r4, r0
 800320e:	460d      	mov	r5, r1
 8003210:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f99d 	bl	8000554 <__aeabi_ui2d>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	ec43 2b11 	vmov	d1, r2, r3
 8003222:	ed9f 0ba1 	vldr	d0, [pc, #644]	; 80034a8 <ExtractAlphaParameters+0x6f0>
 8003226:	f009 f81b 	bl	800c260 <pow>
 800322a:	ec53 2b10 	vmov	r2, r3, d0
 800322e:	4620      	mov	r0, r4
 8003230:	4629      	mov	r1, r5
 8003232:	f7fd fb33 	bl	800089c <__aeabi_ddiv>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4610      	mov	r0, r2
 800323c:	4619      	mov	r1, r3
 800323e:	f7fd fcfb 	bl	8000c38 <__aeabi_d2f>
 8003242:	4601      	mov	r1, r0
 8003244:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003248:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800324c:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	6019      	str	r1, [r3, #0]
            alphaTemp[p] = alphaTemp[p] - mlx90640->tgc * (mlx90640->cpAlpha[0] + mlx90640->cpAlpha[1])/2;
 8003256:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800325a:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 800325e:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4413      	add	r3, r2
 8003266:	ed93 7a00 	vldr	s14, [r3]
 800326a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800326e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	edd3 6a06 	vldr	s13, [r3, #24]
 8003278:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800327c:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003286:	ed93 6a94 	vldr	s12, [r3, #592]	; 0x250
 800328a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800328e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003298:	edd3 7a95 	vldr	s15, [r3, #596]	; 0x254
 800329c:	ee76 7a27 	vadd.f32	s15, s12, s15
 80032a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80032a4:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80032a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032b0:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032b4:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80032b8:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	edc3 7a00 	vstr	s15, [r3]
            alphaTemp[p] = SCALEALPHA/alphaTemp[p];
 80032c4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032c8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80032cc:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f95e 	bl	8000598 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	a173      	add	r1, pc, #460	; (adr r1, 80034b0 <ExtractAlphaParameters+0x6f8>)
 80032e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80032e6:	f7fd fad9 	bl	800089c <__aeabi_ddiv>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7fd fca1 	bl	8000c38 <__aeabi_d2f>
 80032f6:	4601      	mov	r1, r0
 80032f8:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80032fc:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003300:	f8d7 3cf4 	ldr.w	r3, [r7, #3316]	; 0xcf4
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800330a:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 800330e:	3301      	adds	r3, #1
 8003310:	f8c7 3d00 	str.w	r3, [r7, #3328]	; 0xd00
 8003314:	f8d7 3d00 	ldr.w	r3, [r7, #3328]	; 0xd00
 8003318:	2b1f      	cmp	r3, #31
 800331a:	f77f aeca 	ble.w	80030b2 <ExtractAlphaParameters+0x2fa>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800331e:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 8003322:	3301      	adds	r3, #1
 8003324:	f8c7 3d04 	str.w	r3, [r7, #3332]	; 0xd04
 8003328:	f8d7 3d04 	ldr.w	r3, [r7, #3332]	; 0xd04
 800332c:	2b17      	cmp	r3, #23
 800332e:	f77f aebc 	ble.w	80030aa <ExtractAlphaParameters+0x2f2>
        }
    }

    temp = alphaTemp[0];
 8003332:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003336:	f6a3 5314 	subw	r3, r3, #3348	; 0xd14
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8003340:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003342:	2301      	movs	r3, #1
 8003344:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8003348:	e023      	b.n	8003392 <ExtractAlphaParameters+0x5da>
    {
        if (alphaTemp[i] > temp)
 800334a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800334e:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003352:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	edd3 7a00 	vldr	s15, [r3]
 800335e:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8003362:	ed93 7a00 	vldr	s14, [r3]
 8003366:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d50b      	bpl.n	8003388 <ExtractAlphaParameters+0x5d0>
        {
            temp = alphaTemp[i];
 8003370:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003374:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 8003378:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8003386:	6013      	str	r3, [r2, #0]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003388:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 800338c:	3301      	adds	r3, #1
 800338e:	f8c7 3cfc 	str.w	r3, [r7, #3324]	; 0xcfc
 8003392:	f8d7 3cfc 	ldr.w	r3, [r7, #3324]	; 0xcfc
 8003396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800339a:	dbd6      	blt.n	800334a <ExtractAlphaParameters+0x592>
        }
    }

    alphaScale = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 80033a2:	e00e      	b.n	80033c2 <ExtractAlphaParameters+0x60a>
    {
        temp = temp*2;
 80033a4:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80033b0:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033b4:	edc3 7a00 	vstr	s15, [r3]
        alphaScale = alphaScale + 1;
 80033b8:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 80033bc:	3301      	adds	r3, #1
 80033be:	f887 3d1f 	strb.w	r3, [r7, #3359]	; 0xd1f
    while(temp < 32767.4)
 80033c2:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	f7fd f8e6 	bl	8000598 <__aeabi_f2d>
 80033cc:	a33a      	add	r3, pc, #232	; (adr r3, 80034b8 <ExtractAlphaParameters+0x700>)
 80033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d2:	f7fd fbab 	bl	8000b2c <__aeabi_dcmplt>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1e3      	bne.n	80033a4 <ExtractAlphaParameters+0x5ec>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80033dc:	2300      	movs	r3, #0
 80033de:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 80033e2:	e04d      	b.n	8003480 <ExtractAlphaParameters+0x6c8>
    {
        temp = alphaTemp[i] * POW2(alphaScale);
 80033e4:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 80033e8:	f6a3 5214 	subw	r2, r3, #3348	; 0xd14
 80033ec:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f8ce 	bl	8000598 <__aeabi_f2d>
 80033fc:	4604      	mov	r4, r0
 80033fe:	460d      	mov	r5, r1
 8003400:	f897 3d1f 	ldrb.w	r3, [r7, #3359]	; 0xd1f
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd f8a5 	bl	8000554 <__aeabi_ui2d>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	ec43 2b11 	vmov	d1, r2, r3
 8003412:	ed9f 0b25 	vldr	d0, [pc, #148]	; 80034a8 <ExtractAlphaParameters+0x6f0>
 8003416:	f008 ff23 	bl	800c260 <pow>
 800341a:	ec53 2b10 	vmov	r2, r3, d0
 800341e:	4620      	mov	r0, r4
 8003420:	4629      	mov	r1, r5
 8003422:	f7fd f911 	bl	8000648 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	f7fd fc03 	bl	8000c38 <__aeabi_d2f>
 8003432:	4603      	mov	r3, r0
 8003434:	f607 5218 	addw	r2, r7, #3352	; 0xd18
 8003438:	6013      	str	r3, [r2, #0]
        mlx90640->alpha[i] = (temp + 0.5);
 800343a:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 800343e:	6818      	ldr	r0, [r3, #0]
 8003440:	f7fd f8aa 	bl	8000598 <__aeabi_f2d>
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	4b1e      	ldr	r3, [pc, #120]	; (80034c4 <ExtractAlphaParameters+0x70c>)
 800344a:	f7fc ff47 	bl	80002dc <__adddf3>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	f7fd fbcf 	bl	8000bf8 <__aeabi_d2uiz>
 800345a:	4603      	mov	r3, r0
 800345c:	b299      	uxth	r1, r3
 800345e:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003462:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800346c:	3324      	adds	r3, #36	; 0x24
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	4413      	add	r3, r2
 8003472:	460a      	mov	r2, r1
 8003474:	805a      	strh	r2, [r3, #2]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003476:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 800347a:	3301      	adds	r3, #1
 800347c:	f8c7 3cf8 	str.w	r3, [r7, #3320]	; 0xcf8
 8003480:	f8d7 3cf8 	ldr.w	r3, [r7, #3320]	; 0xcf8
 8003484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003488:	dbac      	blt.n	80033e4 <ExtractAlphaParameters+0x62c>

    }

    mlx90640->alphaScale = alphaScale;
 800348a:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800348e:	f5a3 6352 	sub.w	r3, r3, #3360	; 0xd20
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f897 2d1f 	ldrb.w	r2, [r7, #3359]	; 0xd1f
 8003498:	f883 264a 	strb.w	r2, [r3, #1610]	; 0x64a

}
 800349c:	bf00      	nop
 800349e:	f507 6752 	add.w	r7, r7, #3360	; 0xd20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bdb0      	pop	{r4, r5, r7, pc}
 80034a6:	bf00      	nop
 80034a8:	00000000 	.word	0x00000000
 80034ac:	40000000 	.word	0x40000000
 80034b0:	a0b5ed8d 	.word	0xa0b5ed8d
 80034b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80034b8:	9999999a 	.word	0x9999999a
 80034bc:	40dfffd9 	.word	0x40dfffd9
 80034c0:	42800000 	.word	0x42800000
 80034c4:	3fe00000 	.word	0x3fe00000

080034c8 <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

static void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b0c5      	sub	sp, #276	; 0x114
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034d2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034d6:	6018      	str	r0, [r3, #0]
 80034d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034e0:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;


    occRemScale = MLX90640_NIBBLE1(eeData[16]);
 80034e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80034ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3320      	adds	r3, #32
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = MLX90640_NIBBLE2(eeData[16]);
 8003500:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003504:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3320      	adds	r3, #32
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	111b      	asrs	r3, r3, #4
 8003510:	b2db      	uxtb	r3, r3
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = MLX90640_NIBBLE3(eeData[16]);
 800351a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800351e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3320      	adds	r3, #32
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	121b      	asrs	r3, r3, #8
 800352a:	b2db      	uxtb	r3, r3
 800352c:	f003 030f 	and.w	r3, r3, #15
 8003530:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = (int16_t)eeData[17];
 8003534:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003538:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3322      	adds	r3, #34	; 0x22
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee

    for(int i = 0; i < 6; i++)
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800354c:	e062      	b.n	8003614 <ExtractOffsetParameters+0x14c>
    {
        p = i * 4;
 800354e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = MLX90640_NIBBLE1(eeData[18 + i]);
 8003558:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355c:	3312      	adds	r3, #18
 800355e:	005b      	lsls	r3, r3, #1
 8003560:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003564:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	4413      	add	r3, r2
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800357c:	443b      	add	r3, r7
 800357e:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = MLX90640_NIBBLE2(eeData[18 + i]);
 8003582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003586:	3312      	adds	r3, #18
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800358e:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	4413      	add	r3, r2
 8003596:	881b      	ldrh	r3, [r3, #0]
 8003598:	111a      	asrs	r2, r3, #4
 800359a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359e:	3301      	adds	r3, #1
 80035a0:	f002 020f 	and.w	r2, r2, #15
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80035aa:	443b      	add	r3, r7
 80035ac:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = MLX90640_NIBBLE3(eeData[18 + i]);
 80035b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b4:	3312      	adds	r3, #18
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035bc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035c0:	6812      	ldr	r2, [r2, #0]
 80035c2:	4413      	add	r3, r2
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	121a      	asrs	r2, r3, #8
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	3302      	adds	r3, #2
 80035ce:	f002 020f 	and.w	r2, r2, #15
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80035d8:	443b      	add	r3, r7
 80035da:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = MLX90640_NIBBLE4(eeData[18 + i]);
 80035de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e2:	3312      	adds	r3, #18
 80035e4:	005b      	lsls	r3, r3, #1
 80035e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80035ea:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	4413      	add	r3, r2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	0b1b      	lsrs	r3, r3, #12
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fc:	3303      	adds	r3, #3
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003604:	443b      	add	r3, r7
 8003606:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 800360a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800360e:	3301      	adds	r3, #1
 8003610:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003618:	2b05      	cmp	r3, #5
 800361a:	dd98      	ble.n	800354e <ExtractOffsetParameters+0x86>
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800361c:	2300      	movs	r3, #0
 800361e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003622:	e020      	b.n	8003666 <ExtractOffsetParameters+0x19e>
    {
        if (occRow[i] > 7)
 8003624:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800362e:	443b      	add	r3, r7
 8003630:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8003634:	2b07      	cmp	r3, #7
 8003636:	dd11      	ble.n	800365c <ExtractOffsetParameters+0x194>
        {
            occRow[i] = occRow[i] - 16;
 8003638:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003642:	443b      	add	r3, r7
 8003644:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8003648:	f1a3 0210 	sub.w	r2, r3, #16
 800364c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003656:	443b      	add	r3, r7
 8003658:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 800365c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003660:	3301      	adds	r3, #1
 8003662:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003666:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800366a:	2b17      	cmp	r3, #23
 800366c:	ddda      	ble.n	8003624 <ExtractOffsetParameters+0x15c>
        }
    }

    for(int i = 0; i < 8; i++)
 800366e:	2300      	movs	r3, #0
 8003670:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003674:	e062      	b.n	800373c <ExtractOffsetParameters+0x274>
    {
        p = i * 4;
 8003676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = MLX90640_NIBBLE1(eeData[24 + i]);
 8003680:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003684:	3318      	adds	r3, #24
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800368c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	4413      	add	r3, r2
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	f003 010f 	and.w	r1, r3, #15
 800369a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800369e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036a2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80036a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = MLX90640_NIBBLE2(eeData[24 + i]);
 80036aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ae:	3318      	adds	r3, #24
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036b6:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	4413      	add	r3, r2
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	111b      	asrs	r3, r3, #4
 80036c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80036c6:	3201      	adds	r2, #1
 80036c8:	f003 010f 	and.w	r1, r3, #15
 80036cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = MLX90640_NIBBLE3(eeData[24 + i]);
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036dc:	3318      	adds	r3, #24
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80036e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80036e8:	6812      	ldr	r2, [r2, #0]
 80036ea:	4413      	add	r3, r2
 80036ec:	881b      	ldrh	r3, [r3, #0]
 80036ee:	121b      	asrs	r3, r3, #8
 80036f0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80036f4:	3202      	adds	r2, #2
 80036f6:	f003 010f 	and.w	r1, r3, #15
 80036fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80036fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = MLX90640_NIBBLE4(eeData[24 + i]);
 8003706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800370a:	3318      	adds	r3, #24
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003712:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	4413      	add	r3, r2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	0b1b      	lsrs	r3, r3, #12
 800371e:	b299      	uxth	r1, r3
 8003720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003724:	1cda      	adds	r2, r3, #3
 8003726:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800372a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800372e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8003732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003736:	3301      	adds	r3, #1
 8003738:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800373c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003740:	2b07      	cmp	r3, #7
 8003742:	dd98      	ble.n	8003676 <ExtractOffsetParameters+0x1ae>
    }

    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8003744:	2300      	movs	r3, #0
 8003746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800374a:	e020      	b.n	800378e <ExtractOffsetParameters+0x2c6>
    {
        if (occColumn[i] > 7)
 800374c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003750:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003754:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	2b07      	cmp	r3, #7
 800375e:	dd11      	ble.n	8003784 <ExtractOffsetParameters+0x2bc>
        {
            occColumn[i] = occColumn[i] - 16;
 8003760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003764:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003768:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800376c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003770:	f1a3 0110 	sub.w	r1, r3, #16
 8003774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800377c:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8003780:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < MLX90640_COLUMN_NUM; i ++)
 8003784:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003788:	3301      	adds	r3, #1
 800378a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800378e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003792:	2b1f      	cmp	r3, #31
 8003794:	ddda      	ble.n	800374c <ExtractOffsetParameters+0x284>
        }
    }

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003796:	2300      	movs	r3, #0
 8003798:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800379c:	e0c0      	b.n	8003920 <ExtractOffsetParameters+0x458>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 800379e:	2300      	movs	r3, #0
 80037a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80037a4:	e0b2      	b.n	800390c <ExtractOffsetParameters+0x444>
        {
            p = 32 * i +j;
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80037b0:	4413      	add	r3, r2
 80037b2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & MLX90640_MSBITS_6_MASK) >> 10;
 80037b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ba:	3340      	adds	r3, #64	; 0x40
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80037c2:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	0a9b      	lsrs	r3, r3, #10
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	b219      	sxth	r1, r3
 80037d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037d6:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037e0:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	4413      	add	r3, r2
 80037e8:	460a      	mov	r2, r1
 80037ea:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 80037ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80037f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fa:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	4413      	add	r3, r2
 8003802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003806:	2b1f      	cmp	r3, #31
 8003808:	dd1d      	ble.n	8003846 <ExtractOffsetParameters+0x37e>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 800380a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800380e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003818:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	4413      	add	r3, r2
 8003820:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003824:	b29b      	uxth	r3, r3
 8003826:	3b40      	subs	r3, #64	; 0x40
 8003828:	b29b      	uxth	r3, r3
 800382a:	b219      	sxth	r1, r3
 800382c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003830:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800383a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	460a      	mov	r2, r1
 8003844:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8003846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800384a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	f503 7349 	add.w	r3, r3, #804	; 0x324
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003860:	461a      	mov	r2, r3
 8003862:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8003866:	fa02 f303 	lsl.w	r3, r2, r3
 800386a:	b219      	sxth	r1, r3
 800386c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003870:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	f503 7349 	add.w	r3, r3, #804	; 0x324
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	4413      	add	r3, r2
 8003882:	460a      	mov	r2, r1
 8003884:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8003886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003890:	443b      	add	r3, r7
 8003892:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8003896:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	b29a      	uxth	r2, r3
 80038a0:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 80038a4:	4413      	add	r3, r2
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038b0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80038b4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80038b8:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80038bc:	fa01 f303 	lsl.w	r3, r1, r3
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ca:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038ce:	6819      	ldr	r1, [r3, #0]
 80038d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d4:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	440b      	add	r3, r1
 80038dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	b219      	sxth	r1, r3
 80038e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80038ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f6:	f503 7349 	add.w	r3, r3, #804	; 0x324
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	460a      	mov	r2, r1
 8003900:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003902:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003906:	3301      	adds	r3, #1
 8003908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800390c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003910:	2b1f      	cmp	r3, #31
 8003912:	f77f af48 	ble.w	80037a6 <ExtractOffsetParameters+0x2de>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800391a:	3301      	adds	r3, #1
 800391c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003924:	2b17      	cmp	r3, #23
 8003926:	f77f af3a 	ble.w	800379e <ExtractOffsetParameters+0x2d6>
        }
    }
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
 800393a:	0000      	movs	r0, r0
 800393c:	0000      	movs	r0, r0
	...

08003940 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

static void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003940:	b5b0      	push	{r4, r5, r7, lr}
 8003942:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 8003946:	af00      	add	r7, sp, #0
 8003948:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800394c:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003950:	6018      	str	r0, [r3, #0]
 8003952:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003956:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 800395a:	6019      	str	r1, [r3, #0]
    int p = 0;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
    uint8_t ktaScale2;
    uint8_t split;
    float ktaTemp[768];
    float temp;

    KtaRC[0] = (int8_t)MLX90640_MS_BYTE(eeData[54]);;
 8003962:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003966:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	336c      	adds	r3, #108	; 0x6c
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	b29b      	uxth	r3, r3
 8003974:	b25b      	sxtb	r3, r3
 8003976:	f887 3c0c 	strb.w	r3, [r7, #3084]	; 0xc0c
    KtaRC[2] = (int8_t)MLX90640_LS_BYTE(eeData[54]);;
 800397a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800397e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	336c      	adds	r3, #108	; 0x6c
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	b25b      	sxtb	r3, r3
 800398a:	f887 3c0e 	strb.w	r3, [r7, #3086]	; 0xc0e
    KtaRC[1] = (int8_t)MLX90640_MS_BYTE(eeData[55]);;
 800398e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003992:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	336e      	adds	r3, #110	; 0x6e
 800399a:	881b      	ldrh	r3, [r3, #0]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	b29b      	uxth	r3, r3
 80039a0:	b25b      	sxtb	r3, r3
 80039a2:	f887 3c0d 	strb.w	r3, [r7, #3085]	; 0xc0d
    KtaRC[3] = (int8_t)MLX90640_LS_BYTE(eeData[55]);;
 80039a6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039aa:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	336e      	adds	r3, #110	; 0x6e
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 80039ba:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039be:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	3370      	adds	r3, #112	; 0x70
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	111b      	asrs	r3, r3, #4
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3308      	adds	r3, #8
 80039d4:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    ktaScale2 = MLX90640_NIBBLE1(eeData[56]);
 80039d8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80039dc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	3370      	adds	r3, #112	; 0x70
 80039e4:	881b      	ldrh	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	f887 3c13 	strb.w	r3, [r7, #3091]	; 0xc13

    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 80039f0:	2300      	movs	r3, #0
 80039f2:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 80039f6:	e0ed      	b.n	8003bd4 <ExtractKtaPixelParameters+0x294>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 80039f8:	2300      	movs	r3, #0
 80039fa:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 80039fe:	e0df      	b.n	8003bc0 <ExtractKtaPixelParameters+0x280>
        {
            p = 32 * i +j;
 8003a00:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003a04:	015b      	lsls	r3, r3, #5
 8003a06:	f8d7 2c20 	ldr.w	r2, [r7, #3104]	; 0xc20
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003a10:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	da00      	bge.n	8003a1a <ExtractKtaPixelParameters+0xda>
 8003a18:	331f      	adds	r3, #31
 8003a1a:	115b      	asrs	r3, r3, #5
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da00      	bge.n	8003a28 <ExtractKtaPixelParameters+0xe8>
 8003a26:	333f      	adds	r3, #63	; 0x3f
 8003a28:	119b      	asrs	r3, r3, #6
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	bfb8      	it	lt
 8003a40:	425b      	neglt	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	f887 3c12 	strb.w	r3, [r7, #3090]	; 0xc12
            ktaTemp[p] = (eeData[64 + p] & 0x000E) >> 1;
 8003a4a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a4e:	3340      	adds	r3, #64	; 0x40
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	f507 6243 	add.w	r2, r7, #3120	; 0xc30
 8003a56:	f6a2 422c 	subw	r2, r2, #3116	; 0xc2c
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	105b      	asrs	r3, r3, #1
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a72:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003a76:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	edc3 7a00 	vstr	s15, [r3]
            if (ktaTemp[p] > 3)
 8003a82:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003a86:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003a8a:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	edd3 7a00 	vldr	s15, [r3]
 8003a96:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aa2:	dd17      	ble.n	8003ad4 <ExtractKtaPixelParameters+0x194>
            {
                ktaTemp[p] = ktaTemp[p] - 8;
 8003aa4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003aa8:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003aac:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4413      	add	r3, r2
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ac0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ac4:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003ac8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	edc3 7a00 	vstr	s15, [r3]
            }
            ktaTemp[p] = ktaTemp[p] * (1 << ktaScale2);
 8003ad4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ad8:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003adc:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4413      	add	r3, r2
 8003ae4:	ed93 7a00 	vldr	s14, [r3]
 8003ae8:	f897 3c13 	ldrb.w	r3, [r7, #3091]	; 0xc13
 8003aec:	2201      	movs	r2, #1
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afe:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b02:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b06:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = KtaRC[split] + ktaTemp[p];
 8003b12:	f897 3c12 	ldrb.w	r3, [r7, #3090]	; 0xc12
 8003b16:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003b1a:	443b      	add	r3, r7
 8003b1c:	f913 3c24 	ldrsb.w	r3, [r3, #-36]
 8003b20:	ee07 3a90 	vmov	s15, r3
 8003b24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b28:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b2c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b30:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b40:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b44:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b48:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	edc3 7a00 	vstr	s15, [r3]
            ktaTemp[p] = ktaTemp[p] / POW2(ktaScale1);
 8003b54:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003b58:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003b5c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fc fd16 	bl	8000598 <__aeabi_f2d>
 8003b6c:	4604      	mov	r4, r0
 8003b6e:	460d      	mov	r5, r1
 8003b70:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fc fced 	bl	8000554 <__aeabi_ui2d>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	ec43 2b11 	vmov	d1, r2, r3
 8003b82:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 8003db8 <ExtractKtaPixelParameters+0x478>
 8003b86:	f008 fb6b 	bl	800c260 <pow>
 8003b8a:	ec53 2b10 	vmov	r2, r3, d0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fc fe83 	bl	800089c <__aeabi_ddiv>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fd f84b 	bl	8000c38 <__aeabi_d2f>
 8003ba2:	4601      	mov	r1, r0
 8003ba4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ba8:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003bac:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003bb6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003bc0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003bc4:	2b1f      	cmp	r3, #31
 8003bc6:	f77f af1b 	ble.w	8003a00 <ExtractKtaPixelParameters+0xc0>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003bca:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f8c7 3c24 	str.w	r3, [r7, #3108]	; 0xc24
 8003bd4:	f8d7 3c24 	ldr.w	r3, [r7, #3108]	; 0xc24
 8003bd8:	2b17      	cmp	r3, #23
 8003bda:	f77f af0d 	ble.w	80039f8 <ExtractKtaPixelParameters+0xb8>

        }
    }

    temp = fabs(ktaTemp[0]);
 8003bde:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003be2:	f6a3 4324 	subw	r3, r3, #3108	; 0xc24
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	eef0 7ae7 	vabs.f32	s15, s15
 8003bee:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003bf2:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003bfc:	e029      	b.n	8003c52 <ExtractKtaPixelParameters+0x312>
    {
        if (fabs(ktaTemp[i]) > temp)
 8003bfe:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c02:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c06:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	edd3 7a00 	vldr	s15, [r3]
 8003c12:	eef0 7ae7 	vabs.f32	s15, s15
 8003c16:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c1a:	ed93 7a00 	vldr	s14, [r3]
 8003c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c26:	d50f      	bpl.n	8003c48 <ExtractKtaPixelParameters+0x308>
        {
            temp = fabs(ktaTemp[i]);
 8003c28:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c2c:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003c30:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	edd3 7a00 	vldr	s15, [r3]
 8003c3c:	eef0 7ae7 	vabs.f32	s15, s15
 8003c40:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c44:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8003c48:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003c52:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5a:	dbd0      	blt.n	8003bfe <ExtractKtaPixelParameters+0x2be>
        }
    }

    ktaScale1 = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003c62:	e00e      	b.n	8003c82 <ExtractKtaPixelParameters+0x342>
    {
        temp = temp*2;
 8003c64:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c70:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c74:	edc3 7a00 	vstr	s15, [r3]
        ktaScale1 = ktaScale1 + 1;
 8003c78:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    while(temp < 63.4)
 8003c82:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003c86:	6818      	ldr	r0, [r3, #0]
 8003c88:	f7fc fc86 	bl	8000598 <__aeabi_f2d>
 8003c8c:	a34d      	add	r3, pc, #308	; (adr r3, 8003dc4 <ExtractKtaPixelParameters+0x484>)
 8003c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c92:	f7fc ff4b 	bl	8000b2c <__aeabi_dcmplt>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1e3      	bne.n	8003c64 <ExtractKtaPixelParameters+0x324>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003ca2:	e075      	b.n	8003d90 <ExtractKtaPixelParameters+0x450>
    {
        temp = ktaTemp[i] * POW2(ktaScale1);
 8003ca4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ca8:	f6a3 4224 	subw	r2, r3, #3108	; 0xc24
 8003cac:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f7fc fc6e 	bl	8000598 <__aeabi_f2d>
 8003cbc:	4604      	mov	r4, r0
 8003cbe:	460d      	mov	r5, r1
 8003cc0:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fc45 	bl	8000554 <__aeabi_ui2d>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	ec43 2b11 	vmov	d1, r2, r3
 8003cd2:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8003db8 <ExtractKtaPixelParameters+0x478>
 8003cd6:	f008 fac3 	bl	800c260 <pow>
 8003cda:	ec53 2b10 	vmov	r2, r3, d0
 8003cde:	4620      	mov	r0, r4
 8003ce0:	4629      	mov	r1, r5
 8003ce2:	f7fc fcb1 	bl	8000648 <__aeabi_dmul>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4610      	mov	r0, r2
 8003cec:	4619      	mov	r1, r3
 8003cee:	f7fc ffa3 	bl	8000c38 <__aeabi_d2f>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f607 4228 	addw	r2, r7, #3112	; 0xc28
 8003cf8:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8003cfa:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003cfe:	edd3 7a00 	vldr	s15, [r3]
 8003d02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0a:	d51e      	bpl.n	8003d4a <ExtractKtaPixelParameters+0x40a>
        {
            mlx90640->kta[i] = (temp - 0.5);
 8003d0c:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f7fc fc41 	bl	8000598 <__aeabi_f2d>
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	4b29      	ldr	r3, [pc, #164]	; (8003dc0 <ExtractKtaPixelParameters+0x480>)
 8003d1c:	f7fc fadc 	bl	80002d8 <__aeabi_dsub>
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7fc ff3e 	bl	8000ba8 <__aeabi_d2iz>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	b259      	sxtb	r1, r3
 8003d30:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003d34:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d3e:	4413      	add	r3, r2
 8003d40:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003d44:	460a      	mov	r2, r1
 8003d46:	701a      	strb	r2, [r3, #0]
 8003d48:	e01d      	b.n	8003d86 <ExtractKtaPixelParameters+0x446>
        }
        else
        {
            mlx90640->kta[i] = (temp + 0.5);
 8003d4a:	f607 4328 	addw	r3, r7, #3112	; 0xc28
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	f7fc fc22 	bl	8000598 <__aeabi_f2d>
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	4b19      	ldr	r3, [pc, #100]	; (8003dc0 <ExtractKtaPixelParameters+0x480>)
 8003d5a:	f7fc fabf 	bl	80002dc <__adddf3>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	f7fc ff1f 	bl	8000ba8 <__aeabi_d2iz>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	b259      	sxtb	r1, r3
 8003d6e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003d72:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d7c:	4413      	add	r3, r2
 8003d7e:	f603 434c 	addw	r3, r3, #3148	; 0xc4c
 8003d82:	460a      	mov	r2, r1
 8003d84:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8003d86:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8003d90:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8003d94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d98:	db84      	blt.n	8003ca4 <ExtractKtaPixelParameters+0x364>
        }

    }

    mlx90640->ktaScale = ktaScale1;
 8003d9a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003d9e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f897 2c2f 	ldrb.w	r2, [r7, #3119]	; 0xc2f
 8003da8:	f883 2f4c 	strb.w	r2, [r3, #3916]	; 0xf4c
}
 8003dac:	bf00      	nop
 8003dae:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bdb0      	pop	{r4, r5, r7, pc}
 8003db6:	bf00      	nop
 8003db8:	00000000 	.word	0x00000000
 8003dbc:	40000000 	.word	0x40000000
 8003dc0:	3fe00000 	.word	0x3fe00000
 8003dc4:	33333333 	.word	0x33333333
 8003dc8:	404fb333 	.word	0x404fb333
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <ExtractKvPixelParameters>:


//------------------------------------------------------------------------------

static void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8003dd0:	b5b0      	push	{r4, r5, r7, lr}
 8003dd2:	f5ad 6d43 	sub.w	sp, sp, #3120	; 0xc30
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ddc:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003de0:	6018      	str	r0, [r3, #0]
 8003de2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003de6:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8003dea:	6019      	str	r1, [r3, #0]
    int p = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
    uint8_t kvScale;
    uint8_t split;
    float kvTemp[768];
    float temp;

    KvRoCo = MLX90640_NIBBLE4(eeData[52]);
 8003df2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003df6:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3368      	adds	r3, #104	; 0x68
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	0b1b      	lsrs	r3, r3, #12
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    if (KvRoCo > 7)
 8003e08:	f997 3c2f 	ldrsb.w	r3, [r7, #3119]	; 0xc2f
 8003e0c:	2b07      	cmp	r3, #7
 8003e0e:	dd05      	ble.n	8003e1c <ExtractKvPixelParameters+0x4c>
    {
        KvRoCo = KvRoCo - 16;
 8003e10:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e14:	3b10      	subs	r3, #16
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	f887 3c2f 	strb.w	r3, [r7, #3119]	; 0xc2f
    }
    KvT[0] = KvRoCo;
 8003e1c:	f897 3c2f 	ldrb.w	r3, [r7, #3119]	; 0xc2f
 8003e20:	f887 3c08 	strb.w	r3, [r7, #3080]	; 0xc08

    KvReCo = MLX90640_NIBBLE3(eeData[52]);
 8003e24:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e28:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	3368      	adds	r3, #104	; 0x68
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	121b      	asrs	r3, r3, #8
 8003e34:	b25b      	sxtb	r3, r3
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    if (KvReCo > 7)
 8003e3e:	f997 3c2d 	ldrsb.w	r3, [r7, #3117]	; 0xc2d
 8003e42:	2b07      	cmp	r3, #7
 8003e44:	dd05      	ble.n	8003e52 <ExtractKvPixelParameters+0x82>
    {
        KvReCo = KvReCo - 16;
 8003e46:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003e4a:	3b10      	subs	r3, #16
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f887 3c2d 	strb.w	r3, [r7, #3117]	; 0xc2d
    }
    KvT[2] = KvReCo;
 8003e52:	f897 3c2d 	ldrb.w	r3, [r7, #3117]	; 0xc2d
 8003e56:	f887 3c0a 	strb.w	r3, [r7, #3082]	; 0xc0a

    KvRoCe = MLX90640_NIBBLE2(eeData[52]);
 8003e5a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e5e:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3368      	adds	r3, #104	; 0x68
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	111b      	asrs	r3, r3, #4
 8003e6a:	b25b      	sxtb	r3, r3
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    if (KvRoCe > 7)
 8003e74:	f997 3c2e 	ldrsb.w	r3, [r7, #3118]	; 0xc2e
 8003e78:	2b07      	cmp	r3, #7
 8003e7a:	dd05      	ble.n	8003e88 <ExtractKvPixelParameters+0xb8>
    {
        KvRoCe = KvRoCe - 16;
 8003e7c:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003e80:	3b10      	subs	r3, #16
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f887 3c2e 	strb.w	r3, [r7, #3118]	; 0xc2e
    }
    KvT[1] = KvRoCe;
 8003e88:	f897 3c2e 	ldrb.w	r3, [r7, #3118]	; 0xc2e
 8003e8c:	f887 3c09 	strb.w	r3, [r7, #3081]	; 0xc09

    KvReCe = MLX90640_NIBBLE1(eeData[52]);
 8003e90:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003e94:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3368      	adds	r3, #104	; 0x68
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	b25b      	sxtb	r3, r3
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    if (KvReCe > 7)
 8003ea8:	f997 3c2c 	ldrsb.w	r3, [r7, #3116]	; 0xc2c
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	dd05      	ble.n	8003ebc <ExtractKvPixelParameters+0xec>
    {
        KvReCe = KvReCe - 16;
 8003eb0:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003eb4:	3b10      	subs	r3, #16
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f887 3c2c 	strb.w	r3, [r7, #3116]	; 0xc2c
    }
    KvT[3] = KvReCe;
 8003ebc:	f897 3c2c 	ldrb.w	r3, [r7, #3116]	; 0xc2c
 8003ec0:	f887 3c0b 	strb.w	r3, [r7, #3083]	; 0xc0b

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 8003ec4:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003ec8:	f6a3 432c 	subw	r3, r3, #3116	; 0xc2c
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	3370      	adds	r3, #112	; 0x70
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	121b      	asrs	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	f003 030f 	and.w	r3, r3, #15
 8003eda:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b


    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003ee4:	e07c      	b.n	8003fe0 <ExtractKvPixelParameters+0x210>
    {
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003eec:	e06f      	b.n	8003fce <ExtractKvPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 8003eee:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003ef2:	015b      	lsls	r3, r3, #5
 8003ef4:	f8d7 2c1c 	ldr.w	r2, [r7, #3100]	; 0xc1c
 8003ef8:	4413      	add	r3, r2
 8003efa:	f8c7 3c10 	str.w	r3, [r7, #3088]	; 0xc10
            split = 2*(p/32 - (p/64)*2) + p%2;
 8003efe:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da00      	bge.n	8003f08 <ExtractKvPixelParameters+0x138>
 8003f06:	331f      	adds	r3, #31
 8003f08:	115b      	asrs	r3, r3, #5
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	da00      	bge.n	8003f16 <ExtractKvPixelParameters+0x146>
 8003f14:	333f      	adds	r3, #63	; 0x3f
 8003f16:	119b      	asrs	r3, r3, #6
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	bfb8      	it	lt
 8003f2e:	425b      	neglt	r3, r3
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4413      	add	r3, r2
 8003f34:	f887 3c0f 	strb.w	r3, [r7, #3087]	; 0xc0f
            kvTemp[p] = KvT[split];
 8003f38:	f897 3c0f 	ldrb.w	r3, [r7, #3087]	; 0xc0f
 8003f3c:	f503 6343 	add.w	r3, r3, #3120	; 0xc30
 8003f40:	443b      	add	r3, r7
 8003f42:	f913 3c28 	ldrsb.w	r3, [r3, #-40]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f4e:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f52:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003f56:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	edc3 7a00 	vstr	s15, [r3]
            kvTemp[p] = kvTemp[p] / POW2(kvScale);
 8003f62:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003f66:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003f6a:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7fc fb0f 	bl	8000598 <__aeabi_f2d>
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	460d      	mov	r5, r1
 8003f7e:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fc fae6 	bl	8000554 <__aeabi_ui2d>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	ec43 2b11 	vmov	d1, r2, r3
 8003f90:	ed9f 0b8d 	vldr	d0, [pc, #564]	; 80041c8 <ExtractKvPixelParameters+0x3f8>
 8003f94:	f008 f964 	bl	800c260 <pow>
 8003f98:	ec53 2b10 	vmov	r2, r3, d0
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	f7fc fc7c 	bl	800089c <__aeabi_ddiv>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4610      	mov	r0, r2
 8003faa:	4619      	mov	r1, r3
 8003fac:	f7fc fe44 	bl	8000c38 <__aeabi_d2f>
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003fb6:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8003fba:	f8d7 3c10 	ldr.w	r3, [r7, #3088]	; 0xc10
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < MLX90640_COLUMN_NUM; j ++)
 8003fc4:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003fc8:	3301      	adds	r3, #1
 8003fca:	f8c7 3c1c 	str.w	r3, [r7, #3100]	; 0xc1c
 8003fce:	f8d7 3c1c 	ldr.w	r3, [r7, #3100]	; 0xc1c
 8003fd2:	2b1f      	cmp	r3, #31
 8003fd4:	dd8b      	ble.n	8003eee <ExtractKvPixelParameters+0x11e>
    for(int i = 0; i < MLX90640_LINE_NUM; i++)
 8003fd6:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003fda:	3301      	adds	r3, #1
 8003fdc:	f8c7 3c20 	str.w	r3, [r7, #3104]	; 0xc20
 8003fe0:	f8d7 3c20 	ldr.w	r3, [r7, #3104]	; 0xc20
 8003fe4:	2b17      	cmp	r3, #23
 8003fe6:	f77f af7e 	ble.w	8003ee6 <ExtractKvPixelParameters+0x116>
        }
    }

    temp = fabs(kvTemp[0]);
 8003fea:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003fee:	f6a3 4328 	subw	r3, r3, #3112	; 0xc28
 8003ff2:	edd3 7a00 	vldr	s15, [r3]
 8003ff6:	eef0 7ae7 	vabs.f32	s15, s15
 8003ffa:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8003ffe:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8004002:	2301      	movs	r3, #1
 8004004:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 8004008:	e029      	b.n	800405e <ExtractKvPixelParameters+0x28e>
    {
        if (fabs(kvTemp[i]) > temp)
 800400a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800400e:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 8004012:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	eef0 7ae7 	vabs.f32	s15, s15
 8004022:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004026:	ed93 7a00 	vldr	s14, [r3]
 800402a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800402e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004032:	d50f      	bpl.n	8004054 <ExtractKvPixelParameters+0x284>
        {
            temp = fabs(kvTemp[i]);
 8004034:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004038:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 800403c:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	eef0 7ae7 	vabs.f32	s15, s15
 800404c:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004050:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 1; i < MLX90640_PIXEL_NUM; i++)
 8004054:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004058:	3301      	adds	r3, #1
 800405a:	f8c7 3c18 	str.w	r3, [r7, #3096]	; 0xc18
 800405e:	f8d7 3c18 	ldr.w	r3, [r7, #3096]	; 0xc18
 8004062:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004066:	dbd0      	blt.n	800400a <ExtractKvPixelParameters+0x23a>
        }
    }

    kvScale = 0;
 8004068:	2300      	movs	r3, #0
 800406a:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 800406e:	e00e      	b.n	800408e <ExtractKvPixelParameters+0x2be>
    {
        temp = temp*2;
 8004070:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004074:	edd3 7a00 	vldr	s15, [r3]
 8004078:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800407c:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004080:	edc3 7a00 	vstr	s15, [r3]
        kvScale = kvScale + 1;
 8004084:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 8004088:	3301      	adds	r3, #1
 800408a:	f887 3c2b 	strb.w	r3, [r7, #3115]	; 0xc2b
    while(temp < 63.4)
 800408e:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 8004092:	6818      	ldr	r0, [r3, #0]
 8004094:	f7fc fa80 	bl	8000598 <__aeabi_f2d>
 8004098:	a34e      	add	r3, pc, #312	; (adr r3, 80041d4 <ExtractKvPixelParameters+0x404>)
 800409a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409e:	f7fc fd45 	bl	8000b2c <__aeabi_dcmplt>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e3      	bne.n	8004070 <ExtractKvPixelParameters+0x2a0>
    }

    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 80040a8:	2300      	movs	r3, #0
 80040aa:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 80040ae:	e075      	b.n	800419c <ExtractKvPixelParameters+0x3cc>
    {
        temp = kvTemp[i] * POW2(kvScale);
 80040b0:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80040b4:	f6a3 4228 	subw	r2, r3, #3112	; 0xc28
 80040b8:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7fc fa68 	bl	8000598 <__aeabi_f2d>
 80040c8:	4604      	mov	r4, r0
 80040ca:	460d      	mov	r5, r1
 80040cc:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc fa3f 	bl	8000554 <__aeabi_ui2d>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	ec43 2b11 	vmov	d1, r2, r3
 80040de:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 80041c8 <ExtractKvPixelParameters+0x3f8>
 80040e2:	f008 f8bd 	bl	800c260 <pow>
 80040e6:	ec53 2b10 	vmov	r2, r3, d0
 80040ea:	4620      	mov	r0, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	f7fc faab 	bl	8000648 <__aeabi_dmul>
 80040f2:	4602      	mov	r2, r0
 80040f4:	460b      	mov	r3, r1
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	f7fc fd9d 	bl	8000c38 <__aeabi_d2f>
 80040fe:	4603      	mov	r3, r0
 8004100:	f607 4224 	addw	r2, r7, #3108	; 0xc24
 8004104:	6013      	str	r3, [r2, #0]
        if (temp < 0)
 8004106:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800410a:	edd3 7a00 	vldr	s15, [r3]
 800410e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004116:	d51e      	bpl.n	8004156 <ExtractKvPixelParameters+0x386>
        {
            mlx90640->kv[i] = (temp - 0.5);
 8004118:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	f7fc fa3b 	bl	8000598 <__aeabi_f2d>
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <ExtractKvPixelParameters+0x400>)
 8004128:	f7fc f8d6 	bl	80002d8 <__aeabi_dsub>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4610      	mov	r0, r2
 8004132:	4619      	mov	r1, r3
 8004134:	f7fc fd38 	bl	8000ba8 <__aeabi_d2iz>
 8004138:	4603      	mov	r3, r0
 800413a:	b259      	sxtb	r1, r3
 800413c:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8004140:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 800414a:	4413      	add	r3, r2
 800414c:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 8004150:	460a      	mov	r2, r1
 8004152:	701a      	strb	r2, [r3, #0]
 8004154:	e01d      	b.n	8004192 <ExtractKvPixelParameters+0x3c2>
        }
        else
        {
            mlx90640->kv[i] = (temp + 0.5);
 8004156:	f607 4324 	addw	r3, r7, #3108	; 0xc24
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	f7fc fa1c 	bl	8000598 <__aeabi_f2d>
 8004160:	f04f 0200 	mov.w	r2, #0
 8004164:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <ExtractKvPixelParameters+0x400>)
 8004166:	f7fc f8b9 	bl	80002dc <__adddf3>
 800416a:	4602      	mov	r2, r0
 800416c:	460b      	mov	r3, r1
 800416e:	4610      	mov	r0, r2
 8004170:	4619      	mov	r1, r3
 8004172:	f7fc fd19 	bl	8000ba8 <__aeabi_d2iz>
 8004176:	4603      	mov	r3, r0
 8004178:	b259      	sxtb	r1, r3
 800417a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800417e:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004188:	4413      	add	r3, r2
 800418a:	f603 734d 	addw	r3, r3, #3917	; 0xf4d
 800418e:	460a      	mov	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < MLX90640_PIXEL_NUM; i++)
 8004192:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 8004196:	3301      	adds	r3, #1
 8004198:	f8c7 3c14 	str.w	r3, [r7, #3092]	; 0xc14
 800419c:	f8d7 3c14 	ldr.w	r3, [r7, #3092]	; 0xc14
 80041a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a4:	db84      	blt.n	80040b0 <ExtractKvPixelParameters+0x2e0>
        }

    }

    mlx90640->kvScale = kvScale;
 80041a6:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80041aa:	f5a3 6343 	sub.w	r3, r3, #3120	; 0xc30
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b4:	461a      	mov	r2, r3
 80041b6:	f897 3c2b 	ldrb.w	r3, [r7, #3115]	; 0xc2b
 80041ba:	f882 324d 	strb.w	r3, [r2, #589]	; 0x24d
}
 80041be:	bf00      	nop
 80041c0:	f507 6743 	add.w	r7, r7, #3120	; 0xc30
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bdb0      	pop	{r4, r5, r7, pc}
 80041c8:	00000000 	.word	0x00000000
 80041cc:	40000000 	.word	0x40000000
 80041d0:	3fe00000 	.word	0x3fe00000
 80041d4:	33333333 	.word	0x33333333
 80041d8:	404fb333 	.word	0x404fb333
 80041dc:	00000000 	.word	0x00000000

080041e0 <ExtractCPParameters>:

//------------------------------------------------------------------------------

static void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = MLX90640_NIBBLE4(eeData[32]) + 27;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	3340      	adds	r3, #64	; 0x40
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	0b1b      	lsrs	r3, r3, #12
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	331b      	adds	r3, #27
 80041f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    offsetSP[0] = (eeData[58] & MLX90640_LSBITS_10_MASK);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3374      	adds	r3, #116	; 0x74
 8004200:	881b      	ldrh	r3, [r3, #0]
 8004202:	b21b      	sxth	r3, r3
 8004204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004208:	b21b      	sxth	r3, r3
 800420a:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 800420c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004214:	db07      	blt.n	8004226 <ExtractCPParameters+0x46>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 8004216:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800421a:	b29b      	uxth	r3, r3
 800421c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8004220:	b29b      	uxth	r3, r3
 8004222:	b21b      	sxth	r3, r3
 8004224:	813b      	strh	r3, [r7, #8]
    }

    offsetSP[1] = (eeData[58] & MLX90640_MSBITS_6_MASK) >> 10;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3374      	adds	r3, #116	; 0x74
 800422a:	881b      	ldrh	r3, [r3, #0]
 800422c:	0a9b      	lsrs	r3, r3, #10
 800422e:	b29b      	uxth	r3, r3
 8004230:	b21b      	sxth	r3, r3
 8004232:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 8004234:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004238:	2b1f      	cmp	r3, #31
 800423a:	dd06      	ble.n	800424a <ExtractCPParameters+0x6a>
    {
        offsetSP[1] = offsetSP[1] - 64;
 800423c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004240:	b29b      	uxth	r3, r3
 8004242:	3b40      	subs	r3, #64	; 0x40
 8004244:	b29b      	uxth	r3, r3
 8004246:	b21b      	sxth	r3, r3
 8004248:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0];
 800424a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800424e:	b29a      	uxth	r2, r3
 8004250:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004254:	b29b      	uxth	r3, r3
 8004256:	4413      	add	r3, r2
 8004258:	b29b      	uxth	r3, r3
 800425a:	b21b      	sxth	r3, r3
 800425c:	817b      	strh	r3, [r7, #10]

    alphaSP[0] = (eeData[57] & MLX90640_LSBITS_10_MASK);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3372      	adds	r3, #114	; 0x72
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004268:	ee07 3a90 	vmov	s15, r3
 800426c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004270:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8004274:	edd7 7a03 	vldr	s15, [r7, #12]
 8004278:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004448 <ExtractCPParameters+0x268>
 800427c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004284:	dd07      	ble.n	8004296 <ExtractCPParameters+0xb6>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8004286:	edd7 7a03 	vldr	s15, [r7, #12]
 800428a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800444c <ExtractCPParameters+0x26c>
 800428e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004292:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  POW2(alphaScale);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4618      	mov	r0, r3
 800429a:	f7fc f97d 	bl	8000598 <__aeabi_f2d>
 800429e:	4604      	mov	r4, r0
 80042a0:	460d      	mov	r5, r1
 80042a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fc f954 	bl	8000554 <__aeabi_ui2d>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	ec43 2b11 	vmov	d1, r2, r3
 80042b4:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8004440 <ExtractCPParameters+0x260>
 80042b8:	f007 ffd2 	bl	800c260 <pow>
 80042bc:	ec53 2b10 	vmov	r2, r3, d0
 80042c0:	4620      	mov	r0, r4
 80042c2:	4629      	mov	r1, r5
 80042c4:	f7fc faea 	bl	800089c <__aeabi_ddiv>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4610      	mov	r0, r2
 80042ce:	4619      	mov	r1, r3
 80042d0:	f7fc fcb2 	bl	8000c38 <__aeabi_d2f>
 80042d4:	4603      	mov	r3, r0
 80042d6:	60fb      	str	r3, [r7, #12]

    alphaSP[1] = (eeData[57] & MLX90640_MSBITS_6_MASK) >> 10;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3372      	adds	r3, #114	; 0x72
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	0a9b      	lsrs	r3, r3, #10
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	ee07 3a90 	vmov	s15, r3
 80042e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ea:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 80042ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80042f2:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80042f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fe:	dd07      	ble.n	8004310 <ExtractCPParameters+0x130>
    {
        alphaSP[1] = alphaSP[1] - 64;
 8004300:	edd7 7a04 	vldr	s15, [r7, #16]
 8004304:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8004450 <ExtractCPParameters+0x270>
 8004308:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800430c:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 8004310:	ed97 7a04 	vldr	s14, [r7, #16]
 8004314:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004454 <ExtractCPParameters+0x274>
 8004318:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800431c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004320:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004324:	edd7 7a03 	vldr	s15, [r7, #12]
 8004328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800432c:	edc7 7a04 	vstr	s15, [r7, #16]

    cpKta = (int8_t)MLX90640_LS_BYTE(eeData[59]);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3376      	adds	r3, #118	; 0x76
 8004334:	881b      	ldrh	r3, [r3, #0]
 8004336:	b25b      	sxtb	r3, r3
 8004338:	ee07 3a90 	vmov	s15, r3
 800433c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004340:	edc7 7a08 	vstr	s15, [r7, #32]

    ktaScale1 = MLX90640_NIBBLE2(eeData[56]) + 8;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3370      	adds	r3, #112	; 0x70
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	111b      	asrs	r3, r3, #4
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	b2db      	uxtb	r3, r3
 8004354:	3308      	adds	r3, #8
 8004356:	77fb      	strb	r3, [r7, #31]
    mlx90640->cpKta = cpKta / POW2(ktaScale1);
 8004358:	6a38      	ldr	r0, [r7, #32]
 800435a:	f7fc f91d 	bl	8000598 <__aeabi_f2d>
 800435e:	4604      	mov	r4, r0
 8004360:	460d      	mov	r5, r1
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc f8f5 	bl	8000554 <__aeabi_ui2d>
 800436a:	4602      	mov	r2, r0
 800436c:	460b      	mov	r3, r1
 800436e:	ec43 2b11 	vmov	d1, r2, r3
 8004372:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8004440 <ExtractCPParameters+0x260>
 8004376:	f007 ff73 	bl	800c260 <pow>
 800437a:	ec53 2b10 	vmov	r2, r3, d0
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	f7fc fa8b 	bl	800089c <__aeabi_ddiv>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	f7fc fc53 	bl	8000c38 <__aeabi_d2f>
 8004392:	4602      	mov	r2, r0
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	621a      	str	r2, [r3, #32]

    cpKv = (int8_t)MLX90640_MS_BYTE(eeData[59]);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3376      	adds	r3, #118	; 0x76
 800439c:	881b      	ldrh	r3, [r3, #0]
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	b25b      	sxtb	r3, r3
 80043a4:	ee07 3a90 	vmov	s15, r3
 80043a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043ac:	edc7 7a06 	vstr	s15, [r7, #24]

    kvScale = MLX90640_NIBBLE3(eeData[56]);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3370      	adds	r3, #112	; 0x70
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	121b      	asrs	r3, r3, #8
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	75fb      	strb	r3, [r7, #23]
    mlx90640->cpKv = cpKv / POW2(kvScale);
 80043c0:	69b8      	ldr	r0, [r7, #24]
 80043c2:	f7fc f8e9 	bl	8000598 <__aeabi_f2d>
 80043c6:	4604      	mov	r4, r0
 80043c8:	460d      	mov	r5, r1
 80043ca:	7dfb      	ldrb	r3, [r7, #23]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fc f8c1 	bl	8000554 <__aeabi_ui2d>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	ec43 2b11 	vmov	d1, r2, r3
 80043da:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8004440 <ExtractCPParameters+0x260>
 80043de:	f007 ff3f 	bl	800c260 <pow>
 80043e2:	ec53 2b10 	vmov	r2, r3, d0
 80043e6:	4620      	mov	r0, r4
 80043e8:	4629      	mov	r1, r5
 80043ea:	f7fc fa57 	bl	800089c <__aeabi_ddiv>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4610      	mov	r0, r2
 80043f4:	4619      	mov	r1, r3
 80043f6:	f7fc fc1f 	bl	8000c38 <__aeabi_d2f>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	61da      	str	r2, [r3, #28]

    mlx90640->cpAlpha[0] = alphaSP[0];
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004408:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
    mlx90640->cpAlpha[1] = alphaSP[1];
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004414:	f8c2 3254 	str.w	r3, [r2, #596]	; 0x254
    mlx90640->cpOffset[0] = offsetSP[0];
 8004418:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004422:	f8a3 2258 	strh.w	r2, [r3, #600]	; 0x258
    mlx90640->cpOffset[1] = offsetSP[1];
 8004426:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004430:	f8a3 225a 	strh.w	r2, [r3, #602]	; 0x25a
}
 8004434:	bf00      	nop
 8004436:	3728      	adds	r7, #40	; 0x28
 8004438:	46bd      	mov	sp, r7
 800443a:	bdb0      	pop	{r4, r5, r7, pc}
 800443c:	f3af 8000 	nop.w
 8004440:	00000000 	.word	0x00000000
 8004444:	40000000 	.word	0x40000000
 8004448:	43ff8000 	.word	0x43ff8000
 800444c:	44800000 	.word	0x44800000
 8004450:	42800000 	.word	0x42800000
 8004454:	43000000 	.word	0x43000000

08004458 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

static void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;

    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3314      	adds	r3, #20
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	111b      	asrs	r3, r3, #4
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004470:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 8004472:	7dfb      	ldrb	r3, [r7, #23]
 8004474:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8004478:	43db      	mvns	r3, r3
 800447a:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	336a      	adds	r3, #106	; 0x6a
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800448e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 8004492:	edd7 7a02 	vldr	s15, [r7, #8]
 8004496:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800449a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	dd07      	ble.n	80044b4 <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 80044a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80044a8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8004590 <ExtractCILCParameters+0x138>
 80044ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044b0:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 80044b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80044b8:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80044bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044c0:	edc7 7a02 	vstr	s15, [r7, #8]

    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	336a      	adds	r3, #106	; 0x6a
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	119b      	asrs	r3, r3, #6
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	ee07 3a90 	vmov	s15, r3
 80044d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044d8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 80044dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80044e0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80044e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	dd07      	ble.n	80044fe <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 80044ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80044f2:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004594 <ExtractCILCParameters+0x13c>
 80044f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044fa:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 80044fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8004502:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004506:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800450a:	edc7 7a03 	vstr	s15, [r7, #12]

    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	336a      	adds	r3, #106	; 0x6a
 8004512:	881b      	ldrh	r3, [r3, #0]
 8004514:	0adb      	lsrs	r3, r3, #11
 8004516:	b29b      	uxth	r3, r3
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004520:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 8004524:	edd7 7a04 	vldr	s15, [r7, #16]
 8004528:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800452c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	dd07      	ble.n	8004546 <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 8004536:	edd7 7a04 	vldr	s15, [r7, #16]
 800453a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004594 <ExtractCILCParameters+0x13c>
 800453e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004542:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 8004546:	ed97 7a04 	vldr	s14, [r7, #16]
 800454a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800454e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004552:	edc7 7a04 	vstr	s15, [r7, #16]

    mlx90640->calibrationModeEE = calibrationModeEE;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	7dfa      	ldrb	r2, [r7, #23]
 800455a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004566:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    mlx90640->ilChessC[1] = ilChessC[1];
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004572:	f8c2 3260 	str.w	r3, [r2, #608]	; 0x260
    mlx90640->ilChessC[2] = ilChessC[2];
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	683a      	ldr	r2, [r7, #0]
 800457a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800457e:	f8c2 3264 	str.w	r3, [r2, #612]	; 0x264
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	42800000 	.word	0x42800000
 8004594:	42000000 	.word	0x42000000

08004598 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

static int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
    int i;

    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80045b2:	2300      	movs	r3, #0
 80045b4:	82fb      	strh	r3, [r7, #22]
 80045b6:	e013      	b.n	80045e0 <ExtractDeviatingPixels+0x48>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 80045b8:	8afa      	ldrh	r2, [r7, #22]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80045c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80045c4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 80045c8:	8afb      	ldrh	r3, [r7, #22]
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4413      	add	r3, r2
 80045d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045d8:	805a      	strh	r2, [r3, #2]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80045da:	8afb      	ldrh	r3, [r7, #22]
 80045dc:	3301      	adds	r3, #1
 80045de:	82fb      	strh	r3, [r7, #22]
 80045e0:	8afb      	ldrh	r3, [r7, #22]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d9e8      	bls.n	80045b8 <ExtractDeviatingPixels+0x20>
    }

    pixCnt = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 80045ea:	e02a      	b.n	8004642 <ExtractDeviatingPixels+0xaa>
    {
        if(eeData[pixCnt+64] == 0)
 80045ec:	8afb      	ldrh	r3, [r7, #22]
 80045ee:	3340      	adds	r3, #64	; 0x40
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10a      	bne.n	8004612 <ExtractDeviatingPixels+0x7a>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 80045fc:	8aba      	ldrh	r2, [r7, #20]
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004604:	8af9      	ldrh	r1, [r7, #22]
 8004606:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            brokenPixCnt = brokenPixCnt + 1;
 800460a:	8abb      	ldrh	r3, [r7, #20]
 800460c:	3301      	adds	r3, #1
 800460e:	82bb      	strh	r3, [r7, #20]
 8004610:	e014      	b.n	800463c <ExtractDeviatingPixels+0xa4>
        }
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 8004612:	8afb      	ldrh	r3, [r7, #22]
 8004614:	3340      	adds	r3, #64	; 0x40
 8004616:	005b      	lsls	r3, r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	4413      	add	r3, r2
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <ExtractDeviatingPixels+0xa4>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8004626:	8a7b      	ldrh	r3, [r7, #18]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	f603 1338 	addw	r3, r3, #2360	; 0x938
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4413      	add	r3, r2
 8004632:	8afa      	ldrh	r2, [r7, #22]
 8004634:	805a      	strh	r2, [r3, #2]
            outlierPixCnt = outlierPixCnt + 1;
 8004636:	8a7b      	ldrh	r3, [r7, #18]
 8004638:	3301      	adds	r3, #1
 800463a:	827b      	strh	r3, [r7, #18]
        }

        pixCnt = pixCnt + 1;
 800463c:	8afb      	ldrh	r3, [r7, #22]
 800463e:	3301      	adds	r3, #1
 8004640:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < MLX90640_PIXEL_NUM && brokenPixCnt < 5 && outlierPixCnt < 5)
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004648:	d205      	bcs.n	8004656 <ExtractDeviatingPixels+0xbe>
 800464a:	8abb      	ldrh	r3, [r7, #20]
 800464c:	2b04      	cmp	r3, #4
 800464e:	d802      	bhi.n	8004656 <ExtractDeviatingPixels+0xbe>
 8004650:	8a7b      	ldrh	r3, [r7, #18]
 8004652:	2b04      	cmp	r3, #4
 8004654:	d9ca      	bls.n	80045ec <ExtractDeviatingPixels+0x54>

    }

    if(brokenPixCnt > 4)
 8004656:	8abb      	ldrh	r3, [r7, #20]
 8004658:	2b04      	cmp	r3, #4
 800465a:	d903      	bls.n	8004664 <ExtractDeviatingPixels+0xcc>
    {
        warn = -MLX90640_BROKEN_PIXELS_NUM_ERROR;
 800465c:	f06f 0302 	mvn.w	r3, #2
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e08f      	b.n	8004784 <ExtractDeviatingPixels+0x1ec>
    }
    else if(outlierPixCnt > 4)
 8004664:	8a7b      	ldrh	r3, [r7, #18]
 8004666:	2b04      	cmp	r3, #4
 8004668:	d903      	bls.n	8004672 <ExtractDeviatingPixels+0xda>
    {
        warn = -MLX90640_OUTLIER_PIXELS_NUM_ERROR;
 800466a:	f06f 0303 	mvn.w	r3, #3
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e088      	b.n	8004784 <ExtractDeviatingPixels+0x1ec>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)
 8004672:	8aba      	ldrh	r2, [r7, #20]
 8004674:	8a7b      	ldrh	r3, [r7, #18]
 8004676:	4413      	add	r3, r2
 8004678:	2b04      	cmp	r3, #4
 800467a:	dd03      	ble.n	8004684 <ExtractDeviatingPixels+0xec>
    {
        warn = -MLX90640_BAD_PIXELS_NUM_ERROR;
 800467c:	f06f 0304 	mvn.w	r3, #4
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	e07f      	b.n	8004784 <ExtractDeviatingPixels+0x1ec>
    }
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8004684:	2300      	movs	r3, #0
 8004686:	82fb      	strh	r3, [r7, #22]
 8004688:	e022      	b.n	80046d0 <ExtractDeviatingPixels+0x138>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800468a:	8afb      	ldrh	r3, [r7, #22]
 800468c:	3301      	adds	r3, #1
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	e017      	b.n	80046c2 <ExtractDeviatingPixels+0x12a>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8004692:	8afa      	ldrh	r2, [r7, #22]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	f602 1234 	addw	r2, r2, #2356	; 0x934
 800469a:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	f602 1234 	addw	r2, r2, #2356	; 0x934
 80046a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80046aa:	4619      	mov	r1, r3
 80046ac:	f000 f86f 	bl	800478e <CheckAdjacentPixels>
 80046b0:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <ExtractDeviatingPixels+0x124>
                {
                    return warn;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	e064      	b.n	8004786 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	3301      	adds	r3, #1
 80046c0:	60bb      	str	r3, [r7, #8]
 80046c2:	8abb      	ldrh	r3, [r7, #20]
 80046c4:	68ba      	ldr	r2, [r7, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	dbe3      	blt.n	8004692 <ExtractDeviatingPixels+0xfa>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80046ca:	8afb      	ldrh	r3, [r7, #22]
 80046cc:	3301      	adds	r3, #1
 80046ce:	82fb      	strh	r3, [r7, #22]
 80046d0:	8afa      	ldrh	r2, [r7, #22]
 80046d2:	8abb      	ldrh	r3, [r7, #20]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d3d8      	bcc.n	800468a <ExtractDeviatingPixels+0xf2>
                }
            }
        }

        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80046d8:	2300      	movs	r3, #0
 80046da:	82fb      	strh	r3, [r7, #22]
 80046dc:	e024      	b.n	8004728 <ExtractDeviatingPixels+0x190>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 80046de:	8afb      	ldrh	r3, [r7, #22]
 80046e0:	3301      	adds	r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	e019      	b.n	800471a <ExtractDeviatingPixels+0x182>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 80046e6:	8afb      	ldrh	r3, [r7, #22]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	4413      	add	r3, r2
 80046f2:	8858      	ldrh	r0, [r3, #2]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f603 1338 	addw	r3, r3, #2360	; 0x938
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	4413      	add	r3, r2
 8004700:	885b      	ldrh	r3, [r3, #2]
 8004702:	4619      	mov	r1, r3
 8004704:	f000 f843 	bl	800478e <CheckAdjacentPixels>
 8004708:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <ExtractDeviatingPixels+0x17c>
                {
                    return warn;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	e038      	b.n	8004786 <ExtractDeviatingPixels+0x1ee>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	3301      	adds	r3, #1
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	8a7b      	ldrh	r3, [r7, #18]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	dbe1      	blt.n	80046e6 <ExtractDeviatingPixels+0x14e>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8004722:	8afb      	ldrh	r3, [r7, #22]
 8004724:	3301      	adds	r3, #1
 8004726:	82fb      	strh	r3, [r7, #22]
 8004728:	8afa      	ldrh	r2, [r7, #22]
 800472a:	8a7b      	ldrh	r3, [r7, #18]
 800472c:	429a      	cmp	r2, r3
 800472e:	d3d6      	bcc.n	80046de <ExtractDeviatingPixels+0x146>
                }
            }
        }

        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8004730:	2300      	movs	r3, #0
 8004732:	82fb      	strh	r3, [r7, #22]
 8004734:	e022      	b.n	800477c <ExtractDeviatingPixels+0x1e4>
        {
            for(i=0; i<outlierPixCnt; i++)
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	e018      	b.n	800476e <ExtractDeviatingPixels+0x1d6>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 800473c:	8afa      	ldrh	r2, [r7, #22]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004744:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	4413      	add	r3, r2
 8004754:	885b      	ldrh	r3, [r3, #2]
 8004756:	4619      	mov	r1, r3
 8004758:	f000 f819 	bl	800478e <CheckAdjacentPixels>
 800475c:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <ExtractDeviatingPixels+0x1d0>
                {
                    return warn;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	e00e      	b.n	8004786 <ExtractDeviatingPixels+0x1ee>
            for(i=0; i<outlierPixCnt; i++)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	3301      	adds	r3, #1
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	8a7b      	ldrh	r3, [r7, #18]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	dbe2      	blt.n	800473c <ExtractDeviatingPixels+0x1a4>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8004776:	8afb      	ldrh	r3, [r7, #22]
 8004778:	3301      	adds	r3, #1
 800477a:	82fb      	strh	r3, [r7, #22]
 800477c:	8afa      	ldrh	r2, [r7, #22]
 800477e:	8abb      	ldrh	r3, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d3d8      	bcc.n	8004736 <ExtractDeviatingPixels+0x19e>
        }

    }


    return warn;
 8004784:	68fb      	ldr	r3, [r7, #12]

}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 static int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 800478e:	b480      	push	{r7}
 8004790:	b087      	sub	sp, #28
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	460a      	mov	r2, r1
 8004798:	80fb      	strh	r3, [r7, #6]
 800479a:	4613      	mov	r3, r2
 800479c:	80bb      	strh	r3, [r7, #4]

     int pixPosDif;
     uint16_t lp1 = pix1 >> 5;
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	82fb      	strh	r3, [r7, #22]
     uint16_t lp2 = pix2 >> 5;
 80047a4:	88bb      	ldrh	r3, [r7, #4]
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	82bb      	strh	r3, [r7, #20]
     uint16_t cp1 = pix1 - (lp1 << 5);
 80047aa:	8afb      	ldrh	r3, [r7, #22]
 80047ac:	015b      	lsls	r3, r3, #5
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	88fa      	ldrh	r2, [r7, #6]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	827b      	strh	r3, [r7, #18]
     uint16_t cp2 = pix2 - (lp2 << 5);
 80047b6:	8abb      	ldrh	r3, [r7, #20]
 80047b8:	015b      	lsls	r3, r3, #5
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	88ba      	ldrh	r2, [r7, #4]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	823b      	strh	r3, [r7, #16]

     pixPosDif = lp1 - lp2;
 80047c2:	8afa      	ldrh	r2, [r7, #22]
 80047c4:	8abb      	ldrh	r3, [r7, #20]
 80047c6:	1ad3      	subs	r3, r2, r3
 80047c8:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -2 && pixPosDif < 2)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	db10      	blt.n	80047f4 <CheckAdjacentPixels+0x66>
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	dc0d      	bgt.n	80047f4 <CheckAdjacentPixels+0x66>
     {
        pixPosDif = cp1 - cp2;
 80047d8:	8a7a      	ldrh	r2, [r7, #18]
 80047da:	8a3b      	ldrh	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	60fb      	str	r3, [r7, #12]
        if(pixPosDif > -2 && pixPosDif < 2)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	db05      	blt.n	80047f4 <CheckAdjacentPixels+0x66>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	dc02      	bgt.n	80047f4 <CheckAdjacentPixels+0x66>
        {
            return -6;
 80047ee:	f06f 0305 	mvn.w	r3, #5
 80047f2:	e000      	b.n	80047f6 <CheckAdjacentPixels+0x68>
        }

     }

     return 0;
 80047f4:	2300      	movs	r3, #0
 }
 80047f6:	4618      	mov	r0, r3
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <GetMedian>:

//------------------------------------------------------------------------------

static float GetMedian(float *values, int n)
 {
 8004802:	b480      	push	{r7}
 8004804:	b087      	sub	sp, #28
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]
    float temp;

    for(int i=0; i<n-1; i++)
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e034      	b.n	800487c <GetMedian+0x7a>
    {
        for(int j=i+1; j<n; j++)
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	3301      	adds	r3, #1
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	e029      	b.n	800486e <GetMedian+0x6c>
        {
            if(values[j] < values[i])
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	4413      	add	r3, r2
 8004822:	ed93 7a00 	vldr	s14, [r3]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4413      	add	r3, r2
 800482e:	edd3 7a00 	vldr	s15, [r3]
 8004832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	d515      	bpl.n	8004868 <GetMedian+0x66>
            {
                temp = values[i];
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	4413      	add	r3, r2
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]
                values[i] = values[j];
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	441a      	add	r2, r3
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	6879      	ldr	r1, [r7, #4]
 8004856:	440b      	add	r3, r1
 8004858:	6812      	ldr	r2, [r2, #0]
 800485a:	601a      	str	r2, [r3, #0]
                values[j] = temp;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	4413      	add	r3, r2
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]
        for(int j=i+1; j<n; j++)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3301      	adds	r3, #1
 800486c:	613b      	str	r3, [r7, #16]
 800486e:	693a      	ldr	r2, [r7, #16]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	429a      	cmp	r2, r3
 8004874:	dbd1      	blt.n	800481a <GetMedian+0x18>
    for(int i=0; i<n-1; i++)
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	3301      	adds	r3, #1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	3b01      	subs	r3, #1
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	429a      	cmp	r2, r3
 8004884:	dbc5      	blt.n	8004812 <GetMedian+0x10>
            }
        }
    }

    if(n%2==0)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d11b      	bne.n	80048c8 <GetMedian+0xc6>
    {
        return ((values[n/2] + values[n/2 - 1]) / 2.0);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	0fda      	lsrs	r2, r3, #31
 8004894:	4413      	add	r3, r2
 8004896:	105b      	asrs	r3, r3, #1
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	4413      	add	r3, r2
 800489e:	ed93 7a00 	vldr	s14, [r3]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	0fda      	lsrs	r2, r3, #31
 80048a6:	4413      	add	r3, r2
 80048a8:	105b      	asrs	r3, r3, #1
 80048aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80048ae:	3b01      	subs	r3, #1
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4413      	add	r3, r2
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048be:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80048c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048c6:	e008      	b.n	80048da <GetMedian+0xd8>

    }
    else
    {
        return values[n/2];
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	0fda      	lsrs	r2, r3, #31
 80048cc:	4413      	add	r3, r2
 80048ce:	105b      	asrs	r3, r3, #1
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4413      	add	r3, r2
 80048d6:	edd3 7a00 	vldr	s15, [r3]
    }

 }
 80048da:	eeb0 0a67 	vmov.f32	s0, s15
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <IsPixelBad>:

//------------------------------------------------------------------------------

static int IsPixelBad(uint16_t pixel,paramsMLX90640 *params)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b085      	sub	sp, #20
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	80fb      	strh	r3, [r7, #6]
    for(int i=0; i<5; i++)
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e017      	b.n	800492a <IsPixelBad+0x42>
    {
        if(pixel == params->outlierPixels[i] || pixel == params->brokenPixels[i])
 80048fa:	683a      	ldr	r2, [r7, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f603 1338 	addw	r3, r3, #2360	; 0x938
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	4413      	add	r3, r2
 8004906:	885b      	ldrh	r3, [r3, #2]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	429a      	cmp	r2, r3
 800490c:	d008      	beq.n	8004920 <IsPixelBad+0x38>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	f602 1234 	addw	r2, r2, #2356	; 0x934
 8004916:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	429a      	cmp	r2, r3
 800491e:	d101      	bne.n	8004924 <IsPixelBad+0x3c>
        {
            return 1;
 8004920:	2301      	movs	r3, #1
 8004922:	e006      	b.n	8004932 <IsPixelBad+0x4a>
    for(int i=0; i<5; i++)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	3301      	adds	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b04      	cmp	r3, #4
 800492e:	dde4      	ble.n	80048fa <IsPixelBad+0x12>
        }
    }

    return 0;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_I2C_EnableClockStretching>:
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_I2C_DisableGeneralCall>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	601a      	str	r2, [r3, #0]
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <LL_I2C_SetOwnAddress2>:
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004992:	f023 0306 	bic.w	r3, r3, #6
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	430a      	orrs	r2, r1
 800499c:	431a      	orrs	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	60da      	str	r2, [r3, #12]
}
 80049a2:	bf00      	nop
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <LL_I2C_DisableOwnAddress2>:
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	60da      	str	r2, [r3, #12]
}
 80049c2:	bf00      	nop
 80049c4:	370c      	adds	r7, #12
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr

080049ce <LL_I2C_EnableAutoEndMode>:
{
 80049ce:	b480      	push	{r7}
 80049d0:	b083      	sub	sp, #12
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
	...

080049f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80049f8:	4b08      	ldr	r3, [pc, #32]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80049fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80049fc:	4907      	ldr	r1, [pc, #28]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
}
 8004a10:	bf00      	nop
 8004a12:	3714      	adds	r7, #20
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr
 8004a1c:	40021000 	.word	0x40021000

08004a20 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a28:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a2c:	4907      	ldr	r1, [pc, #28]	; (8004a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8004a36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	bf00      	nop
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr
 8004a4c:	40021000 	.word	0x40021000

08004a50 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004a58:	1d39      	adds	r1, r7, #4
 8004a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a5e:	2201      	movs	r2, #1
 8004a60:	4803      	ldr	r0, [pc, #12]	; (8004a70 <__io_putchar+0x20>)
 8004a62:	f002 fb5d 	bl	8007120 <HAL_UART_Transmit>
	return ch;
 8004a66:	687b      	ldr	r3, [r7, #4]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000250 	.word	0x20000250

08004a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a74:	b5b0      	push	{r4, r5, r7, lr}
 8004a76:	f5ad 6d53 	sub.w	sp, sp, #3376	; 0xd30
 8004a7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a7c:	f000 fcc9 	bl	8005412 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a80:	f000 f8f2 	bl	8004c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a84:	f000 fa52 	bl	8004f2c <MX_GPIO_Init>
  MX_I2C1_Init();
 8004a88:	f000 f93a 	bl	8004d00 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8004a8c:	f000 f9fa 	bl	8004e84 <MX_USART2_UART_Init>
  MX_TIM7_Init();
 8004a90:	f000 f9be 	bl	8004e10 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
 8004a94:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a98:	f000 fd2c 	bl	80054f4 <HAL_Delay>
  MLX90640_I2CInit(/*hi2c1*/);
 8004a9c:	f7fc fb66 	bl	800116c <MLX90640_I2CInit>
  int status;
  uint16_t eeMLX90640[832];

  status = MLX90640_DumpEE(mlx_addr, eeMLX90640);
 8004aa0:	4b64      	ldr	r3, [pc, #400]	; (8004c34 <main+0x1c0>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f507 62d2 	add.w	r2, r7, #1680	; 0x690
 8004aaa:	4611      	mov	r1, r2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc fc9b 	bl	80013e8 <MLX90640_DumpEE>
 8004ab2:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004ab6:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d002      	beq.n	8004ac4 <main+0x50>
	  printf("Failed to load system parameters of MLX90640\n");
 8004abe:	485e      	ldr	r0, [pc, #376]	; (8004c38 <main+0x1c4>)
 8004ac0:	f005 fc30 	bl	800a324 <puts>

  status = MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 8004ac4:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004ac8:	495c      	ldr	r1, [pc, #368]	; (8004c3c <main+0x1c8>)
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc fe1b 	bl	8001706 <MLX90640_ExtractParameters>
 8004ad0:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  if (status != 0)
 8004ad4:	f8d7 3d24 	ldr.w	r3, [r7, #3364]	; 0xd24
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d004      	beq.n	8004ae6 <main+0x72>
	  printf("Number of pixel errors: %d\n", status);
 8004adc:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004ae0:	4857      	ldr	r0, [pc, #348]	; (8004c40 <main+0x1cc>)
 8004ae2:	f005 fbb9 	bl	800a258 <iprintf>
  MLX90640_SetRefreshRate(mlx_addr, 0x05);
 8004ae6:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <main+0x1c0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2105      	movs	r1, #5
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fc fe4e 	bl	8001790 <MLX90640_SetRefreshRate>

  status = MLX90640_GetCurMode(mlx_addr);
 8004af4:	4b4f      	ldr	r3, [pc, #316]	; (8004c34 <main+0x1c0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc fe78 	bl	80017f0 <MLX90640_GetCurMode>
 8004b00:	f8c7 0d24 	str.w	r0, [r7, #3364]	; 0xd24
  	  printf("Current mode: %d\n", status);
 8004b04:	f8d7 1d24 	ldr.w	r1, [r7, #3364]	; 0xd24
 8004b08:	484e      	ldr	r0, [pc, #312]	; (8004c44 <main+0x1d0>)
 8004b0a:	f005 fba5 	bl	800a258 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004b0e:	4b4e      	ldr	r3, [pc, #312]	; (8004c48 <main+0x1d4>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b18:	d359      	bcc.n	8004bce <main+0x15a>
	  {
		  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8004b1a:	4b4b      	ldr	r3, [pc, #300]	; (8004c48 <main+0x1d4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	625a      	str	r2, [r3, #36]	; 0x24
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004b28:	e04d      	b.n	8004bc6 <main+0x152>
		  {
		    uint16_t mlx90640Frame[834];
		    int status = MLX90640_GetFrameData(mlx_addr, mlx90640Frame);
 8004b2a:	4b42      	ldr	r3, [pc, #264]	; (8004c34 <main+0x1c0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	1d3a      	adds	r2, r7, #4
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7fc fc6a 	bl	800140e <MLX90640_GetFrameData>
 8004b3a:	f8c7 0d20 	str.w	r0, [r7, #3360]	; 0xd20
		    if (status < 0)
 8004b3e:	f8d7 3d20 	ldr.w	r3, [r7, #3360]	; 0xd20
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	da04      	bge.n	8004b50 <main+0xdc>
		    {
		    	printf("GetFrame Error: %d\n", status);
 8004b46:	f8d7 1d20 	ldr.w	r1, [r7, #3360]	; 0xd20
 8004b4a:	4840      	ldr	r0, [pc, #256]	; (8004c4c <main+0x1d8>)
 8004b4c:	f005 fb84 	bl	800a258 <iprintf>
		    };
		    float Ta = MLX90640_GetTa(mlx90640Frame, &mlx90640);
 8004b50:	1d3b      	adds	r3, r7, #4
 8004b52:	493a      	ldr	r1, [pc, #232]	; (8004c3c <main+0x1c8>)
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fbfb 	bl	8002350 <MLX90640_GetTa>
 8004b5a:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004b5e:	ed83 0a00 	vstr	s0, [r3]

		    float tr = Ta - TA_SHIFT; //Reflected temperature based on the sensor ambient temperature
 8004b62:	f607 531c 	addw	r3, r7, #3356	; 0xd1c
 8004b66:	edd3 7a00 	vldr	s15, [r3]
 8004b6a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004b6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004b72:	f607 5318 	addw	r3, r7, #3352	; 0xd18
 8004b76:	edc3 7a00 	vstr	s15, [r3]
		    float emissivity = MLX90640_CONFIG_EMISSIVITY;
 8004b7a:	4b35      	ldr	r3, [pc, #212]	; (8004c50 <main+0x1dc>)
 8004b7c:	f607 5214 	addw	r2, r7, #3348	; 0xd14
 8004b80:	6013      	str	r3, [r2, #0]

		    MLX90640_CalculateTo(mlx90640Frame, &mlx90640, emissivity, tr, mlx90640To);
 8004b82:	1d3b      	adds	r3, r7, #4
 8004b84:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <main+0x1e0>)
 8004b86:	f607 5118 	addw	r1, r7, #3352	; 0xd18
 8004b8a:	edd1 0a00 	vldr	s1, [r1]
 8004b8e:	f607 5114 	addw	r1, r7, #3348	; 0xd14
 8004b92:	ed91 0a00 	vldr	s0, [r1]
 8004b96:	4929      	ldr	r1, [pc, #164]	; (8004c3c <main+0x1c8>)
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fc fe49 	bl	8001830 <MLX90640_CalculateTo>
		    int mode = MLX90640_GetCurMode(mlx_addr);
 8004b9e:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <main+0x1c0>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fc fe23 	bl	80017f0 <MLX90640_GetCurMode>
 8004baa:	f8c7 0d10 	str.w	r0, [r7, #3344]	; 0xd10
		    MLX90640_BadPixelsCorrection(mlx90640.brokenPixels, mlx90640To, mode, &mlx90640);
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <main+0x1c8>)
 8004bb0:	f8d7 2d10 	ldr.w	r2, [r7, #3344]	; 0xd10
 8004bb4:	4927      	ldr	r1, [pc, #156]	; (8004c54 <main+0x1e0>)
 8004bb6:	4828      	ldr	r0, [pc, #160]	; (8004c58 <main+0x1e4>)
 8004bb8:	f7fd fc5e 	bl	8002478 <MLX90640_BadPixelsCorrection>
		  for (int x = 0 ; x < 2 ; x++) //Read both subpages
 8004bbc:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	f8c7 3d2c 	str.w	r3, [r7, #3372]	; 0xd2c
 8004bc6:	f8d7 3d2c 	ldr.w	r3, [r7, #3372]	; 0xd2c
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	ddad      	ble.n	8004b2a <main+0xb6>
		  }

	  }

	  if (send_usart == 1)
 8004bce:	4b23      	ldr	r3, [pc, #140]	; (8004c5c <main+0x1e8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d19b      	bne.n	8004b0e <main+0x9a>
	  {
		  send_usart = 0;
 8004bd6:	4b21      	ldr	r3, [pc, #132]	; (8004c5c <main+0x1e8>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 768; i++)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004be2:	e021      	b.n	8004c28 <main+0x1b4>
		  {
			  int64_t data = (int)(mlx90640To[i] * 100);
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <main+0x1e0>)
 8004be6:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004c60 <main+0x1ec>
 8004bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bfe:	ee17 2a90 	vmov	r2, s15
 8004c02:	17d3      	asrs	r3, r2, #31
 8004c04:	4614      	mov	r4, r2
 8004c06:	461d      	mov	r5, r3
 8004c08:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004c0c:	e943 4502 	strd	r4, r5, [r3, #-8]
			  HAL_UART_Transmit(&huart2, (uint8_t*)&data, 8, 100);
 8004c10:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 8004c14:	2364      	movs	r3, #100	; 0x64
 8004c16:	2208      	movs	r2, #8
 8004c18:	4812      	ldr	r0, [pc, #72]	; (8004c64 <main+0x1f0>)
 8004c1a:	f002 fa81 	bl	8007120 <HAL_UART_Transmit>
		  for (int i = 0; i < 768; i++)
 8004c1e:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c22:	3301      	adds	r3, #1
 8004c24:	f8c7 3d28 	str.w	r3, [r7, #3368]	; 0xd28
 8004c28:	f8d7 3d28 	ldr.w	r3, [r7, #3368]	; 0xd28
 8004c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c30:	dbd8      	blt.n	8004be4 <main+0x170>
	  if( __HAL_TIM_GET_COUNTER(&htim7) >= 2000)	// Calculate Based on refresh
 8004c32:	e76c      	b.n	8004b0e <main+0x9a>
 8004c34:	20000000 	.word	0x20000000
 8004c38:	0800d148 	.word	0x0800d148
 8004c3c:	20000ee4 	.word	0x20000ee4
 8004c40:	0800d178 	.word	0x0800d178
 8004c44:	0800d194 	.word	0x0800d194
 8004c48:	20000204 	.word	0x20000204
 8004c4c:	0800d1a8 	.word	0x0800d1a8
 8004c50:	3f733333 	.word	0x3f733333
 8004c54:	200002e4 	.word	0x200002e4
 8004c58:	2000214c 	.word	0x2000214c
 8004c5c:	20002164 	.word	0x20002164
 8004c60:	42c80000 	.word	0x42c80000
 8004c64:	20000250 	.word	0x20000250

08004c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b094      	sub	sp, #80	; 0x50
 8004c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c6e:	f107 0318 	add.w	r3, r7, #24
 8004c72:	2238      	movs	r2, #56	; 0x38
 8004c74:	2100      	movs	r1, #0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f005 fc34 	bl	800a4e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c7c:	1d3b      	adds	r3, r7, #4
 8004c7e:	2200      	movs	r2, #0
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	605a      	str	r2, [r3, #4]
 8004c84:	609a      	str	r2, [r3, #8]
 8004c86:	60da      	str	r2, [r3, #12]
 8004c88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	f000 ffe2 	bl	8005c54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004caa:	2355      	movs	r3, #85	; 0x55
 8004cac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004cae:	2302      	movs	r3, #2
 8004cb0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cba:	f107 0318 	add.w	r3, r7, #24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 f87c 	bl	8005dbc <HAL_RCC_OscConfig>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <SystemClock_Config+0x66>
  {
    Error_Handler();
 8004cca:	f000 f9bb 	bl	8005044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cce:	230f      	movs	r3, #15
 8004cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ce2:	1d3b      	adds	r3, r7, #4
 8004ce4:	2104      	movs	r1, #4
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 fb7a 	bl	80063e0 <HAL_RCC_ClockConfig>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004cf2:	f000 f9a7 	bl	8005044 <Error_Handler>
  }
}
 8004cf6:	bf00      	nop
 8004cf8:	3750      	adds	r7, #80	; 0x50
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b0a2      	sub	sp, #136	; 0x88
 8004d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8004d06:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	605a      	str	r2, [r3, #4]
 8004d10:	609a      	str	r2, [r3, #8]
 8004d12:	60da      	str	r2, [r3, #12]
 8004d14:	611a      	str	r2, [r3, #16]
 8004d16:	615a      	str	r2, [r3, #20]
 8004d18:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	60da      	str	r2, [r3, #12]
 8004d28:	611a      	str	r2, [r3, #16]
 8004d2a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	2250      	movs	r2, #80	; 0x50
 8004d30:	2100      	movs	r1, #0
 8004d32:	4618      	mov	r0, r3
 8004d34:	f005 fbd6 	bl	800a4e4 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d40:	1d3b      	adds	r3, r7, #4
 8004d42:	4618      	mov	r0, r3
 8004d44:	f001 fd68 	bl	8006818 <HAL_RCCEx_PeriphCLKConfig>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <MX_I2C1_Init+0x52>
  {
    Error_Handler();
 8004d4e:	f000 f979 	bl	8005044 <Error_Handler>
  }

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004d52:	2002      	movs	r0, #2
 8004d54:	f7ff fe4c 	bl	80049f0 <LL_AHB2_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB8-BOOT0   ------> I2C1_SCL
  PB9   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8004d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d5c:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d62:	2300      	movs	r3, #0
 8004d64:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004d66:	2301      	movs	r3, #1
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004d6e:	2304      	movs	r3, #4
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d76:	4619      	mov	r1, r3
 8004d78:	4822      	ldr	r0, [pc, #136]	; (8004e04 <MX_I2C1_Init+0x104>)
 8004d7a:	f004 fbf8 	bl	800956e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8004d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d82:	657b      	str	r3, [r7, #84]	; 0x54
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8004d84:	2302      	movs	r3, #2
 8004d86:	65bb      	str	r3, [r7, #88]	; 0x58
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	663b      	str	r3, [r7, #96]	; 0x60
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004d90:	2300      	movs	r3, #0
 8004d92:	667b      	str	r3, [r7, #100]	; 0x64
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8004d94:	2304      	movs	r3, #4
 8004d96:	66bb      	str	r3, [r7, #104]	; 0x68
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4819      	ldr	r0, [pc, #100]	; (8004e04 <MX_I2C1_Init+0x104>)
 8004da0:	f004 fbe5 	bl	800956e <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8004da4:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8004da8:	f7ff fe3a 	bl	8004a20 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8004dac:	2300      	movs	r3, #0
 8004dae:	66fb      	str	r3, [r7, #108]	; 0x6c
  I2C_InitStruct.Timing = 0x10802D9B;
 8004db0:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <MX_I2C1_Init+0x108>)
 8004db2:	673b      	str	r3, [r7, #112]	; 0x70
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	677b      	str	r3, [r7, #116]	; 0x74
  I2C_InitStruct.DigitalFilter = 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	67bb      	str	r3, [r7, #120]	; 0x78
  I2C_InitStruct.OwnAddress1 = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8004dcc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	480e      	ldr	r0, [pc, #56]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004dd4:	f004 fcdc 	bl	8009790 <LL_I2C_Init>
  LL_I2C_EnableAutoEndMode(I2C1);
 8004dd8:	480c      	ldr	r0, [pc, #48]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004dda:	f7ff fdf8 	bl	80049ce <LL_I2C_EnableAutoEndMode>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8004dde:	2200      	movs	r2, #0
 8004de0:	2100      	movs	r1, #0
 8004de2:	480a      	ldr	r0, [pc, #40]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004de4:	f7ff fdcb 	bl	800497e <LL_I2C_SetOwnAddress2>
  LL_I2C_DisableOwnAddress2(I2C1);
 8004de8:	4808      	ldr	r0, [pc, #32]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004dea:	f7ff fde0 	bl	80049ae <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8004dee:	4807      	ldr	r0, [pc, #28]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004df0:	f7ff fdb5 	bl	800495e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8004df4:	4805      	ldr	r0, [pc, #20]	; (8004e0c <MX_I2C1_Init+0x10c>)
 8004df6:	f7ff fda2 	bl	800493e <LL_I2C_EnableClockStretching>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004dfa:	bf00      	nop
 8004dfc:	3788      	adds	r7, #136	; 0x88
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	48000400 	.word	0x48000400
 8004e08:	10802d9b 	.word	0x10802d9b
 8004e0c:	40005400 	.word	0x40005400

08004e10 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e16:	1d3b      	adds	r3, r7, #4
 8004e18:	2200      	movs	r2, #0
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
 8004e1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <MX_TIM7_Init+0x70>)
 8004e24:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e28:	f244 2267 	movw	r2, #16999	; 0x4267
 8004e2c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e2e:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 19999;
 8004e34:	4b11      	ldr	r3, [pc, #68]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e36:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004e3a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e3c:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004e42:	480e      	ldr	r0, [pc, #56]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e44:	f001 ff24 	bl	8006c90 <HAL_TIM_Base_Init>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8004e4e:	f000 f8f9 	bl	8005044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004e5a:	1d3b      	adds	r3, r7, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4807      	ldr	r0, [pc, #28]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e60:	f002 f880 	bl	8006f64 <HAL_TIMEx_MasterConfigSynchronization>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8004e6a:	f000 f8eb 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  HAL_TIM_Base_Start(&htim7);
 8004e6e:	4803      	ldr	r0, [pc, #12]	; (8004e7c <MX_TIM7_Init+0x6c>)
 8004e70:	f001 ff66 	bl	8006d40 <HAL_TIM_Base_Start>
  /* USER CODE END TIM7_Init 2 */

}
 8004e74:	bf00      	nop
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	20000204 	.word	0x20000204
 8004e80:	40001400 	.word	0x40001400

08004e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004e88:	4b24      	ldr	r3, [pc, #144]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004e8a:	4a25      	ldr	r2, [pc, #148]	; (8004f20 <MX_USART2_UART_Init+0x9c>)
 8004e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 500000;
 8004e8e:	4b23      	ldr	r3, [pc, #140]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <MX_USART2_UART_Init+0xa0>)
 8004e92:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004e94:	4b21      	ldr	r3, [pc, #132]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004e96:	2200      	movs	r2, #0
 8004e98:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004ea0:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ea8:	220c      	movs	r2, #12
 8004eaa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb2:	4b1a      	ldr	r3, [pc, #104]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eb8:	4b18      	ldr	r3, [pc, #96]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ebe:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ec4:	4b15      	ldr	r3, [pc, #84]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004eca:	4814      	ldr	r0, [pc, #80]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ecc:	f002 f8d8 	bl	8007080 <HAL_UART_Init>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 8004ed6:	f000 f8b5 	bl	8005044 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004eda:	2100      	movs	r1, #0
 8004edc:	480f      	ldr	r0, [pc, #60]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ede:	f004 f930 	bl	8009142 <HAL_UARTEx_SetTxFifoThreshold>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8004ee8:	f000 f8ac 	bl	8005044 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004eec:	2100      	movs	r1, #0
 8004eee:	480b      	ldr	r0, [pc, #44]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004ef0:	f004 f965 	bl	80091be <HAL_UARTEx_SetRxFifoThreshold>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8004efa:	f000 f8a3 	bl	8005044 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004efe:	4807      	ldr	r0, [pc, #28]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004f00:	f004 f8e6 	bl	80090d0 <HAL_UARTEx_DisableFifoMode>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8004f0a:	f000 f89b 	bl	8005044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &usart1Buf, 1); 	//Enable interrupt
 8004f0e:	2201      	movs	r2, #1
 8004f10:	4905      	ldr	r1, [pc, #20]	; (8004f28 <MX_USART2_UART_Init+0xa4>)
 8004f12:	4802      	ldr	r0, [pc, #8]	; (8004f1c <MX_USART2_UART_Init+0x98>)
 8004f14:	f002 f992 	bl	800723c <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8004f18:	bf00      	nop
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000250 	.word	0x20000250
 8004f20:	40004400 	.word	0x40004400
 8004f24:	0007a120 	.word	0x0007a120
 8004f28:	20002160 	.word	0x20002160

08004f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b08a      	sub	sp, #40	; 0x28
 8004f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f32:	f107 0314 	add.w	r3, r7, #20
 8004f36:	2200      	movs	r2, #0
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	60da      	str	r2, [r3, #12]
 8004f40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f42:	4b2f      	ldr	r3, [pc, #188]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f46:	4a2e      	ldr	r2, [pc, #184]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f48:	f043 0304 	orr.w	r3, r3, #4
 8004f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f4e:	4b2c      	ldr	r3, [pc, #176]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f52:	f003 0304 	and.w	r3, r3, #4
 8004f56:	613b      	str	r3, [r7, #16]
 8004f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f5a:	4b29      	ldr	r3, [pc, #164]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	4a28      	ldr	r2, [pc, #160]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f60:	f043 0320 	orr.w	r3, r3, #32
 8004f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f66:	4b26      	ldr	r3, [pc, #152]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f72:	4b23      	ldr	r3, [pc, #140]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f76:	4a22      	ldr	r2, [pc, #136]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f78:	f043 0301 	orr.w	r3, r3, #1
 8004f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f82:	f003 0301 	and.w	r3, r3, #1
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f8a:	4b1d      	ldr	r3, [pc, #116]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	4a1c      	ldr	r2, [pc, #112]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f90:	f043 0302 	orr.w	r3, r3, #2
 8004f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <MX_GPIO_Init+0xd4>)
 8004f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f9a:	f003 0302 	and.w	r3, r3, #2
 8004f9e:	607b      	str	r3, [r7, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2120      	movs	r1, #32
 8004fa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004faa:	f000 fe17 	bl	8005bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004fae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004fbe:	f107 0314 	add.w	r3, r7, #20
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	480f      	ldr	r0, [pc, #60]	; (8005004 <MX_GPIO_Init+0xd8>)
 8004fc6:	f000 fc87 	bl	80058d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004fca:	2320      	movs	r3, #32
 8004fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fe4:	f000 fc78 	bl	80058d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2100      	movs	r1, #0
 8004fec:	2028      	movs	r0, #40	; 0x28
 8004fee:	f000 fb7e 	bl	80056ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004ff2:	2028      	movs	r0, #40	; 0x28
 8004ff4:	f000 fb95 	bl	8005722 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004ff8:	bf00      	nop
 8004ffa:	3728      	adds	r7, #40	; 0x28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	40021000 	.word	0x40021000
 8005004:	48000800 	.word	0x48000800

08005008 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a07      	ldr	r2, [pc, #28]	; (8005034 <HAL_UART_RxCpltCallback+0x2c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d107      	bne.n	800502a <HAL_UART_RxCpltCallback+0x22>
	{
		send_usart = 1;
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <HAL_UART_RxCpltCallback+0x30>)
 800501c:	2201      	movs	r2, #1
 800501e:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &usart1Buf, 1);
 8005020:	2201      	movs	r2, #1
 8005022:	4906      	ldr	r1, [pc, #24]	; (800503c <HAL_UART_RxCpltCallback+0x34>)
 8005024:	4806      	ldr	r0, [pc, #24]	; (8005040 <HAL_UART_RxCpltCallback+0x38>)
 8005026:	f002 f909 	bl	800723c <HAL_UART_Receive_IT>
	}
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40004400 	.word	0x40004400
 8005038:	20002164 	.word	0x20002164
 800503c:	20002160 	.word	0x20002160
 8005040:	20000250 	.word	0x20000250

08005044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005048:	b672      	cpsid	i
}
 800504a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800504c:	e7fe      	b.n	800504c <Error_Handler+0x8>
	...

08005050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005056:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <HAL_MspInit+0x44>)
 8005058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800505a:	4a0e      	ldr	r2, [pc, #56]	; (8005094 <HAL_MspInit+0x44>)
 800505c:	f043 0301 	orr.w	r3, r3, #1
 8005060:	6613      	str	r3, [r2, #96]	; 0x60
 8005062:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_MspInit+0x44>)
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	607b      	str	r3, [r7, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800506e:	4b09      	ldr	r3, [pc, #36]	; (8005094 <HAL_MspInit+0x44>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <HAL_MspInit+0x44>)
 8005074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
 800507a:	4b06      	ldr	r3, [pc, #24]	; (8005094 <HAL_MspInit+0x44>)
 800507c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	603b      	str	r3, [r7, #0]
 8005084:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005086:	f000 fe89 	bl	8005d9c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800508a:	bf00      	nop
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	40021000 	.word	0x40021000

08005098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0a      	ldr	r2, [pc, #40]	; (80050d0 <HAL_TIM_Base_MspInit+0x38>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d10b      	bne.n	80050c2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050aa:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <HAL_TIM_Base_MspInit+0x3c>)
 80050ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ae:	4a09      	ldr	r2, [pc, #36]	; (80050d4 <HAL_TIM_Base_MspInit+0x3c>)
 80050b0:	f043 0320 	orr.w	r3, r3, #32
 80050b4:	6593      	str	r3, [r2, #88]	; 0x58
 80050b6:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <HAL_TIM_Base_MspInit+0x3c>)
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f003 0320 	and.w	r3, r3, #32
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40001400 	.word	0x40001400
 80050d4:	40021000 	.word	0x40021000

080050d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b09e      	sub	sp, #120	; 0x78
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	605a      	str	r2, [r3, #4]
 80050ea:	609a      	str	r2, [r3, #8]
 80050ec:	60da      	str	r2, [r3, #12]
 80050ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050f0:	f107 0314 	add.w	r3, r7, #20
 80050f4:	2250      	movs	r2, #80	; 0x50
 80050f6:	2100      	movs	r1, #0
 80050f8:	4618      	mov	r0, r3
 80050fa:	f005 f9f3 	bl	800a4e4 <memset>
  if(huart->Instance==USART2)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a23      	ldr	r2, [pc, #140]	; (8005190 <HAL_UART_MspInit+0xb8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d13e      	bne.n	8005186 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005108:	2302      	movs	r3, #2
 800510a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005110:	f107 0314 	add.w	r3, r7, #20
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fb7f 	bl	8006818 <HAL_RCCEx_PeriphCLKConfig>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8005120:	f7ff ff90 	bl	8005044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005124:	4b1b      	ldr	r3, [pc, #108]	; (8005194 <HAL_UART_MspInit+0xbc>)
 8005126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005128:	4a1a      	ldr	r2, [pc, #104]	; (8005194 <HAL_UART_MspInit+0xbc>)
 800512a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800512e:	6593      	str	r3, [r2, #88]	; 0x58
 8005130:	4b18      	ldr	r3, [pc, #96]	; (8005194 <HAL_UART_MspInit+0xbc>)
 8005132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005138:	613b      	str	r3, [r7, #16]
 800513a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800513c:	4b15      	ldr	r3, [pc, #84]	; (8005194 <HAL_UART_MspInit+0xbc>)
 800513e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005140:	4a14      	ldr	r2, [pc, #80]	; (8005194 <HAL_UART_MspInit+0xbc>)
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <HAL_UART_MspInit+0xbc>)
 800514a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005154:	230c      	movs	r3, #12
 8005156:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005158:	2302      	movs	r3, #2
 800515a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800515c:	2300      	movs	r3, #0
 800515e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005160:	2300      	movs	r3, #0
 8005162:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005164:	2307      	movs	r3, #7
 8005166:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005168:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800516c:	4619      	mov	r1, r3
 800516e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005172:	f000 fbb1 	bl	80058d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005176:	2200      	movs	r2, #0
 8005178:	2100      	movs	r1, #0
 800517a:	2026      	movs	r0, #38	; 0x26
 800517c:	f000 fab7 	bl	80056ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005180:	2026      	movs	r0, #38	; 0x26
 8005182:	f000 face 	bl	8005722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005186:	bf00      	nop
 8005188:	3778      	adds	r7, #120	; 0x78
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	40004400 	.word	0x40004400
 8005194:	40021000 	.word	0x40021000

08005198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800519c:	e7fe      	b.n	800519c <NMI_Handler+0x4>

0800519e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800519e:	b480      	push	{r7}
 80051a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051a2:	e7fe      	b.n	80051a2 <HardFault_Handler+0x4>

080051a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051a4:	b480      	push	{r7}
 80051a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051a8:	e7fe      	b.n	80051a8 <MemManage_Handler+0x4>

080051aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ae:	e7fe      	b.n	80051ae <BusFault_Handler+0x4>

080051b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051b4:	e7fe      	b.n	80051b4 <UsageFault_Handler+0x4>

080051b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051b6:	b480      	push	{r7}
 80051b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051ba:	bf00      	nop
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051c4:	b480      	push	{r7}
 80051c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051d2:	b480      	push	{r7}
 80051d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051e4:	f000 f968 	bl	80054b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051e8:	bf00      	nop
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051f0:	4802      	ldr	r0, [pc, #8]	; (80051fc <USART2_IRQHandler+0x10>)
 80051f2:	f002 f86f 	bl	80072d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	20000250 	.word	0x20000250

08005200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005204:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005208:	f000 fd00 	bl	8005c0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}

08005210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return 1;
 8005214:	2301      	movs	r3, #1
}
 8005216:	4618      	mov	r0, r3
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <_kill>:

int _kill(int pid, int sig)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800522a:	f005 f9ad 	bl	800a588 <__errno>
 800522e:	4603      	mov	r3, r0
 8005230:	2216      	movs	r2, #22
 8005232:	601a      	str	r2, [r3, #0]
  return -1;
 8005234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005238:	4618      	mov	r0, r3
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_exit>:

void _exit (int status)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005248:	f04f 31ff 	mov.w	r1, #4294967295
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ffe7 	bl	8005220 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005252:	e7fe      	b.n	8005252 <_exit+0x12>

08005254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
 8005264:	e00a      	b.n	800527c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005266:	f3af 8000 	nop.w
 800526a:	4601      	mov	r1, r0
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	60ba      	str	r2, [r7, #8]
 8005272:	b2ca      	uxtb	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	3301      	adds	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	429a      	cmp	r2, r3
 8005282:	dbf0      	blt.n	8005266 <_read+0x12>
  }

  return len;
 8005284:	687b      	ldr	r3, [r7, #4]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b086      	sub	sp, #24
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800529a:	2300      	movs	r3, #0
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	e009      	b.n	80052b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	1c5a      	adds	r2, r3, #1
 80052a4:	60ba      	str	r2, [r7, #8]
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	4618      	mov	r0, r3
 80052aa:	f7ff fbd1 	bl	8004a50 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	3301      	adds	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	dbf1      	blt.n	80052a0 <_write+0x12>
  }
  return len;
 80052bc:	687b      	ldr	r3, [r7, #4]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3718      	adds	r7, #24
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <_close>:

int _close(int file)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80052ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052ee:	605a      	str	r2, [r3, #4]
  return 0;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <_isatty>:

int _isatty(int file)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005306:	2301      	movs	r3, #1
}
 8005308:	4618      	mov	r0, r3
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3714      	adds	r7, #20
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005338:	4a14      	ldr	r2, [pc, #80]	; (800538c <_sbrk+0x5c>)
 800533a:	4b15      	ldr	r3, [pc, #84]	; (8005390 <_sbrk+0x60>)
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005344:	4b13      	ldr	r3, [pc, #76]	; (8005394 <_sbrk+0x64>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800534c:	4b11      	ldr	r3, [pc, #68]	; (8005394 <_sbrk+0x64>)
 800534e:	4a12      	ldr	r2, [pc, #72]	; (8005398 <_sbrk+0x68>)
 8005350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005352:	4b10      	ldr	r3, [pc, #64]	; (8005394 <_sbrk+0x64>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4413      	add	r3, r2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	429a      	cmp	r2, r3
 800535e:	d207      	bcs.n	8005370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005360:	f005 f912 	bl	800a588 <__errno>
 8005364:	4603      	mov	r3, r0
 8005366:	220c      	movs	r2, #12
 8005368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e009      	b.n	8005384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005370:	4b08      	ldr	r3, [pc, #32]	; (8005394 <_sbrk+0x64>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005376:	4b07      	ldr	r3, [pc, #28]	; (8005394 <_sbrk+0x64>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4413      	add	r3, r2
 800537e:	4a05      	ldr	r2, [pc, #20]	; (8005394 <_sbrk+0x64>)
 8005380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005382:	68fb      	ldr	r3, [r7, #12]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2001c000 	.word	0x2001c000
 8005390:	00000400 	.word	0x00000400
 8005394:	20002168 	.word	0x20002168
 8005398:	200022c0 	.word	0x200022c0

0800539c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800539c:	b480      	push	{r7}
 800539e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80053a0:	4b06      	ldr	r3, [pc, #24]	; (80053bc <SystemInit+0x20>)
 80053a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a6:	4a05      	ldr	r2, [pc, #20]	; (80053bc <SystemInit+0x20>)
 80053a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053b0:	bf00      	nop
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053c0:	480d      	ldr	r0, [pc, #52]	; (80053f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053c2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80053c4:	f7ff ffea 	bl	800539c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80053c8:	480c      	ldr	r0, [pc, #48]	; (80053fc <LoopForever+0x6>)
  ldr r1, =_edata
 80053ca:	490d      	ldr	r1, [pc, #52]	; (8005400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80053cc:	4a0d      	ldr	r2, [pc, #52]	; (8005404 <LoopForever+0xe>)
  movs r3, #0
 80053ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80053d0:	e002      	b.n	80053d8 <LoopCopyDataInit>

080053d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053d6:	3304      	adds	r3, #4

080053d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053dc:	d3f9      	bcc.n	80053d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053de:	4a0a      	ldr	r2, [pc, #40]	; (8005408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80053e0:	4c0a      	ldr	r4, [pc, #40]	; (800540c <LoopForever+0x16>)
  movs r3, #0
 80053e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053e4:	e001      	b.n	80053ea <LoopFillZerobss>

080053e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053e8:	3204      	adds	r2, #4

080053ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053ec:	d3fb      	bcc.n	80053e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80053ee:	f005 f8d1 	bl	800a594 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80053f2:	f7ff fb3f 	bl	8004a74 <main>

080053f6 <LoopForever>:

LoopForever:
    b LoopForever
 80053f6:	e7fe      	b.n	80053f6 <LoopForever>
  ldr   r0, =_estack
 80053f8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80053fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005400:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005404:	0800d5b0 	.word	0x0800d5b0
  ldr r2, =_sbss
 8005408:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800540c:	200022bc 	.word	0x200022bc

08005410 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005410:	e7fe      	b.n	8005410 <ADC1_2_IRQHandler>

08005412 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b082      	sub	sp, #8
 8005416:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800541c:	2003      	movs	r0, #3
 800541e:	f000 f95b 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005422:	2000      	movs	r0, #0
 8005424:	f000 f80e 	bl	8005444 <HAL_InitTick>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	71fb      	strb	r3, [r7, #7]
 8005432:	e001      	b.n	8005438 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005434:	f7ff fe0c 	bl	8005050 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005438:	79fb      	ldrb	r3, [r7, #7]

}
 800543a:	4618      	mov	r0, r3
 800543c:	3708      	adds	r7, #8
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005450:	4b16      	ldr	r3, [pc, #88]	; (80054ac <HAL_InitTick+0x68>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d022      	beq.n	800549e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005458:	4b15      	ldr	r3, [pc, #84]	; (80054b0 <HAL_InitTick+0x6c>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	4b13      	ldr	r3, [pc, #76]	; (80054ac <HAL_InitTick+0x68>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005464:	fbb1 f3f3 	udiv	r3, r1, r3
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	4618      	mov	r0, r3
 800546e:	f000 f966 	bl	800573e <HAL_SYSTICK_Config>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d10f      	bne.n	8005498 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b0f      	cmp	r3, #15
 800547c:	d809      	bhi.n	8005492 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800547e:	2200      	movs	r2, #0
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	f04f 30ff 	mov.w	r0, #4294967295
 8005486:	f000 f932 	bl	80056ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800548a:	4a0a      	ldr	r2, [pc, #40]	; (80054b4 <HAL_InitTick+0x70>)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6013      	str	r3, [r2, #0]
 8005490:	e007      	b.n	80054a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	73fb      	strb	r3, [r7, #15]
 8005496:	e004      	b.n	80054a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
 800549c:	e001      	b.n	80054a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	20000004 	.word	0x20000004
 80054b4:	20000008 	.word	0x20000008

080054b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054bc:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_IncTick+0x1c>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_IncTick+0x20>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4413      	add	r3, r2
 80054c6:	4a03      	ldr	r2, [pc, #12]	; (80054d4 <HAL_IncTick+0x1c>)
 80054c8:	6013      	str	r3, [r2, #0]
}
 80054ca:	bf00      	nop
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	2000216c 	.word	0x2000216c
 80054d8:	2000000c 	.word	0x2000000c

080054dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return uwTick;
 80054e0:	4b03      	ldr	r3, [pc, #12]	; (80054f0 <HAL_GetTick+0x14>)
 80054e2:	681b      	ldr	r3, [r3, #0]
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	2000216c 	.word	0x2000216c

080054f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80054fc:	f7ff ffee 	bl	80054dc <HAL_GetTick>
 8005500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550c:	d004      	beq.n	8005518 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800550e:	4b09      	ldr	r3, [pc, #36]	; (8005534 <HAL_Delay+0x40>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	4413      	add	r3, r2
 8005516:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005518:	bf00      	nop
 800551a:	f7ff ffdf 	bl	80054dc <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	429a      	cmp	r2, r3
 8005528:	d8f7      	bhi.n	800551a <HAL_Delay+0x26>
  {
  }
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	2000000c 	.word	0x2000000c

08005538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <__NVIC_SetPriorityGrouping+0x44>)
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005554:	4013      	ands	r3, r2
 8005556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800556a:	4a04      	ldr	r2, [pc, #16]	; (800557c <__NVIC_SetPriorityGrouping+0x44>)
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	60d3      	str	r3, [r2, #12]
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000ed00 	.word	0xe000ed00

08005580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005580:	b480      	push	{r7}
 8005582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005584:	4b04      	ldr	r3, [pc, #16]	; (8005598 <__NVIC_GetPriorityGrouping+0x18>)
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	0a1b      	lsrs	r3, r3, #8
 800558a:	f003 0307 	and.w	r3, r3, #7
}
 800558e:	4618      	mov	r0, r3
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	e000ed00 	.word	0xe000ed00

0800559c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	db0b      	blt.n	80055c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80055ae:	79fb      	ldrb	r3, [r7, #7]
 80055b0:	f003 021f 	and.w	r2, r3, #31
 80055b4:	4907      	ldr	r1, [pc, #28]	; (80055d4 <__NVIC_EnableIRQ+0x38>)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	095b      	lsrs	r3, r3, #5
 80055bc:	2001      	movs	r0, #1
 80055be:	fa00 f202 	lsl.w	r2, r0, r2
 80055c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	e000e100 	.word	0xe000e100

080055d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	6039      	str	r1, [r7, #0]
 80055e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	db0a      	blt.n	8005602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	490c      	ldr	r1, [pc, #48]	; (8005624 <__NVIC_SetPriority+0x4c>)
 80055f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055f6:	0112      	lsls	r2, r2, #4
 80055f8:	b2d2      	uxtb	r2, r2
 80055fa:	440b      	add	r3, r1
 80055fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005600:	e00a      	b.n	8005618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	4908      	ldr	r1, [pc, #32]	; (8005628 <__NVIC_SetPriority+0x50>)
 8005608:	79fb      	ldrb	r3, [r7, #7]
 800560a:	f003 030f 	and.w	r3, r3, #15
 800560e:	3b04      	subs	r3, #4
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	b2d2      	uxtb	r2, r2
 8005614:	440b      	add	r3, r1
 8005616:	761a      	strb	r2, [r3, #24]
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	e000e100 	.word	0xe000e100
 8005628:	e000ed00 	.word	0xe000ed00

0800562c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800562c:	b480      	push	{r7}
 800562e:	b089      	sub	sp, #36	; 0x24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005640:	69fb      	ldr	r3, [r7, #28]
 8005642:	f1c3 0307 	rsb	r3, r3, #7
 8005646:	2b04      	cmp	r3, #4
 8005648:	bf28      	it	cs
 800564a:	2304      	movcs	r3, #4
 800564c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	3304      	adds	r3, #4
 8005652:	2b06      	cmp	r3, #6
 8005654:	d902      	bls.n	800565c <NVIC_EncodePriority+0x30>
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	3b03      	subs	r3, #3
 800565a:	e000      	b.n	800565e <NVIC_EncodePriority+0x32>
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005660:	f04f 32ff 	mov.w	r2, #4294967295
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43da      	mvns	r2, r3
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	401a      	ands	r2, r3
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005674:	f04f 31ff 	mov.w	r1, #4294967295
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	fa01 f303 	lsl.w	r3, r1, r3
 800567e:	43d9      	mvns	r1, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005684:	4313      	orrs	r3, r2
         );
}
 8005686:	4618      	mov	r0, r3
 8005688:	3724      	adds	r7, #36	; 0x24
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80056a4:	d301      	bcc.n	80056aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056a6:	2301      	movs	r3, #1
 80056a8:	e00f      	b.n	80056ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <SysTick_Config+0x40>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b2:	210f      	movs	r1, #15
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	f7ff ff8e 	bl	80055d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <SysTick_Config+0x40>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c2:	4b04      	ldr	r3, [pc, #16]	; (80056d4 <SysTick_Config+0x40>)
 80056c4:	2207      	movs	r2, #7
 80056c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	e000e010 	.word	0xe000e010

080056d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff29 	bl	8005538 <__NVIC_SetPriorityGrouping>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80056fc:	f7ff ff40 	bl	8005580 <__NVIC_GetPriorityGrouping>
 8005700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	6978      	ldr	r0, [r7, #20]
 8005708:	f7ff ff90 	bl	800562c <NVIC_EncodePriority>
 800570c:	4602      	mov	r2, r0
 800570e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005712:	4611      	mov	r1, r2
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff5f 	bl	80055d8 <__NVIC_SetPriority>
}
 800571a:	bf00      	nop
 800571c:	3718      	adds	r7, #24
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	4603      	mov	r3, r0
 800572a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800572c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005730:	4618      	mov	r0, r3
 8005732:	f7ff ff33 	bl	800559c <__NVIC_EnableIRQ>
}
 8005736:	bf00      	nop
 8005738:	3708      	adds	r7, #8
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b082      	sub	sp, #8
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff ffa4 	bl	8005694 <SysTick_Config>
 800574c:	4603      	mov	r3, r0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005756:	b480      	push	{r7}
 8005758:	b085      	sub	sp, #20
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	2300      	movs	r3, #0
 8005760:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b02      	cmp	r3, #2
 800576c:	d005      	beq.n	800577a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
 8005778:	e037      	b.n	80057ea <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f022 020e 	bic.w	r2, r2, #14
 8005788:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005794:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005798:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0201 	bic.w	r2, r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f003 021f 	and.w	r2, r3, #31
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	2101      	movs	r1, #1
 80057b8:	fa01 f202 	lsl.w	r2, r1, r2
 80057bc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057c6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d00c      	beq.n	80057ea <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057de:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057e8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80057fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3714      	adds	r7, #20
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005810:	2300      	movs	r3, #0
 8005812:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d00d      	beq.n	800583c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2204      	movs	r2, #4
 8005824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
 800583a:	e047      	b.n	80058cc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 020e 	bic.w	r2, r2, #14
 800584a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0201 	bic.w	r2, r2, #1
 800585a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800586a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005870:	f003 021f 	and.w	r2, r3, #31
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f202 	lsl.w	r2, r1, r2
 800587e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005888:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	2b00      	cmp	r3, #0
 8005890:	d00c      	beq.n	80058ac <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800589c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
    }
  }
  return status;
 80058cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058d8:	b480      	push	{r7}
 80058da:	b087      	sub	sp, #28
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058e6:	e15a      	b.n	8005b9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	2101      	movs	r1, #1
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	4013      	ands	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 814c 	beq.w	8005b98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d005      	beq.n	8005918 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005914:	2b02      	cmp	r3, #2
 8005916:	d130      	bne.n	800597a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	005b      	lsls	r3, r3, #1
 8005922:	2203      	movs	r2, #3
 8005924:	fa02 f303 	lsl.w	r3, r2, r3
 8005928:	43db      	mvns	r3, r3
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	4013      	ands	r3, r2
 800592e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	fa02 f303 	lsl.w	r3, r2, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800594e:	2201      	movs	r2, #1
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	fa02 f303 	lsl.w	r3, r2, r3
 8005956:	43db      	mvns	r3, r3
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4013      	ands	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	091b      	lsrs	r3, r3, #4
 8005964:	f003 0201 	and.w	r2, r3, #1
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	fa02 f303 	lsl.w	r3, r2, r3
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b03      	cmp	r3, #3
 8005984:	d017      	beq.n	80059b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	2203      	movs	r2, #3
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	43db      	mvns	r3, r3
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	4013      	ands	r3, r2
 800599c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	689a      	ldr	r2, [r3, #8]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	fa02 f303 	lsl.w	r3, r2, r3
 80059aa:	693a      	ldr	r2, [r7, #16]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d123      	bne.n	8005a0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	08da      	lsrs	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3208      	adds	r2, #8
 80059ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	220f      	movs	r2, #15
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	691a      	ldr	r2, [r3, #16]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	08da      	lsrs	r2, r3, #3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3208      	adds	r2, #8
 8005a04:	6939      	ldr	r1, [r7, #16]
 8005a06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	2203      	movs	r2, #3
 8005a16:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1a:	43db      	mvns	r3, r3
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4013      	ands	r3, r2
 8005a20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f003 0203 	and.w	r2, r3, #3
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a6 	beq.w	8005b98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005a4c:	4b5b      	ldr	r3, [pc, #364]	; (8005bbc <HAL_GPIO_Init+0x2e4>)
 8005a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a50:	4a5a      	ldr	r2, [pc, #360]	; (8005bbc <HAL_GPIO_Init+0x2e4>)
 8005a52:	f043 0301 	orr.w	r3, r3, #1
 8005a56:	6613      	str	r3, [r2, #96]	; 0x60
 8005a58:	4b58      	ldr	r3, [pc, #352]	; (8005bbc <HAL_GPIO_Init+0x2e4>)
 8005a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a64:	4a56      	ldr	r2, [pc, #344]	; (8005bc0 <HAL_GPIO_Init+0x2e8>)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	089b      	lsrs	r3, r3, #2
 8005a6a:	3302      	adds	r3, #2
 8005a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	220f      	movs	r2, #15
 8005a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a80:	43db      	mvns	r3, r3
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4013      	ands	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005a8e:	d01f      	beq.n	8005ad0 <HAL_GPIO_Init+0x1f8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a4c      	ldr	r2, [pc, #304]	; (8005bc4 <HAL_GPIO_Init+0x2ec>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d019      	beq.n	8005acc <HAL_GPIO_Init+0x1f4>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a4b      	ldr	r2, [pc, #300]	; (8005bc8 <HAL_GPIO_Init+0x2f0>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d013      	beq.n	8005ac8 <HAL_GPIO_Init+0x1f0>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a4a      	ldr	r2, [pc, #296]	; (8005bcc <HAL_GPIO_Init+0x2f4>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00d      	beq.n	8005ac4 <HAL_GPIO_Init+0x1ec>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a49      	ldr	r2, [pc, #292]	; (8005bd0 <HAL_GPIO_Init+0x2f8>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d007      	beq.n	8005ac0 <HAL_GPIO_Init+0x1e8>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a48      	ldr	r2, [pc, #288]	; (8005bd4 <HAL_GPIO_Init+0x2fc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d101      	bne.n	8005abc <HAL_GPIO_Init+0x1e4>
 8005ab8:	2305      	movs	r3, #5
 8005aba:	e00a      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005abc:	2306      	movs	r3, #6
 8005abe:	e008      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005ac0:	2304      	movs	r3, #4
 8005ac2:	e006      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e004      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005ac8:	2302      	movs	r3, #2
 8005aca:	e002      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_GPIO_Init+0x1fa>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	f002 0203 	and.w	r2, r2, #3
 8005ad8:	0092      	lsls	r2, r2, #2
 8005ada:	4093      	lsls	r3, r2
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ae2:	4937      	ldr	r1, [pc, #220]	; (8005bc0 <HAL_GPIO_Init+0x2e8>)
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	089b      	lsrs	r3, r3, #2
 8005ae8:	3302      	adds	r3, #2
 8005aea:	693a      	ldr	r2, [r7, #16]
 8005aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005af0:	4b39      	ldr	r3, [pc, #228]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	43db      	mvns	r3, r3
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4013      	ands	r3, r2
 8005afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d003      	beq.n	8005b14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005b14:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005b1a:	4b2f      	ldr	r3, [pc, #188]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	43db      	mvns	r3, r3
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	4013      	ands	r3, r2
 8005b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005b36:	693a      	ldr	r2, [r7, #16]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005b3e:	4a26      	ldr	r2, [pc, #152]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005b44:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	43db      	mvns	r3, r3
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4013      	ands	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005b68:	4a1b      	ldr	r2, [pc, #108]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005b6e:	4b1a      	ldr	r3, [pc, #104]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	43db      	mvns	r3, r3
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d003      	beq.n	8005b92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005b8a:	693a      	ldr	r2, [r7, #16]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <HAL_GPIO_Init+0x300>)
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	f47f ae9d 	bne.w	80058e8 <HAL_GPIO_Init+0x10>
  }
}
 8005bae:	bf00      	nop
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	40021000 	.word	0x40021000
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	48000400 	.word	0x48000400
 8005bc8:	48000800 	.word	0x48000800
 8005bcc:	48000c00 	.word	0x48000c00
 8005bd0:	48001000 	.word	0x48001000
 8005bd4:	48001400 	.word	0x48001400
 8005bd8:	40010400 	.word	0x40010400

08005bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	460b      	mov	r3, r1
 8005be6:	807b      	strh	r3, [r7, #2]
 8005be8:	4613      	mov	r3, r2
 8005bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005bec:	787b      	ldrb	r3, [r7, #1]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d003      	beq.n	8005bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005bf2:	887a      	ldrh	r2, [r7, #2]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005bf8:	e002      	b.n	8005c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005bfa:	887a      	ldrh	r2, [r7, #2]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005c16:	4b08      	ldr	r3, [pc, #32]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d006      	beq.n	8005c30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c22:	4a05      	ldr	r2, [pc, #20]	; (8005c38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f806 	bl	8005c3c <HAL_GPIO_EXTI_Callback>
  }
}
 8005c30:	bf00      	nop
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40010400 	.word	0x40010400

08005c3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d141      	bne.n	8005ce6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c62:	4b4b      	ldr	r3, [pc, #300]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c6e:	d131      	bne.n	8005cd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c70:	4b47      	ldr	r3, [pc, #284]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c76:	4a46      	ldr	r2, [pc, #280]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c80:	4b43      	ldr	r3, [pc, #268]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005c88:	4a41      	ldr	r2, [pc, #260]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c90:	4b40      	ldr	r3, [pc, #256]	; (8005d94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2232      	movs	r2, #50	; 0x32
 8005c96:	fb02 f303 	mul.w	r3, r2, r3
 8005c9a:	4a3f      	ldr	r2, [pc, #252]	; (8005d98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ca0:	0c9b      	lsrs	r3, r3, #18
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ca6:	e002      	b.n	8005cae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005cae:	4b38      	ldr	r3, [pc, #224]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cba:	d102      	bne.n	8005cc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f2      	bne.n	8005ca8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005cc2:	4b33      	ldr	r3, [pc, #204]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cce:	d158      	bne.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e057      	b.n	8005d84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cd4:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cda:	4a2d      	ldr	r2, [pc, #180]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ce4:	e04d      	b.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cec:	d141      	bne.n	8005d72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005cee:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cfa:	d131      	bne.n	8005d60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005cfc:	4b24      	ldr	r3, [pc, #144]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d02:	4a23      	ldr	r2, [pc, #140]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d0c:	4b20      	ldr	r3, [pc, #128]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d14:	4a1e      	ldr	r2, [pc, #120]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005d1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005d1c:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2232      	movs	r2, #50	; 0x32
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	0c9b      	lsrs	r3, r3, #18
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d32:	e002      	b.n	8005d3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005d3a:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d46:	d102      	bne.n	8005d4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f2      	bne.n	8005d34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005d4e:	4b10      	ldr	r3, [pc, #64]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5a:	d112      	bne.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e011      	b.n	8005d84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d60:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d66:	4a0a      	ldr	r2, [pc, #40]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005d70:	e007      	b.n	8005d82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005d72:	4b07      	ldr	r3, [pc, #28]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d7a:	4a05      	ldr	r2, [pc, #20]	; (8005d90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40007000 	.word	0x40007000
 8005d94:	20000004 	.word	0x20000004
 8005d98:	431bde83 	.word	0x431bde83

08005d9c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005da0:	4b05      	ldr	r3, [pc, #20]	; (8005db8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	4a04      	ldr	r2, [pc, #16]	; (8005db8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005da6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005daa:	6093      	str	r3, [r2, #8]
}
 8005dac:	bf00      	nop
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	40007000 	.word	0x40007000

08005dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b088      	sub	sp, #32
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d101      	bne.n	8005dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e2fe      	b.n	80063cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d075      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dda:	4b97      	ldr	r3, [pc, #604]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 030c 	and.w	r3, r3, #12
 8005de2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005de4:	4b94      	ldr	r3, [pc, #592]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f003 0303 	and.w	r3, r3, #3
 8005dec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	2b0c      	cmp	r3, #12
 8005df2:	d102      	bne.n	8005dfa <HAL_RCC_OscConfig+0x3e>
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	d002      	beq.n	8005e00 <HAL_RCC_OscConfig+0x44>
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	2b08      	cmp	r3, #8
 8005dfe:	d10b      	bne.n	8005e18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e00:	4b8d      	ldr	r3, [pc, #564]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d05b      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x108>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d157      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	e2d9      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e20:	d106      	bne.n	8005e30 <HAL_RCC_OscConfig+0x74>
 8005e22:	4b85      	ldr	r3, [pc, #532]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a84      	ldr	r2, [pc, #528]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e01d      	b.n	8005e6c <HAL_RCC_OscConfig+0xb0>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e38:	d10c      	bne.n	8005e54 <HAL_RCC_OscConfig+0x98>
 8005e3a:	4b7f      	ldr	r3, [pc, #508]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a7e      	ldr	r2, [pc, #504]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e44:	6013      	str	r3, [r2, #0]
 8005e46:	4b7c      	ldr	r3, [pc, #496]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7b      	ldr	r2, [pc, #492]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	e00b      	b.n	8005e6c <HAL_RCC_OscConfig+0xb0>
 8005e54:	4b78      	ldr	r3, [pc, #480]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a77      	ldr	r2, [pc, #476]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b75      	ldr	r3, [pc, #468]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a74      	ldr	r2, [pc, #464]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d013      	beq.n	8005e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7ff fb32 	bl	80054dc <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7ff fb2e 	bl	80054dc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e29e      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e8e:	4b6a      	ldr	r3, [pc, #424]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0xc0>
 8005e9a:	e014      	b.n	8005ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e9c:	f7ff fb1e 	bl	80054dc <HAL_GetTick>
 8005ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ea2:	e008      	b.n	8005eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea4:	f7ff fb1a 	bl	80054dc <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b64      	cmp	r3, #100	; 0x64
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e28a      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005eb6:	4b60      	ldr	r3, [pc, #384]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1f0      	bne.n	8005ea4 <HAL_RCC_OscConfig+0xe8>
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d075      	beq.n	8005fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ed2:	4b59      	ldr	r3, [pc, #356]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 030c 	and.w	r3, r3, #12
 8005eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005edc:	4b56      	ldr	r3, [pc, #344]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0303 	and.w	r3, r3, #3
 8005ee4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	2b0c      	cmp	r3, #12
 8005eea:	d102      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x136>
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	d002      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x13c>
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d11f      	bne.n	8005f38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef8:	4b4f      	ldr	r3, [pc, #316]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d005      	beq.n	8005f10 <HAL_RCC_OscConfig+0x154>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e25d      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f10:	4b49      	ldr	r3, [pc, #292]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	061b      	lsls	r3, r3, #24
 8005f1e:	4946      	ldr	r1, [pc, #280]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f24:	4b45      	ldr	r3, [pc, #276]	; (800603c <HAL_RCC_OscConfig+0x280>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fa8b 	bl	8005444 <HAL_InitTick>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d043      	beq.n	8005fbc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e249      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d023      	beq.n	8005f88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f40:	4b3d      	ldr	r3, [pc, #244]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a3c      	ldr	r2, [pc, #240]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4c:	f7ff fac6 	bl	80054dc <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f54:	f7ff fac2 	bl	80054dc <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e232      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f66:	4b34      	ldr	r3, [pc, #208]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	061b      	lsls	r3, r3, #24
 8005f80:	492d      	ldr	r1, [pc, #180]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	604b      	str	r3, [r1, #4]
 8005f86:	e01a      	b.n	8005fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f88:	4b2b      	ldr	r3, [pc, #172]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2a      	ldr	r2, [pc, #168]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005f8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7ff faa2 	bl	80054dc <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f9c:	f7ff fa9e 	bl	80054dc <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e20e      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fae:	4b22      	ldr	r3, [pc, #136]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x1e0>
 8005fba:	e000      	b.n	8005fbe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005fbc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0308 	and.w	r3, r3, #8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d041      	beq.n	800604e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d01c      	beq.n	800600c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fd2:	4b19      	ldr	r3, [pc, #100]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fd8:	4a17      	ldr	r2, [pc, #92]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005fda:	f043 0301 	orr.w	r3, r3, #1
 8005fde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe2:	f7ff fa7b 	bl	80054dc <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005fea:	f7ff fa77 	bl	80054dc <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e1e7      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ffc:	4b0e      	ldr	r3, [pc, #56]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8005ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d0ef      	beq.n	8005fea <HAL_RCC_OscConfig+0x22e>
 800600a:	e020      	b.n	800604e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 800600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006012:	4a09      	ldr	r2, [pc, #36]	; (8006038 <HAL_RCC_OscConfig+0x27c>)
 8006014:	f023 0301 	bic.w	r3, r3, #1
 8006018:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800601c:	f7ff fa5e 	bl	80054dc <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006022:	e00d      	b.n	8006040 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006024:	f7ff fa5a 	bl	80054dc <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d906      	bls.n	8006040 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e1ca      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
 8006036:	bf00      	nop
 8006038:	40021000 	.word	0x40021000
 800603c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006040:	4b8c      	ldr	r3, [pc, #560]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1ea      	bne.n	8006024 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 80a6 	beq.w	80061a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800605c:	2300      	movs	r3, #0
 800605e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006060:	4b84      	ldr	r3, [pc, #528]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <HAL_RCC_OscConfig+0x2b4>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <HAL_RCC_OscConfig+0x2b6>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00d      	beq.n	8006092 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006076:	4b7f      	ldr	r3, [pc, #508]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	4a7e      	ldr	r2, [pc, #504]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800607c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006080:	6593      	str	r3, [r2, #88]	; 0x58
 8006082:	4b7c      	ldr	r3, [pc, #496]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800608a:	60fb      	str	r3, [r7, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800608e:	2301      	movs	r3, #1
 8006090:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006092:	4b79      	ldr	r3, [pc, #484]	; (8006278 <HAL_RCC_OscConfig+0x4bc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609a:	2b00      	cmp	r3, #0
 800609c:	d118      	bne.n	80060d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609e:	4b76      	ldr	r3, [pc, #472]	; (8006278 <HAL_RCC_OscConfig+0x4bc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a75      	ldr	r2, [pc, #468]	; (8006278 <HAL_RCC_OscConfig+0x4bc>)
 80060a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060aa:	f7ff fa17 	bl	80054dc <HAL_GetTick>
 80060ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060b0:	e008      	b.n	80060c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b2:	f7ff fa13 	bl	80054dc <HAL_GetTick>
 80060b6:	4602      	mov	r2, r0
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	1ad3      	subs	r3, r2, r3
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d901      	bls.n	80060c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e183      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c4:	4b6c      	ldr	r3, [pc, #432]	; (8006278 <HAL_RCC_OscConfig+0x4bc>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0f0      	beq.n	80060b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d108      	bne.n	80060ea <HAL_RCC_OscConfig+0x32e>
 80060d8:	4b66      	ldr	r3, [pc, #408]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80060da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060de:	4a65      	ldr	r2, [pc, #404]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80060e0:	f043 0301 	orr.w	r3, r3, #1
 80060e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060e8:	e024      	b.n	8006134 <HAL_RCC_OscConfig+0x378>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b05      	cmp	r3, #5
 80060f0:	d110      	bne.n	8006114 <HAL_RCC_OscConfig+0x358>
 80060f2:	4b60      	ldr	r3, [pc, #384]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80060f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f8:	4a5e      	ldr	r2, [pc, #376]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80060fa:	f043 0304 	orr.w	r3, r3, #4
 80060fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006102:	4b5c      	ldr	r3, [pc, #368]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	4a5a      	ldr	r2, [pc, #360]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006112:	e00f      	b.n	8006134 <HAL_RCC_OscConfig+0x378>
 8006114:	4b57      	ldr	r3, [pc, #348]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800611a:	4a56      	ldr	r2, [pc, #344]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800611c:	f023 0301 	bic.w	r3, r3, #1
 8006120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612a:	4a52      	ldr	r2, [pc, #328]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800612c:	f023 0304 	bic.w	r3, r3, #4
 8006130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d016      	beq.n	800616a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613c:	f7ff f9ce 	bl	80054dc <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006142:	e00a      	b.n	800615a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006144:	f7ff f9ca 	bl	80054dc <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006152:	4293      	cmp	r3, r2
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e138      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800615a:	4b46      	ldr	r3, [pc, #280]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0ed      	beq.n	8006144 <HAL_RCC_OscConfig+0x388>
 8006168:	e015      	b.n	8006196 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616a:	f7ff f9b7 	bl	80054dc <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006170:	e00a      	b.n	8006188 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006172:	f7ff f9b3 	bl	80054dc <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006180:	4293      	cmp	r3, r2
 8006182:	d901      	bls.n	8006188 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e121      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006188:	4b3a      	ldr	r3, [pc, #232]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800618a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1ed      	bne.n	8006172 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006196:	7ffb      	ldrb	r3, [r7, #31]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d105      	bne.n	80061a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619c:	4b35      	ldr	r3, [pc, #212]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800619e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a0:	4a34      	ldr	r2, [pc, #208]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d03c      	beq.n	800622e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d01c      	beq.n	80061f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061bc:	4b2d      	ldr	r3, [pc, #180]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061c2:	4a2c      	ldr	r2, [pc, #176]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061c4:	f043 0301 	orr.w	r3, r3, #1
 80061c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061cc:	f7ff f986 	bl	80054dc <HAL_GetTick>
 80061d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061d2:	e008      	b.n	80061e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061d4:	f7ff f982 	bl	80054dc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d901      	bls.n	80061e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e0f2      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80061e6:	4b23      	ldr	r3, [pc, #140]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0ef      	beq.n	80061d4 <HAL_RCC_OscConfig+0x418>
 80061f4:	e01b      	b.n	800622e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061f6:	4b1f      	ldr	r3, [pc, #124]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061fc:	4a1d      	ldr	r2, [pc, #116]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006206:	f7ff f969 	bl	80054dc <HAL_GetTick>
 800620a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800620c:	e008      	b.n	8006220 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800620e:	f7ff f965 	bl	80054dc <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d901      	bls.n	8006220 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e0d5      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006226:	f003 0302 	and.w	r3, r3, #2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1ef      	bne.n	800620e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	2b00      	cmp	r3, #0
 8006234:	f000 80c9 	beq.w	80063ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006238:	4b0e      	ldr	r3, [pc, #56]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	f003 030c 	and.w	r3, r3, #12
 8006240:	2b0c      	cmp	r3, #12
 8006242:	f000 8083 	beq.w	800634c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d15e      	bne.n	800630c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a08      	ldr	r2, [pc, #32]	; (8006274 <HAL_RCC_OscConfig+0x4b8>)
 8006254:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800625a:	f7ff f93f 	bl	80054dc <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006260:	e00c      	b.n	800627c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006262:	f7ff f93b 	bl	80054dc <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d905      	bls.n	800627c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e0ab      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
 8006274:	40021000 	.word	0x40021000
 8006278:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800627c:	4b55      	ldr	r3, [pc, #340]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d1ec      	bne.n	8006262 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006288:	4b52      	ldr	r3, [pc, #328]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	4b52      	ldr	r3, [pc, #328]	; (80063d8 <HAL_RCC_OscConfig+0x61c>)
 800628e:	4013      	ands	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	6a11      	ldr	r1, [r2, #32]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006298:	3a01      	subs	r2, #1
 800629a:	0112      	lsls	r2, r2, #4
 800629c:	4311      	orrs	r1, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80062a2:	0212      	lsls	r2, r2, #8
 80062a4:	4311      	orrs	r1, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80062aa:	0852      	lsrs	r2, r2, #1
 80062ac:	3a01      	subs	r2, #1
 80062ae:	0552      	lsls	r2, r2, #21
 80062b0:	4311      	orrs	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062b6:	0852      	lsrs	r2, r2, #1
 80062b8:	3a01      	subs	r2, #1
 80062ba:	0652      	lsls	r2, r2, #25
 80062bc:	4311      	orrs	r1, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80062c2:	06d2      	lsls	r2, r2, #27
 80062c4:	430a      	orrs	r2, r1
 80062c6:	4943      	ldr	r1, [pc, #268]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b41      	ldr	r3, [pc, #260]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a40      	ldr	r2, [pc, #256]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 80062d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062d8:	4b3e      	ldr	r3, [pc, #248]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a3d      	ldr	r2, [pc, #244]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 80062de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e4:	f7ff f8fa 	bl	80054dc <HAL_GetTick>
 80062e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062ea:	e008      	b.n	80062fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062ec:	f7ff f8f6 	bl	80054dc <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	2b02      	cmp	r3, #2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e066      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062fe:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0f0      	beq.n	80062ec <HAL_RCC_OscConfig+0x530>
 800630a:	e05e      	b.n	80063ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800630c:	4b31      	ldr	r3, [pc, #196]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006318:	f7ff f8e0 	bl	80054dc <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006320:	f7ff f8dc 	bl	80054dc <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e04c      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006332:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800633e:	4b25      	ldr	r3, [pc, #148]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 8006340:	68da      	ldr	r2, [r3, #12]
 8006342:	4924      	ldr	r1, [pc, #144]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <HAL_RCC_OscConfig+0x620>)
 8006346:	4013      	ands	r3, r2
 8006348:	60cb      	str	r3, [r1, #12]
 800634a:	e03e      	b.n	80063ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e039      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <HAL_RCC_OscConfig+0x618>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f003 0203 	and.w	r2, r3, #3
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	429a      	cmp	r2, r3
 800636a:	d12c      	bne.n	80063c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006376:	3b01      	subs	r3, #1
 8006378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800637a:	429a      	cmp	r2, r3
 800637c:	d123      	bne.n	80063c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800638a:	429a      	cmp	r2, r3
 800638c:	d11b      	bne.n	80063c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800639a:	429a      	cmp	r2, r3
 800639c:	d113      	bne.n	80063c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	3b01      	subs	r3, #1
 80063ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d109      	bne.n	80063c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063bc:	085b      	lsrs	r3, r3, #1
 80063be:	3b01      	subs	r3, #1
 80063c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d001      	beq.n	80063ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3720      	adds	r7, #32
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	019f800c 	.word	0x019f800c
 80063dc:	feeefffc 	.word	0xfeeefffc

080063e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b086      	sub	sp, #24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d101      	bne.n	80063f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e11e      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063f8:	4b91      	ldr	r3, [pc, #580]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 030f 	and.w	r3, r3, #15
 8006400:	683a      	ldr	r2, [r7, #0]
 8006402:	429a      	cmp	r2, r3
 8006404:	d910      	bls.n	8006428 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006406:	4b8e      	ldr	r3, [pc, #568]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f023 020f 	bic.w	r2, r3, #15
 800640e:	498c      	ldr	r1, [pc, #560]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	4313      	orrs	r3, r2
 8006414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006416:	4b8a      	ldr	r3, [pc, #552]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 030f 	and.w	r3, r3, #15
 800641e:	683a      	ldr	r2, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d001      	beq.n	8006428 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e106      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0301 	and.w	r3, r3, #1
 8006430:	2b00      	cmp	r3, #0
 8006432:	d073      	beq.n	800651c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d129      	bne.n	8006490 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800643c:	4b81      	ldr	r3, [pc, #516]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e0f4      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800644c:	f000 f99e 	bl	800678c <RCC_GetSysClockFreqFromPLLSource>
 8006450:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4a7c      	ldr	r2, [pc, #496]	; (8006648 <HAL_RCC_ClockConfig+0x268>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d93f      	bls.n	80064da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800645a:	4b7a      	ldr	r3, [pc, #488]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800646e:	2b00      	cmp	r3, #0
 8006470:	d033      	beq.n	80064da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006476:	2b00      	cmp	r3, #0
 8006478:	d12f      	bne.n	80064da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800647a:	4b72      	ldr	r3, [pc, #456]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006482:	4a70      	ldr	r2, [pc, #448]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006488:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800648a:	2380      	movs	r3, #128	; 0x80
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e024      	b.n	80064da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b02      	cmp	r3, #2
 8006496:	d107      	bne.n	80064a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006498:	4b6a      	ldr	r3, [pc, #424]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d109      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e0c6      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80064a8:	4b66      	ldr	r3, [pc, #408]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0be      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80064b8:	f000 f8ce 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 80064bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4a61      	ldr	r2, [pc, #388]	; (8006648 <HAL_RCC_ClockConfig+0x268>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d909      	bls.n	80064da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80064c6:	4b5f      	ldr	r3, [pc, #380]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ce:	4a5d      	ldr	r2, [pc, #372]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80064d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80064d6:	2380      	movs	r3, #128	; 0x80
 80064d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80064da:	4b5a      	ldr	r3, [pc, #360]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	f023 0203 	bic.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	4957      	ldr	r1, [pc, #348]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80064e8:	4313      	orrs	r3, r2
 80064ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fe fff6 	bl	80054dc <HAL_GetTick>
 80064f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064f2:	e00a      	b.n	800650a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064f4:	f7fe fff2 	bl	80054dc <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006502:	4293      	cmp	r3, r2
 8006504:	d901      	bls.n	800650a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e095      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800650a:	4b4e      	ldr	r3, [pc, #312]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800650c:	689b      	ldr	r3, [r3, #8]
 800650e:	f003 020c 	and.w	r2, r3, #12
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	429a      	cmp	r2, r3
 800651a:	d1eb      	bne.n	80064f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d023      	beq.n	8006570 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006534:	4b43      	ldr	r3, [pc, #268]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4a42      	ldr	r2, [pc, #264]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800653a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800653e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800654c:	4b3d      	ldr	r3, [pc, #244]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006554:	4a3b      	ldr	r2, [pc, #236]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800655a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655c:	4b39      	ldr	r3, [pc, #228]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	4936      	ldr	r1, [pc, #216]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
 800656e:	e008      	b.n	8006582 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2b80      	cmp	r3, #128	; 0x80
 8006574:	d105      	bne.n	8006582 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006576:	4b33      	ldr	r3, [pc, #204]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	4a32      	ldr	r2, [pc, #200]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 800657c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006580:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006582:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d21d      	bcs.n	80065cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006590:	4b2b      	ldr	r3, [pc, #172]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f023 020f 	bic.w	r2, r3, #15
 8006598:	4929      	ldr	r1, [pc, #164]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	4313      	orrs	r3, r2
 800659e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80065a0:	f7fe ff9c 	bl	80054dc <HAL_GetTick>
 80065a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a6:	e00a      	b.n	80065be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a8:	f7fe ff98 	bl	80054dc <HAL_GetTick>
 80065ac:	4602      	mov	r2, r0
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1ad3      	subs	r3, r2, r3
 80065b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d901      	bls.n	80065be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e03b      	b.n	8006636 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_RCC_ClockConfig+0x260>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 030f 	and.w	r3, r3, #15
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d1ed      	bne.n	80065a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d008      	beq.n	80065ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065d8:	4b1a      	ldr	r3, [pc, #104]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	4917      	ldr	r1, [pc, #92]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80065e6:	4313      	orrs	r3, r2
 80065e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d009      	beq.n	800660a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065f6:	4b13      	ldr	r3, [pc, #76]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	00db      	lsls	r3, r3, #3
 8006604:	490f      	ldr	r1, [pc, #60]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006606:	4313      	orrs	r3, r2
 8006608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800660a:	f000 f825 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 800660e:	4602      	mov	r2, r0
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <HAL_RCC_ClockConfig+0x264>)
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	091b      	lsrs	r3, r3, #4
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	490c      	ldr	r1, [pc, #48]	; (800664c <HAL_RCC_ClockConfig+0x26c>)
 800661c:	5ccb      	ldrb	r3, [r1, r3]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <HAL_RCC_ClockConfig+0x270>)
 8006628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_RCC_ClockConfig+0x274>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7fe ff08 	bl	8005444 <HAL_InitTick>
 8006634:	4603      	mov	r3, r0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	40022000 	.word	0x40022000
 8006644:	40021000 	.word	0x40021000
 8006648:	04c4b400 	.word	0x04c4b400
 800664c:	0800d1bc 	.word	0x0800d1bc
 8006650:	20000004 	.word	0x20000004
 8006654:	20000008 	.word	0x20000008

08006658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800665e:	4b2c      	ldr	r3, [pc, #176]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b04      	cmp	r3, #4
 8006668:	d102      	bne.n	8006670 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800666a:	4b2a      	ldr	r3, [pc, #168]	; (8006714 <HAL_RCC_GetSysClockFreq+0xbc>)
 800666c:	613b      	str	r3, [r7, #16]
 800666e:	e047      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006670:	4b27      	ldr	r3, [pc, #156]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 030c 	and.w	r3, r3, #12
 8006678:	2b08      	cmp	r3, #8
 800667a:	d102      	bne.n	8006682 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800667c:	4b26      	ldr	r3, [pc, #152]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc0>)
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	e03e      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b0c      	cmp	r3, #12
 800668c:	d136      	bne.n	80066fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800668e:	4b20      	ldr	r3, [pc, #128]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	f003 030f 	and.w	r3, r3, #15
 80066a2:	3301      	adds	r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2b03      	cmp	r3, #3
 80066aa:	d10c      	bne.n	80066c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066ac:	4a1a      	ldr	r2, [pc, #104]	; (8006718 <HAL_RCC_GetSysClockFreq+0xc0>)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066b6:	68d2      	ldr	r2, [r2, #12]
 80066b8:	0a12      	lsrs	r2, r2, #8
 80066ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066be:	fb02 f303 	mul.w	r3, r2, r3
 80066c2:	617b      	str	r3, [r7, #20]
      break;
 80066c4:	e00c      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <HAL_RCC_GetSysClockFreq+0xbc>)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ce:	4a10      	ldr	r2, [pc, #64]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066d0:	68d2      	ldr	r2, [r2, #12]
 80066d2:	0a12      	lsrs	r2, r2, #8
 80066d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066d8:	fb02 f303 	mul.w	r3, r2, r3
 80066dc:	617b      	str	r3, [r7, #20]
      break;
 80066de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_RCC_GetSysClockFreq+0xb8>)
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	0e5b      	lsrs	r3, r3, #25
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80066f0:	697a      	ldr	r2, [r7, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f8:	613b      	str	r3, [r7, #16]
 80066fa:	e001      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006700:	693b      	ldr	r3, [r7, #16]
}
 8006702:	4618      	mov	r0, r3
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000
 8006714:	00f42400 	.word	0x00f42400
 8006718:	016e3600 	.word	0x016e3600

0800671c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <HAL_RCC_GetHCLKFreq+0x14>)
 8006722:	681b      	ldr	r3, [r3, #0]
}
 8006724:	4618      	mov	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000004 	.word	0x20000004

08006734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006738:	f7ff fff0 	bl	800671c <HAL_RCC_GetHCLKFreq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b06      	ldr	r3, [pc, #24]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	0a1b      	lsrs	r3, r3, #8
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	4904      	ldr	r1, [pc, #16]	; (800675c <HAL_RCC_GetPCLK1Freq+0x28>)
 800674a:	5ccb      	ldrb	r3, [r1, r3]
 800674c:	f003 031f 	and.w	r3, r3, #31
 8006750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006754:	4618      	mov	r0, r3
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40021000 	.word	0x40021000
 800675c:	0800d1cc 	.word	0x0800d1cc

08006760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006764:	f7ff ffda 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8006768:	4602      	mov	r2, r0
 800676a:	4b06      	ldr	r3, [pc, #24]	; (8006784 <HAL_RCC_GetPCLK2Freq+0x24>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	0adb      	lsrs	r3, r3, #11
 8006770:	f003 0307 	and.w	r3, r3, #7
 8006774:	4904      	ldr	r1, [pc, #16]	; (8006788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006776:	5ccb      	ldrb	r3, [r1, r3]
 8006778:	f003 031f 	and.w	r3, r3, #31
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006780:	4618      	mov	r0, r3
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40021000 	.word	0x40021000
 8006788:	0800d1cc 	.word	0x0800d1cc

0800678c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800678c:	b480      	push	{r7}
 800678e:	b087      	sub	sp, #28
 8006790:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800679c:	4b1b      	ldr	r3, [pc, #108]	; (800680c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	2b03      	cmp	r3, #3
 80067ae:	d10c      	bne.n	80067ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067b0:	4a17      	ldr	r2, [pc, #92]	; (8006810 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067b8:	4a14      	ldr	r2, [pc, #80]	; (800680c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067ba:	68d2      	ldr	r2, [r2, #12]
 80067bc:	0a12      	lsrs	r2, r2, #8
 80067be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	617b      	str	r3, [r7, #20]
    break;
 80067c8:	e00c      	b.n	80067e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ca:	4a12      	ldr	r2, [pc, #72]	; (8006814 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	4a0e      	ldr	r2, [pc, #56]	; (800680c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067d4:	68d2      	ldr	r2, [r2, #12]
 80067d6:	0a12      	lsrs	r2, r2, #8
 80067d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]
    break;
 80067e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067e4:	4b09      	ldr	r3, [pc, #36]	; (800680c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0e5b      	lsrs	r3, r3, #25
 80067ea:	f003 0303 	and.w	r3, r3, #3
 80067ee:	3301      	adds	r3, #1
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80067fe:	687b      	ldr	r3, [r7, #4]
}
 8006800:	4618      	mov	r0, r3
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40021000 	.word	0x40021000
 8006810:	016e3600 	.word	0x016e3600
 8006814:	00f42400 	.word	0x00f42400

08006818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006820:	2300      	movs	r3, #0
 8006822:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006824:	2300      	movs	r3, #0
 8006826:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8098 	beq.w	8006966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006836:	2300      	movs	r3, #0
 8006838:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800683a:	4b43      	ldr	r3, [pc, #268]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006846:	4b40      	ldr	r3, [pc, #256]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800684c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006850:	6593      	str	r3, [r2, #88]	; 0x58
 8006852:	4b3d      	ldr	r3, [pc, #244]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800685a:	60bb      	str	r3, [r7, #8]
 800685c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800685e:	2301      	movs	r3, #1
 8006860:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006862:	4b3a      	ldr	r3, [pc, #232]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a39      	ldr	r2, [pc, #228]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800686c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800686e:	f7fe fe35 	bl	80054dc <HAL_GetTick>
 8006872:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006874:	e009      	b.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006876:	f7fe fe31 	bl	80054dc <HAL_GetTick>
 800687a:	4602      	mov	r2, r0
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	2b02      	cmp	r3, #2
 8006882:	d902      	bls.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006884:	2303      	movs	r3, #3
 8006886:	74fb      	strb	r3, [r7, #19]
        break;
 8006888:	e005      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800688a:	4b30      	ldr	r3, [pc, #192]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d0ef      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006896:	7cfb      	ldrb	r3, [r7, #19]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d159      	bne.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800689c:	4b2a      	ldr	r3, [pc, #168]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01e      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d019      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068b8:	4b23      	ldr	r3, [pc, #140]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068c4:	4b20      	ldr	r3, [pc, #128]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ca:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80068d4:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068da:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80068e4:	4a18      	ldr	r2, [pc, #96]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d016      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fe fdf1 	bl	80054dc <HAL_GetTick>
 80068fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068fc:	e00b      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068fe:	f7fe fded 	bl	80054dc <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f241 3288 	movw	r2, #5000	; 0x1388
 800690c:	4293      	cmp	r3, r2
 800690e:	d902      	bls.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	74fb      	strb	r3, [r7, #19]
            break;
 8006914:	e006      	b.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800691c:	f003 0302 	and.w	r3, r3, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0ec      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006924:	7cfb      	ldrb	r3, [r7, #19]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800692a:	4b07      	ldr	r3, [pc, #28]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800692c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006938:	4903      	ldr	r1, [pc, #12]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006940:	e008      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006942:	7cfb      	ldrb	r3, [r7, #19]
 8006944:	74bb      	strb	r3, [r7, #18]
 8006946:	e005      	b.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006948:	40021000 	.word	0x40021000
 800694c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006950:	7cfb      	ldrb	r3, [r7, #19]
 8006952:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006954:	7c7b      	ldrb	r3, [r7, #17]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d105      	bne.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800695a:	4ba7      	ldr	r3, [pc, #668]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	4aa6      	ldr	r2, [pc, #664]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006964:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006972:	4ba1      	ldr	r3, [pc, #644]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006978:	f023 0203 	bic.w	r2, r3, #3
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	499d      	ldr	r1, [pc, #628]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006982:	4313      	orrs	r3, r2
 8006984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f003 0302 	and.w	r3, r3, #2
 8006990:	2b00      	cmp	r3, #0
 8006992:	d00a      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006994:	4b98      	ldr	r3, [pc, #608]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800699a:	f023 020c 	bic.w	r2, r3, #12
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	4995      	ldr	r1, [pc, #596]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00a      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80069b6:	4b90      	ldr	r3, [pc, #576]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	498c      	ldr	r1, [pc, #560]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f003 0308 	and.w	r3, r3, #8
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00a      	beq.n	80069ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80069d8:	4b87      	ldr	r3, [pc, #540]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	4984      	ldr	r1, [pc, #528]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0310 	and.w	r3, r3, #16
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80069fa:	4b7f      	ldr	r3, [pc, #508]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	497b      	ldr	r1, [pc, #492]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006a1c:	4b76      	ldr	r3, [pc, #472]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	699b      	ldr	r3, [r3, #24]
 8006a2a:	4973      	ldr	r1, [pc, #460]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006a3e:	4b6e      	ldr	r3, [pc, #440]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	496a      	ldr	r1, [pc, #424]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00a      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006a60:	4b65      	ldr	r3, [pc, #404]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	4962      	ldr	r1, [pc, #392]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00a      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006a82:	4b5d      	ldr	r3, [pc, #372]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	4959      	ldr	r1, [pc, #356]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006aa4:	4b54      	ldr	r3, [pc, #336]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	4951      	ldr	r1, [pc, #324]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d015      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006ac6:	4b4c      	ldr	r3, [pc, #304]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4948      	ldr	r1, [pc, #288]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ae4:	d105      	bne.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae6:	4b44      	ldr	r3, [pc, #272]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	4a43      	ldr	r2, [pc, #268]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006af0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006afe:	4b3e      	ldr	r3, [pc, #248]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0c:	493a      	ldr	r1, [pc, #232]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b1c:	d105      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b1e:	4b36      	ldr	r3, [pc, #216]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	4a35      	ldr	r2, [pc, #212]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b28:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b36:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b44:	492c      	ldr	r1, [pc, #176]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b54:	d105      	bne.n	8006b62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b56:	4b28      	ldr	r3, [pc, #160]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b60:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d015      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006b6e:	4b22      	ldr	r3, [pc, #136]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	491e      	ldr	r1, [pc, #120]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b8c:	d105      	bne.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b8e:	4b1a      	ldr	r3, [pc, #104]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	4a19      	ldr	r2, [pc, #100]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b98:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d015      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ba6:	4b14      	ldr	r3, [pc, #80]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb4:	4910      	ldr	r1, [pc, #64]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc4:	d105      	bne.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc6:	4b0c      	ldr	r3, [pc, #48]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	4a0b      	ldr	r2, [pc, #44]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bd0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d018      	beq.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006bde:	4b06      	ldr	r3, [pc, #24]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bec:	4902      	ldr	r1, [pc, #8]	; (8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	e001      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c02:	d105      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c04:	4b21      	ldr	r3, [pc, #132]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	4a20      	ldr	r2, [pc, #128]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c0e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d015      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c22:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	4918      	ldr	r1, [pc, #96]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3a:	d105      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006c3c:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	4a12      	ldr	r2, [pc, #72]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c46:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d015      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c54:	4b0d      	ldr	r3, [pc, #52]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c62:	490a      	ldr	r1, [pc, #40]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c72:	d105      	bne.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c74:	4b05      	ldr	r3, [pc, #20]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006c80:	7cbb      	ldrb	r3, [r7, #18]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40021000 	.word	0x40021000

08006c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e049      	b.n	8006d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d106      	bne.n	8006cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe f9ee 	bl	8005098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f000 f89e 	bl	8006e10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d001      	beq.n	8006d58 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e047      	b.n	8006de8 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2202      	movs	r2, #2
 8006d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a23      	ldr	r2, [pc, #140]	; (8006df4 <HAL_TIM_Base_Start+0xb4>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d01d      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d018      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1f      	ldr	r2, [pc, #124]	; (8006df8 <HAL_TIM_Base_Start+0xb8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d013      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <HAL_TIM_Base_Start+0xbc>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d00e      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <HAL_TIM_Base_Start+0xc0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d009      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <HAL_TIM_Base_Start+0xc4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d004      	beq.n	8006da6 <HAL_TIM_Base_Start+0x66>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a19      	ldr	r2, [pc, #100]	; (8006e08 <HAL_TIM_Base_Start+0xc8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d115      	bne.n	8006dd2 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	4b17      	ldr	r3, [pc, #92]	; (8006e0c <HAL_TIM_Base_Start+0xcc>)
 8006dae:	4013      	ands	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b06      	cmp	r3, #6
 8006db6:	d015      	beq.n	8006de4 <HAL_TIM_Base_Start+0xa4>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbe:	d011      	beq.n	8006de4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0201 	orr.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd0:	e008      	b.n	8006de4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f042 0201 	orr.w	r2, r2, #1
 8006de0:	601a      	str	r2, [r3, #0]
 8006de2:	e000      	b.n	8006de6 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006de6:	2300      	movs	r3, #0
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr
 8006df4:	40012c00 	.word	0x40012c00
 8006df8:	40000400 	.word	0x40000400
 8006dfc:	40000800 	.word	0x40000800
 8006e00:	40013400 	.word	0x40013400
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40015000 	.word	0x40015000
 8006e0c:	00010007 	.word	0x00010007

08006e10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a48      	ldr	r2, [pc, #288]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d013      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2e:	d00f      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a45      	ldr	r2, [pc, #276]	; (8006f48 <TIM_Base_SetConfig+0x138>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00b      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a44      	ldr	r2, [pc, #272]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d007      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	4a43      	ldr	r2, [pc, #268]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d003      	beq.n	8006e50 <TIM_Base_SetConfig+0x40>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a42      	ldr	r2, [pc, #264]	; (8006f54 <TIM_Base_SetConfig+0x144>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d108      	bne.n	8006e62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a37      	ldr	r2, [pc, #220]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d01f      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e70:	d01b      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a34      	ldr	r2, [pc, #208]	; (8006f48 <TIM_Base_SetConfig+0x138>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d017      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	4a33      	ldr	r2, [pc, #204]	; (8006f4c <TIM_Base_SetConfig+0x13c>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d013      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	4a32      	ldr	r2, [pc, #200]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d00f      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	4a32      	ldr	r2, [pc, #200]	; (8006f58 <TIM_Base_SetConfig+0x148>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d00b      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4a31      	ldr	r2, [pc, #196]	; (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d007      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a30      	ldr	r2, [pc, #192]	; (8006f60 <TIM_Base_SetConfig+0x150>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d003      	beq.n	8006eaa <TIM_Base_SetConfig+0x9a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	; (8006f54 <TIM_Base_SetConfig+0x144>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d108      	bne.n	8006ebc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	695b      	ldr	r3, [r3, #20]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a18      	ldr	r2, [pc, #96]	; (8006f44 <TIM_Base_SetConfig+0x134>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d013      	beq.n	8006f10 <TIM_Base_SetConfig+0x100>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	4a19      	ldr	r2, [pc, #100]	; (8006f50 <TIM_Base_SetConfig+0x140>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d00f      	beq.n	8006f10 <TIM_Base_SetConfig+0x100>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a19      	ldr	r2, [pc, #100]	; (8006f58 <TIM_Base_SetConfig+0x148>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00b      	beq.n	8006f10 <TIM_Base_SetConfig+0x100>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <TIM_Base_SetConfig+0x14c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d007      	beq.n	8006f10 <TIM_Base_SetConfig+0x100>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a17      	ldr	r2, [pc, #92]	; (8006f60 <TIM_Base_SetConfig+0x150>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d003      	beq.n	8006f10 <TIM_Base_SetConfig+0x100>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a12      	ldr	r2, [pc, #72]	; (8006f54 <TIM_Base_SetConfig+0x144>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d103      	bne.n	8006f18 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	691a      	ldr	r2, [r3, #16]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f023 0201 	bic.w	r2, r3, #1
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	611a      	str	r2, [r3, #16]
  }
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40012c00 	.word	0x40012c00
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40013400 	.word	0x40013400
 8006f54:	40015000 	.word	0x40015000
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40014400 	.word	0x40014400
 8006f60:	40014800 	.word	0x40014800

08006f64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e06f      	b.n	800705c <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a31      	ldr	r2, [pc, #196]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a30      	ldr	r2, [pc, #192]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a2e      	ldr	r2, [pc, #184]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d108      	bne.n	8006fcc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d01d      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ffc:	d018      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1c      	ldr	r2, [pc, #112]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1a      	ldr	r2, [pc, #104]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00e      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a15      	ldr	r2, [pc, #84]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a16      	ldr	r2, [pc, #88]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a11      	ldr	r2, [pc, #68]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d10c      	bne.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007036:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	4313      	orrs	r3, r2
 8007040:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	40012c00 	.word	0x40012c00
 800706c:	40013400 	.word	0x40013400
 8007070:	40015000 	.word	0x40015000
 8007074:	40000400 	.word	0x40000400
 8007078:	40000800 	.word	0x40000800
 800707c:	40014000 	.word	0x40014000

08007080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e042      	b.n	8007118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe f817 	bl	80050d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2224      	movs	r2, #36	; 0x24
 80070ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f000 ff42 	bl	8007f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 fc43 	bl	800795c <UART_SetConfig>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d101      	bne.n	80070e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e01b      	b.n	8007118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689a      	ldr	r2, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 ffc1 	bl	8008098 <UART_CheckIdleState>
 8007116:	4603      	mov	r3, r0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b08a      	sub	sp, #40	; 0x28
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	603b      	str	r3, [r7, #0]
 800712c:	4613      	mov	r3, r2
 800712e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007136:	2b20      	cmp	r3, #32
 8007138:	d17b      	bne.n	8007232 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <HAL_UART_Transmit+0x26>
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007146:	2301      	movs	r3, #1
 8007148:	e074      	b.n	8007234 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2221      	movs	r2, #33	; 0x21
 8007156:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800715a:	f7fe f9bf 	bl	80054dc <HAL_GetTick>
 800715e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	88fa      	ldrh	r2, [r7, #6]
 8007164:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007178:	d108      	bne.n	800718c <HAL_UART_Transmit+0x6c>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d104      	bne.n	800718c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007182:	2300      	movs	r3, #0
 8007184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	61bb      	str	r3, [r7, #24]
 800718a:	e003      	b.n	8007194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007194:	e030      	b.n	80071f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	2200      	movs	r2, #0
 800719e:	2180      	movs	r1, #128	; 0x80
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f001 f823 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2220      	movs	r2, #32
 80071b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e03d      	b.n	8007234 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10b      	bne.n	80071d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	3302      	adds	r3, #2
 80071d2:	61bb      	str	r3, [r7, #24]
 80071d4:	e007      	b.n	80071e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	781a      	ldrb	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	3301      	adds	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1c8      	bne.n	8007196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	2200      	movs	r2, #0
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 ffec 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e006      	b.n	8007234 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2220      	movs	r2, #32
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	4613      	mov	r3, r2
 8007248:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007250:	2b20      	cmp	r3, #32
 8007252:	d137      	bne.n	80072c4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <HAL_UART_Receive_IT+0x24>
 800725a:	88fb      	ldrh	r3, [r7, #6]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e030      	b.n	80072c6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a18      	ldr	r2, [pc, #96]	; (80072d0 <HAL_UART_Receive_IT+0x94>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d01f      	beq.n	80072b4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d018      	beq.n	80072b4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	613b      	str	r3, [r7, #16]
   return(result);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007296:	627b      	str	r3, [r7, #36]	; 0x24
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	623b      	str	r3, [r7, #32]
 80072a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	69f9      	ldr	r1, [r7, #28]
 80072a6:	6a3a      	ldr	r2, [r7, #32]
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f001 f804 	bl	80082c8 <UART_Start_Receive_IT>
 80072c0:	4603      	mov	r3, r0
 80072c2:	e000      	b.n	80072c6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072c4:	2302      	movs	r3, #2
  }
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40008000 	.word	0x40008000

080072d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b0ba      	sub	sp, #232	; 0xe8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69db      	ldr	r3, [r3, #28]
 80072e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8007302:	4013      	ands	r3, r2
 8007304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007308:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800730c:	2b00      	cmp	r3, #0
 800730e:	d11b      	bne.n	8007348 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007314:	f003 0320 	and.w	r3, r3, #32
 8007318:	2b00      	cmp	r3, #0
 800731a:	d015      	beq.n	8007348 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800731c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	d105      	bne.n	8007334 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007328:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800732c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d009      	beq.n	8007348 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 82e3 	beq.w	8007904 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	4798      	blx	r3
      }
      return;
 8007346:	e2dd      	b.n	8007904 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007348:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8123 	beq.w	8007598 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007352:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007356:	4b8d      	ldr	r3, [pc, #564]	; (800758c <HAL_UART_IRQHandler+0x2b8>)
 8007358:	4013      	ands	r3, r2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d106      	bne.n	800736c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800735e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007362:	4b8b      	ldr	r3, [pc, #556]	; (8007590 <HAL_UART_IRQHandler+0x2bc>)
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 8116 	beq.w	8007598 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800736c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d011      	beq.n	800739c <HAL_UART_IRQHandler+0xc8>
 8007378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800737c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007392:	f043 0201 	orr.w	r2, r3, #1
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <HAL_UART_IRQHandler+0xf8>
 80073a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2202      	movs	r2, #2
 80073ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c2:	f043 0204 	orr.w	r2, r3, #4
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d011      	beq.n	80073fc <HAL_UART_IRQHandler+0x128>
 80073d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00b      	beq.n	80073fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2204      	movs	r2, #4
 80073ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f2:	f043 0202 	orr.w	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007400:	f003 0308 	and.w	r3, r3, #8
 8007404:	2b00      	cmp	r3, #0
 8007406:	d017      	beq.n	8007438 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800740c:	f003 0320 	and.w	r3, r3, #32
 8007410:	2b00      	cmp	r3, #0
 8007412:	d105      	bne.n	8007420 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007414:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007418:	4b5c      	ldr	r3, [pc, #368]	; (800758c <HAL_UART_IRQHandler+0x2b8>)
 800741a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2208      	movs	r2, #8
 8007426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	f043 0208 	orr.w	r2, r3, #8
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800743c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007440:	2b00      	cmp	r3, #0
 8007442:	d012      	beq.n	800746a <HAL_UART_IRQHandler+0x196>
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007448:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00c      	beq.n	800746a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007460:	f043 0220 	orr.w	r2, r3, #32
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8249 	beq.w	8007908 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	f003 0320 	and.w	r3, r3, #32
 800747e:	2b00      	cmp	r3, #0
 8007480:	d013      	beq.n	80074aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d105      	bne.n	800749a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800748e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d005      	beq.n	80074ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d054      	beq.n	8007578 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f001 f81c 	bl	800850c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074de:	2b40      	cmp	r3, #64	; 0x40
 80074e0:	d146      	bne.n	8007570 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	3308      	adds	r3, #8
 80074e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007500:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	3308      	adds	r3, #8
 800750a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800750e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007512:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800751a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007526:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1d9      	bne.n	80074e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007534:	2b00      	cmp	r3, #0
 8007536:	d017      	beq.n	8007568 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800753e:	4a15      	ldr	r2, [pc, #84]	; (8007594 <HAL_UART_IRQHandler+0x2c0>)
 8007540:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007548:	4618      	mov	r0, r3
 800754a:	f7fe f95d 	bl	8005808 <HAL_DMA_Abort_IT>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d019      	beq.n	8007588 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007562:	4610      	mov	r0, r2
 8007564:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007566:	e00f      	b.n	8007588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f9e1 	bl	8007930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800756e:	e00b      	b.n	8007588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f9dd 	bl	8007930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007576:	e007      	b.n	8007588 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 f9d9 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007586:	e1bf      	b.n	8007908 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007588:	bf00      	nop
    return;
 800758a:	e1bd      	b.n	8007908 <HAL_UART_IRQHandler+0x634>
 800758c:	10000001 	.word	0x10000001
 8007590:	04000120 	.word	0x04000120
 8007594:	080085d9 	.word	0x080085d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759c:	2b01      	cmp	r3, #1
 800759e:	f040 8153 	bne.w	8007848 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a6:	f003 0310 	and.w	r3, r3, #16
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	f000 814c 	beq.w	8007848 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075b4:	f003 0310 	and.w	r3, r3, #16
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 8145 	beq.w	8007848 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	2210      	movs	r2, #16
 80075c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d0:	2b40      	cmp	r3, #64	; 0x40
 80075d2:	f040 80bb 	bne.w	800774c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 818f 	beq.w	800790c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075f8:	429a      	cmp	r2, r3
 80075fa:	f080 8187 	bcs.w	800790c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 8087 	bne.w	800772a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007624:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007630:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800764a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007652:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007656:	e841 2300 	strex	r3, r2, [r1]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800765e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1da      	bne.n	800761c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3308      	adds	r3, #8
 800766c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007676:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3308      	adds	r3, #8
 8007686:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800768a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800768e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007692:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800769c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e1      	bne.n	8007666 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80076b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	3308      	adds	r3, #8
 80076c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80076c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80076c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80076cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80076ce:	e841 2300 	strex	r3, r2, [r1]
 80076d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1e3      	bne.n	80076a2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076f8:	f023 0310 	bic.w	r3, r3, #16
 80076fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800770a:	65bb      	str	r3, [r7, #88]	; 0x58
 800770c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e4      	bne.n	80076e8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007724:	4618      	mov	r0, r3
 8007726:	f7fe f816 	bl	8005756 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2202      	movs	r2, #2
 800772e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800773c:	b29b      	uxth	r3, r3
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f8fd 	bl	8007944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800774a:	e0df      	b.n	800790c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007758:	b29b      	uxth	r3, r3
 800775a:	1ad3      	subs	r3, r2, r3
 800775c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007766:	b29b      	uxth	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80d1 	beq.w	8007910 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800776e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 80cc 	beq.w	8007910 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007780:	e853 3f00 	ldrex	r3, [r3]
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007788:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800778c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800779a:	647b      	str	r3, [r7, #68]	; 0x44
 800779c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80077a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077a2:	e841 2300 	strex	r3, r2, [r1]
 80077a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80077a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1e4      	bne.n	8007778 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3308      	adds	r3, #8
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	623b      	str	r3, [r7, #32]
   return(result);
 80077be:	6a3b      	ldr	r3, [r7, #32]
 80077c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3308      	adds	r3, #8
 80077d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80077d6:	633a      	str	r2, [r7, #48]	; 0x30
 80077d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e1      	bne.n	80077ae <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	60fb      	str	r3, [r7, #12]
   return(result);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f023 0310 	bic.w	r3, r3, #16
 8007812:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007820:	61fb      	str	r3, [r7, #28]
 8007822:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007824:	69b9      	ldr	r1, [r7, #24]
 8007826:	69fa      	ldr	r2, [r7, #28]
 8007828:	e841 2300 	strex	r3, r2, [r1]
 800782c:	617b      	str	r3, [r7, #20]
   return(result);
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1e4      	bne.n	80077fe <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800783a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f87f 	bl	8007944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007846:	e063      	b.n	8007910 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d00e      	beq.n	8007872 <HAL_UART_IRQHandler+0x59e>
 8007854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800785c:	2b00      	cmp	r3, #0
 800785e:	d008      	beq.n	8007872 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007868:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fc12 	bl	8009094 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007870:	e051      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787a:	2b00      	cmp	r3, #0
 800787c:	d014      	beq.n	80078a8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800787e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800788a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800788e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007892:	2b00      	cmp	r3, #0
 8007894:	d008      	beq.n	80078a8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800789a:	2b00      	cmp	r3, #0
 800789c:	d03a      	beq.n	8007914 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
    }
    return;
 80078a6:	e035      	b.n	8007914 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d009      	beq.n	80078c8 <HAL_UART_IRQHandler+0x5f4>
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fe9f 	bl	8008604 <UART_EndTransmit_IT>
    return;
 80078c6:	e026      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80078c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_UART_IRQHandler+0x614>
 80078d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f001 fbeb 	bl	80090bc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80078e6:	e016      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d010      	beq.n	8007916 <HAL_UART_IRQHandler+0x642>
 80078f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	da0c      	bge.n	8007916 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fbd3 	bl	80090a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007902:	e008      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
      return;
 8007904:	bf00      	nop
 8007906:	e006      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
    return;
 8007908:	bf00      	nop
 800790a:	e004      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
      return;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
      return;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <HAL_UART_IRQHandler+0x642>
    return;
 8007914:	bf00      	nop
  }
}
 8007916:	37e8      	adds	r7, #232	; 0xe8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	460b      	mov	r3, r1
 800794e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800795c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007960:	b08c      	sub	sp, #48	; 0x30
 8007962:	af00      	add	r7, sp, #0
 8007964:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	689a      	ldr	r2, [r3, #8]
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	431a      	orrs	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	431a      	orrs	r2, r3
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	4313      	orrs	r3, r2
 8007982:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	4baa      	ldr	r3, [pc, #680]	; (8007c34 <UART_SetConfig+0x2d8>)
 800798c:	4013      	ands	r3, r2
 800798e:	697a      	ldr	r2, [r7, #20]
 8007990:	6812      	ldr	r2, [r2, #0]
 8007992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007994:	430b      	orrs	r3, r1
 8007996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	68da      	ldr	r2, [r3, #12]
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a9f      	ldr	r2, [pc, #636]	; (8007c38 <UART_SetConfig+0x2dc>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c4:	4313      	orrs	r3, r2
 80079c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80079d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80079d6:	697a      	ldr	r2, [r7, #20]
 80079d8:	6812      	ldr	r2, [r2, #0]
 80079da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079dc:	430b      	orrs	r3, r1
 80079de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	f023 010f 	bic.w	r1, r3, #15
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	430a      	orrs	r2, r1
 80079f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a90      	ldr	r2, [pc, #576]	; (8007c3c <UART_SetConfig+0x2e0>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d125      	bne.n	8007a4c <UART_SetConfig+0xf0>
 8007a00:	4b8f      	ldr	r3, [pc, #572]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a06:	f003 0303 	and.w	r3, r3, #3
 8007a0a:	2b03      	cmp	r3, #3
 8007a0c:	d81a      	bhi.n	8007a44 <UART_SetConfig+0xe8>
 8007a0e:	a201      	add	r2, pc, #4	; (adr r2, 8007a14 <UART_SetConfig+0xb8>)
 8007a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a14:	08007a25 	.word	0x08007a25
 8007a18:	08007a35 	.word	0x08007a35
 8007a1c:	08007a2d 	.word	0x08007a2d
 8007a20:	08007a3d 	.word	0x08007a3d
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a2a:	e116      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a32:	e112      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007a34:	2304      	movs	r3, #4
 8007a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a3a:	e10e      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a42:	e10a      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007a44:	2310      	movs	r3, #16
 8007a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007a4a:	e106      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a7c      	ldr	r2, [pc, #496]	; (8007c44 <UART_SetConfig+0x2e8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d138      	bne.n	8007ac8 <UART_SetConfig+0x16c>
 8007a56:	4b7a      	ldr	r3, [pc, #488]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	f003 030c 	and.w	r3, r3, #12
 8007a60:	2b0c      	cmp	r3, #12
 8007a62:	d82d      	bhi.n	8007ac0 <UART_SetConfig+0x164>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x110>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007aa1 	.word	0x08007aa1
 8007a70:	08007ac1 	.word	0x08007ac1
 8007a74:	08007ac1 	.word	0x08007ac1
 8007a78:	08007ac1 	.word	0x08007ac1
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007ac1 	.word	0x08007ac1
 8007a84:	08007ac1 	.word	0x08007ac1
 8007a88:	08007ac1 	.word	0x08007ac1
 8007a8c:	08007aa9 	.word	0x08007aa9
 8007a90:	08007ac1 	.word	0x08007ac1
 8007a94:	08007ac1 	.word	0x08007ac1
 8007a98:	08007ac1 	.word	0x08007ac1
 8007a9c:	08007ab9 	.word	0x08007ab9
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aa6:	e0d8      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aae:	e0d4      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007ab0:	2304      	movs	r3, #4
 8007ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ab6:	e0d0      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007ab8:	2308      	movs	r3, #8
 8007aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007abe:	e0cc      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac6:	e0c8      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a5e      	ldr	r2, [pc, #376]	; (8007c48 <UART_SetConfig+0x2ec>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d125      	bne.n	8007b1e <UART_SetConfig+0x1c2>
 8007ad2:	4b5b      	ldr	r3, [pc, #364]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007adc:	2b30      	cmp	r3, #48	; 0x30
 8007ade:	d016      	beq.n	8007b0e <UART_SetConfig+0x1b2>
 8007ae0:	2b30      	cmp	r3, #48	; 0x30
 8007ae2:	d818      	bhi.n	8007b16 <UART_SetConfig+0x1ba>
 8007ae4:	2b20      	cmp	r3, #32
 8007ae6:	d00a      	beq.n	8007afe <UART_SetConfig+0x1a2>
 8007ae8:	2b20      	cmp	r3, #32
 8007aea:	d814      	bhi.n	8007b16 <UART_SetConfig+0x1ba>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <UART_SetConfig+0x19a>
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d008      	beq.n	8007b06 <UART_SetConfig+0x1aa>
 8007af4:	e00f      	b.n	8007b16 <UART_SetConfig+0x1ba>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007afc:	e0ad      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007afe:	2302      	movs	r3, #2
 8007b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b04:	e0a9      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b06:	2304      	movs	r3, #4
 8007b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b0c:	e0a5      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b0e:	2308      	movs	r3, #8
 8007b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b14:	e0a1      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b16:	2310      	movs	r3, #16
 8007b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b1c:	e09d      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a4a      	ldr	r2, [pc, #296]	; (8007c4c <UART_SetConfig+0x2f0>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d125      	bne.n	8007b74 <UART_SetConfig+0x218>
 8007b28:	4b45      	ldr	r3, [pc, #276]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b32:	2bc0      	cmp	r3, #192	; 0xc0
 8007b34:	d016      	beq.n	8007b64 <UART_SetConfig+0x208>
 8007b36:	2bc0      	cmp	r3, #192	; 0xc0
 8007b38:	d818      	bhi.n	8007b6c <UART_SetConfig+0x210>
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d00a      	beq.n	8007b54 <UART_SetConfig+0x1f8>
 8007b3e:	2b80      	cmp	r3, #128	; 0x80
 8007b40:	d814      	bhi.n	8007b6c <UART_SetConfig+0x210>
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d002      	beq.n	8007b4c <UART_SetConfig+0x1f0>
 8007b46:	2b40      	cmp	r3, #64	; 0x40
 8007b48:	d008      	beq.n	8007b5c <UART_SetConfig+0x200>
 8007b4a:	e00f      	b.n	8007b6c <UART_SetConfig+0x210>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b52:	e082      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b5a:	e07e      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b62:	e07a      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b6a:	e076      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b72:	e072      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a35      	ldr	r2, [pc, #212]	; (8007c50 <UART_SetConfig+0x2f4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d12a      	bne.n	8007bd4 <UART_SetConfig+0x278>
 8007b7e:	4b30      	ldr	r3, [pc, #192]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b8c:	d01a      	beq.n	8007bc4 <UART_SetConfig+0x268>
 8007b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b92:	d81b      	bhi.n	8007bcc <UART_SetConfig+0x270>
 8007b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b98:	d00c      	beq.n	8007bb4 <UART_SetConfig+0x258>
 8007b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b9e:	d815      	bhi.n	8007bcc <UART_SetConfig+0x270>
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <UART_SetConfig+0x250>
 8007ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ba8:	d008      	beq.n	8007bbc <UART_SetConfig+0x260>
 8007baa:	e00f      	b.n	8007bcc <UART_SetConfig+0x270>
 8007bac:	2300      	movs	r3, #0
 8007bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bb2:	e052      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007bb4:	2302      	movs	r3, #2
 8007bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bba:	e04e      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007bbc:	2304      	movs	r3, #4
 8007bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bc2:	e04a      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007bc4:	2308      	movs	r3, #8
 8007bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bca:	e046      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007bcc:	2310      	movs	r3, #16
 8007bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bd2:	e042      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a17      	ldr	r2, [pc, #92]	; (8007c38 <UART_SetConfig+0x2dc>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d13a      	bne.n	8007c54 <UART_SetConfig+0x2f8>
 8007bde:	4b18      	ldr	r3, [pc, #96]	; (8007c40 <UART_SetConfig+0x2e4>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007be8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bec:	d01a      	beq.n	8007c24 <UART_SetConfig+0x2c8>
 8007bee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bf2:	d81b      	bhi.n	8007c2c <UART_SetConfig+0x2d0>
 8007bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bf8:	d00c      	beq.n	8007c14 <UART_SetConfig+0x2b8>
 8007bfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bfe:	d815      	bhi.n	8007c2c <UART_SetConfig+0x2d0>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <UART_SetConfig+0x2b0>
 8007c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c08:	d008      	beq.n	8007c1c <UART_SetConfig+0x2c0>
 8007c0a:	e00f      	b.n	8007c2c <UART_SetConfig+0x2d0>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c12:	e022      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007c14:	2302      	movs	r3, #2
 8007c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c1a:	e01e      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007c1c:	2304      	movs	r3, #4
 8007c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c22:	e01a      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007c24:	2308      	movs	r3, #8
 8007c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c2a:	e016      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007c2c:	2310      	movs	r3, #16
 8007c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c32:	e012      	b.n	8007c5a <UART_SetConfig+0x2fe>
 8007c34:	cfff69f3 	.word	0xcfff69f3
 8007c38:	40008000 	.word	0x40008000
 8007c3c:	40013800 	.word	0x40013800
 8007c40:	40021000 	.word	0x40021000
 8007c44:	40004400 	.word	0x40004400
 8007c48:	40004800 	.word	0x40004800
 8007c4c:	40004c00 	.word	0x40004c00
 8007c50:	40005000 	.word	0x40005000
 8007c54:	2310      	movs	r3, #16
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4aae      	ldr	r2, [pc, #696]	; (8007f18 <UART_SetConfig+0x5bc>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	f040 8097 	bne.w	8007d94 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c66:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007c6a:	2b08      	cmp	r3, #8
 8007c6c:	d823      	bhi.n	8007cb6 <UART_SetConfig+0x35a>
 8007c6e:	a201      	add	r2, pc, #4	; (adr r2, 8007c74 <UART_SetConfig+0x318>)
 8007c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007cb7 	.word	0x08007cb7
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007cb7 	.word	0x08007cb7
 8007c84:	08007ca7 	.word	0x08007ca7
 8007c88:	08007cb7 	.word	0x08007cb7
 8007c8c:	08007cb7 	.word	0x08007cb7
 8007c90:	08007cb7 	.word	0x08007cb7
 8007c94:	08007caf 	.word	0x08007caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c98:	f7fe fd4c 	bl	8006734 <HAL_RCC_GetPCLK1Freq>
 8007c9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007c9e:	e010      	b.n	8007cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ca0:	4b9e      	ldr	r3, [pc, #632]	; (8007f1c <UART_SetConfig+0x5c0>)
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ca4:	e00d      	b.n	8007cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ca6:	f7fe fcd7 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8007caa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007cac:	e009      	b.n	8007cc2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007cb4:	e005      	b.n	8007cc2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007cc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8130 	beq.w	8007f2a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	4a94      	ldr	r2, [pc, #592]	; (8007f20 <UART_SetConfig+0x5c4>)
 8007cd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	4413      	add	r3, r2
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	429a      	cmp	r2, r3
 8007cec:	d305      	bcc.n	8007cfa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d903      	bls.n	8007d02 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d00:	e113      	b.n	8007f2a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d04:	2200      	movs	r2, #0
 8007d06:	60bb      	str	r3, [r7, #8]
 8007d08:	60fa      	str	r2, [r7, #12]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0e:	4a84      	ldr	r2, [pc, #528]	; (8007f20 <UART_SetConfig+0x5c4>)
 8007d10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2200      	movs	r2, #0
 8007d18:	603b      	str	r3, [r7, #0]
 8007d1a:	607a      	str	r2, [r7, #4]
 8007d1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d20:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d24:	f7f8 ffd8 	bl	8000cd8 <__aeabi_uldivmod>
 8007d28:	4602      	mov	r2, r0
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4610      	mov	r0, r2
 8007d2e:	4619      	mov	r1, r3
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	f04f 0300 	mov.w	r3, #0
 8007d38:	020b      	lsls	r3, r1, #8
 8007d3a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d3e:	0202      	lsls	r2, r0, #8
 8007d40:	6979      	ldr	r1, [r7, #20]
 8007d42:	6849      	ldr	r1, [r1, #4]
 8007d44:	0849      	lsrs	r1, r1, #1
 8007d46:	2000      	movs	r0, #0
 8007d48:	460c      	mov	r4, r1
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	eb12 0804 	adds.w	r8, r2, r4
 8007d50:	eb43 0905 	adc.w	r9, r3, r5
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	469a      	mov	sl, r3
 8007d5c:	4693      	mov	fp, r2
 8007d5e:	4652      	mov	r2, sl
 8007d60:	465b      	mov	r3, fp
 8007d62:	4640      	mov	r0, r8
 8007d64:	4649      	mov	r1, r9
 8007d66:	f7f8 ffb7 	bl	8000cd8 <__aeabi_uldivmod>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	4613      	mov	r3, r2
 8007d70:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d78:	d308      	bcc.n	8007d8c <UART_SetConfig+0x430>
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d80:	d204      	bcs.n	8007d8c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a3a      	ldr	r2, [r7, #32]
 8007d88:	60da      	str	r2, [r3, #12]
 8007d8a:	e0ce      	b.n	8007f2a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d92:	e0ca      	b.n	8007f2a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	69db      	ldr	r3, [r3, #28]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d9c:	d166      	bne.n	8007e6c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007da2:	2b08      	cmp	r3, #8
 8007da4:	d827      	bhi.n	8007df6 <UART_SetConfig+0x49a>
 8007da6:	a201      	add	r2, pc, #4	; (adr r2, 8007dac <UART_SetConfig+0x450>)
 8007da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dac:	08007dd1 	.word	0x08007dd1
 8007db0:	08007dd9 	.word	0x08007dd9
 8007db4:	08007de1 	.word	0x08007de1
 8007db8:	08007df7 	.word	0x08007df7
 8007dbc:	08007de7 	.word	0x08007de7
 8007dc0:	08007df7 	.word	0x08007df7
 8007dc4:	08007df7 	.word	0x08007df7
 8007dc8:	08007df7 	.word	0x08007df7
 8007dcc:	08007def 	.word	0x08007def
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007dd0:	f7fe fcb0 	bl	8006734 <HAL_RCC_GetPCLK1Freq>
 8007dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dd6:	e014      	b.n	8007e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dd8:	f7fe fcc2 	bl	8006760 <HAL_RCC_GetPCLK2Freq>
 8007ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dde:	e010      	b.n	8007e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007de0:	4b4e      	ldr	r3, [pc, #312]	; (8007f1c <UART_SetConfig+0x5c0>)
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007de4:	e00d      	b.n	8007e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007de6:	f7fe fc37 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8007dea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007dec:	e009      	b.n	8007e02 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007df4:	e005      	b.n	8007e02 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 8090 	beq.w	8007f2a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e0e:	4a44      	ldr	r2, [pc, #272]	; (8007f20 <UART_SetConfig+0x5c4>)
 8007e10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e14:	461a      	mov	r2, r3
 8007e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e18:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e1c:	005a      	lsls	r2, r3, #1
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	085b      	lsrs	r3, r3, #1
 8007e24:	441a      	add	r2, r3
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e2e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d916      	bls.n	8007e64 <UART_SetConfig+0x508>
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e3c:	d212      	bcs.n	8007e64 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e3e:	6a3b      	ldr	r3, [r7, #32]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f023 030f 	bic.w	r3, r3, #15
 8007e46:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	085b      	lsrs	r3, r3, #1
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f003 0307 	and.w	r3, r3, #7
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	8bfb      	ldrh	r3, [r7, #30]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	8bfa      	ldrh	r2, [r7, #30]
 8007e60:	60da      	str	r2, [r3, #12]
 8007e62:	e062      	b.n	8007f2a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e6a:	e05e      	b.n	8007f2a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e70:	2b08      	cmp	r3, #8
 8007e72:	d828      	bhi.n	8007ec6 <UART_SetConfig+0x56a>
 8007e74:	a201      	add	r2, pc, #4	; (adr r2, 8007e7c <UART_SetConfig+0x520>)
 8007e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e7a:	bf00      	nop
 8007e7c:	08007ea1 	.word	0x08007ea1
 8007e80:	08007ea9 	.word	0x08007ea9
 8007e84:	08007eb1 	.word	0x08007eb1
 8007e88:	08007ec7 	.word	0x08007ec7
 8007e8c:	08007eb7 	.word	0x08007eb7
 8007e90:	08007ec7 	.word	0x08007ec7
 8007e94:	08007ec7 	.word	0x08007ec7
 8007e98:	08007ec7 	.word	0x08007ec7
 8007e9c:	08007ebf 	.word	0x08007ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ea0:	f7fe fc48 	bl	8006734 <HAL_RCC_GetPCLK1Freq>
 8007ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ea6:	e014      	b.n	8007ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ea8:	f7fe fc5a 	bl	8006760 <HAL_RCC_GetPCLK2Freq>
 8007eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007eae:	e010      	b.n	8007ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007eb0:	4b1a      	ldr	r3, [pc, #104]	; (8007f1c <UART_SetConfig+0x5c0>)
 8007eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007eb4:	e00d      	b.n	8007ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007eb6:	f7fe fbcf 	bl	8006658 <HAL_RCC_GetSysClockFreq>
 8007eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ebc:	e009      	b.n	8007ed2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ec4:	e005      	b.n	8007ed2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ed0:	bf00      	nop
    }

    if (pclk != 0U)
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d028      	beq.n	8007f2a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007edc:	4a10      	ldr	r2, [pc, #64]	; (8007f20 <UART_SetConfig+0x5c4>)
 8007ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	fbb3 f2f2 	udiv	r2, r3, r2
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	085b      	lsrs	r3, r3, #1
 8007ef0:	441a      	add	r2, r3
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007efc:	6a3b      	ldr	r3, [r7, #32]
 8007efe:	2b0f      	cmp	r3, #15
 8007f00:	d910      	bls.n	8007f24 <UART_SetConfig+0x5c8>
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f08:	d20c      	bcs.n	8007f24 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	60da      	str	r2, [r3, #12]
 8007f14:	e009      	b.n	8007f2a <UART_SetConfig+0x5ce>
 8007f16:	bf00      	nop
 8007f18:	40008000 	.word	0x40008000
 8007f1c:	00f42400 	.word	0x00f42400
 8007f20:	0800d1d4 	.word	0x0800d1d4
      }
      else
      {
        ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	2200      	movs	r2, #0
 8007f44:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007f46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3730      	adds	r7, #48	; 0x30
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f60:	f003 0308 	and.w	r3, r3, #8
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa4:	f003 0302 	and.w	r3, r3, #2
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe8:	f003 0310 	and.w	r3, r3, #16
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d00a      	beq.n	8008028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	430a      	orrs	r2, r1
 8008026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01a      	beq.n	800806a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	430a      	orrs	r2, r1
 8008048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800804e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008052:	d10a      	bne.n	800806a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b098      	sub	sp, #96	; 0x60
 800809c:	af02      	add	r7, sp, #8
 800809e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80080a8:	f7fd fa18 	bl	80054dc <HAL_GetTick>
 80080ac:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0308 	and.w	r3, r3, #8
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d12f      	bne.n	800811c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080c4:	2200      	movs	r2, #0
 80080c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f88e 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d022      	beq.n	800811c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ea:	653b      	str	r3, [r7, #80]	; 0x50
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f4:	647b      	str	r3, [r7, #68]	; 0x44
 80080f6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80080fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e063      	b.n	80081e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b04      	cmp	r3, #4
 8008128:	d149      	bne.n	80081be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800812a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008132:	2200      	movs	r2, #0
 8008134:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f857 	bl	80081ec <UART_WaitOnFlagUntilTimeout>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d03c      	beq.n	80081be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	623b      	str	r3, [r7, #32]
   return(result);
 8008152:	6a3b      	ldr	r3, [r7, #32]
 8008154:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008158:	64fb      	str	r3, [r7, #76]	; 0x4c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	461a      	mov	r2, r3
 8008160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008162:	633b      	str	r3, [r7, #48]	; 0x30
 8008164:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e6      	bne.n	8008144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	60fb      	str	r3, [r7, #12]
   return(result);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	64bb      	str	r3, [r7, #72]	; 0x48
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	3308      	adds	r3, #8
 8008194:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008196:	61fa      	str	r2, [r7, #28]
 8008198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819a:	69b9      	ldr	r1, [r7, #24]
 800819c:	69fa      	ldr	r2, [r7, #28]
 800819e:	e841 2300 	strex	r3, r2, [r1]
 80081a2:	617b      	str	r3, [r7, #20]
   return(result);
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1e5      	bne.n	8008176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2220      	movs	r2, #32
 80081ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e012      	b.n	80081e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2220      	movs	r2, #32
 80081c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2220      	movs	r2, #32
 80081ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80081e2:	2300      	movs	r3, #0
}
 80081e4:	4618      	mov	r0, r3
 80081e6:	3758      	adds	r7, #88	; 0x58
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081fc:	e04f      	b.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008204:	d04b      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008206:	f7fd f969 	bl	80054dc <HAL_GetTick>
 800820a:	4602      	mov	r2, r0
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	69ba      	ldr	r2, [r7, #24]
 8008212:	429a      	cmp	r2, r3
 8008214:	d302      	bcc.n	800821c <UART_WaitOnFlagUntilTimeout+0x30>
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e04e      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	2b00      	cmp	r3, #0
 800822c:	d037      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	2b80      	cmp	r3, #128	; 0x80
 8008232:	d034      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	2b40      	cmp	r3, #64	; 0x40
 8008238:	d031      	beq.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b08      	cmp	r3, #8
 8008246:	d110      	bne.n	800826a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2208      	movs	r2, #8
 800824e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f95b 	bl	800850c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2208      	movs	r2, #8
 800825a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e029      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69db      	ldr	r3, [r3, #28]
 8008270:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008278:	d111      	bne.n	800829e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008284:	68f8      	ldr	r0, [r7, #12]
 8008286:	f000 f941 	bl	800850c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2220      	movs	r2, #32
 800828e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e00f      	b.n	80082be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69da      	ldr	r2, [r3, #28]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4013      	ands	r3, r2
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	bf0c      	ite	eq
 80082ae:	2301      	moveq	r3, #1
 80082b0:	2300      	movne	r3, #0
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	461a      	mov	r2, r3
 80082b6:	79fb      	ldrb	r3, [r7, #7]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d0a0      	beq.n	80081fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3710      	adds	r7, #16
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b0a3      	sub	sp, #140	; 0x8c
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	4613      	mov	r3, r2
 80082d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	88fa      	ldrh	r2, [r7, #6]
 80082e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2200      	movs	r2, #0
 80082f0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082fa:	d10e      	bne.n	800831a <UART_Start_Receive_IT+0x52>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	691b      	ldr	r3, [r3, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d105      	bne.n	8008310 <UART_Start_Receive_IT+0x48>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f240 12ff 	movw	r2, #511	; 0x1ff
 800830a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800830e:	e02d      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	22ff      	movs	r2, #255	; 0xff
 8008314:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008318:	e028      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d10d      	bne.n	800833e <UART_Start_Receive_IT+0x76>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d104      	bne.n	8008334 <UART_Start_Receive_IT+0x6c>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	22ff      	movs	r2, #255	; 0xff
 800832e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008332:	e01b      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	227f      	movs	r2, #127	; 0x7f
 8008338:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800833c:	e016      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008346:	d10d      	bne.n	8008364 <UART_Start_Receive_IT+0x9c>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <UART_Start_Receive_IT+0x92>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	227f      	movs	r2, #127	; 0x7f
 8008354:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008358:	e008      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	223f      	movs	r2, #63	; 0x3f
 800835e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008362:	e003      	b.n	800836c <UART_Start_Receive_IT+0xa4>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2200      	movs	r2, #0
 8008368:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2222      	movs	r2, #34	; 0x22
 8008378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008386:	e853 3f00 	ldrex	r3, [r3]
 800838a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800838c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800838e:	f043 0301 	orr.w	r3, r3, #1
 8008392:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	3308      	adds	r3, #8
 800839c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80083a0:	673a      	str	r2, [r7, #112]	; 0x70
 80083a2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80083a6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80083a8:	e841 2300 	strex	r3, r2, [r1]
 80083ac:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80083ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e3      	bne.n	800837c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80083bc:	d14f      	bne.n	800845e <UART_Start_Receive_IT+0x196>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80083c4:	88fa      	ldrh	r2, [r7, #6]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d349      	bcc.n	800845e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	d107      	bne.n	80083e4 <UART_Start_Receive_IT+0x11c>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d103      	bne.n	80083e4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4a47      	ldr	r2, [pc, #284]	; (80084fc <UART_Start_Receive_IT+0x234>)
 80083e0:	675a      	str	r2, [r3, #116]	; 0x74
 80083e2:	e002      	b.n	80083ea <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	4a46      	ldr	r2, [pc, #280]	; (8008500 <UART_Start_Receive_IT+0x238>)
 80083e8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d01a      	beq.n	8008428 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083fa:	e853 3f00 	ldrex	r3, [r3]
 80083fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008402:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008406:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	461a      	mov	r2, r3
 8008410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008416:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800841a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008422:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e4      	bne.n	80083f2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3308      	adds	r3, #8
 800842e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800843a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3308      	adds	r3, #8
 8008446:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008448:	64ba      	str	r2, [r7, #72]	; 0x48
 800844a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800844e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e5      	bne.n	8008428 <UART_Start_Receive_IT+0x160>
 800845c:	e046      	b.n	80084ec <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008466:	d107      	bne.n	8008478 <UART_Start_Receive_IT+0x1b0>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d103      	bne.n	8008478 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4a24      	ldr	r2, [pc, #144]	; (8008504 <UART_Start_Receive_IT+0x23c>)
 8008474:	675a      	str	r2, [r3, #116]	; 0x74
 8008476:	e002      	b.n	800847e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a23      	ldr	r2, [pc, #140]	; (8008508 <UART_Start_Receive_IT+0x240>)
 800847c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d019      	beq.n	80084ba <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	e853 3f00 	ldrex	r3, [r3]
 8008492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008496:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800849a:	677b      	str	r3, [r7, #116]	; 0x74
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	461a      	mov	r2, r3
 80084a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
 80084a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80084aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084ac:	e841 2300 	strex	r3, r2, [r1]
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d1e6      	bne.n	8008486 <UART_Start_Receive_IT+0x1be>
 80084b8:	e018      	b.n	80084ec <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	e853 3f00 	ldrex	r3, [r3]
 80084c6:	613b      	str	r3, [r7, #16]
   return(result);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f043 0320 	orr.w	r3, r3, #32
 80084ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	461a      	mov	r2, r3
 80084d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084d8:	623b      	str	r3, [r7, #32]
 80084da:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084dc:	69f9      	ldr	r1, [r7, #28]
 80084de:	6a3a      	ldr	r2, [r7, #32]
 80084e0:	e841 2300 	strex	r3, r2, [r1]
 80084e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1e6      	bne.n	80084ba <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	378c      	adds	r7, #140	; 0x8c
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	08008d2d 	.word	0x08008d2d
 8008500:	080089cd 	.word	0x080089cd
 8008504:	08008815 	.word	0x08008815
 8008508:	0800865d 	.word	0x0800865d

0800850c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b095      	sub	sp, #84	; 0x54
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008528:	64fb      	str	r3, [r7, #76]	; 0x4c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	461a      	mov	r2, r3
 8008530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008532:	643b      	str	r3, [r7, #64]	; 0x40
 8008534:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008536:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008538:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1e6      	bne.n	8008514 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	3308      	adds	r3, #8
 800854c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	e853 3f00 	ldrex	r3, [r3]
 8008554:	61fb      	str	r3, [r7, #28]
   return(result);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	64bb      	str	r3, [r7, #72]	; 0x48
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800856c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e3      	bne.n	8008546 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008582:	2b01      	cmp	r3, #1
 8008584:	d118      	bne.n	80085b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	e853 3f00 	ldrex	r3, [r3]
 8008592:	60bb      	str	r3, [r7, #8]
   return(result);
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	f023 0310 	bic.w	r3, r3, #16
 800859a:	647b      	str	r3, [r7, #68]	; 0x44
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	461a      	mov	r2, r3
 80085a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a8:	6979      	ldr	r1, [r7, #20]
 80085aa:	69ba      	ldr	r2, [r7, #24]
 80085ac:	e841 2300 	strex	r3, r2, [r1]
 80085b0:	613b      	str	r3, [r7, #16]
   return(result);
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d1e6      	bne.n	8008586 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 80085cc:	bf00      	nop
 80085ce:	3754      	adds	r7, #84	; 0x54
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff f99a 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085fc:	bf00      	nop
 80085fe:	3710      	adds	r7, #16
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b088      	sub	sp, #32
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	e853 3f00 	ldrex	r3, [r3]
 8008618:	60bb      	str	r3, [r7, #8]
   return(result);
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008620:	61fb      	str	r3, [r7, #28]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	61bb      	str	r3, [r7, #24]
 800862c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800862e:	6979      	ldr	r1, [r7, #20]
 8008630:	69ba      	ldr	r2, [r7, #24]
 8008632:	e841 2300 	strex	r3, r2, [r1]
 8008636:	613b      	str	r3, [r7, #16]
   return(result);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1e6      	bne.n	800860c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2220      	movs	r2, #32
 8008642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f7ff f965 	bl	800791c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008652:	bf00      	nop
 8008654:	3720      	adds	r7, #32
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
	...

0800865c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b09c      	sub	sp, #112	; 0x70
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800866a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008674:	2b22      	cmp	r3, #34	; 0x22
 8008676:	f040 80be 	bne.w	80087f6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008684:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008688:	b2d9      	uxtb	r1, r3
 800868a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800868e:	b2da      	uxtb	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008694:	400a      	ands	r2, r1
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b29a      	uxth	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086bc:	b29b      	uxth	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	f040 80a1 	bne.w	8008806 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80086e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e6      	bne.n	80086c4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	e853 3f00 	ldrex	r3, [r3]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008708:	f023 0301 	bic.w	r3, r3, #1
 800870c:	667b      	str	r3, [r7, #100]	; 0x64
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3308      	adds	r3, #8
 8008714:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008716:	647a      	str	r2, [r7, #68]	; 0x44
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800871c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800871e:	e841 2300 	strex	r3, r2, [r1]
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008726:	2b00      	cmp	r3, #0
 8008728:	d1e5      	bne.n	80086f6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2220      	movs	r2, #32
 800872e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2200      	movs	r2, #0
 800873c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a33      	ldr	r2, [pc, #204]	; (8008810 <UART_RxISR_8BIT+0x1b4>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d01f      	beq.n	8008788 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	685b      	ldr	r3, [r3, #4]
 800874e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d018      	beq.n	8008788 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800875c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875e:	e853 3f00 	ldrex	r3, [r3]
 8008762:	623b      	str	r3, [r7, #32]
   return(result);
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800876a:	663b      	str	r3, [r7, #96]	; 0x60
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	461a      	mov	r2, r3
 8008772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008774:	633b      	str	r3, [r7, #48]	; 0x30
 8008776:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800877a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800877c:	e841 2300 	strex	r3, r2, [r1]
 8008780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1e6      	bne.n	8008756 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800878c:	2b01      	cmp	r3, #1
 800878e:	d12e      	bne.n	80087ee <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	e853 3f00 	ldrex	r3, [r3]
 80087a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f023 0310 	bic.w	r3, r3, #16
 80087aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	461a      	mov	r2, r3
 80087b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b4:	61fb      	str	r3, [r7, #28]
 80087b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b8:	69b9      	ldr	r1, [r7, #24]
 80087ba:	69fa      	ldr	r2, [r7, #28]
 80087bc:	e841 2300 	strex	r3, r2, [r1]
 80087c0:	617b      	str	r3, [r7, #20]
   return(result);
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1e6      	bne.n	8008796 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69db      	ldr	r3, [r3, #28]
 80087ce:	f003 0310 	and.w	r3, r3, #16
 80087d2:	2b10      	cmp	r3, #16
 80087d4:	d103      	bne.n	80087de <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2210      	movs	r2, #16
 80087dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7ff f8ac 	bl	8007944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087ec:	e00b      	b.n	8008806 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f7fc fc0a 	bl	8005008 <HAL_UART_RxCpltCallback>
}
 80087f4:	e007      	b.n	8008806 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699a      	ldr	r2, [r3, #24]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f042 0208 	orr.w	r2, r2, #8
 8008804:	619a      	str	r2, [r3, #24]
}
 8008806:	bf00      	nop
 8008808:	3770      	adds	r7, #112	; 0x70
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	40008000 	.word	0x40008000

08008814 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b09c      	sub	sp, #112	; 0x70
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008822:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882c:	2b22      	cmp	r3, #34	; 0x22
 800882e:	f040 80be 	bne.w	80089ae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008838:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008840:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008842:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8008846:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800884a:	4013      	ands	r3, r2
 800884c:	b29a      	uxth	r2, r3
 800884e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008856:	1c9a      	adds	r2, r3, #2
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008862:	b29b      	uxth	r3, r3
 8008864:	3b01      	subs	r3, #1
 8008866:	b29a      	uxth	r2, r3
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008874:	b29b      	uxth	r3, r3
 8008876:	2b00      	cmp	r3, #0
 8008878:	f040 80a1 	bne.w	80089be <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008882:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008884:	e853 3f00 	ldrex	r3, [r3]
 8008888:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800888a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800888c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008890:	667b      	str	r3, [r7, #100]	; 0x64
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	461a      	mov	r2, r3
 8008898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800889a:	657b      	str	r3, [r7, #84]	; 0x54
 800889c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80088a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088a2:	e841 2300 	strex	r3, r2, [r1]
 80088a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d1e6      	bne.n	800887c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	3308      	adds	r3, #8
 80088b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b8:	e853 3f00 	ldrex	r3, [r3]
 80088bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c0:	f023 0301 	bic.w	r3, r3, #1
 80088c4:	663b      	str	r3, [r7, #96]	; 0x60
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3308      	adds	r3, #8
 80088cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80088ce:	643a      	str	r2, [r7, #64]	; 0x40
 80088d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088d6:	e841 2300 	strex	r3, r2, [r1]
 80088da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1e5      	bne.n	80088ae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2220      	movs	r2, #32
 80088e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a33      	ldr	r2, [pc, #204]	; (80089c8 <UART_RxISR_16BIT+0x1b4>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d01f      	beq.n	8008940 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800890a:	2b00      	cmp	r3, #0
 800890c:	d018      	beq.n	8008940 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	6a3b      	ldr	r3, [r7, #32]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	61fb      	str	r3, [r7, #28]
   return(result);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800892c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800892e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008932:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800893a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e6      	bne.n	800890e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008944:	2b01      	cmp	r3, #1
 8008946:	d12e      	bne.n	80089a6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	e853 3f00 	ldrex	r3, [r3]
 800895a:	60bb      	str	r3, [r7, #8]
   return(result);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f023 0310 	bic.w	r3, r3, #16
 8008962:	65bb      	str	r3, [r7, #88]	; 0x58
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800896c:	61bb      	str	r3, [r7, #24]
 800896e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008970:	6979      	ldr	r1, [r7, #20]
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	e841 2300 	strex	r3, r2, [r1]
 8008978:	613b      	str	r3, [r7, #16]
   return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1e6      	bne.n	800894e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f003 0310 	and.w	r3, r3, #16
 800898a:	2b10      	cmp	r3, #16
 800898c:	d103      	bne.n	8008996 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2210      	movs	r2, #16
 8008994:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7fe ffd0 	bl	8007944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80089a4:	e00b      	b.n	80089be <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fc fb2e 	bl	8005008 <HAL_UART_RxCpltCallback>
}
 80089ac:	e007      	b.n	80089be <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	699a      	ldr	r2, [r3, #24]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f042 0208 	orr.w	r2, r2, #8
 80089bc:	619a      	str	r2, [r3, #24]
}
 80089be:	bf00      	nop
 80089c0:	3770      	adds	r7, #112	; 0x70
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	40008000 	.word	0x40008000

080089cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b0ac      	sub	sp, #176	; 0xb0
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089da:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69db      	ldr	r3, [r3, #28]
 80089e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a02:	2b22      	cmp	r3, #34	; 0x22
 8008a04:	f040 8182 	bne.w	8008d0c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a0e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008a12:	e125      	b.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a1e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008a22:	b2d9      	uxtb	r1, r3
 8008a24:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008a28:	b2da      	uxtb	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2e:	400a      	ands	r2, r1
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a38:	1c5a      	adds	r2, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a44:	b29b      	uxth	r3, r3
 8008a46:	3b01      	subs	r3, #1
 8008a48:	b29a      	uxth	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	69db      	ldr	r3, [r3, #28]
 8008a56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d053      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a6a:	f003 0301 	and.w	r3, r3, #1
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d011      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xca>
 8008a72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d00b      	beq.n	8008a96 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2201      	movs	r2, #1
 8008a84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a8c:	f043 0201 	orr.w	r2, r3, #1
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d011      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008aa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aa6:	f003 0301 	and.w	r3, r3, #1
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008abc:	f043 0204 	orr.w	r2, r3, #4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ac6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008aca:	f003 0304 	and.w	r3, r3, #4
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d011      	beq.n	8008af6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ad2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00b      	beq.n	8008af6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2204      	movs	r2, #4
 8008ae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aec:	f043 0202 	orr.w	r2, r3, #2
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d006      	beq.n	8008b0e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f7fe ff15 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 80a2 	bne.w	8008c60 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b24:	e853 3f00 	ldrex	r3, [r3]
 8008b28:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b40:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008b44:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008b4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e4      	bne.n	8008b1c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	3308      	adds	r3, #8
 8008b58:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b5c:	e853 3f00 	ldrex	r3, [r3]
 8008b60:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008b62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3308      	adds	r3, #8
 8008b76:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8008b7c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008b80:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b82:	e841 2300 	strex	r3, r2, [r1]
 8008b86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d1e1      	bne.n	8008b52 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2220      	movs	r2, #32
 8008b92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a5f      	ldr	r2, [pc, #380]	; (8008d24 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d021      	beq.n	8008bf0 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d01a      	beq.n	8008bf0 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008bca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008bce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8008bde:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008be2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e4      	bne.n	8008bba <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d130      	bne.n	8008c5a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c20:	643b      	str	r3, [r7, #64]	; 0x40
 8008c22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e4      	bne.n	8008bfe <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	f003 0310 	and.w	r3, r3, #16
 8008c3e:	2b10      	cmp	r3, #16
 8008c40:	d103      	bne.n	8008c4a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2210      	movs	r2, #16
 8008c48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c50:	4619      	mov	r1, r3
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f7fe fe76 	bl	8007944 <HAL_UARTEx_RxEventCallback>
 8008c58:	e002      	b.n	8008c60 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fc f9d4 	bl	8005008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008c60:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d006      	beq.n	8008c76 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8008c68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	f47f aecf 	bne.w	8008a14 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008c7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008c80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d049      	beq.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x350>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008c8e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d242      	bcs.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3308      	adds	r3, #8
 8008c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3308      	adds	r3, #8
 8008cb6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008cbc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a15      	ldr	r2, [pc, #84]	; (8008d28 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8008cd2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	e853 3f00 	ldrex	r3, [r3]
 8008ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f043 0320 	orr.w	r3, r3, #32
 8008ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfa:	6979      	ldr	r1, [r7, #20]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	e841 2300 	strex	r3, r2, [r1]
 8008d02:	613b      	str	r3, [r7, #16]
   return(result);
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1e4      	bne.n	8008cd4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008d0a:	e007      	b.n	8008d1c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699a      	ldr	r2, [r3, #24]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f042 0208 	orr.w	r2, r2, #8
 8008d1a:	619a      	str	r2, [r3, #24]
}
 8008d1c:	bf00      	nop
 8008d1e:	37b0      	adds	r7, #176	; 0xb0
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	40008000 	.word	0x40008000
 8008d28:	0800865d 	.word	0x0800865d

08008d2c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b0ae      	sub	sp, #184	; 0xb8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d3a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d62:	2b22      	cmp	r3, #34	; 0x22
 8008d64:	f040 8186 	bne.w	8009074 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d6e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d72:	e129      	b.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008d86:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008d8a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d8e:	4013      	ands	r3, r2
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d96:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d9c:	1c9a      	adds	r2, r3, #2
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	3b01      	subs	r3, #1
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dc2:	f003 0307 	and.w	r3, r3, #7
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d053      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d011      	beq.n	8008dfa <UART_RxISR_16BIT_FIFOEN+0xce>
 8008dd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00b      	beq.n	8008dfa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2201      	movs	r2, #1
 8008de8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008df0:	f043 0201 	orr.w	r2, r3, #1
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d011      	beq.n	8008e2a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008e06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e0a:	f003 0301 	and.w	r3, r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d00b      	beq.n	8008e2a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2202      	movs	r2, #2
 8008e18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e20:	f043 0204 	orr.w	r2, r3, #4
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e2a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e2e:	f003 0304 	and.w	r3, r3, #4
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d011      	beq.n	8008e5a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008e36:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00b      	beq.n	8008e5a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2204      	movs	r2, #4
 8008e48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e50:	f043 0202 	orr.w	r2, r3, #2
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d006      	beq.n	8008e72 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f7fe fd63 	bl	8007930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f040 80a4 	bne.w	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008eaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008eb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e2      	bne.n	8008e80 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3308      	adds	r3, #8
 8008ec0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ec4:	e853 3f00 	ldrex	r3, [r3]
 8008ec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ecc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed0:	f023 0301 	bic.w	r3, r3, #1
 8008ed4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3308      	adds	r3, #8
 8008ede:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ee2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ee4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ee8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ef0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e1      	bne.n	8008eba <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a5f      	ldr	r2, [pc, #380]	; (800908c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d021      	beq.n	8008f58 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d01a      	beq.n	8008f58 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f2a:	e853 3f00 	ldrex	r3, [r3]
 8008f2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008f36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8008f46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e4      	bne.n	8008f22 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d130      	bne.n	8008fc2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f76:	f023 0310 	bic.w	r3, r3, #16
 8008f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	461a      	mov	r2, r3
 8008f84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008f88:	647b      	str	r3, [r7, #68]	; 0x44
 8008f8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008f96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e4      	bne.n	8008f66 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	f003 0310 	and.w	r3, r3, #16
 8008fa6:	2b10      	cmp	r3, #16
 8008fa8:	d103      	bne.n	8008fb2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	2210      	movs	r2, #16
 8008fb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7fe fcc2 	bl	8007944 <HAL_UARTEx_RxEventCallback>
 8008fc0:	e002      	b.n	8008fc8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fc f820 	bl	8005008 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fc8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d006      	beq.n	8008fde <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008fd0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008fd4:	f003 0320 	and.w	r3, r3, #32
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	f47f aecb 	bne.w	8008d74 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fe4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008fe8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d049      	beq.n	8009084 <UART_RxISR_16BIT_FIFOEN+0x358>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ff6:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8008ffa:	429a      	cmp	r2, r3
 8008ffc:	d242      	bcs.n	8009084 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	623b      	str	r3, [r7, #32]
   return(result);
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009022:	633a      	str	r2, [r7, #48]	; 0x30
 8009024:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e3      	bne.n	8008ffe <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a15      	ldr	r2, [pc, #84]	; (8009090 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800903a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	e853 3f00 	ldrex	r3, [r3]
 8009048:	60fb      	str	r3, [r7, #12]
   return(result);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f043 0320 	orr.w	r3, r3, #32
 8009050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800905e:	61fb      	str	r3, [r7, #28]
 8009060:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009062:	69b9      	ldr	r1, [r7, #24]
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	e841 2300 	strex	r3, r2, [r1]
 800906a:	617b      	str	r3, [r7, #20]
   return(result);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1e4      	bne.n	800903c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009072:	e007      	b.n	8009084 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f042 0208 	orr.w	r2, r2, #8
 8009082:	619a      	str	r2, [r3, #24]
}
 8009084:	bf00      	nop
 8009086:	37b8      	adds	r7, #184	; 0xb8
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}
 800908c:	40008000 	.word	0x40008000
 8009090:	08008815 	.word	0x08008815

08009094 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b085      	sub	sp, #20
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d101      	bne.n	80090e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80090e2:	2302      	movs	r3, #2
 80090e4:	e027      	b.n	8009136 <HAL_UARTEx_DisableFifoMode+0x66>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2224      	movs	r2, #36	; 0x24
 80090f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f022 0201 	bic.w	r2, r2, #1
 800910c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009114:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2220      	movs	r2, #32
 8009128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b084      	sub	sp, #16
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009152:	2b01      	cmp	r3, #1
 8009154:	d101      	bne.n	800915a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009156:	2302      	movs	r3, #2
 8009158:	e02d      	b.n	80091b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2224      	movs	r2, #36	; 0x24
 8009166:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f022 0201 	bic.w	r2, r2, #1
 8009180:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	683a      	ldr	r2, [r7, #0]
 8009192:	430a      	orrs	r2, r1
 8009194:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f850 	bl	800923c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091b4:	2300      	movs	r3, #0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3710      	adds	r7, #16
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b084      	sub	sp, #16
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d101      	bne.n	80091d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091d2:	2302      	movs	r3, #2
 80091d4:	e02d      	b.n	8009232 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2201      	movs	r2, #1
 80091da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	2224      	movs	r2, #36	; 0x24
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f022 0201 	bic.w	r2, r2, #1
 80091fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	683a      	ldr	r2, [r7, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f000 f812 	bl	800923c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2220      	movs	r2, #32
 8009224:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800925c:	e031      	b.n	80092c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800925e:	2308      	movs	r3, #8
 8009260:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009262:	2308      	movs	r3, #8
 8009264:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	0e5b      	lsrs	r3, r3, #25
 800926e:	b2db      	uxtb	r3, r3
 8009270:	f003 0307 	and.w	r3, r3, #7
 8009274:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	0f5b      	lsrs	r3, r3, #29
 800927e:	b2db      	uxtb	r3, r3
 8009280:	f003 0307 	and.w	r3, r3, #7
 8009284:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009286:	7bbb      	ldrb	r3, [r7, #14]
 8009288:	7b3a      	ldrb	r2, [r7, #12]
 800928a:	4911      	ldr	r1, [pc, #68]	; (80092d0 <UARTEx_SetNbDataToProcess+0x94>)
 800928c:	5c8a      	ldrb	r2, [r1, r2]
 800928e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009292:	7b3a      	ldrb	r2, [r7, #12]
 8009294:	490f      	ldr	r1, [pc, #60]	; (80092d4 <UARTEx_SetNbDataToProcess+0x98>)
 8009296:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009298:	fb93 f3f2 	sdiv	r3, r3, r2
 800929c:	b29a      	uxth	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092a4:	7bfb      	ldrb	r3, [r7, #15]
 80092a6:	7b7a      	ldrb	r2, [r7, #13]
 80092a8:	4909      	ldr	r1, [pc, #36]	; (80092d0 <UARTEx_SetNbDataToProcess+0x94>)
 80092aa:	5c8a      	ldrb	r2, [r1, r2]
 80092ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092b0:	7b7a      	ldrb	r2, [r7, #13]
 80092b2:	4908      	ldr	r1, [pc, #32]	; (80092d4 <UARTEx_SetNbDataToProcess+0x98>)
 80092b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80092c2:	bf00      	nop
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	0800d1ec 	.word	0x0800d1ec
 80092d4:	0800d1f4 	.word	0x0800d1f4

080092d8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80092d8:	b480      	push	{r7}
 80092da:	b08b      	sub	sp, #44	; 0x2c
 80092dc:	af00      	add	r7, sp, #0
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	60b9      	str	r1, [r7, #8]
 80092e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	fa93 f3a3 	rbit	r3, r3
 80092f2:	613b      	str	r3, [r7, #16]
  return result;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80092f8:	69bb      	ldr	r3, [r7, #24]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80092fe:	2320      	movs	r3, #32
 8009300:	e003      	b.n	800930a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	fab3 f383 	clz	r3, r3
 8009308:	b2db      	uxtb	r3, r3
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	2103      	movs	r1, #3
 800930e:	fa01 f303 	lsl.w	r3, r1, r3
 8009312:	43db      	mvns	r3, r3
 8009314:	401a      	ands	r2, r3
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800931a:	6a3b      	ldr	r3, [r7, #32]
 800931c:	fa93 f3a3 	rbit	r3, r3
 8009320:	61fb      	str	r3, [r7, #28]
  return result;
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800932c:	2320      	movs	r3, #32
 800932e:	e003      	b.n	8009338 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	fab3 f383 	clz	r3, r3
 8009336:	b2db      	uxtb	r3, r3
 8009338:	005b      	lsls	r3, r3, #1
 800933a:	6879      	ldr	r1, [r7, #4]
 800933c:	fa01 f303 	lsl.w	r3, r1, r3
 8009340:	431a      	orrs	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	601a      	str	r2, [r3, #0]
}
 8009346:	bf00      	nop
 8009348:	372c      	adds	r7, #44	; 0x2c
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	60f8      	str	r0, [r7, #12]
 800935a:	60b9      	str	r1, [r7, #8]
 800935c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	43db      	mvns	r3, r3
 8009366:	401a      	ands	r2, r3
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	fb01 f303 	mul.w	r3, r1, r3
 8009370:	431a      	orrs	r2, r3
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	605a      	str	r2, [r3, #4]
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009382:	b480      	push	{r7}
 8009384:	b08b      	sub	sp, #44	; 0x2c
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	689a      	ldr	r2, [r3, #8]
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	fa93 f3a3 	rbit	r3, r3
 800939c:	613b      	str	r3, [r7, #16]
  return result;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80093a8:	2320      	movs	r3, #32
 80093aa:	e003      	b.n	80093b4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	fab3 f383 	clz	r3, r3
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	005b      	lsls	r3, r3, #1
 80093b6:	2103      	movs	r1, #3
 80093b8:	fa01 f303 	lsl.w	r3, r1, r3
 80093bc:	43db      	mvns	r3, r3
 80093be:	401a      	ands	r2, r3
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c4:	6a3b      	ldr	r3, [r7, #32]
 80093c6:	fa93 f3a3 	rbit	r3, r3
 80093ca:	61fb      	str	r3, [r7, #28]
  return result;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d101      	bne.n	80093da <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80093d6:	2320      	movs	r3, #32
 80093d8:	e003      	b.n	80093e2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80093da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093dc:	fab3 f383 	clz	r3, r3
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	005b      	lsls	r3, r3, #1
 80093e4:	6879      	ldr	r1, [r7, #4]
 80093e6:	fa01 f303 	lsl.w	r3, r1, r3
 80093ea:	431a      	orrs	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80093f0:	bf00      	nop
 80093f2:	372c      	adds	r7, #44	; 0x2c
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b08b      	sub	sp, #44	; 0x2c
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68da      	ldr	r2, [r3, #12]
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	fa93 f3a3 	rbit	r3, r3
 8009416:	613b      	str	r3, [r7, #16]
  return result;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8009422:	2320      	movs	r3, #32
 8009424:	e003      	b.n	800942e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8009426:	69bb      	ldr	r3, [r7, #24]
 8009428:	fab3 f383 	clz	r3, r3
 800942c:	b2db      	uxtb	r3, r3
 800942e:	005b      	lsls	r3, r3, #1
 8009430:	2103      	movs	r1, #3
 8009432:	fa01 f303 	lsl.w	r3, r1, r3
 8009436:	43db      	mvns	r3, r3
 8009438:	401a      	ands	r2, r3
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800943e:	6a3b      	ldr	r3, [r7, #32]
 8009440:	fa93 f3a3 	rbit	r3, r3
 8009444:	61fb      	str	r3, [r7, #28]
  return result;
 8009446:	69fb      	ldr	r3, [r7, #28]
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8009450:	2320      	movs	r3, #32
 8009452:	e003      	b.n	800945c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009456:	fab3 f383 	clz	r3, r3
 800945a:	b2db      	uxtb	r3, r3
 800945c:	005b      	lsls	r3, r3, #1
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	fa01 f303 	lsl.w	r3, r1, r3
 8009464:	431a      	orrs	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	60da      	str	r2, [r3, #12]
}
 800946a:	bf00      	nop
 800946c:	372c      	adds	r7, #44	; 0x2c
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009476:	b480      	push	{r7}
 8009478:	b08b      	sub	sp, #44	; 0x2c
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6a1a      	ldr	r2, [r3, #32]
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	fa93 f3a3 	rbit	r3, r3
 8009490:	613b      	str	r3, [r7, #16]
  return result;
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d101      	bne.n	80094a0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800949c:	2320      	movs	r3, #32
 800949e:	e003      	b.n	80094a8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	fab3 f383 	clz	r3, r3
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	210f      	movs	r1, #15
 80094ac:	fa01 f303 	lsl.w	r3, r1, r3
 80094b0:	43db      	mvns	r3, r3
 80094b2:	401a      	ands	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094b8:	6a3b      	ldr	r3, [r7, #32]
 80094ba:	fa93 f3a3 	rbit	r3, r3
 80094be:	61fb      	str	r3, [r7, #28]
  return result;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d101      	bne.n	80094ce <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80094ca:	2320      	movs	r3, #32
 80094cc:	e003      	b.n	80094d6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80094ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d0:	fab3 f383 	clz	r3, r3
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	6879      	ldr	r1, [r7, #4]
 80094da:	fa01 f303 	lsl.w	r3, r1, r3
 80094de:	431a      	orrs	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80094e4:	bf00      	nop
 80094e6:	372c      	adds	r7, #44	; 0x2c
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b08b      	sub	sp, #44	; 0x2c
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	0a1b      	lsrs	r3, r3, #8
 8009504:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	fa93 f3a3 	rbit	r3, r3
 800950c:	613b      	str	r3, [r7, #16]
  return result;
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d101      	bne.n	800951c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8009518:	2320      	movs	r3, #32
 800951a:	e003      	b.n	8009524 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	fab3 f383 	clz	r3, r3
 8009522:	b2db      	uxtb	r3, r3
 8009524:	009b      	lsls	r3, r3, #2
 8009526:	210f      	movs	r1, #15
 8009528:	fa01 f303 	lsl.w	r3, r1, r3
 800952c:	43db      	mvns	r3, r3
 800952e:	401a      	ands	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	0a1b      	lsrs	r3, r3, #8
 8009534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	fa93 f3a3 	rbit	r3, r3
 800953c:	61fb      	str	r3, [r7, #28]
  return result;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009544:	2b00      	cmp	r3, #0
 8009546:	d101      	bne.n	800954c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8009548:	2320      	movs	r3, #32
 800954a:	e003      	b.n	8009554 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	fab3 f383 	clz	r3, r3
 8009552:	b2db      	uxtb	r3, r3
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	fa01 f303 	lsl.w	r3, r1, r3
 800955c:	431a      	orrs	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009562:	bf00      	nop
 8009564:	372c      	adds	r7, #44	; 0x2c
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b088      	sub	sp, #32
 8009572:	af00      	add	r7, sp, #0
 8009574:	6078      	str	r0, [r7, #4]
 8009576:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	fa93 f3a3 	rbit	r3, r3
 8009584:	60fb      	str	r3, [r7, #12]
  return result;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <LL_GPIO_Init+0x26>
    return 32U;
 8009590:	2320      	movs	r3, #32
 8009592:	e003      	b.n	800959c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	fab3 f383 	clz	r3, r3
 800959a:	b2db      	uxtb	r3, r3
 800959c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800959e:	e048      	b.n	8009632 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	2101      	movs	r1, #1
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	fa01 f303 	lsl.w	r3, r1, r3
 80095ac:	4013      	ands	r3, r2
 80095ae:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d03a      	beq.n	800962c <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d003      	beq.n	80095c6 <LL_GPIO_Init+0x58>
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d10e      	bne.n	80095e4 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	461a      	mov	r2, r3
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f7ff fed7 	bl	8009382 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	6819      	ldr	r1, [r3, #0]
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	461a      	mov	r2, r3
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f7ff feb7 	bl	8009352 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	461a      	mov	r2, r3
 80095ea:	69b9      	ldr	r1, [r7, #24]
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7ff ff05 	bl	80093fc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d111      	bne.n	800961e <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	2bff      	cmp	r3, #255	; 0xff
 80095fe:	d807      	bhi.n	8009610 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	461a      	mov	r2, r3
 8009606:	69b9      	ldr	r1, [r7, #24]
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f7ff ff34 	bl	8009476 <LL_GPIO_SetAFPin_0_7>
 800960e:	e006      	b.n	800961e <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	461a      	mov	r2, r3
 8009616:	69b9      	ldr	r1, [r7, #24]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff ff69 	bl	80094f0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	461a      	mov	r2, r3
 8009624:	69b9      	ldr	r1, [r7, #24]
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7ff fe56 	bl	80092d8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	fa22 f303 	lsr.w	r3, r2, r3
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1af      	bne.n	80095a0 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <LL_I2C_Enable>:
{
 800964a:	b480      	push	{r7}
 800964c:	b083      	sub	sp, #12
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f043 0201 	orr.w	r2, r3, #1
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
}
 800965e:	bf00      	nop
 8009660:	370c      	adds	r7, #12
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr

0800966a <LL_I2C_Disable>:
{
 800966a:	b480      	push	{r7}
 800966c:	b083      	sub	sp, #12
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	601a      	str	r2, [r3, #0]
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <LL_I2C_ConfigFilters>:
{
 800968a:	b480      	push	{r7}
 800968c:	b085      	sub	sp, #20
 800968e:	af00      	add	r7, sp, #0
 8009690:	60f8      	str	r0, [r7, #12]
 8009692:	60b9      	str	r1, [r7, #8]
 8009694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	0219      	lsls	r1, r3, #8
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	430b      	orrs	r3, r1
 80096a6:	431a      	orrs	r2, r3
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	601a      	str	r2, [r3, #0]
}
 80096ac:	bf00      	nop
 80096ae:	3714      	adds	r7, #20
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <LL_I2C_SetOwnAddress1>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	b085      	sub	sp, #20
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096cc:	f023 0307 	bic.w	r3, r3, #7
 80096d0:	68b9      	ldr	r1, [r7, #8]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	431a      	orrs	r2, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	609a      	str	r2, [r3, #8]
}
 80096dc:	bf00      	nop
 80096de:	3714      	adds	r7, #20
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <LL_I2C_EnableOwnAddress1>:
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <LL_I2C_DisableOwnAddress1>:
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	609a      	str	r2, [r3, #8]
}
 800971c:	bf00      	nop
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr

08009728 <LL_I2C_SetTiming>:
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
 8009730:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	683a      	ldr	r2, [r7, #0]
 8009736:	611a      	str	r2, [r3, #16]
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <LL_I2C_SetMode>:
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <LL_I2C_AcknowledgeNextData>:
{
 800976a:	b480      	push	{r7}
 800976c:	b083      	sub	sp, #12
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	605a      	str	r2, [r3, #4]
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff ff65 	bl	800966a <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	6899      	ldr	r1, [r3, #8]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	461a      	mov	r2, r3
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7ff ff6d 	bl	800968a <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	4619      	mov	r1, r3
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f7ff ffb6 	bl	8009728 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f7ff ff44 	bl	800964a <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ffa0 	bl	8009708 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	6919      	ldr	r1, [r3, #16]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	461a      	mov	r2, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7ff ff70 	bl	80096b8 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 80097e0:	6878      	ldr	r0, [r7, #4]
 80097e2:	f7ff ff81 	bl	80096e8 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f7ff ffa9 	bl	8009744 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	695b      	ldr	r3, [r3, #20]
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ffb6 	bl	800976a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80097fe:	2300      	movs	r3, #0
}
 8009800:	4618      	mov	r0, r3
 8009802:	3708      	adds	r7, #8
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}

08009808 <__cvt>:
 8009808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800980c:	ec55 4b10 	vmov	r4, r5, d0
 8009810:	2d00      	cmp	r5, #0
 8009812:	460e      	mov	r6, r1
 8009814:	4619      	mov	r1, r3
 8009816:	462b      	mov	r3, r5
 8009818:	bfbb      	ittet	lt
 800981a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800981e:	461d      	movlt	r5, r3
 8009820:	2300      	movge	r3, #0
 8009822:	232d      	movlt	r3, #45	; 0x2d
 8009824:	700b      	strb	r3, [r1, #0]
 8009826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800982c:	4691      	mov	r9, r2
 800982e:	f023 0820 	bic.w	r8, r3, #32
 8009832:	bfbc      	itt	lt
 8009834:	4622      	movlt	r2, r4
 8009836:	4614      	movlt	r4, r2
 8009838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800983c:	d005      	beq.n	800984a <__cvt+0x42>
 800983e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009842:	d100      	bne.n	8009846 <__cvt+0x3e>
 8009844:	3601      	adds	r6, #1
 8009846:	2102      	movs	r1, #2
 8009848:	e000      	b.n	800984c <__cvt+0x44>
 800984a:	2103      	movs	r1, #3
 800984c:	ab03      	add	r3, sp, #12
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	ab02      	add	r3, sp, #8
 8009852:	9300      	str	r3, [sp, #0]
 8009854:	ec45 4b10 	vmov	d0, r4, r5
 8009858:	4653      	mov	r3, sl
 800985a:	4632      	mov	r2, r6
 800985c:	f000 ff4c 	bl	800a6f8 <_dtoa_r>
 8009860:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009864:	4607      	mov	r7, r0
 8009866:	d102      	bne.n	800986e <__cvt+0x66>
 8009868:	f019 0f01 	tst.w	r9, #1
 800986c:	d022      	beq.n	80098b4 <__cvt+0xac>
 800986e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009872:	eb07 0906 	add.w	r9, r7, r6
 8009876:	d110      	bne.n	800989a <__cvt+0x92>
 8009878:	783b      	ldrb	r3, [r7, #0]
 800987a:	2b30      	cmp	r3, #48	; 0x30
 800987c:	d10a      	bne.n	8009894 <__cvt+0x8c>
 800987e:	2200      	movs	r2, #0
 8009880:	2300      	movs	r3, #0
 8009882:	4620      	mov	r0, r4
 8009884:	4629      	mov	r1, r5
 8009886:	f7f7 f947 	bl	8000b18 <__aeabi_dcmpeq>
 800988a:	b918      	cbnz	r0, 8009894 <__cvt+0x8c>
 800988c:	f1c6 0601 	rsb	r6, r6, #1
 8009890:	f8ca 6000 	str.w	r6, [sl]
 8009894:	f8da 3000 	ldr.w	r3, [sl]
 8009898:	4499      	add	r9, r3
 800989a:	2200      	movs	r2, #0
 800989c:	2300      	movs	r3, #0
 800989e:	4620      	mov	r0, r4
 80098a0:	4629      	mov	r1, r5
 80098a2:	f7f7 f939 	bl	8000b18 <__aeabi_dcmpeq>
 80098a6:	b108      	cbz	r0, 80098ac <__cvt+0xa4>
 80098a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80098ac:	2230      	movs	r2, #48	; 0x30
 80098ae:	9b03      	ldr	r3, [sp, #12]
 80098b0:	454b      	cmp	r3, r9
 80098b2:	d307      	bcc.n	80098c4 <__cvt+0xbc>
 80098b4:	9b03      	ldr	r3, [sp, #12]
 80098b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098b8:	1bdb      	subs	r3, r3, r7
 80098ba:	4638      	mov	r0, r7
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	b004      	add	sp, #16
 80098c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c4:	1c59      	adds	r1, r3, #1
 80098c6:	9103      	str	r1, [sp, #12]
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e7f0      	b.n	80098ae <__cvt+0xa6>

080098cc <__exponent>:
 80098cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ce:	4603      	mov	r3, r0
 80098d0:	2900      	cmp	r1, #0
 80098d2:	bfb8      	it	lt
 80098d4:	4249      	neglt	r1, r1
 80098d6:	f803 2b02 	strb.w	r2, [r3], #2
 80098da:	bfb4      	ite	lt
 80098dc:	222d      	movlt	r2, #45	; 0x2d
 80098de:	222b      	movge	r2, #43	; 0x2b
 80098e0:	2909      	cmp	r1, #9
 80098e2:	7042      	strb	r2, [r0, #1]
 80098e4:	dd2a      	ble.n	800993c <__exponent+0x70>
 80098e6:	f10d 0207 	add.w	r2, sp, #7
 80098ea:	4617      	mov	r7, r2
 80098ec:	260a      	movs	r6, #10
 80098ee:	4694      	mov	ip, r2
 80098f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80098f4:	fb06 1415 	mls	r4, r6, r5, r1
 80098f8:	3430      	adds	r4, #48	; 0x30
 80098fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80098fe:	460c      	mov	r4, r1
 8009900:	2c63      	cmp	r4, #99	; 0x63
 8009902:	f102 32ff 	add.w	r2, r2, #4294967295
 8009906:	4629      	mov	r1, r5
 8009908:	dcf1      	bgt.n	80098ee <__exponent+0x22>
 800990a:	3130      	adds	r1, #48	; 0x30
 800990c:	f1ac 0402 	sub.w	r4, ip, #2
 8009910:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009914:	1c41      	adds	r1, r0, #1
 8009916:	4622      	mov	r2, r4
 8009918:	42ba      	cmp	r2, r7
 800991a:	d30a      	bcc.n	8009932 <__exponent+0x66>
 800991c:	f10d 0209 	add.w	r2, sp, #9
 8009920:	eba2 020c 	sub.w	r2, r2, ip
 8009924:	42bc      	cmp	r4, r7
 8009926:	bf88      	it	hi
 8009928:	2200      	movhi	r2, #0
 800992a:	4413      	add	r3, r2
 800992c:	1a18      	subs	r0, r3, r0
 800992e:	b003      	add	sp, #12
 8009930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009932:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009936:	f801 5f01 	strb.w	r5, [r1, #1]!
 800993a:	e7ed      	b.n	8009918 <__exponent+0x4c>
 800993c:	2330      	movs	r3, #48	; 0x30
 800993e:	3130      	adds	r1, #48	; 0x30
 8009940:	7083      	strb	r3, [r0, #2]
 8009942:	70c1      	strb	r1, [r0, #3]
 8009944:	1d03      	adds	r3, r0, #4
 8009946:	e7f1      	b.n	800992c <__exponent+0x60>

08009948 <_printf_float>:
 8009948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800994c:	ed2d 8b02 	vpush	{d8}
 8009950:	b08d      	sub	sp, #52	; 0x34
 8009952:	460c      	mov	r4, r1
 8009954:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009958:	4616      	mov	r6, r2
 800995a:	461f      	mov	r7, r3
 800995c:	4605      	mov	r5, r0
 800995e:	f000 fdc9 	bl	800a4f4 <_localeconv_r>
 8009962:	f8d0 a000 	ldr.w	sl, [r0]
 8009966:	4650      	mov	r0, sl
 8009968:	f7f6 fcaa 	bl	80002c0 <strlen>
 800996c:	2300      	movs	r3, #0
 800996e:	930a      	str	r3, [sp, #40]	; 0x28
 8009970:	6823      	ldr	r3, [r4, #0]
 8009972:	9305      	str	r3, [sp, #20]
 8009974:	f8d8 3000 	ldr.w	r3, [r8]
 8009978:	f894 b018 	ldrb.w	fp, [r4, #24]
 800997c:	3307      	adds	r3, #7
 800997e:	f023 0307 	bic.w	r3, r3, #7
 8009982:	f103 0208 	add.w	r2, r3, #8
 8009986:	f8c8 2000 	str.w	r2, [r8]
 800998a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800998e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009992:	9307      	str	r3, [sp, #28]
 8009994:	f8cd 8018 	str.w	r8, [sp, #24]
 8009998:	ee08 0a10 	vmov	s16, r0
 800999c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80099a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099a4:	4b9e      	ldr	r3, [pc, #632]	; (8009c20 <_printf_float+0x2d8>)
 80099a6:	f04f 32ff 	mov.w	r2, #4294967295
 80099aa:	f7f7 f8e7 	bl	8000b7c <__aeabi_dcmpun>
 80099ae:	bb88      	cbnz	r0, 8009a14 <_printf_float+0xcc>
 80099b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099b4:	4b9a      	ldr	r3, [pc, #616]	; (8009c20 <_printf_float+0x2d8>)
 80099b6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ba:	f7f7 f8c1 	bl	8000b40 <__aeabi_dcmple>
 80099be:	bb48      	cbnz	r0, 8009a14 <_printf_float+0xcc>
 80099c0:	2200      	movs	r2, #0
 80099c2:	2300      	movs	r3, #0
 80099c4:	4640      	mov	r0, r8
 80099c6:	4649      	mov	r1, r9
 80099c8:	f7f7 f8b0 	bl	8000b2c <__aeabi_dcmplt>
 80099cc:	b110      	cbz	r0, 80099d4 <_printf_float+0x8c>
 80099ce:	232d      	movs	r3, #45	; 0x2d
 80099d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099d4:	4a93      	ldr	r2, [pc, #588]	; (8009c24 <_printf_float+0x2dc>)
 80099d6:	4b94      	ldr	r3, [pc, #592]	; (8009c28 <_printf_float+0x2e0>)
 80099d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099dc:	bf94      	ite	ls
 80099de:	4690      	movls	r8, r2
 80099e0:	4698      	movhi	r8, r3
 80099e2:	2303      	movs	r3, #3
 80099e4:	6123      	str	r3, [r4, #16]
 80099e6:	9b05      	ldr	r3, [sp, #20]
 80099e8:	f023 0304 	bic.w	r3, r3, #4
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	f04f 0900 	mov.w	r9, #0
 80099f2:	9700      	str	r7, [sp, #0]
 80099f4:	4633      	mov	r3, r6
 80099f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80099f8:	4621      	mov	r1, r4
 80099fa:	4628      	mov	r0, r5
 80099fc:	f000 f9da 	bl	8009db4 <_printf_common>
 8009a00:	3001      	adds	r0, #1
 8009a02:	f040 8090 	bne.w	8009b26 <_printf_float+0x1de>
 8009a06:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0a:	b00d      	add	sp, #52	; 0x34
 8009a0c:	ecbd 8b02 	vpop	{d8}
 8009a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	4642      	mov	r2, r8
 8009a16:	464b      	mov	r3, r9
 8009a18:	4640      	mov	r0, r8
 8009a1a:	4649      	mov	r1, r9
 8009a1c:	f7f7 f8ae 	bl	8000b7c <__aeabi_dcmpun>
 8009a20:	b140      	cbz	r0, 8009a34 <_printf_float+0xec>
 8009a22:	464b      	mov	r3, r9
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfbc      	itt	lt
 8009a28:	232d      	movlt	r3, #45	; 0x2d
 8009a2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a2e:	4a7f      	ldr	r2, [pc, #508]	; (8009c2c <_printf_float+0x2e4>)
 8009a30:	4b7f      	ldr	r3, [pc, #508]	; (8009c30 <_printf_float+0x2e8>)
 8009a32:	e7d1      	b.n	80099d8 <_printf_float+0x90>
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a3a:	9206      	str	r2, [sp, #24]
 8009a3c:	1c5a      	adds	r2, r3, #1
 8009a3e:	d13f      	bne.n	8009ac0 <_printf_float+0x178>
 8009a40:	2306      	movs	r3, #6
 8009a42:	6063      	str	r3, [r4, #4]
 8009a44:	9b05      	ldr	r3, [sp, #20]
 8009a46:	6861      	ldr	r1, [r4, #4]
 8009a48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	9303      	str	r3, [sp, #12]
 8009a50:	ab0a      	add	r3, sp, #40	; 0x28
 8009a52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a56:	ab09      	add	r3, sp, #36	; 0x24
 8009a58:	ec49 8b10 	vmov	d0, r8, r9
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a64:	4628      	mov	r0, r5
 8009a66:	f7ff fecf 	bl	8009808 <__cvt>
 8009a6a:	9b06      	ldr	r3, [sp, #24]
 8009a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a6e:	2b47      	cmp	r3, #71	; 0x47
 8009a70:	4680      	mov	r8, r0
 8009a72:	d108      	bne.n	8009a86 <_printf_float+0x13e>
 8009a74:	1cc8      	adds	r0, r1, #3
 8009a76:	db02      	blt.n	8009a7e <_printf_float+0x136>
 8009a78:	6863      	ldr	r3, [r4, #4]
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	dd41      	ble.n	8009b02 <_printf_float+0x1ba>
 8009a7e:	f1ab 0302 	sub.w	r3, fp, #2
 8009a82:	fa5f fb83 	uxtb.w	fp, r3
 8009a86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a8a:	d820      	bhi.n	8009ace <_printf_float+0x186>
 8009a8c:	3901      	subs	r1, #1
 8009a8e:	465a      	mov	r2, fp
 8009a90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a94:	9109      	str	r1, [sp, #36]	; 0x24
 8009a96:	f7ff ff19 	bl	80098cc <__exponent>
 8009a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a9c:	1813      	adds	r3, r2, r0
 8009a9e:	2a01      	cmp	r2, #1
 8009aa0:	4681      	mov	r9, r0
 8009aa2:	6123      	str	r3, [r4, #16]
 8009aa4:	dc02      	bgt.n	8009aac <_printf_float+0x164>
 8009aa6:	6822      	ldr	r2, [r4, #0]
 8009aa8:	07d2      	lsls	r2, r2, #31
 8009aaa:	d501      	bpl.n	8009ab0 <_printf_float+0x168>
 8009aac:	3301      	adds	r3, #1
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d09c      	beq.n	80099f2 <_printf_float+0xaa>
 8009ab8:	232d      	movs	r3, #45	; 0x2d
 8009aba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abe:	e798      	b.n	80099f2 <_printf_float+0xaa>
 8009ac0:	9a06      	ldr	r2, [sp, #24]
 8009ac2:	2a47      	cmp	r2, #71	; 0x47
 8009ac4:	d1be      	bne.n	8009a44 <_printf_float+0xfc>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d1bc      	bne.n	8009a44 <_printf_float+0xfc>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7b9      	b.n	8009a42 <_printf_float+0xfa>
 8009ace:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009ad2:	d118      	bne.n	8009b06 <_printf_float+0x1be>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	6863      	ldr	r3, [r4, #4]
 8009ad8:	dd0b      	ble.n	8009af2 <_printf_float+0x1aa>
 8009ada:	6121      	str	r1, [r4, #16]
 8009adc:	b913      	cbnz	r3, 8009ae4 <_printf_float+0x19c>
 8009ade:	6822      	ldr	r2, [r4, #0]
 8009ae0:	07d0      	lsls	r0, r2, #31
 8009ae2:	d502      	bpl.n	8009aea <_printf_float+0x1a2>
 8009ae4:	3301      	adds	r3, #1
 8009ae6:	440b      	add	r3, r1
 8009ae8:	6123      	str	r3, [r4, #16]
 8009aea:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aec:	f04f 0900 	mov.w	r9, #0
 8009af0:	e7de      	b.n	8009ab0 <_printf_float+0x168>
 8009af2:	b913      	cbnz	r3, 8009afa <_printf_float+0x1b2>
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	07d2      	lsls	r2, r2, #31
 8009af8:	d501      	bpl.n	8009afe <_printf_float+0x1b6>
 8009afa:	3302      	adds	r3, #2
 8009afc:	e7f4      	b.n	8009ae8 <_printf_float+0x1a0>
 8009afe:	2301      	movs	r3, #1
 8009b00:	e7f2      	b.n	8009ae8 <_printf_float+0x1a0>
 8009b02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b08:	4299      	cmp	r1, r3
 8009b0a:	db05      	blt.n	8009b18 <_printf_float+0x1d0>
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	6121      	str	r1, [r4, #16]
 8009b10:	07d8      	lsls	r0, r3, #31
 8009b12:	d5ea      	bpl.n	8009aea <_printf_float+0x1a2>
 8009b14:	1c4b      	adds	r3, r1, #1
 8009b16:	e7e7      	b.n	8009ae8 <_printf_float+0x1a0>
 8009b18:	2900      	cmp	r1, #0
 8009b1a:	bfd4      	ite	le
 8009b1c:	f1c1 0202 	rsble	r2, r1, #2
 8009b20:	2201      	movgt	r2, #1
 8009b22:	4413      	add	r3, r2
 8009b24:	e7e0      	b.n	8009ae8 <_printf_float+0x1a0>
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	055a      	lsls	r2, r3, #21
 8009b2a:	d407      	bmi.n	8009b3c <_printf_float+0x1f4>
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	4642      	mov	r2, r8
 8009b30:	4631      	mov	r1, r6
 8009b32:	4628      	mov	r0, r5
 8009b34:	47b8      	blx	r7
 8009b36:	3001      	adds	r0, #1
 8009b38:	d12c      	bne.n	8009b94 <_printf_float+0x24c>
 8009b3a:	e764      	b.n	8009a06 <_printf_float+0xbe>
 8009b3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b40:	f240 80e0 	bls.w	8009d04 <_printf_float+0x3bc>
 8009b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b48:	2200      	movs	r2, #0
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	f7f6 ffe4 	bl	8000b18 <__aeabi_dcmpeq>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d034      	beq.n	8009bbe <_printf_float+0x276>
 8009b54:	4a37      	ldr	r2, [pc, #220]	; (8009c34 <_printf_float+0x2ec>)
 8009b56:	2301      	movs	r3, #1
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	47b8      	blx	r7
 8009b5e:	3001      	adds	r0, #1
 8009b60:	f43f af51 	beq.w	8009a06 <_printf_float+0xbe>
 8009b64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	db02      	blt.n	8009b72 <_printf_float+0x22a>
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	07d8      	lsls	r0, r3, #31
 8009b70:	d510      	bpl.n	8009b94 <_printf_float+0x24c>
 8009b72:	ee18 3a10 	vmov	r3, s16
 8009b76:	4652      	mov	r2, sl
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af41 	beq.w	8009a06 <_printf_float+0xbe>
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	f104 091a 	add.w	r9, r4, #26
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8e:	3b01      	subs	r3, #1
 8009b90:	4543      	cmp	r3, r8
 8009b92:	dc09      	bgt.n	8009ba8 <_printf_float+0x260>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	079b      	lsls	r3, r3, #30
 8009b98:	f100 8107 	bmi.w	8009daa <_printf_float+0x462>
 8009b9c:	68e0      	ldr	r0, [r4, #12]
 8009b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba0:	4298      	cmp	r0, r3
 8009ba2:	bfb8      	it	lt
 8009ba4:	4618      	movlt	r0, r3
 8009ba6:	e730      	b.n	8009a0a <_printf_float+0xc2>
 8009ba8:	2301      	movs	r3, #1
 8009baa:	464a      	mov	r2, r9
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f af27 	beq.w	8009a06 <_printf_float+0xbe>
 8009bb8:	f108 0801 	add.w	r8, r8, #1
 8009bbc:	e7e6      	b.n	8009b8c <_printf_float+0x244>
 8009bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dc39      	bgt.n	8009c38 <_printf_float+0x2f0>
 8009bc4:	4a1b      	ldr	r2, [pc, #108]	; (8009c34 <_printf_float+0x2ec>)
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af19 	beq.w	8009a06 <_printf_float+0xbe>
 8009bd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	d102      	bne.n	8009be2 <_printf_float+0x29a>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	07d9      	lsls	r1, r3, #31
 8009be0:	d5d8      	bpl.n	8009b94 <_printf_float+0x24c>
 8009be2:	ee18 3a10 	vmov	r3, s16
 8009be6:	4652      	mov	r2, sl
 8009be8:	4631      	mov	r1, r6
 8009bea:	4628      	mov	r0, r5
 8009bec:	47b8      	blx	r7
 8009bee:	3001      	adds	r0, #1
 8009bf0:	f43f af09 	beq.w	8009a06 <_printf_float+0xbe>
 8009bf4:	f04f 0900 	mov.w	r9, #0
 8009bf8:	f104 0a1a 	add.w	sl, r4, #26
 8009bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bfe:	425b      	negs	r3, r3
 8009c00:	454b      	cmp	r3, r9
 8009c02:	dc01      	bgt.n	8009c08 <_printf_float+0x2c0>
 8009c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c06:	e792      	b.n	8009b2e <_printf_float+0x1e6>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	4652      	mov	r2, sl
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4628      	mov	r0, r5
 8009c10:	47b8      	blx	r7
 8009c12:	3001      	adds	r0, #1
 8009c14:	f43f aef7 	beq.w	8009a06 <_printf_float+0xbe>
 8009c18:	f109 0901 	add.w	r9, r9, #1
 8009c1c:	e7ee      	b.n	8009bfc <_printf_float+0x2b4>
 8009c1e:	bf00      	nop
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	0800d1fc 	.word	0x0800d1fc
 8009c28:	0800d200 	.word	0x0800d200
 8009c2c:	0800d204 	.word	0x0800d204
 8009c30:	0800d208 	.word	0x0800d208
 8009c34:	0800d20c 	.word	0x0800d20c
 8009c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	bfa8      	it	ge
 8009c40:	461a      	movge	r2, r3
 8009c42:	2a00      	cmp	r2, #0
 8009c44:	4691      	mov	r9, r2
 8009c46:	dc37      	bgt.n	8009cb8 <_printf_float+0x370>
 8009c48:	f04f 0b00 	mov.w	fp, #0
 8009c4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c50:	f104 021a 	add.w	r2, r4, #26
 8009c54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c56:	9305      	str	r3, [sp, #20]
 8009c58:	eba3 0309 	sub.w	r3, r3, r9
 8009c5c:	455b      	cmp	r3, fp
 8009c5e:	dc33      	bgt.n	8009cc8 <_printf_float+0x380>
 8009c60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c64:	429a      	cmp	r2, r3
 8009c66:	db3b      	blt.n	8009ce0 <_printf_float+0x398>
 8009c68:	6823      	ldr	r3, [r4, #0]
 8009c6a:	07da      	lsls	r2, r3, #31
 8009c6c:	d438      	bmi.n	8009ce0 <_printf_float+0x398>
 8009c6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009c72:	eba2 0903 	sub.w	r9, r2, r3
 8009c76:	9b05      	ldr	r3, [sp, #20]
 8009c78:	1ad2      	subs	r2, r2, r3
 8009c7a:	4591      	cmp	r9, r2
 8009c7c:	bfa8      	it	ge
 8009c7e:	4691      	movge	r9, r2
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	dc35      	bgt.n	8009cf2 <_printf_float+0x3aa>
 8009c86:	f04f 0800 	mov.w	r8, #0
 8009c8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c8e:	f104 0a1a 	add.w	sl, r4, #26
 8009c92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c96:	1a9b      	subs	r3, r3, r2
 8009c98:	eba3 0309 	sub.w	r3, r3, r9
 8009c9c:	4543      	cmp	r3, r8
 8009c9e:	f77f af79 	ble.w	8009b94 <_printf_float+0x24c>
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	4652      	mov	r2, sl
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	f43f aeaa 	beq.w	8009a06 <_printf_float+0xbe>
 8009cb2:	f108 0801 	add.w	r8, r8, #1
 8009cb6:	e7ec      	b.n	8009c92 <_printf_float+0x34a>
 8009cb8:	4613      	mov	r3, r2
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4642      	mov	r2, r8
 8009cbe:	4628      	mov	r0, r5
 8009cc0:	47b8      	blx	r7
 8009cc2:	3001      	adds	r0, #1
 8009cc4:	d1c0      	bne.n	8009c48 <_printf_float+0x300>
 8009cc6:	e69e      	b.n	8009a06 <_printf_float+0xbe>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4631      	mov	r1, r6
 8009ccc:	4628      	mov	r0, r5
 8009cce:	9205      	str	r2, [sp, #20]
 8009cd0:	47b8      	blx	r7
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	f43f ae97 	beq.w	8009a06 <_printf_float+0xbe>
 8009cd8:	9a05      	ldr	r2, [sp, #20]
 8009cda:	f10b 0b01 	add.w	fp, fp, #1
 8009cde:	e7b9      	b.n	8009c54 <_printf_float+0x30c>
 8009ce0:	ee18 3a10 	vmov	r3, s16
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	d1be      	bne.n	8009c6e <_printf_float+0x326>
 8009cf0:	e689      	b.n	8009a06 <_printf_float+0xbe>
 8009cf2:	9a05      	ldr	r2, [sp, #20]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	4442      	add	r2, r8
 8009cf8:	4631      	mov	r1, r6
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b8      	blx	r7
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d1c1      	bne.n	8009c86 <_printf_float+0x33e>
 8009d02:	e680      	b.n	8009a06 <_printf_float+0xbe>
 8009d04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d06:	2a01      	cmp	r2, #1
 8009d08:	dc01      	bgt.n	8009d0e <_printf_float+0x3c6>
 8009d0a:	07db      	lsls	r3, r3, #31
 8009d0c:	d53a      	bpl.n	8009d84 <_printf_float+0x43c>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4642      	mov	r2, r8
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f ae74 	beq.w	8009a06 <_printf_float+0xbe>
 8009d1e:	ee18 3a10 	vmov	r3, s16
 8009d22:	4652      	mov	r2, sl
 8009d24:	4631      	mov	r1, r6
 8009d26:	4628      	mov	r0, r5
 8009d28:	47b8      	blx	r7
 8009d2a:	3001      	adds	r0, #1
 8009d2c:	f43f ae6b 	beq.w	8009a06 <_printf_float+0xbe>
 8009d30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d34:	2200      	movs	r2, #0
 8009d36:	2300      	movs	r3, #0
 8009d38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009d3c:	f7f6 feec 	bl	8000b18 <__aeabi_dcmpeq>
 8009d40:	b9d8      	cbnz	r0, 8009d7a <_printf_float+0x432>
 8009d42:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009d46:	f108 0201 	add.w	r2, r8, #1
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	d10e      	bne.n	8009d72 <_printf_float+0x42a>
 8009d54:	e657      	b.n	8009a06 <_printf_float+0xbe>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4652      	mov	r2, sl
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f ae50 	beq.w	8009a06 <_printf_float+0xbe>
 8009d66:	f108 0801 	add.w	r8, r8, #1
 8009d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d6c:	3b01      	subs	r3, #1
 8009d6e:	4543      	cmp	r3, r8
 8009d70:	dcf1      	bgt.n	8009d56 <_printf_float+0x40e>
 8009d72:	464b      	mov	r3, r9
 8009d74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d78:	e6da      	b.n	8009b30 <_printf_float+0x1e8>
 8009d7a:	f04f 0800 	mov.w	r8, #0
 8009d7e:	f104 0a1a 	add.w	sl, r4, #26
 8009d82:	e7f2      	b.n	8009d6a <_printf_float+0x422>
 8009d84:	2301      	movs	r3, #1
 8009d86:	4642      	mov	r2, r8
 8009d88:	e7df      	b.n	8009d4a <_printf_float+0x402>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	464a      	mov	r2, r9
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	f43f ae36 	beq.w	8009a06 <_printf_float+0xbe>
 8009d9a:	f108 0801 	add.w	r8, r8, #1
 8009d9e:	68e3      	ldr	r3, [r4, #12]
 8009da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009da2:	1a5b      	subs	r3, r3, r1
 8009da4:	4543      	cmp	r3, r8
 8009da6:	dcf0      	bgt.n	8009d8a <_printf_float+0x442>
 8009da8:	e6f8      	b.n	8009b9c <_printf_float+0x254>
 8009daa:	f04f 0800 	mov.w	r8, #0
 8009dae:	f104 0919 	add.w	r9, r4, #25
 8009db2:	e7f4      	b.n	8009d9e <_printf_float+0x456>

08009db4 <_printf_common>:
 8009db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db8:	4616      	mov	r6, r2
 8009dba:	4699      	mov	r9, r3
 8009dbc:	688a      	ldr	r2, [r1, #8]
 8009dbe:	690b      	ldr	r3, [r1, #16]
 8009dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	bfb8      	it	lt
 8009dc8:	4613      	movlt	r3, r2
 8009dca:	6033      	str	r3, [r6, #0]
 8009dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	b10a      	cbz	r2, 8009dda <_printf_common+0x26>
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	6033      	str	r3, [r6, #0]
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	0699      	lsls	r1, r3, #26
 8009dde:	bf42      	ittt	mi
 8009de0:	6833      	ldrmi	r3, [r6, #0]
 8009de2:	3302      	addmi	r3, #2
 8009de4:	6033      	strmi	r3, [r6, #0]
 8009de6:	6825      	ldr	r5, [r4, #0]
 8009de8:	f015 0506 	ands.w	r5, r5, #6
 8009dec:	d106      	bne.n	8009dfc <_printf_common+0x48>
 8009dee:	f104 0a19 	add.w	sl, r4, #25
 8009df2:	68e3      	ldr	r3, [r4, #12]
 8009df4:	6832      	ldr	r2, [r6, #0]
 8009df6:	1a9b      	subs	r3, r3, r2
 8009df8:	42ab      	cmp	r3, r5
 8009dfa:	dc26      	bgt.n	8009e4a <_printf_common+0x96>
 8009dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e00:	1e13      	subs	r3, r2, #0
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	bf18      	it	ne
 8009e06:	2301      	movne	r3, #1
 8009e08:	0692      	lsls	r2, r2, #26
 8009e0a:	d42b      	bmi.n	8009e64 <_printf_common+0xb0>
 8009e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e10:	4649      	mov	r1, r9
 8009e12:	4638      	mov	r0, r7
 8009e14:	47c0      	blx	r8
 8009e16:	3001      	adds	r0, #1
 8009e18:	d01e      	beq.n	8009e58 <_printf_common+0xa4>
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	6922      	ldr	r2, [r4, #16]
 8009e1e:	f003 0306 	and.w	r3, r3, #6
 8009e22:	2b04      	cmp	r3, #4
 8009e24:	bf02      	ittt	eq
 8009e26:	68e5      	ldreq	r5, [r4, #12]
 8009e28:	6833      	ldreq	r3, [r6, #0]
 8009e2a:	1aed      	subeq	r5, r5, r3
 8009e2c:	68a3      	ldr	r3, [r4, #8]
 8009e2e:	bf0c      	ite	eq
 8009e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e34:	2500      	movne	r5, #0
 8009e36:	4293      	cmp	r3, r2
 8009e38:	bfc4      	itt	gt
 8009e3a:	1a9b      	subgt	r3, r3, r2
 8009e3c:	18ed      	addgt	r5, r5, r3
 8009e3e:	2600      	movs	r6, #0
 8009e40:	341a      	adds	r4, #26
 8009e42:	42b5      	cmp	r5, r6
 8009e44:	d11a      	bne.n	8009e7c <_printf_common+0xc8>
 8009e46:	2000      	movs	r0, #0
 8009e48:	e008      	b.n	8009e5c <_printf_common+0xa8>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4652      	mov	r2, sl
 8009e4e:	4649      	mov	r1, r9
 8009e50:	4638      	mov	r0, r7
 8009e52:	47c0      	blx	r8
 8009e54:	3001      	adds	r0, #1
 8009e56:	d103      	bne.n	8009e60 <_printf_common+0xac>
 8009e58:	f04f 30ff 	mov.w	r0, #4294967295
 8009e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e60:	3501      	adds	r5, #1
 8009e62:	e7c6      	b.n	8009df2 <_printf_common+0x3e>
 8009e64:	18e1      	adds	r1, r4, r3
 8009e66:	1c5a      	adds	r2, r3, #1
 8009e68:	2030      	movs	r0, #48	; 0x30
 8009e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e6e:	4422      	add	r2, r4
 8009e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e78:	3302      	adds	r3, #2
 8009e7a:	e7c7      	b.n	8009e0c <_printf_common+0x58>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	4622      	mov	r2, r4
 8009e80:	4649      	mov	r1, r9
 8009e82:	4638      	mov	r0, r7
 8009e84:	47c0      	blx	r8
 8009e86:	3001      	adds	r0, #1
 8009e88:	d0e6      	beq.n	8009e58 <_printf_common+0xa4>
 8009e8a:	3601      	adds	r6, #1
 8009e8c:	e7d9      	b.n	8009e42 <_printf_common+0x8e>
	...

08009e90 <_printf_i>:
 8009e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	7e0f      	ldrb	r7, [r1, #24]
 8009e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e98:	2f78      	cmp	r7, #120	; 0x78
 8009e9a:	4691      	mov	r9, r2
 8009e9c:	4680      	mov	r8, r0
 8009e9e:	460c      	mov	r4, r1
 8009ea0:	469a      	mov	sl, r3
 8009ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009ea6:	d807      	bhi.n	8009eb8 <_printf_i+0x28>
 8009ea8:	2f62      	cmp	r7, #98	; 0x62
 8009eaa:	d80a      	bhi.n	8009ec2 <_printf_i+0x32>
 8009eac:	2f00      	cmp	r7, #0
 8009eae:	f000 80d4 	beq.w	800a05a <_printf_i+0x1ca>
 8009eb2:	2f58      	cmp	r7, #88	; 0x58
 8009eb4:	f000 80c0 	beq.w	800a038 <_printf_i+0x1a8>
 8009eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009ec0:	e03a      	b.n	8009f38 <_printf_i+0xa8>
 8009ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009ec6:	2b15      	cmp	r3, #21
 8009ec8:	d8f6      	bhi.n	8009eb8 <_printf_i+0x28>
 8009eca:	a101      	add	r1, pc, #4	; (adr r1, 8009ed0 <_printf_i+0x40>)
 8009ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009ed0:	08009f29 	.word	0x08009f29
 8009ed4:	08009f3d 	.word	0x08009f3d
 8009ed8:	08009eb9 	.word	0x08009eb9
 8009edc:	08009eb9 	.word	0x08009eb9
 8009ee0:	08009eb9 	.word	0x08009eb9
 8009ee4:	08009eb9 	.word	0x08009eb9
 8009ee8:	08009f3d 	.word	0x08009f3d
 8009eec:	08009eb9 	.word	0x08009eb9
 8009ef0:	08009eb9 	.word	0x08009eb9
 8009ef4:	08009eb9 	.word	0x08009eb9
 8009ef8:	08009eb9 	.word	0x08009eb9
 8009efc:	0800a041 	.word	0x0800a041
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009ffb 	.word	0x08009ffb
 8009f08:	08009eb9 	.word	0x08009eb9
 8009f0c:	08009eb9 	.word	0x08009eb9
 8009f10:	0800a063 	.word	0x0800a063
 8009f14:	08009eb9 	.word	0x08009eb9
 8009f18:	08009f69 	.word	0x08009f69
 8009f1c:	08009eb9 	.word	0x08009eb9
 8009f20:	08009eb9 	.word	0x08009eb9
 8009f24:	0800a003 	.word	0x0800a003
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	1d1a      	adds	r2, r3, #4
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	602a      	str	r2, [r5, #0]
 8009f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f38:	2301      	movs	r3, #1
 8009f3a:	e09f      	b.n	800a07c <_printf_i+0x1ec>
 8009f3c:	6820      	ldr	r0, [r4, #0]
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	0607      	lsls	r7, r0, #24
 8009f42:	f103 0104 	add.w	r1, r3, #4
 8009f46:	6029      	str	r1, [r5, #0]
 8009f48:	d501      	bpl.n	8009f4e <_printf_i+0xbe>
 8009f4a:	681e      	ldr	r6, [r3, #0]
 8009f4c:	e003      	b.n	8009f56 <_printf_i+0xc6>
 8009f4e:	0646      	lsls	r6, r0, #25
 8009f50:	d5fb      	bpl.n	8009f4a <_printf_i+0xba>
 8009f52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009f56:	2e00      	cmp	r6, #0
 8009f58:	da03      	bge.n	8009f62 <_printf_i+0xd2>
 8009f5a:	232d      	movs	r3, #45	; 0x2d
 8009f5c:	4276      	negs	r6, r6
 8009f5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f62:	485a      	ldr	r0, [pc, #360]	; (800a0cc <_printf_i+0x23c>)
 8009f64:	230a      	movs	r3, #10
 8009f66:	e012      	b.n	8009f8e <_printf_i+0xfe>
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	6820      	ldr	r0, [r4, #0]
 8009f6c:	1d19      	adds	r1, r3, #4
 8009f6e:	6029      	str	r1, [r5, #0]
 8009f70:	0605      	lsls	r5, r0, #24
 8009f72:	d501      	bpl.n	8009f78 <_printf_i+0xe8>
 8009f74:	681e      	ldr	r6, [r3, #0]
 8009f76:	e002      	b.n	8009f7e <_printf_i+0xee>
 8009f78:	0641      	lsls	r1, r0, #25
 8009f7a:	d5fb      	bpl.n	8009f74 <_printf_i+0xe4>
 8009f7c:	881e      	ldrh	r6, [r3, #0]
 8009f7e:	4853      	ldr	r0, [pc, #332]	; (800a0cc <_printf_i+0x23c>)
 8009f80:	2f6f      	cmp	r7, #111	; 0x6f
 8009f82:	bf0c      	ite	eq
 8009f84:	2308      	moveq	r3, #8
 8009f86:	230a      	movne	r3, #10
 8009f88:	2100      	movs	r1, #0
 8009f8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f8e:	6865      	ldr	r5, [r4, #4]
 8009f90:	60a5      	str	r5, [r4, #8]
 8009f92:	2d00      	cmp	r5, #0
 8009f94:	bfa2      	ittt	ge
 8009f96:	6821      	ldrge	r1, [r4, #0]
 8009f98:	f021 0104 	bicge.w	r1, r1, #4
 8009f9c:	6021      	strge	r1, [r4, #0]
 8009f9e:	b90e      	cbnz	r6, 8009fa4 <_printf_i+0x114>
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	d04b      	beq.n	800a03c <_printf_i+0x1ac>
 8009fa4:	4615      	mov	r5, r2
 8009fa6:	fbb6 f1f3 	udiv	r1, r6, r3
 8009faa:	fb03 6711 	mls	r7, r3, r1, r6
 8009fae:	5dc7      	ldrb	r7, [r0, r7]
 8009fb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009fb4:	4637      	mov	r7, r6
 8009fb6:	42bb      	cmp	r3, r7
 8009fb8:	460e      	mov	r6, r1
 8009fba:	d9f4      	bls.n	8009fa6 <_printf_i+0x116>
 8009fbc:	2b08      	cmp	r3, #8
 8009fbe:	d10b      	bne.n	8009fd8 <_printf_i+0x148>
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	07de      	lsls	r6, r3, #31
 8009fc4:	d508      	bpl.n	8009fd8 <_printf_i+0x148>
 8009fc6:	6923      	ldr	r3, [r4, #16]
 8009fc8:	6861      	ldr	r1, [r4, #4]
 8009fca:	4299      	cmp	r1, r3
 8009fcc:	bfde      	ittt	le
 8009fce:	2330      	movle	r3, #48	; 0x30
 8009fd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009fd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009fd8:	1b52      	subs	r2, r2, r5
 8009fda:	6122      	str	r2, [r4, #16]
 8009fdc:	f8cd a000 	str.w	sl, [sp]
 8009fe0:	464b      	mov	r3, r9
 8009fe2:	aa03      	add	r2, sp, #12
 8009fe4:	4621      	mov	r1, r4
 8009fe6:	4640      	mov	r0, r8
 8009fe8:	f7ff fee4 	bl	8009db4 <_printf_common>
 8009fec:	3001      	adds	r0, #1
 8009fee:	d14a      	bne.n	800a086 <_printf_i+0x1f6>
 8009ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff4:	b004      	add	sp, #16
 8009ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ffa:	6823      	ldr	r3, [r4, #0]
 8009ffc:	f043 0320 	orr.w	r3, r3, #32
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	4833      	ldr	r0, [pc, #204]	; (800a0d0 <_printf_i+0x240>)
 800a004:	2778      	movs	r7, #120	; 0x78
 800a006:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	6829      	ldr	r1, [r5, #0]
 800a00e:	061f      	lsls	r7, r3, #24
 800a010:	f851 6b04 	ldr.w	r6, [r1], #4
 800a014:	d402      	bmi.n	800a01c <_printf_i+0x18c>
 800a016:	065f      	lsls	r7, r3, #25
 800a018:	bf48      	it	mi
 800a01a:	b2b6      	uxthmi	r6, r6
 800a01c:	07df      	lsls	r7, r3, #31
 800a01e:	bf48      	it	mi
 800a020:	f043 0320 	orrmi.w	r3, r3, #32
 800a024:	6029      	str	r1, [r5, #0]
 800a026:	bf48      	it	mi
 800a028:	6023      	strmi	r3, [r4, #0]
 800a02a:	b91e      	cbnz	r6, 800a034 <_printf_i+0x1a4>
 800a02c:	6823      	ldr	r3, [r4, #0]
 800a02e:	f023 0320 	bic.w	r3, r3, #32
 800a032:	6023      	str	r3, [r4, #0]
 800a034:	2310      	movs	r3, #16
 800a036:	e7a7      	b.n	8009f88 <_printf_i+0xf8>
 800a038:	4824      	ldr	r0, [pc, #144]	; (800a0cc <_printf_i+0x23c>)
 800a03a:	e7e4      	b.n	800a006 <_printf_i+0x176>
 800a03c:	4615      	mov	r5, r2
 800a03e:	e7bd      	b.n	8009fbc <_printf_i+0x12c>
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	6826      	ldr	r6, [r4, #0]
 800a044:	6961      	ldr	r1, [r4, #20]
 800a046:	1d18      	adds	r0, r3, #4
 800a048:	6028      	str	r0, [r5, #0]
 800a04a:	0635      	lsls	r5, r6, #24
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	d501      	bpl.n	800a054 <_printf_i+0x1c4>
 800a050:	6019      	str	r1, [r3, #0]
 800a052:	e002      	b.n	800a05a <_printf_i+0x1ca>
 800a054:	0670      	lsls	r0, r6, #25
 800a056:	d5fb      	bpl.n	800a050 <_printf_i+0x1c0>
 800a058:	8019      	strh	r1, [r3, #0]
 800a05a:	2300      	movs	r3, #0
 800a05c:	6123      	str	r3, [r4, #16]
 800a05e:	4615      	mov	r5, r2
 800a060:	e7bc      	b.n	8009fdc <_printf_i+0x14c>
 800a062:	682b      	ldr	r3, [r5, #0]
 800a064:	1d1a      	adds	r2, r3, #4
 800a066:	602a      	str	r2, [r5, #0]
 800a068:	681d      	ldr	r5, [r3, #0]
 800a06a:	6862      	ldr	r2, [r4, #4]
 800a06c:	2100      	movs	r1, #0
 800a06e:	4628      	mov	r0, r5
 800a070:	f7f6 f8d6 	bl	8000220 <memchr>
 800a074:	b108      	cbz	r0, 800a07a <_printf_i+0x1ea>
 800a076:	1b40      	subs	r0, r0, r5
 800a078:	6060      	str	r0, [r4, #4]
 800a07a:	6863      	ldr	r3, [r4, #4]
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	2300      	movs	r3, #0
 800a080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a084:	e7aa      	b.n	8009fdc <_printf_i+0x14c>
 800a086:	6923      	ldr	r3, [r4, #16]
 800a088:	462a      	mov	r2, r5
 800a08a:	4649      	mov	r1, r9
 800a08c:	4640      	mov	r0, r8
 800a08e:	47d0      	blx	sl
 800a090:	3001      	adds	r0, #1
 800a092:	d0ad      	beq.n	8009ff0 <_printf_i+0x160>
 800a094:	6823      	ldr	r3, [r4, #0]
 800a096:	079b      	lsls	r3, r3, #30
 800a098:	d413      	bmi.n	800a0c2 <_printf_i+0x232>
 800a09a:	68e0      	ldr	r0, [r4, #12]
 800a09c:	9b03      	ldr	r3, [sp, #12]
 800a09e:	4298      	cmp	r0, r3
 800a0a0:	bfb8      	it	lt
 800a0a2:	4618      	movlt	r0, r3
 800a0a4:	e7a6      	b.n	8009ff4 <_printf_i+0x164>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	4632      	mov	r2, r6
 800a0aa:	4649      	mov	r1, r9
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	47d0      	blx	sl
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d09d      	beq.n	8009ff0 <_printf_i+0x160>
 800a0b4:	3501      	adds	r5, #1
 800a0b6:	68e3      	ldr	r3, [r4, #12]
 800a0b8:	9903      	ldr	r1, [sp, #12]
 800a0ba:	1a5b      	subs	r3, r3, r1
 800a0bc:	42ab      	cmp	r3, r5
 800a0be:	dcf2      	bgt.n	800a0a6 <_printf_i+0x216>
 800a0c0:	e7eb      	b.n	800a09a <_printf_i+0x20a>
 800a0c2:	2500      	movs	r5, #0
 800a0c4:	f104 0619 	add.w	r6, r4, #25
 800a0c8:	e7f5      	b.n	800a0b6 <_printf_i+0x226>
 800a0ca:	bf00      	nop
 800a0cc:	0800d20e 	.word	0x0800d20e
 800a0d0:	0800d21f 	.word	0x0800d21f

0800a0d4 <std>:
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	b510      	push	{r4, lr}
 800a0d8:	4604      	mov	r4, r0
 800a0da:	e9c0 3300 	strd	r3, r3, [r0]
 800a0de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a0e2:	6083      	str	r3, [r0, #8]
 800a0e4:	8181      	strh	r1, [r0, #12]
 800a0e6:	6643      	str	r3, [r0, #100]	; 0x64
 800a0e8:	81c2      	strh	r2, [r0, #14]
 800a0ea:	6183      	str	r3, [r0, #24]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	2208      	movs	r2, #8
 800a0f0:	305c      	adds	r0, #92	; 0x5c
 800a0f2:	f000 f9f7 	bl	800a4e4 <memset>
 800a0f6:	4b0d      	ldr	r3, [pc, #52]	; (800a12c <std+0x58>)
 800a0f8:	6263      	str	r3, [r4, #36]	; 0x24
 800a0fa:	4b0d      	ldr	r3, [pc, #52]	; (800a130 <std+0x5c>)
 800a0fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a0fe:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <std+0x60>)
 800a100:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a102:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <std+0x64>)
 800a104:	6323      	str	r3, [r4, #48]	; 0x30
 800a106:	4b0d      	ldr	r3, [pc, #52]	; (800a13c <std+0x68>)
 800a108:	6224      	str	r4, [r4, #32]
 800a10a:	429c      	cmp	r4, r3
 800a10c:	d006      	beq.n	800a11c <std+0x48>
 800a10e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a112:	4294      	cmp	r4, r2
 800a114:	d002      	beq.n	800a11c <std+0x48>
 800a116:	33d0      	adds	r3, #208	; 0xd0
 800a118:	429c      	cmp	r4, r3
 800a11a:	d105      	bne.n	800a128 <std+0x54>
 800a11c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a124:	f000 ba5a 	b.w	800a5dc <__retarget_lock_init_recursive>
 800a128:	bd10      	pop	{r4, pc}
 800a12a:	bf00      	nop
 800a12c:	0800a335 	.word	0x0800a335
 800a130:	0800a357 	.word	0x0800a357
 800a134:	0800a38f 	.word	0x0800a38f
 800a138:	0800a3b3 	.word	0x0800a3b3
 800a13c:	20002170 	.word	0x20002170

0800a140 <stdio_exit_handler>:
 800a140:	4a02      	ldr	r2, [pc, #8]	; (800a14c <stdio_exit_handler+0xc>)
 800a142:	4903      	ldr	r1, [pc, #12]	; (800a150 <stdio_exit_handler+0x10>)
 800a144:	4803      	ldr	r0, [pc, #12]	; (800a154 <stdio_exit_handler+0x14>)
 800a146:	f000 b869 	b.w	800a21c <_fwalk_sglue>
 800a14a:	bf00      	nop
 800a14c:	20000010 	.word	0x20000010
 800a150:	0800bf69 	.word	0x0800bf69
 800a154:	2000001c 	.word	0x2000001c

0800a158 <cleanup_stdio>:
 800a158:	6841      	ldr	r1, [r0, #4]
 800a15a:	4b0c      	ldr	r3, [pc, #48]	; (800a18c <cleanup_stdio+0x34>)
 800a15c:	4299      	cmp	r1, r3
 800a15e:	b510      	push	{r4, lr}
 800a160:	4604      	mov	r4, r0
 800a162:	d001      	beq.n	800a168 <cleanup_stdio+0x10>
 800a164:	f001 ff00 	bl	800bf68 <_fflush_r>
 800a168:	68a1      	ldr	r1, [r4, #8]
 800a16a:	4b09      	ldr	r3, [pc, #36]	; (800a190 <cleanup_stdio+0x38>)
 800a16c:	4299      	cmp	r1, r3
 800a16e:	d002      	beq.n	800a176 <cleanup_stdio+0x1e>
 800a170:	4620      	mov	r0, r4
 800a172:	f001 fef9 	bl	800bf68 <_fflush_r>
 800a176:	68e1      	ldr	r1, [r4, #12]
 800a178:	4b06      	ldr	r3, [pc, #24]	; (800a194 <cleanup_stdio+0x3c>)
 800a17a:	4299      	cmp	r1, r3
 800a17c:	d004      	beq.n	800a188 <cleanup_stdio+0x30>
 800a17e:	4620      	mov	r0, r4
 800a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a184:	f001 bef0 	b.w	800bf68 <_fflush_r>
 800a188:	bd10      	pop	{r4, pc}
 800a18a:	bf00      	nop
 800a18c:	20002170 	.word	0x20002170
 800a190:	200021d8 	.word	0x200021d8
 800a194:	20002240 	.word	0x20002240

0800a198 <global_stdio_init.part.0>:
 800a198:	b510      	push	{r4, lr}
 800a19a:	4b0b      	ldr	r3, [pc, #44]	; (800a1c8 <global_stdio_init.part.0+0x30>)
 800a19c:	4c0b      	ldr	r4, [pc, #44]	; (800a1cc <global_stdio_init.part.0+0x34>)
 800a19e:	4a0c      	ldr	r2, [pc, #48]	; (800a1d0 <global_stdio_init.part.0+0x38>)
 800a1a0:	601a      	str	r2, [r3, #0]
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2104      	movs	r1, #4
 800a1a8:	f7ff ff94 	bl	800a0d4 <std>
 800a1ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	2109      	movs	r1, #9
 800a1b4:	f7ff ff8e 	bl	800a0d4 <std>
 800a1b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a1bc:	2202      	movs	r2, #2
 800a1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c2:	2112      	movs	r1, #18
 800a1c4:	f7ff bf86 	b.w	800a0d4 <std>
 800a1c8:	200022a8 	.word	0x200022a8
 800a1cc:	20002170 	.word	0x20002170
 800a1d0:	0800a141 	.word	0x0800a141

0800a1d4 <__sfp_lock_acquire>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__sfp_lock_acquire+0x8>)
 800a1d6:	f000 ba02 	b.w	800a5de <__retarget_lock_acquire_recursive>
 800a1da:	bf00      	nop
 800a1dc:	200022b1 	.word	0x200022b1

0800a1e0 <__sfp_lock_release>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__sfp_lock_release+0x8>)
 800a1e2:	f000 b9fd 	b.w	800a5e0 <__retarget_lock_release_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200022b1 	.word	0x200022b1

0800a1ec <__sinit>:
 800a1ec:	b510      	push	{r4, lr}
 800a1ee:	4604      	mov	r4, r0
 800a1f0:	f7ff fff0 	bl	800a1d4 <__sfp_lock_acquire>
 800a1f4:	6a23      	ldr	r3, [r4, #32]
 800a1f6:	b11b      	cbz	r3, 800a200 <__sinit+0x14>
 800a1f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1fc:	f7ff bff0 	b.w	800a1e0 <__sfp_lock_release>
 800a200:	4b04      	ldr	r3, [pc, #16]	; (800a214 <__sinit+0x28>)
 800a202:	6223      	str	r3, [r4, #32]
 800a204:	4b04      	ldr	r3, [pc, #16]	; (800a218 <__sinit+0x2c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d1f5      	bne.n	800a1f8 <__sinit+0xc>
 800a20c:	f7ff ffc4 	bl	800a198 <global_stdio_init.part.0>
 800a210:	e7f2      	b.n	800a1f8 <__sinit+0xc>
 800a212:	bf00      	nop
 800a214:	0800a159 	.word	0x0800a159
 800a218:	200022a8 	.word	0x200022a8

0800a21c <_fwalk_sglue>:
 800a21c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a220:	4607      	mov	r7, r0
 800a222:	4688      	mov	r8, r1
 800a224:	4614      	mov	r4, r2
 800a226:	2600      	movs	r6, #0
 800a228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a22c:	f1b9 0901 	subs.w	r9, r9, #1
 800a230:	d505      	bpl.n	800a23e <_fwalk_sglue+0x22>
 800a232:	6824      	ldr	r4, [r4, #0]
 800a234:	2c00      	cmp	r4, #0
 800a236:	d1f7      	bne.n	800a228 <_fwalk_sglue+0xc>
 800a238:	4630      	mov	r0, r6
 800a23a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a23e:	89ab      	ldrh	r3, [r5, #12]
 800a240:	2b01      	cmp	r3, #1
 800a242:	d907      	bls.n	800a254 <_fwalk_sglue+0x38>
 800a244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a248:	3301      	adds	r3, #1
 800a24a:	d003      	beq.n	800a254 <_fwalk_sglue+0x38>
 800a24c:	4629      	mov	r1, r5
 800a24e:	4638      	mov	r0, r7
 800a250:	47c0      	blx	r8
 800a252:	4306      	orrs	r6, r0
 800a254:	3568      	adds	r5, #104	; 0x68
 800a256:	e7e9      	b.n	800a22c <_fwalk_sglue+0x10>

0800a258 <iprintf>:
 800a258:	b40f      	push	{r0, r1, r2, r3}
 800a25a:	b507      	push	{r0, r1, r2, lr}
 800a25c:	4906      	ldr	r1, [pc, #24]	; (800a278 <iprintf+0x20>)
 800a25e:	ab04      	add	r3, sp, #16
 800a260:	6808      	ldr	r0, [r1, #0]
 800a262:	f853 2b04 	ldr.w	r2, [r3], #4
 800a266:	6881      	ldr	r1, [r0, #8]
 800a268:	9301      	str	r3, [sp, #4]
 800a26a:	f001 fcdd 	bl	800bc28 <_vfiprintf_r>
 800a26e:	b003      	add	sp, #12
 800a270:	f85d eb04 	ldr.w	lr, [sp], #4
 800a274:	b004      	add	sp, #16
 800a276:	4770      	bx	lr
 800a278:	20000068 	.word	0x20000068

0800a27c <_puts_r>:
 800a27c:	6a03      	ldr	r3, [r0, #32]
 800a27e:	b570      	push	{r4, r5, r6, lr}
 800a280:	6884      	ldr	r4, [r0, #8]
 800a282:	4605      	mov	r5, r0
 800a284:	460e      	mov	r6, r1
 800a286:	b90b      	cbnz	r3, 800a28c <_puts_r+0x10>
 800a288:	f7ff ffb0 	bl	800a1ec <__sinit>
 800a28c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a28e:	07db      	lsls	r3, r3, #31
 800a290:	d405      	bmi.n	800a29e <_puts_r+0x22>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	0598      	lsls	r0, r3, #22
 800a296:	d402      	bmi.n	800a29e <_puts_r+0x22>
 800a298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a29a:	f000 f9a0 	bl	800a5de <__retarget_lock_acquire_recursive>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	0719      	lsls	r1, r3, #28
 800a2a2:	d513      	bpl.n	800a2cc <_puts_r+0x50>
 800a2a4:	6923      	ldr	r3, [r4, #16]
 800a2a6:	b18b      	cbz	r3, 800a2cc <_puts_r+0x50>
 800a2a8:	3e01      	subs	r6, #1
 800a2aa:	68a3      	ldr	r3, [r4, #8]
 800a2ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	60a3      	str	r3, [r4, #8]
 800a2b4:	b9e9      	cbnz	r1, 800a2f2 <_puts_r+0x76>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	da2e      	bge.n	800a318 <_puts_r+0x9c>
 800a2ba:	4622      	mov	r2, r4
 800a2bc:	210a      	movs	r1, #10
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f87b 	bl	800a3ba <__swbuf_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d007      	beq.n	800a2d8 <_puts_r+0x5c>
 800a2c8:	250a      	movs	r5, #10
 800a2ca:	e007      	b.n	800a2dc <_puts_r+0x60>
 800a2cc:	4621      	mov	r1, r4
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f000 f8b0 	bl	800a434 <__swsetup_r>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d0e7      	beq.n	800a2a8 <_puts_r+0x2c>
 800a2d8:	f04f 35ff 	mov.w	r5, #4294967295
 800a2dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2de:	07da      	lsls	r2, r3, #31
 800a2e0:	d405      	bmi.n	800a2ee <_puts_r+0x72>
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	059b      	lsls	r3, r3, #22
 800a2e6:	d402      	bmi.n	800a2ee <_puts_r+0x72>
 800a2e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2ea:	f000 f979 	bl	800a5e0 <__retarget_lock_release_recursive>
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	bd70      	pop	{r4, r5, r6, pc}
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	da04      	bge.n	800a300 <_puts_r+0x84>
 800a2f6:	69a2      	ldr	r2, [r4, #24]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	dc06      	bgt.n	800a30a <_puts_r+0x8e>
 800a2fc:	290a      	cmp	r1, #10
 800a2fe:	d004      	beq.n	800a30a <_puts_r+0x8e>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	6022      	str	r2, [r4, #0]
 800a306:	7019      	strb	r1, [r3, #0]
 800a308:	e7cf      	b.n	800a2aa <_puts_r+0x2e>
 800a30a:	4622      	mov	r2, r4
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 f854 	bl	800a3ba <__swbuf_r>
 800a312:	3001      	adds	r0, #1
 800a314:	d1c9      	bne.n	800a2aa <_puts_r+0x2e>
 800a316:	e7df      	b.n	800a2d8 <_puts_r+0x5c>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	250a      	movs	r5, #10
 800a31c:	1c5a      	adds	r2, r3, #1
 800a31e:	6022      	str	r2, [r4, #0]
 800a320:	701d      	strb	r5, [r3, #0]
 800a322:	e7db      	b.n	800a2dc <_puts_r+0x60>

0800a324 <puts>:
 800a324:	4b02      	ldr	r3, [pc, #8]	; (800a330 <puts+0xc>)
 800a326:	4601      	mov	r1, r0
 800a328:	6818      	ldr	r0, [r3, #0]
 800a32a:	f7ff bfa7 	b.w	800a27c <_puts_r>
 800a32e:	bf00      	nop
 800a330:	20000068 	.word	0x20000068

0800a334 <__sread>:
 800a334:	b510      	push	{r4, lr}
 800a336:	460c      	mov	r4, r1
 800a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a33c:	f000 f900 	bl	800a540 <_read_r>
 800a340:	2800      	cmp	r0, #0
 800a342:	bfab      	itete	ge
 800a344:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a346:	89a3      	ldrhlt	r3, [r4, #12]
 800a348:	181b      	addge	r3, r3, r0
 800a34a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a34e:	bfac      	ite	ge
 800a350:	6563      	strge	r3, [r4, #84]	; 0x54
 800a352:	81a3      	strhlt	r3, [r4, #12]
 800a354:	bd10      	pop	{r4, pc}

0800a356 <__swrite>:
 800a356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a35a:	461f      	mov	r7, r3
 800a35c:	898b      	ldrh	r3, [r1, #12]
 800a35e:	05db      	lsls	r3, r3, #23
 800a360:	4605      	mov	r5, r0
 800a362:	460c      	mov	r4, r1
 800a364:	4616      	mov	r6, r2
 800a366:	d505      	bpl.n	800a374 <__swrite+0x1e>
 800a368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36c:	2302      	movs	r3, #2
 800a36e:	2200      	movs	r2, #0
 800a370:	f000 f8d4 	bl	800a51c <_lseek_r>
 800a374:	89a3      	ldrh	r3, [r4, #12]
 800a376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a37e:	81a3      	strh	r3, [r4, #12]
 800a380:	4632      	mov	r2, r6
 800a382:	463b      	mov	r3, r7
 800a384:	4628      	mov	r0, r5
 800a386:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a38a:	f000 b8eb 	b.w	800a564 <_write_r>

0800a38e <__sseek>:
 800a38e:	b510      	push	{r4, lr}
 800a390:	460c      	mov	r4, r1
 800a392:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a396:	f000 f8c1 	bl	800a51c <_lseek_r>
 800a39a:	1c43      	adds	r3, r0, #1
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	bf15      	itete	ne
 800a3a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a3a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a3a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a3aa:	81a3      	strheq	r3, [r4, #12]
 800a3ac:	bf18      	it	ne
 800a3ae:	81a3      	strhne	r3, [r4, #12]
 800a3b0:	bd10      	pop	{r4, pc}

0800a3b2 <__sclose>:
 800a3b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3b6:	f000 b8a1 	b.w	800a4fc <_close_r>

0800a3ba <__swbuf_r>:
 800a3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3bc:	460e      	mov	r6, r1
 800a3be:	4614      	mov	r4, r2
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	b118      	cbz	r0, 800a3cc <__swbuf_r+0x12>
 800a3c4:	6a03      	ldr	r3, [r0, #32]
 800a3c6:	b90b      	cbnz	r3, 800a3cc <__swbuf_r+0x12>
 800a3c8:	f7ff ff10 	bl	800a1ec <__sinit>
 800a3cc:	69a3      	ldr	r3, [r4, #24]
 800a3ce:	60a3      	str	r3, [r4, #8]
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	071a      	lsls	r2, r3, #28
 800a3d4:	d525      	bpl.n	800a422 <__swbuf_r+0x68>
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	b31b      	cbz	r3, 800a422 <__swbuf_r+0x68>
 800a3da:	6823      	ldr	r3, [r4, #0]
 800a3dc:	6922      	ldr	r2, [r4, #16]
 800a3de:	1a98      	subs	r0, r3, r2
 800a3e0:	6963      	ldr	r3, [r4, #20]
 800a3e2:	b2f6      	uxtb	r6, r6
 800a3e4:	4283      	cmp	r3, r0
 800a3e6:	4637      	mov	r7, r6
 800a3e8:	dc04      	bgt.n	800a3f4 <__swbuf_r+0x3a>
 800a3ea:	4621      	mov	r1, r4
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	f001 fdbb 	bl	800bf68 <_fflush_r>
 800a3f2:	b9e0      	cbnz	r0, 800a42e <__swbuf_r+0x74>
 800a3f4:	68a3      	ldr	r3, [r4, #8]
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	60a3      	str	r3, [r4, #8]
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	1c5a      	adds	r2, r3, #1
 800a3fe:	6022      	str	r2, [r4, #0]
 800a400:	701e      	strb	r6, [r3, #0]
 800a402:	6962      	ldr	r2, [r4, #20]
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	429a      	cmp	r2, r3
 800a408:	d004      	beq.n	800a414 <__swbuf_r+0x5a>
 800a40a:	89a3      	ldrh	r3, [r4, #12]
 800a40c:	07db      	lsls	r3, r3, #31
 800a40e:	d506      	bpl.n	800a41e <__swbuf_r+0x64>
 800a410:	2e0a      	cmp	r6, #10
 800a412:	d104      	bne.n	800a41e <__swbuf_r+0x64>
 800a414:	4621      	mov	r1, r4
 800a416:	4628      	mov	r0, r5
 800a418:	f001 fda6 	bl	800bf68 <_fflush_r>
 800a41c:	b938      	cbnz	r0, 800a42e <__swbuf_r+0x74>
 800a41e:	4638      	mov	r0, r7
 800a420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a422:	4621      	mov	r1, r4
 800a424:	4628      	mov	r0, r5
 800a426:	f000 f805 	bl	800a434 <__swsetup_r>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d0d5      	beq.n	800a3da <__swbuf_r+0x20>
 800a42e:	f04f 37ff 	mov.w	r7, #4294967295
 800a432:	e7f4      	b.n	800a41e <__swbuf_r+0x64>

0800a434 <__swsetup_r>:
 800a434:	b538      	push	{r3, r4, r5, lr}
 800a436:	4b2a      	ldr	r3, [pc, #168]	; (800a4e0 <__swsetup_r+0xac>)
 800a438:	4605      	mov	r5, r0
 800a43a:	6818      	ldr	r0, [r3, #0]
 800a43c:	460c      	mov	r4, r1
 800a43e:	b118      	cbz	r0, 800a448 <__swsetup_r+0x14>
 800a440:	6a03      	ldr	r3, [r0, #32]
 800a442:	b90b      	cbnz	r3, 800a448 <__swsetup_r+0x14>
 800a444:	f7ff fed2 	bl	800a1ec <__sinit>
 800a448:	89a3      	ldrh	r3, [r4, #12]
 800a44a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a44e:	0718      	lsls	r0, r3, #28
 800a450:	d422      	bmi.n	800a498 <__swsetup_r+0x64>
 800a452:	06d9      	lsls	r1, r3, #27
 800a454:	d407      	bmi.n	800a466 <__swsetup_r+0x32>
 800a456:	2309      	movs	r3, #9
 800a458:	602b      	str	r3, [r5, #0]
 800a45a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	e034      	b.n	800a4d0 <__swsetup_r+0x9c>
 800a466:	0758      	lsls	r0, r3, #29
 800a468:	d512      	bpl.n	800a490 <__swsetup_r+0x5c>
 800a46a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a46c:	b141      	cbz	r1, 800a480 <__swsetup_r+0x4c>
 800a46e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a472:	4299      	cmp	r1, r3
 800a474:	d002      	beq.n	800a47c <__swsetup_r+0x48>
 800a476:	4628      	mov	r0, r5
 800a478:	f000 ff30 	bl	800b2dc <_free_r>
 800a47c:	2300      	movs	r3, #0
 800a47e:	6363      	str	r3, [r4, #52]	; 0x34
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	2300      	movs	r3, #0
 800a48a:	6063      	str	r3, [r4, #4]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	6023      	str	r3, [r4, #0]
 800a490:	89a3      	ldrh	r3, [r4, #12]
 800a492:	f043 0308 	orr.w	r3, r3, #8
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	6923      	ldr	r3, [r4, #16]
 800a49a:	b94b      	cbnz	r3, 800a4b0 <__swsetup_r+0x7c>
 800a49c:	89a3      	ldrh	r3, [r4, #12]
 800a49e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4a6:	d003      	beq.n	800a4b0 <__swsetup_r+0x7c>
 800a4a8:	4621      	mov	r1, r4
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	f001 fdaa 	bl	800c004 <__smakebuf_r>
 800a4b0:	89a0      	ldrh	r0, [r4, #12]
 800a4b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4b6:	f010 0301 	ands.w	r3, r0, #1
 800a4ba:	d00a      	beq.n	800a4d2 <__swsetup_r+0x9e>
 800a4bc:	2300      	movs	r3, #0
 800a4be:	60a3      	str	r3, [r4, #8]
 800a4c0:	6963      	ldr	r3, [r4, #20]
 800a4c2:	425b      	negs	r3, r3
 800a4c4:	61a3      	str	r3, [r4, #24]
 800a4c6:	6923      	ldr	r3, [r4, #16]
 800a4c8:	b943      	cbnz	r3, 800a4dc <__swsetup_r+0xa8>
 800a4ca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4ce:	d1c4      	bne.n	800a45a <__swsetup_r+0x26>
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	0781      	lsls	r1, r0, #30
 800a4d4:	bf58      	it	pl
 800a4d6:	6963      	ldrpl	r3, [r4, #20]
 800a4d8:	60a3      	str	r3, [r4, #8]
 800a4da:	e7f4      	b.n	800a4c6 <__swsetup_r+0x92>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e7f7      	b.n	800a4d0 <__swsetup_r+0x9c>
 800a4e0:	20000068 	.word	0x20000068

0800a4e4 <memset>:
 800a4e4:	4402      	add	r2, r0
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d100      	bne.n	800a4ee <memset+0xa>
 800a4ec:	4770      	bx	lr
 800a4ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a4f2:	e7f9      	b.n	800a4e8 <memset+0x4>

0800a4f4 <_localeconv_r>:
 800a4f4:	4800      	ldr	r0, [pc, #0]	; (800a4f8 <_localeconv_r+0x4>)
 800a4f6:	4770      	bx	lr
 800a4f8:	2000015c 	.word	0x2000015c

0800a4fc <_close_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4d06      	ldr	r5, [pc, #24]	; (800a518 <_close_r+0x1c>)
 800a500:	2300      	movs	r3, #0
 800a502:	4604      	mov	r4, r0
 800a504:	4608      	mov	r0, r1
 800a506:	602b      	str	r3, [r5, #0]
 800a508:	f7fa fedd 	bl	80052c6 <_close>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_close_r+0x1a>
 800a510:	682b      	ldr	r3, [r5, #0]
 800a512:	b103      	cbz	r3, 800a516 <_close_r+0x1a>
 800a514:	6023      	str	r3, [r4, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	200022ac 	.word	0x200022ac

0800a51c <_lseek_r>:
 800a51c:	b538      	push	{r3, r4, r5, lr}
 800a51e:	4d07      	ldr	r5, [pc, #28]	; (800a53c <_lseek_r+0x20>)
 800a520:	4604      	mov	r4, r0
 800a522:	4608      	mov	r0, r1
 800a524:	4611      	mov	r1, r2
 800a526:	2200      	movs	r2, #0
 800a528:	602a      	str	r2, [r5, #0]
 800a52a:	461a      	mov	r2, r3
 800a52c:	f7fa fef2 	bl	8005314 <_lseek>
 800a530:	1c43      	adds	r3, r0, #1
 800a532:	d102      	bne.n	800a53a <_lseek_r+0x1e>
 800a534:	682b      	ldr	r3, [r5, #0]
 800a536:	b103      	cbz	r3, 800a53a <_lseek_r+0x1e>
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	200022ac 	.word	0x200022ac

0800a540 <_read_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4d07      	ldr	r5, [pc, #28]	; (800a560 <_read_r+0x20>)
 800a544:	4604      	mov	r4, r0
 800a546:	4608      	mov	r0, r1
 800a548:	4611      	mov	r1, r2
 800a54a:	2200      	movs	r2, #0
 800a54c:	602a      	str	r2, [r5, #0]
 800a54e:	461a      	mov	r2, r3
 800a550:	f7fa fe80 	bl	8005254 <_read>
 800a554:	1c43      	adds	r3, r0, #1
 800a556:	d102      	bne.n	800a55e <_read_r+0x1e>
 800a558:	682b      	ldr	r3, [r5, #0]
 800a55a:	b103      	cbz	r3, 800a55e <_read_r+0x1e>
 800a55c:	6023      	str	r3, [r4, #0]
 800a55e:	bd38      	pop	{r3, r4, r5, pc}
 800a560:	200022ac 	.word	0x200022ac

0800a564 <_write_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d07      	ldr	r5, [pc, #28]	; (800a584 <_write_r+0x20>)
 800a568:	4604      	mov	r4, r0
 800a56a:	4608      	mov	r0, r1
 800a56c:	4611      	mov	r1, r2
 800a56e:	2200      	movs	r2, #0
 800a570:	602a      	str	r2, [r5, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	f7fa fe8b 	bl	800528e <_write>
 800a578:	1c43      	adds	r3, r0, #1
 800a57a:	d102      	bne.n	800a582 <_write_r+0x1e>
 800a57c:	682b      	ldr	r3, [r5, #0]
 800a57e:	b103      	cbz	r3, 800a582 <_write_r+0x1e>
 800a580:	6023      	str	r3, [r4, #0]
 800a582:	bd38      	pop	{r3, r4, r5, pc}
 800a584:	200022ac 	.word	0x200022ac

0800a588 <__errno>:
 800a588:	4b01      	ldr	r3, [pc, #4]	; (800a590 <__errno+0x8>)
 800a58a:	6818      	ldr	r0, [r3, #0]
 800a58c:	4770      	bx	lr
 800a58e:	bf00      	nop
 800a590:	20000068 	.word	0x20000068

0800a594 <__libc_init_array>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	4d0d      	ldr	r5, [pc, #52]	; (800a5cc <__libc_init_array+0x38>)
 800a598:	4c0d      	ldr	r4, [pc, #52]	; (800a5d0 <__libc_init_array+0x3c>)
 800a59a:	1b64      	subs	r4, r4, r5
 800a59c:	10a4      	asrs	r4, r4, #2
 800a59e:	2600      	movs	r6, #0
 800a5a0:	42a6      	cmp	r6, r4
 800a5a2:	d109      	bne.n	800a5b8 <__libc_init_array+0x24>
 800a5a4:	4d0b      	ldr	r5, [pc, #44]	; (800a5d4 <__libc_init_array+0x40>)
 800a5a6:	4c0c      	ldr	r4, [pc, #48]	; (800a5d8 <__libc_init_array+0x44>)
 800a5a8:	f002 fdc0 	bl	800d12c <_init>
 800a5ac:	1b64      	subs	r4, r4, r5
 800a5ae:	10a4      	asrs	r4, r4, #2
 800a5b0:	2600      	movs	r6, #0
 800a5b2:	42a6      	cmp	r6, r4
 800a5b4:	d105      	bne.n	800a5c2 <__libc_init_array+0x2e>
 800a5b6:	bd70      	pop	{r4, r5, r6, pc}
 800a5b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5bc:	4798      	blx	r3
 800a5be:	3601      	adds	r6, #1
 800a5c0:	e7ee      	b.n	800a5a0 <__libc_init_array+0xc>
 800a5c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c6:	4798      	blx	r3
 800a5c8:	3601      	adds	r6, #1
 800a5ca:	e7f2      	b.n	800a5b2 <__libc_init_array+0x1e>
 800a5cc:	0800d5a8 	.word	0x0800d5a8
 800a5d0:	0800d5a8 	.word	0x0800d5a8
 800a5d4:	0800d5a8 	.word	0x0800d5a8
 800a5d8:	0800d5ac 	.word	0x0800d5ac

0800a5dc <__retarget_lock_init_recursive>:
 800a5dc:	4770      	bx	lr

0800a5de <__retarget_lock_acquire_recursive>:
 800a5de:	4770      	bx	lr

0800a5e0 <__retarget_lock_release_recursive>:
 800a5e0:	4770      	bx	lr

0800a5e2 <quorem>:
 800a5e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5e6:	6903      	ldr	r3, [r0, #16]
 800a5e8:	690c      	ldr	r4, [r1, #16]
 800a5ea:	42a3      	cmp	r3, r4
 800a5ec:	4607      	mov	r7, r0
 800a5ee:	db7e      	blt.n	800a6ee <quorem+0x10c>
 800a5f0:	3c01      	subs	r4, #1
 800a5f2:	f101 0814 	add.w	r8, r1, #20
 800a5f6:	f100 0514 	add.w	r5, r0, #20
 800a5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5fe:	9301      	str	r3, [sp, #4]
 800a600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a608:	3301      	adds	r3, #1
 800a60a:	429a      	cmp	r2, r3
 800a60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a614:	fbb2 f6f3 	udiv	r6, r2, r3
 800a618:	d331      	bcc.n	800a67e <quorem+0x9c>
 800a61a:	f04f 0e00 	mov.w	lr, #0
 800a61e:	4640      	mov	r0, r8
 800a620:	46ac      	mov	ip, r5
 800a622:	46f2      	mov	sl, lr
 800a624:	f850 2b04 	ldr.w	r2, [r0], #4
 800a628:	b293      	uxth	r3, r2
 800a62a:	fb06 e303 	mla	r3, r6, r3, lr
 800a62e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a632:	0c1a      	lsrs	r2, r3, #16
 800a634:	b29b      	uxth	r3, r3
 800a636:	ebaa 0303 	sub.w	r3, sl, r3
 800a63a:	f8dc a000 	ldr.w	sl, [ip]
 800a63e:	fa13 f38a 	uxtah	r3, r3, sl
 800a642:	fb06 220e 	mla	r2, r6, lr, r2
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	9b00      	ldr	r3, [sp, #0]
 800a64a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a64e:	b292      	uxth	r2, r2
 800a650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a658:	f8bd 3000 	ldrh.w	r3, [sp]
 800a65c:	4581      	cmp	r9, r0
 800a65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a662:	f84c 3b04 	str.w	r3, [ip], #4
 800a666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a66a:	d2db      	bcs.n	800a624 <quorem+0x42>
 800a66c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a670:	b92b      	cbnz	r3, 800a67e <quorem+0x9c>
 800a672:	9b01      	ldr	r3, [sp, #4]
 800a674:	3b04      	subs	r3, #4
 800a676:	429d      	cmp	r5, r3
 800a678:	461a      	mov	r2, r3
 800a67a:	d32c      	bcc.n	800a6d6 <quorem+0xf4>
 800a67c:	613c      	str	r4, [r7, #16]
 800a67e:	4638      	mov	r0, r7
 800a680:	f001 f9a8 	bl	800b9d4 <__mcmp>
 800a684:	2800      	cmp	r0, #0
 800a686:	db22      	blt.n	800a6ce <quorem+0xec>
 800a688:	3601      	adds	r6, #1
 800a68a:	4629      	mov	r1, r5
 800a68c:	2000      	movs	r0, #0
 800a68e:	f858 2b04 	ldr.w	r2, [r8], #4
 800a692:	f8d1 c000 	ldr.w	ip, [r1]
 800a696:	b293      	uxth	r3, r2
 800a698:	1ac3      	subs	r3, r0, r3
 800a69a:	0c12      	lsrs	r2, r2, #16
 800a69c:	fa13 f38c 	uxtah	r3, r3, ip
 800a6a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a6a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6ae:	45c1      	cmp	r9, r8
 800a6b0:	f841 3b04 	str.w	r3, [r1], #4
 800a6b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a6b8:	d2e9      	bcs.n	800a68e <quorem+0xac>
 800a6ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6c2:	b922      	cbnz	r2, 800a6ce <quorem+0xec>
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	429d      	cmp	r5, r3
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	d30a      	bcc.n	800a6e2 <quorem+0x100>
 800a6cc:	613c      	str	r4, [r7, #16]
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	b003      	add	sp, #12
 800a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d6:	6812      	ldr	r2, [r2, #0]
 800a6d8:	3b04      	subs	r3, #4
 800a6da:	2a00      	cmp	r2, #0
 800a6dc:	d1ce      	bne.n	800a67c <quorem+0x9a>
 800a6de:	3c01      	subs	r4, #1
 800a6e0:	e7c9      	b.n	800a676 <quorem+0x94>
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	3b04      	subs	r3, #4
 800a6e6:	2a00      	cmp	r2, #0
 800a6e8:	d1f0      	bne.n	800a6cc <quorem+0xea>
 800a6ea:	3c01      	subs	r4, #1
 800a6ec:	e7eb      	b.n	800a6c6 <quorem+0xe4>
 800a6ee:	2000      	movs	r0, #0
 800a6f0:	e7ee      	b.n	800a6d0 <quorem+0xee>
 800a6f2:	0000      	movs	r0, r0
 800a6f4:	0000      	movs	r0, r0
	...

0800a6f8 <_dtoa_r>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	ed2d 8b04 	vpush	{d8-d9}
 800a700:	69c5      	ldr	r5, [r0, #28]
 800a702:	b093      	sub	sp, #76	; 0x4c
 800a704:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a708:	ec57 6b10 	vmov	r6, r7, d0
 800a70c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a710:	9107      	str	r1, [sp, #28]
 800a712:	4604      	mov	r4, r0
 800a714:	920a      	str	r2, [sp, #40]	; 0x28
 800a716:	930d      	str	r3, [sp, #52]	; 0x34
 800a718:	b975      	cbnz	r5, 800a738 <_dtoa_r+0x40>
 800a71a:	2010      	movs	r0, #16
 800a71c:	f000 fe2a 	bl	800b374 <malloc>
 800a720:	4602      	mov	r2, r0
 800a722:	61e0      	str	r0, [r4, #28]
 800a724:	b920      	cbnz	r0, 800a730 <_dtoa_r+0x38>
 800a726:	4bae      	ldr	r3, [pc, #696]	; (800a9e0 <_dtoa_r+0x2e8>)
 800a728:	21ef      	movs	r1, #239	; 0xef
 800a72a:	48ae      	ldr	r0, [pc, #696]	; (800a9e4 <_dtoa_r+0x2ec>)
 800a72c:	f001 fce6 	bl	800c0fc <__assert_func>
 800a730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a734:	6005      	str	r5, [r0, #0]
 800a736:	60c5      	str	r5, [r0, #12]
 800a738:	69e3      	ldr	r3, [r4, #28]
 800a73a:	6819      	ldr	r1, [r3, #0]
 800a73c:	b151      	cbz	r1, 800a754 <_dtoa_r+0x5c>
 800a73e:	685a      	ldr	r2, [r3, #4]
 800a740:	604a      	str	r2, [r1, #4]
 800a742:	2301      	movs	r3, #1
 800a744:	4093      	lsls	r3, r2
 800a746:	608b      	str	r3, [r1, #8]
 800a748:	4620      	mov	r0, r4
 800a74a:	f000 ff07 	bl	800b55c <_Bfree>
 800a74e:	69e3      	ldr	r3, [r4, #28]
 800a750:	2200      	movs	r2, #0
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	1e3b      	subs	r3, r7, #0
 800a756:	bfbb      	ittet	lt
 800a758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a75c:	9303      	strlt	r3, [sp, #12]
 800a75e:	2300      	movge	r3, #0
 800a760:	2201      	movlt	r2, #1
 800a762:	bfac      	ite	ge
 800a764:	f8c8 3000 	strge.w	r3, [r8]
 800a768:	f8c8 2000 	strlt.w	r2, [r8]
 800a76c:	4b9e      	ldr	r3, [pc, #632]	; (800a9e8 <_dtoa_r+0x2f0>)
 800a76e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a772:	ea33 0308 	bics.w	r3, r3, r8
 800a776:	d11b      	bne.n	800a7b0 <_dtoa_r+0xb8>
 800a778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a77a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a77e:	6013      	str	r3, [r2, #0]
 800a780:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a784:	4333      	orrs	r3, r6
 800a786:	f000 8593 	beq.w	800b2b0 <_dtoa_r+0xbb8>
 800a78a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a78c:	b963      	cbnz	r3, 800a7a8 <_dtoa_r+0xb0>
 800a78e:	4b97      	ldr	r3, [pc, #604]	; (800a9ec <_dtoa_r+0x2f4>)
 800a790:	e027      	b.n	800a7e2 <_dtoa_r+0xea>
 800a792:	4b97      	ldr	r3, [pc, #604]	; (800a9f0 <_dtoa_r+0x2f8>)
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	3308      	adds	r3, #8
 800a798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a79a:	6013      	str	r3, [r2, #0]
 800a79c:	9800      	ldr	r0, [sp, #0]
 800a79e:	b013      	add	sp, #76	; 0x4c
 800a7a0:	ecbd 8b04 	vpop	{d8-d9}
 800a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a8:	4b90      	ldr	r3, [pc, #576]	; (800a9ec <_dtoa_r+0x2f4>)
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	3303      	adds	r3, #3
 800a7ae:	e7f3      	b.n	800a798 <_dtoa_r+0xa0>
 800a7b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	ec51 0b17 	vmov	r0, r1, d7
 800a7ba:	eeb0 8a47 	vmov.f32	s16, s14
 800a7be:	eef0 8a67 	vmov.f32	s17, s15
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f7f6 f9a8 	bl	8000b18 <__aeabi_dcmpeq>
 800a7c8:	4681      	mov	r9, r0
 800a7ca:	b160      	cbz	r0, 800a7e6 <_dtoa_r+0xee>
 800a7cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f000 8568 	beq.w	800b2aa <_dtoa_r+0xbb2>
 800a7da:	4b86      	ldr	r3, [pc, #536]	; (800a9f4 <_dtoa_r+0x2fc>)
 800a7dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a7de:	6013      	str	r3, [r2, #0]
 800a7e0:	3b01      	subs	r3, #1
 800a7e2:	9300      	str	r3, [sp, #0]
 800a7e4:	e7da      	b.n	800a79c <_dtoa_r+0xa4>
 800a7e6:	aa10      	add	r2, sp, #64	; 0x40
 800a7e8:	a911      	add	r1, sp, #68	; 0x44
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	eeb0 0a48 	vmov.f32	s0, s16
 800a7f0:	eef0 0a68 	vmov.f32	s1, s17
 800a7f4:	f001 f994 	bl	800bb20 <__d2b>
 800a7f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a7fc:	4682      	mov	sl, r0
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	d07f      	beq.n	800a902 <_dtoa_r+0x20a>
 800a802:	ee18 3a90 	vmov	r3, s17
 800a806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a80a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a80e:	ec51 0b18 	vmov	r0, r1, d8
 800a812:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a81a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a81e:	4619      	mov	r1, r3
 800a820:	2200      	movs	r2, #0
 800a822:	4b75      	ldr	r3, [pc, #468]	; (800a9f8 <_dtoa_r+0x300>)
 800a824:	f7f5 fd58 	bl	80002d8 <__aeabi_dsub>
 800a828:	a367      	add	r3, pc, #412	; (adr r3, 800a9c8 <_dtoa_r+0x2d0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 ff0b 	bl	8000648 <__aeabi_dmul>
 800a832:	a367      	add	r3, pc, #412	; (adr r3, 800a9d0 <_dtoa_r+0x2d8>)
 800a834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a838:	f7f5 fd50 	bl	80002dc <__adddf3>
 800a83c:	4606      	mov	r6, r0
 800a83e:	4628      	mov	r0, r5
 800a840:	460f      	mov	r7, r1
 800a842:	f7f5 fe97 	bl	8000574 <__aeabi_i2d>
 800a846:	a364      	add	r3, pc, #400	; (adr r3, 800a9d8 <_dtoa_r+0x2e0>)
 800a848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84c:	f7f5 fefc 	bl	8000648 <__aeabi_dmul>
 800a850:	4602      	mov	r2, r0
 800a852:	460b      	mov	r3, r1
 800a854:	4630      	mov	r0, r6
 800a856:	4639      	mov	r1, r7
 800a858:	f7f5 fd40 	bl	80002dc <__adddf3>
 800a85c:	4606      	mov	r6, r0
 800a85e:	460f      	mov	r7, r1
 800a860:	f7f6 f9a2 	bl	8000ba8 <__aeabi_d2iz>
 800a864:	2200      	movs	r2, #0
 800a866:	4683      	mov	fp, r0
 800a868:	2300      	movs	r3, #0
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f6 f95d 	bl	8000b2c <__aeabi_dcmplt>
 800a872:	b148      	cbz	r0, 800a888 <_dtoa_r+0x190>
 800a874:	4658      	mov	r0, fp
 800a876:	f7f5 fe7d 	bl	8000574 <__aeabi_i2d>
 800a87a:	4632      	mov	r2, r6
 800a87c:	463b      	mov	r3, r7
 800a87e:	f7f6 f94b 	bl	8000b18 <__aeabi_dcmpeq>
 800a882:	b908      	cbnz	r0, 800a888 <_dtoa_r+0x190>
 800a884:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a888:	f1bb 0f16 	cmp.w	fp, #22
 800a88c:	d857      	bhi.n	800a93e <_dtoa_r+0x246>
 800a88e:	4b5b      	ldr	r3, [pc, #364]	; (800a9fc <_dtoa_r+0x304>)
 800a890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a898:	ec51 0b18 	vmov	r0, r1, d8
 800a89c:	f7f6 f946 	bl	8000b2c <__aeabi_dcmplt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d04e      	beq.n	800a942 <_dtoa_r+0x24a>
 800a8a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8ae:	1b5b      	subs	r3, r3, r5
 800a8b0:	1e5a      	subs	r2, r3, #1
 800a8b2:	bf45      	ittet	mi
 800a8b4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a8b8:	9305      	strmi	r3, [sp, #20]
 800a8ba:	2300      	movpl	r3, #0
 800a8bc:	2300      	movmi	r3, #0
 800a8be:	9206      	str	r2, [sp, #24]
 800a8c0:	bf54      	ite	pl
 800a8c2:	9305      	strpl	r3, [sp, #20]
 800a8c4:	9306      	strmi	r3, [sp, #24]
 800a8c6:	f1bb 0f00 	cmp.w	fp, #0
 800a8ca:	db3c      	blt.n	800a946 <_dtoa_r+0x24e>
 800a8cc:	9b06      	ldr	r3, [sp, #24]
 800a8ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a8d2:	445b      	add	r3, fp
 800a8d4:	9306      	str	r3, [sp, #24]
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9308      	str	r3, [sp, #32]
 800a8da:	9b07      	ldr	r3, [sp, #28]
 800a8dc:	2b09      	cmp	r3, #9
 800a8de:	d868      	bhi.n	800a9b2 <_dtoa_r+0x2ba>
 800a8e0:	2b05      	cmp	r3, #5
 800a8e2:	bfc4      	itt	gt
 800a8e4:	3b04      	subgt	r3, #4
 800a8e6:	9307      	strgt	r3, [sp, #28]
 800a8e8:	9b07      	ldr	r3, [sp, #28]
 800a8ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a8ee:	bfcc      	ite	gt
 800a8f0:	2500      	movgt	r5, #0
 800a8f2:	2501      	movle	r5, #1
 800a8f4:	2b03      	cmp	r3, #3
 800a8f6:	f200 8085 	bhi.w	800aa04 <_dtoa_r+0x30c>
 800a8fa:	e8df f003 	tbb	[pc, r3]
 800a8fe:	3b2e      	.short	0x3b2e
 800a900:	5839      	.short	0x5839
 800a902:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a906:	441d      	add	r5, r3
 800a908:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a90c:	2b20      	cmp	r3, #32
 800a90e:	bfc1      	itttt	gt
 800a910:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a914:	fa08 f803 	lslgt.w	r8, r8, r3
 800a918:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a91c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a920:	bfd6      	itet	le
 800a922:	f1c3 0320 	rsble	r3, r3, #32
 800a926:	ea48 0003 	orrgt.w	r0, r8, r3
 800a92a:	fa06 f003 	lslle.w	r0, r6, r3
 800a92e:	f7f5 fe11 	bl	8000554 <__aeabi_ui2d>
 800a932:	2201      	movs	r2, #1
 800a934:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a938:	3d01      	subs	r5, #1
 800a93a:	920e      	str	r2, [sp, #56]	; 0x38
 800a93c:	e76f      	b.n	800a81e <_dtoa_r+0x126>
 800a93e:	2301      	movs	r3, #1
 800a940:	e7b3      	b.n	800a8aa <_dtoa_r+0x1b2>
 800a942:	900c      	str	r0, [sp, #48]	; 0x30
 800a944:	e7b2      	b.n	800a8ac <_dtoa_r+0x1b4>
 800a946:	9b05      	ldr	r3, [sp, #20]
 800a948:	eba3 030b 	sub.w	r3, r3, fp
 800a94c:	9305      	str	r3, [sp, #20]
 800a94e:	f1cb 0300 	rsb	r3, fp, #0
 800a952:	9308      	str	r3, [sp, #32]
 800a954:	2300      	movs	r3, #0
 800a956:	930b      	str	r3, [sp, #44]	; 0x2c
 800a958:	e7bf      	b.n	800a8da <_dtoa_r+0x1e2>
 800a95a:	2300      	movs	r3, #0
 800a95c:	9309      	str	r3, [sp, #36]	; 0x24
 800a95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a960:	2b00      	cmp	r3, #0
 800a962:	dc52      	bgt.n	800aa0a <_dtoa_r+0x312>
 800a964:	2301      	movs	r3, #1
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	461a      	mov	r2, r3
 800a96c:	920a      	str	r2, [sp, #40]	; 0x28
 800a96e:	e00b      	b.n	800a988 <_dtoa_r+0x290>
 800a970:	2301      	movs	r3, #1
 800a972:	e7f3      	b.n	800a95c <_dtoa_r+0x264>
 800a974:	2300      	movs	r3, #0
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a97a:	445b      	add	r3, fp
 800a97c:	9301      	str	r3, [sp, #4]
 800a97e:	3301      	adds	r3, #1
 800a980:	2b01      	cmp	r3, #1
 800a982:	9304      	str	r3, [sp, #16]
 800a984:	bfb8      	it	lt
 800a986:	2301      	movlt	r3, #1
 800a988:	69e0      	ldr	r0, [r4, #28]
 800a98a:	2100      	movs	r1, #0
 800a98c:	2204      	movs	r2, #4
 800a98e:	f102 0614 	add.w	r6, r2, #20
 800a992:	429e      	cmp	r6, r3
 800a994:	d93d      	bls.n	800aa12 <_dtoa_r+0x31a>
 800a996:	6041      	str	r1, [r0, #4]
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fd9f 	bl	800b4dc <_Balloc>
 800a99e:	9000      	str	r0, [sp, #0]
 800a9a0:	2800      	cmp	r0, #0
 800a9a2:	d139      	bne.n	800aa18 <_dtoa_r+0x320>
 800a9a4:	4b16      	ldr	r3, [pc, #88]	; (800aa00 <_dtoa_r+0x308>)
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	f240 11af 	movw	r1, #431	; 0x1af
 800a9ac:	e6bd      	b.n	800a72a <_dtoa_r+0x32>
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e7e1      	b.n	800a976 <_dtoa_r+0x27e>
 800a9b2:	2501      	movs	r5, #1
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	9307      	str	r3, [sp, #28]
 800a9b8:	9509      	str	r5, [sp, #36]	; 0x24
 800a9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800a9be:	9301      	str	r3, [sp, #4]
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	2312      	movs	r3, #18
 800a9c6:	e7d1      	b.n	800a96c <_dtoa_r+0x274>
 800a9c8:	636f4361 	.word	0x636f4361
 800a9cc:	3fd287a7 	.word	0x3fd287a7
 800a9d0:	8b60c8b3 	.word	0x8b60c8b3
 800a9d4:	3fc68a28 	.word	0x3fc68a28
 800a9d8:	509f79fb 	.word	0x509f79fb
 800a9dc:	3fd34413 	.word	0x3fd34413
 800a9e0:	0800d23d 	.word	0x0800d23d
 800a9e4:	0800d254 	.word	0x0800d254
 800a9e8:	7ff00000 	.word	0x7ff00000
 800a9ec:	0800d239 	.word	0x0800d239
 800a9f0:	0800d230 	.word	0x0800d230
 800a9f4:	0800d20d 	.word	0x0800d20d
 800a9f8:	3ff80000 	.word	0x3ff80000
 800a9fc:	0800d340 	.word	0x0800d340
 800aa00:	0800d2ac 	.word	0x0800d2ac
 800aa04:	2301      	movs	r3, #1
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	e7d7      	b.n	800a9ba <_dtoa_r+0x2c2>
 800aa0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa0c:	9301      	str	r3, [sp, #4]
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	e7ba      	b.n	800a988 <_dtoa_r+0x290>
 800aa12:	3101      	adds	r1, #1
 800aa14:	0052      	lsls	r2, r2, #1
 800aa16:	e7ba      	b.n	800a98e <_dtoa_r+0x296>
 800aa18:	69e3      	ldr	r3, [r4, #28]
 800aa1a:	9a00      	ldr	r2, [sp, #0]
 800aa1c:	601a      	str	r2, [r3, #0]
 800aa1e:	9b04      	ldr	r3, [sp, #16]
 800aa20:	2b0e      	cmp	r3, #14
 800aa22:	f200 80a8 	bhi.w	800ab76 <_dtoa_r+0x47e>
 800aa26:	2d00      	cmp	r5, #0
 800aa28:	f000 80a5 	beq.w	800ab76 <_dtoa_r+0x47e>
 800aa2c:	f1bb 0f00 	cmp.w	fp, #0
 800aa30:	dd38      	ble.n	800aaa4 <_dtoa_r+0x3ac>
 800aa32:	4bc0      	ldr	r3, [pc, #768]	; (800ad34 <_dtoa_r+0x63c>)
 800aa34:	f00b 020f 	and.w	r2, fp, #15
 800aa38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aa40:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aa44:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aa48:	d019      	beq.n	800aa7e <_dtoa_r+0x386>
 800aa4a:	4bbb      	ldr	r3, [pc, #748]	; (800ad38 <_dtoa_r+0x640>)
 800aa4c:	ec51 0b18 	vmov	r0, r1, d8
 800aa50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa54:	f7f5 ff22 	bl	800089c <__aeabi_ddiv>
 800aa58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa5c:	f008 080f 	and.w	r8, r8, #15
 800aa60:	2503      	movs	r5, #3
 800aa62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800ad38 <_dtoa_r+0x640>
 800aa66:	f1b8 0f00 	cmp.w	r8, #0
 800aa6a:	d10a      	bne.n	800aa82 <_dtoa_r+0x38a>
 800aa6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa70:	4632      	mov	r2, r6
 800aa72:	463b      	mov	r3, r7
 800aa74:	f7f5 ff12 	bl	800089c <__aeabi_ddiv>
 800aa78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa7c:	e02b      	b.n	800aad6 <_dtoa_r+0x3de>
 800aa7e:	2502      	movs	r5, #2
 800aa80:	e7ef      	b.n	800aa62 <_dtoa_r+0x36a>
 800aa82:	f018 0f01 	tst.w	r8, #1
 800aa86:	d008      	beq.n	800aa9a <_dtoa_r+0x3a2>
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800aa90:	f7f5 fdda 	bl	8000648 <__aeabi_dmul>
 800aa94:	3501      	adds	r5, #1
 800aa96:	4606      	mov	r6, r0
 800aa98:	460f      	mov	r7, r1
 800aa9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aa9e:	f109 0908 	add.w	r9, r9, #8
 800aaa2:	e7e0      	b.n	800aa66 <_dtoa_r+0x36e>
 800aaa4:	f000 809f 	beq.w	800abe6 <_dtoa_r+0x4ee>
 800aaa8:	f1cb 0600 	rsb	r6, fp, #0
 800aaac:	4ba1      	ldr	r3, [pc, #644]	; (800ad34 <_dtoa_r+0x63c>)
 800aaae:	4fa2      	ldr	r7, [pc, #648]	; (800ad38 <_dtoa_r+0x640>)
 800aab0:	f006 020f 	and.w	r2, r6, #15
 800aab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	ec51 0b18 	vmov	r0, r1, d8
 800aac0:	f7f5 fdc2 	bl	8000648 <__aeabi_dmul>
 800aac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aac8:	1136      	asrs	r6, r6, #4
 800aaca:	2300      	movs	r3, #0
 800aacc:	2502      	movs	r5, #2
 800aace:	2e00      	cmp	r6, #0
 800aad0:	d17e      	bne.n	800abd0 <_dtoa_r+0x4d8>
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d1d0      	bne.n	800aa78 <_dtoa_r+0x380>
 800aad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aad8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	f000 8084 	beq.w	800abea <_dtoa_r+0x4f2>
 800aae2:	4b96      	ldr	r3, [pc, #600]	; (800ad3c <_dtoa_r+0x644>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	4640      	mov	r0, r8
 800aae8:	4649      	mov	r1, r9
 800aaea:	f7f6 f81f 	bl	8000b2c <__aeabi_dcmplt>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d07b      	beq.n	800abea <_dtoa_r+0x4f2>
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d078      	beq.n	800abea <_dtoa_r+0x4f2>
 800aaf8:	9b01      	ldr	r3, [sp, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	dd39      	ble.n	800ab72 <_dtoa_r+0x47a>
 800aafe:	4b90      	ldr	r3, [pc, #576]	; (800ad40 <_dtoa_r+0x648>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f7f5 fd9f 	bl	8000648 <__aeabi_dmul>
 800ab0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab0e:	9e01      	ldr	r6, [sp, #4]
 800ab10:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab14:	3501      	adds	r5, #1
 800ab16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f7f5 fd2a 	bl	8000574 <__aeabi_i2d>
 800ab20:	4642      	mov	r2, r8
 800ab22:	464b      	mov	r3, r9
 800ab24:	f7f5 fd90 	bl	8000648 <__aeabi_dmul>
 800ab28:	4b86      	ldr	r3, [pc, #536]	; (800ad44 <_dtoa_r+0x64c>)
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f7f5 fbd6 	bl	80002dc <__adddf3>
 800ab30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	9303      	str	r3, [sp, #12]
 800ab3a:	2e00      	cmp	r6, #0
 800ab3c:	d158      	bne.n	800abf0 <_dtoa_r+0x4f8>
 800ab3e:	4b82      	ldr	r3, [pc, #520]	; (800ad48 <_dtoa_r+0x650>)
 800ab40:	2200      	movs	r2, #0
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fbc7 	bl	80002d8 <__aeabi_dsub>
 800ab4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab4e:	4680      	mov	r8, r0
 800ab50:	4689      	mov	r9, r1
 800ab52:	f7f6 f809 	bl	8000b68 <__aeabi_dcmpgt>
 800ab56:	2800      	cmp	r0, #0
 800ab58:	f040 8296 	bne.w	800b088 <_dtoa_r+0x990>
 800ab5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800ab60:	4640      	mov	r0, r8
 800ab62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab66:	4649      	mov	r1, r9
 800ab68:	f7f5 ffe0 	bl	8000b2c <__aeabi_dcmplt>
 800ab6c:	2800      	cmp	r0, #0
 800ab6e:	f040 8289 	bne.w	800b084 <_dtoa_r+0x98c>
 800ab72:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ab76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f2c0 814e 	blt.w	800ae1a <_dtoa_r+0x722>
 800ab7e:	f1bb 0f0e 	cmp.w	fp, #14
 800ab82:	f300 814a 	bgt.w	800ae1a <_dtoa_r+0x722>
 800ab86:	4b6b      	ldr	r3, [pc, #428]	; (800ad34 <_dtoa_r+0x63c>)
 800ab88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ab8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	f280 80dc 	bge.w	800ad50 <_dtoa_r+0x658>
 800ab98:	9b04      	ldr	r3, [sp, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	f300 80d8 	bgt.w	800ad50 <_dtoa_r+0x658>
 800aba0:	f040 826f 	bne.w	800b082 <_dtoa_r+0x98a>
 800aba4:	4b68      	ldr	r3, [pc, #416]	; (800ad48 <_dtoa_r+0x650>)
 800aba6:	2200      	movs	r2, #0
 800aba8:	4640      	mov	r0, r8
 800abaa:	4649      	mov	r1, r9
 800abac:	f7f5 fd4c 	bl	8000648 <__aeabi_dmul>
 800abb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abb4:	f7f5 ffce 	bl	8000b54 <__aeabi_dcmpge>
 800abb8:	9e04      	ldr	r6, [sp, #16]
 800abba:	4637      	mov	r7, r6
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f040 8245 	bne.w	800b04c <_dtoa_r+0x954>
 800abc2:	9d00      	ldr	r5, [sp, #0]
 800abc4:	2331      	movs	r3, #49	; 0x31
 800abc6:	f805 3b01 	strb.w	r3, [r5], #1
 800abca:	f10b 0b01 	add.w	fp, fp, #1
 800abce:	e241      	b.n	800b054 <_dtoa_r+0x95c>
 800abd0:	07f2      	lsls	r2, r6, #31
 800abd2:	d505      	bpl.n	800abe0 <_dtoa_r+0x4e8>
 800abd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abd8:	f7f5 fd36 	bl	8000648 <__aeabi_dmul>
 800abdc:	3501      	adds	r5, #1
 800abde:	2301      	movs	r3, #1
 800abe0:	1076      	asrs	r6, r6, #1
 800abe2:	3708      	adds	r7, #8
 800abe4:	e773      	b.n	800aace <_dtoa_r+0x3d6>
 800abe6:	2502      	movs	r5, #2
 800abe8:	e775      	b.n	800aad6 <_dtoa_r+0x3de>
 800abea:	9e04      	ldr	r6, [sp, #16]
 800abec:	465f      	mov	r7, fp
 800abee:	e792      	b.n	800ab16 <_dtoa_r+0x41e>
 800abf0:	9900      	ldr	r1, [sp, #0]
 800abf2:	4b50      	ldr	r3, [pc, #320]	; (800ad34 <_dtoa_r+0x63c>)
 800abf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abf8:	4431      	add	r1, r6
 800abfa:	9102      	str	r1, [sp, #8]
 800abfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800abfe:	eeb0 9a47 	vmov.f32	s18, s14
 800ac02:	eef0 9a67 	vmov.f32	s19, s15
 800ac06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	d044      	beq.n	800ac9c <_dtoa_r+0x5a4>
 800ac12:	494e      	ldr	r1, [pc, #312]	; (800ad4c <_dtoa_r+0x654>)
 800ac14:	2000      	movs	r0, #0
 800ac16:	f7f5 fe41 	bl	800089c <__aeabi_ddiv>
 800ac1a:	ec53 2b19 	vmov	r2, r3, d9
 800ac1e:	f7f5 fb5b 	bl	80002d8 <__aeabi_dsub>
 800ac22:	9d00      	ldr	r5, [sp, #0]
 800ac24:	ec41 0b19 	vmov	d9, r0, r1
 800ac28:	4649      	mov	r1, r9
 800ac2a:	4640      	mov	r0, r8
 800ac2c:	f7f5 ffbc 	bl	8000ba8 <__aeabi_d2iz>
 800ac30:	4606      	mov	r6, r0
 800ac32:	f7f5 fc9f 	bl	8000574 <__aeabi_i2d>
 800ac36:	4602      	mov	r2, r0
 800ac38:	460b      	mov	r3, r1
 800ac3a:	4640      	mov	r0, r8
 800ac3c:	4649      	mov	r1, r9
 800ac3e:	f7f5 fb4b 	bl	80002d8 <__aeabi_dsub>
 800ac42:	3630      	adds	r6, #48	; 0x30
 800ac44:	f805 6b01 	strb.w	r6, [r5], #1
 800ac48:	ec53 2b19 	vmov	r2, r3, d9
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	f7f5 ff6c 	bl	8000b2c <__aeabi_dcmplt>
 800ac54:	2800      	cmp	r0, #0
 800ac56:	d164      	bne.n	800ad22 <_dtoa_r+0x62a>
 800ac58:	4642      	mov	r2, r8
 800ac5a:	464b      	mov	r3, r9
 800ac5c:	4937      	ldr	r1, [pc, #220]	; (800ad3c <_dtoa_r+0x644>)
 800ac5e:	2000      	movs	r0, #0
 800ac60:	f7f5 fb3a 	bl	80002d8 <__aeabi_dsub>
 800ac64:	ec53 2b19 	vmov	r2, r3, d9
 800ac68:	f7f5 ff60 	bl	8000b2c <__aeabi_dcmplt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f040 80b6 	bne.w	800adde <_dtoa_r+0x6e6>
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	429d      	cmp	r5, r3
 800ac76:	f43f af7c 	beq.w	800ab72 <_dtoa_r+0x47a>
 800ac7a:	4b31      	ldr	r3, [pc, #196]	; (800ad40 <_dtoa_r+0x648>)
 800ac7c:	ec51 0b19 	vmov	r0, r1, d9
 800ac80:	2200      	movs	r2, #0
 800ac82:	f7f5 fce1 	bl	8000648 <__aeabi_dmul>
 800ac86:	4b2e      	ldr	r3, [pc, #184]	; (800ad40 <_dtoa_r+0x648>)
 800ac88:	ec41 0b19 	vmov	d9, r0, r1
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	4640      	mov	r0, r8
 800ac90:	4649      	mov	r1, r9
 800ac92:	f7f5 fcd9 	bl	8000648 <__aeabi_dmul>
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	e7c5      	b.n	800ac28 <_dtoa_r+0x530>
 800ac9c:	ec51 0b17 	vmov	r0, r1, d7
 800aca0:	f7f5 fcd2 	bl	8000648 <__aeabi_dmul>
 800aca4:	9b02      	ldr	r3, [sp, #8]
 800aca6:	9d00      	ldr	r5, [sp, #0]
 800aca8:	930f      	str	r3, [sp, #60]	; 0x3c
 800acaa:	ec41 0b19 	vmov	d9, r0, r1
 800acae:	4649      	mov	r1, r9
 800acb0:	4640      	mov	r0, r8
 800acb2:	f7f5 ff79 	bl	8000ba8 <__aeabi_d2iz>
 800acb6:	4606      	mov	r6, r0
 800acb8:	f7f5 fc5c 	bl	8000574 <__aeabi_i2d>
 800acbc:	3630      	adds	r6, #48	; 0x30
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4640      	mov	r0, r8
 800acc4:	4649      	mov	r1, r9
 800acc6:	f7f5 fb07 	bl	80002d8 <__aeabi_dsub>
 800acca:	f805 6b01 	strb.w	r6, [r5], #1
 800acce:	9b02      	ldr	r3, [sp, #8]
 800acd0:	429d      	cmp	r5, r3
 800acd2:	4680      	mov	r8, r0
 800acd4:	4689      	mov	r9, r1
 800acd6:	f04f 0200 	mov.w	r2, #0
 800acda:	d124      	bne.n	800ad26 <_dtoa_r+0x62e>
 800acdc:	4b1b      	ldr	r3, [pc, #108]	; (800ad4c <_dtoa_r+0x654>)
 800acde:	ec51 0b19 	vmov	r0, r1, d9
 800ace2:	f7f5 fafb 	bl	80002dc <__adddf3>
 800ace6:	4602      	mov	r2, r0
 800ace8:	460b      	mov	r3, r1
 800acea:	4640      	mov	r0, r8
 800acec:	4649      	mov	r1, r9
 800acee:	f7f5 ff3b 	bl	8000b68 <__aeabi_dcmpgt>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d173      	bne.n	800adde <_dtoa_r+0x6e6>
 800acf6:	ec53 2b19 	vmov	r2, r3, d9
 800acfa:	4914      	ldr	r1, [pc, #80]	; (800ad4c <_dtoa_r+0x654>)
 800acfc:	2000      	movs	r0, #0
 800acfe:	f7f5 faeb 	bl	80002d8 <__aeabi_dsub>
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 ff0f 	bl	8000b2c <__aeabi_dcmplt>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f43f af2f 	beq.w	800ab72 <_dtoa_r+0x47a>
 800ad14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad16:	1e6b      	subs	r3, r5, #1
 800ad18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad1e:	2b30      	cmp	r3, #48	; 0x30
 800ad20:	d0f8      	beq.n	800ad14 <_dtoa_r+0x61c>
 800ad22:	46bb      	mov	fp, r7
 800ad24:	e04a      	b.n	800adbc <_dtoa_r+0x6c4>
 800ad26:	4b06      	ldr	r3, [pc, #24]	; (800ad40 <_dtoa_r+0x648>)
 800ad28:	f7f5 fc8e 	bl	8000648 <__aeabi_dmul>
 800ad2c:	4680      	mov	r8, r0
 800ad2e:	4689      	mov	r9, r1
 800ad30:	e7bd      	b.n	800acae <_dtoa_r+0x5b6>
 800ad32:	bf00      	nop
 800ad34:	0800d340 	.word	0x0800d340
 800ad38:	0800d318 	.word	0x0800d318
 800ad3c:	3ff00000 	.word	0x3ff00000
 800ad40:	40240000 	.word	0x40240000
 800ad44:	401c0000 	.word	0x401c0000
 800ad48:	40140000 	.word	0x40140000
 800ad4c:	3fe00000 	.word	0x3fe00000
 800ad50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ad54:	9d00      	ldr	r5, [sp, #0]
 800ad56:	4642      	mov	r2, r8
 800ad58:	464b      	mov	r3, r9
 800ad5a:	4630      	mov	r0, r6
 800ad5c:	4639      	mov	r1, r7
 800ad5e:	f7f5 fd9d 	bl	800089c <__aeabi_ddiv>
 800ad62:	f7f5 ff21 	bl	8000ba8 <__aeabi_d2iz>
 800ad66:	9001      	str	r0, [sp, #4]
 800ad68:	f7f5 fc04 	bl	8000574 <__aeabi_i2d>
 800ad6c:	4642      	mov	r2, r8
 800ad6e:	464b      	mov	r3, r9
 800ad70:	f7f5 fc6a 	bl	8000648 <__aeabi_dmul>
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4630      	mov	r0, r6
 800ad7a:	4639      	mov	r1, r7
 800ad7c:	f7f5 faac 	bl	80002d8 <__aeabi_dsub>
 800ad80:	9e01      	ldr	r6, [sp, #4]
 800ad82:	9f04      	ldr	r7, [sp, #16]
 800ad84:	3630      	adds	r6, #48	; 0x30
 800ad86:	f805 6b01 	strb.w	r6, [r5], #1
 800ad8a:	9e00      	ldr	r6, [sp, #0]
 800ad8c:	1bae      	subs	r6, r5, r6
 800ad8e:	42b7      	cmp	r7, r6
 800ad90:	4602      	mov	r2, r0
 800ad92:	460b      	mov	r3, r1
 800ad94:	d134      	bne.n	800ae00 <_dtoa_r+0x708>
 800ad96:	f7f5 faa1 	bl	80002dc <__adddf3>
 800ad9a:	4642      	mov	r2, r8
 800ad9c:	464b      	mov	r3, r9
 800ad9e:	4606      	mov	r6, r0
 800ada0:	460f      	mov	r7, r1
 800ada2:	f7f5 fee1 	bl	8000b68 <__aeabi_dcmpgt>
 800ada6:	b9c8      	cbnz	r0, 800addc <_dtoa_r+0x6e4>
 800ada8:	4642      	mov	r2, r8
 800adaa:	464b      	mov	r3, r9
 800adac:	4630      	mov	r0, r6
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 feb2 	bl	8000b18 <__aeabi_dcmpeq>
 800adb4:	b110      	cbz	r0, 800adbc <_dtoa_r+0x6c4>
 800adb6:	9b01      	ldr	r3, [sp, #4]
 800adb8:	07db      	lsls	r3, r3, #31
 800adba:	d40f      	bmi.n	800addc <_dtoa_r+0x6e4>
 800adbc:	4651      	mov	r1, sl
 800adbe:	4620      	mov	r0, r4
 800adc0:	f000 fbcc 	bl	800b55c <_Bfree>
 800adc4:	2300      	movs	r3, #0
 800adc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800adc8:	702b      	strb	r3, [r5, #0]
 800adca:	f10b 0301 	add.w	r3, fp, #1
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800add2:	2b00      	cmp	r3, #0
 800add4:	f43f ace2 	beq.w	800a79c <_dtoa_r+0xa4>
 800add8:	601d      	str	r5, [r3, #0]
 800adda:	e4df      	b.n	800a79c <_dtoa_r+0xa4>
 800addc:	465f      	mov	r7, fp
 800adde:	462b      	mov	r3, r5
 800ade0:	461d      	mov	r5, r3
 800ade2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ade6:	2a39      	cmp	r2, #57	; 0x39
 800ade8:	d106      	bne.n	800adf8 <_dtoa_r+0x700>
 800adea:	9a00      	ldr	r2, [sp, #0]
 800adec:	429a      	cmp	r2, r3
 800adee:	d1f7      	bne.n	800ade0 <_dtoa_r+0x6e8>
 800adf0:	9900      	ldr	r1, [sp, #0]
 800adf2:	2230      	movs	r2, #48	; 0x30
 800adf4:	3701      	adds	r7, #1
 800adf6:	700a      	strb	r2, [r1, #0]
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	3201      	adds	r2, #1
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e790      	b.n	800ad22 <_dtoa_r+0x62a>
 800ae00:	4ba3      	ldr	r3, [pc, #652]	; (800b090 <_dtoa_r+0x998>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f7f5 fc20 	bl	8000648 <__aeabi_dmul>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	4606      	mov	r6, r0
 800ae0e:	460f      	mov	r7, r1
 800ae10:	f7f5 fe82 	bl	8000b18 <__aeabi_dcmpeq>
 800ae14:	2800      	cmp	r0, #0
 800ae16:	d09e      	beq.n	800ad56 <_dtoa_r+0x65e>
 800ae18:	e7d0      	b.n	800adbc <_dtoa_r+0x6c4>
 800ae1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	f000 80ca 	beq.w	800afb6 <_dtoa_r+0x8be>
 800ae22:	9a07      	ldr	r2, [sp, #28]
 800ae24:	2a01      	cmp	r2, #1
 800ae26:	f300 80ad 	bgt.w	800af84 <_dtoa_r+0x88c>
 800ae2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae2c:	2a00      	cmp	r2, #0
 800ae2e:	f000 80a5 	beq.w	800af7c <_dtoa_r+0x884>
 800ae32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ae36:	9e08      	ldr	r6, [sp, #32]
 800ae38:	9d05      	ldr	r5, [sp, #20]
 800ae3a:	9a05      	ldr	r2, [sp, #20]
 800ae3c:	441a      	add	r2, r3
 800ae3e:	9205      	str	r2, [sp, #20]
 800ae40:	9a06      	ldr	r2, [sp, #24]
 800ae42:	2101      	movs	r1, #1
 800ae44:	441a      	add	r2, r3
 800ae46:	4620      	mov	r0, r4
 800ae48:	9206      	str	r2, [sp, #24]
 800ae4a:	f000 fc3d 	bl	800b6c8 <__i2b>
 800ae4e:	4607      	mov	r7, r0
 800ae50:	b165      	cbz	r5, 800ae6c <_dtoa_r+0x774>
 800ae52:	9b06      	ldr	r3, [sp, #24]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd09      	ble.n	800ae6c <_dtoa_r+0x774>
 800ae58:	42ab      	cmp	r3, r5
 800ae5a:	9a05      	ldr	r2, [sp, #20]
 800ae5c:	bfa8      	it	ge
 800ae5e:	462b      	movge	r3, r5
 800ae60:	1ad2      	subs	r2, r2, r3
 800ae62:	9205      	str	r2, [sp, #20]
 800ae64:	9a06      	ldr	r2, [sp, #24]
 800ae66:	1aed      	subs	r5, r5, r3
 800ae68:	1ad3      	subs	r3, r2, r3
 800ae6a:	9306      	str	r3, [sp, #24]
 800ae6c:	9b08      	ldr	r3, [sp, #32]
 800ae6e:	b1f3      	cbz	r3, 800aeae <_dtoa_r+0x7b6>
 800ae70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	f000 80a3 	beq.w	800afbe <_dtoa_r+0x8c6>
 800ae78:	2e00      	cmp	r6, #0
 800ae7a:	dd10      	ble.n	800ae9e <_dtoa_r+0x7a6>
 800ae7c:	4639      	mov	r1, r7
 800ae7e:	4632      	mov	r2, r6
 800ae80:	4620      	mov	r0, r4
 800ae82:	f000 fce1 	bl	800b848 <__pow5mult>
 800ae86:	4652      	mov	r2, sl
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4607      	mov	r7, r0
 800ae8c:	4620      	mov	r0, r4
 800ae8e:	f000 fc31 	bl	800b6f4 <__multiply>
 800ae92:	4651      	mov	r1, sl
 800ae94:	4680      	mov	r8, r0
 800ae96:	4620      	mov	r0, r4
 800ae98:	f000 fb60 	bl	800b55c <_Bfree>
 800ae9c:	46c2      	mov	sl, r8
 800ae9e:	9b08      	ldr	r3, [sp, #32]
 800aea0:	1b9a      	subs	r2, r3, r6
 800aea2:	d004      	beq.n	800aeae <_dtoa_r+0x7b6>
 800aea4:	4651      	mov	r1, sl
 800aea6:	4620      	mov	r0, r4
 800aea8:	f000 fcce 	bl	800b848 <__pow5mult>
 800aeac:	4682      	mov	sl, r0
 800aeae:	2101      	movs	r1, #1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f000 fc09 	bl	800b6c8 <__i2b>
 800aeb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	4606      	mov	r6, r0
 800aebc:	f340 8081 	ble.w	800afc2 <_dtoa_r+0x8ca>
 800aec0:	461a      	mov	r2, r3
 800aec2:	4601      	mov	r1, r0
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fcbf 	bl	800b848 <__pow5mult>
 800aeca:	9b07      	ldr	r3, [sp, #28]
 800aecc:	2b01      	cmp	r3, #1
 800aece:	4606      	mov	r6, r0
 800aed0:	dd7a      	ble.n	800afc8 <_dtoa_r+0x8d0>
 800aed2:	f04f 0800 	mov.w	r8, #0
 800aed6:	6933      	ldr	r3, [r6, #16]
 800aed8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aedc:	6918      	ldr	r0, [r3, #16]
 800aede:	f000 fba5 	bl	800b62c <__hi0bits>
 800aee2:	f1c0 0020 	rsb	r0, r0, #32
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	4418      	add	r0, r3
 800aeea:	f010 001f 	ands.w	r0, r0, #31
 800aeee:	f000 8094 	beq.w	800b01a <_dtoa_r+0x922>
 800aef2:	f1c0 0320 	rsb	r3, r0, #32
 800aef6:	2b04      	cmp	r3, #4
 800aef8:	f340 8085 	ble.w	800b006 <_dtoa_r+0x90e>
 800aefc:	9b05      	ldr	r3, [sp, #20]
 800aefe:	f1c0 001c 	rsb	r0, r0, #28
 800af02:	4403      	add	r3, r0
 800af04:	9305      	str	r3, [sp, #20]
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	4403      	add	r3, r0
 800af0a:	4405      	add	r5, r0
 800af0c:	9306      	str	r3, [sp, #24]
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	2b00      	cmp	r3, #0
 800af12:	dd05      	ble.n	800af20 <_dtoa_r+0x828>
 800af14:	4651      	mov	r1, sl
 800af16:	461a      	mov	r2, r3
 800af18:	4620      	mov	r0, r4
 800af1a:	f000 fcef 	bl	800b8fc <__lshift>
 800af1e:	4682      	mov	sl, r0
 800af20:	9b06      	ldr	r3, [sp, #24]
 800af22:	2b00      	cmp	r3, #0
 800af24:	dd05      	ble.n	800af32 <_dtoa_r+0x83a>
 800af26:	4631      	mov	r1, r6
 800af28:	461a      	mov	r2, r3
 800af2a:	4620      	mov	r0, r4
 800af2c:	f000 fce6 	bl	800b8fc <__lshift>
 800af30:	4606      	mov	r6, r0
 800af32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af34:	2b00      	cmp	r3, #0
 800af36:	d072      	beq.n	800b01e <_dtoa_r+0x926>
 800af38:	4631      	mov	r1, r6
 800af3a:	4650      	mov	r0, sl
 800af3c:	f000 fd4a 	bl	800b9d4 <__mcmp>
 800af40:	2800      	cmp	r0, #0
 800af42:	da6c      	bge.n	800b01e <_dtoa_r+0x926>
 800af44:	2300      	movs	r3, #0
 800af46:	4651      	mov	r1, sl
 800af48:	220a      	movs	r2, #10
 800af4a:	4620      	mov	r0, r4
 800af4c:	f000 fb28 	bl	800b5a0 <__multadd>
 800af50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af56:	4682      	mov	sl, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 81b0 	beq.w	800b2be <_dtoa_r+0xbc6>
 800af5e:	2300      	movs	r3, #0
 800af60:	4639      	mov	r1, r7
 800af62:	220a      	movs	r2, #10
 800af64:	4620      	mov	r0, r4
 800af66:	f000 fb1b 	bl	800b5a0 <__multadd>
 800af6a:	9b01      	ldr	r3, [sp, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	4607      	mov	r7, r0
 800af70:	f300 8096 	bgt.w	800b0a0 <_dtoa_r+0x9a8>
 800af74:	9b07      	ldr	r3, [sp, #28]
 800af76:	2b02      	cmp	r3, #2
 800af78:	dc59      	bgt.n	800b02e <_dtoa_r+0x936>
 800af7a:	e091      	b.n	800b0a0 <_dtoa_r+0x9a8>
 800af7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af82:	e758      	b.n	800ae36 <_dtoa_r+0x73e>
 800af84:	9b04      	ldr	r3, [sp, #16]
 800af86:	1e5e      	subs	r6, r3, #1
 800af88:	9b08      	ldr	r3, [sp, #32]
 800af8a:	42b3      	cmp	r3, r6
 800af8c:	bfbf      	itttt	lt
 800af8e:	9b08      	ldrlt	r3, [sp, #32]
 800af90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800af92:	9608      	strlt	r6, [sp, #32]
 800af94:	1af3      	sublt	r3, r6, r3
 800af96:	bfb4      	ite	lt
 800af98:	18d2      	addlt	r2, r2, r3
 800af9a:	1b9e      	subge	r6, r3, r6
 800af9c:	9b04      	ldr	r3, [sp, #16]
 800af9e:	bfbc      	itt	lt
 800afa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800afa2:	2600      	movlt	r6, #0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	bfb7      	itett	lt
 800afa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800afac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800afb0:	1a9d      	sublt	r5, r3, r2
 800afb2:	2300      	movlt	r3, #0
 800afb4:	e741      	b.n	800ae3a <_dtoa_r+0x742>
 800afb6:	9e08      	ldr	r6, [sp, #32]
 800afb8:	9d05      	ldr	r5, [sp, #20]
 800afba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800afbc:	e748      	b.n	800ae50 <_dtoa_r+0x758>
 800afbe:	9a08      	ldr	r2, [sp, #32]
 800afc0:	e770      	b.n	800aea4 <_dtoa_r+0x7ac>
 800afc2:	9b07      	ldr	r3, [sp, #28]
 800afc4:	2b01      	cmp	r3, #1
 800afc6:	dc19      	bgt.n	800affc <_dtoa_r+0x904>
 800afc8:	9b02      	ldr	r3, [sp, #8]
 800afca:	b9bb      	cbnz	r3, 800affc <_dtoa_r+0x904>
 800afcc:	9b03      	ldr	r3, [sp, #12]
 800afce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afd2:	b99b      	cbnz	r3, 800affc <_dtoa_r+0x904>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afda:	0d1b      	lsrs	r3, r3, #20
 800afdc:	051b      	lsls	r3, r3, #20
 800afde:	b183      	cbz	r3, 800b002 <_dtoa_r+0x90a>
 800afe0:	9b05      	ldr	r3, [sp, #20]
 800afe2:	3301      	adds	r3, #1
 800afe4:	9305      	str	r3, [sp, #20]
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	3301      	adds	r3, #1
 800afea:	9306      	str	r3, [sp, #24]
 800afec:	f04f 0801 	mov.w	r8, #1
 800aff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	f47f af6f 	bne.w	800aed6 <_dtoa_r+0x7de>
 800aff8:	2001      	movs	r0, #1
 800affa:	e774      	b.n	800aee6 <_dtoa_r+0x7ee>
 800affc:	f04f 0800 	mov.w	r8, #0
 800b000:	e7f6      	b.n	800aff0 <_dtoa_r+0x8f8>
 800b002:	4698      	mov	r8, r3
 800b004:	e7f4      	b.n	800aff0 <_dtoa_r+0x8f8>
 800b006:	d082      	beq.n	800af0e <_dtoa_r+0x816>
 800b008:	9a05      	ldr	r2, [sp, #20]
 800b00a:	331c      	adds	r3, #28
 800b00c:	441a      	add	r2, r3
 800b00e:	9205      	str	r2, [sp, #20]
 800b010:	9a06      	ldr	r2, [sp, #24]
 800b012:	441a      	add	r2, r3
 800b014:	441d      	add	r5, r3
 800b016:	9206      	str	r2, [sp, #24]
 800b018:	e779      	b.n	800af0e <_dtoa_r+0x816>
 800b01a:	4603      	mov	r3, r0
 800b01c:	e7f4      	b.n	800b008 <_dtoa_r+0x910>
 800b01e:	9b04      	ldr	r3, [sp, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	dc37      	bgt.n	800b094 <_dtoa_r+0x99c>
 800b024:	9b07      	ldr	r3, [sp, #28]
 800b026:	2b02      	cmp	r3, #2
 800b028:	dd34      	ble.n	800b094 <_dtoa_r+0x99c>
 800b02a:	9b04      	ldr	r3, [sp, #16]
 800b02c:	9301      	str	r3, [sp, #4]
 800b02e:	9b01      	ldr	r3, [sp, #4]
 800b030:	b963      	cbnz	r3, 800b04c <_dtoa_r+0x954>
 800b032:	4631      	mov	r1, r6
 800b034:	2205      	movs	r2, #5
 800b036:	4620      	mov	r0, r4
 800b038:	f000 fab2 	bl	800b5a0 <__multadd>
 800b03c:	4601      	mov	r1, r0
 800b03e:	4606      	mov	r6, r0
 800b040:	4650      	mov	r0, sl
 800b042:	f000 fcc7 	bl	800b9d4 <__mcmp>
 800b046:	2800      	cmp	r0, #0
 800b048:	f73f adbb 	bgt.w	800abc2 <_dtoa_r+0x4ca>
 800b04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04e:	9d00      	ldr	r5, [sp, #0]
 800b050:	ea6f 0b03 	mvn.w	fp, r3
 800b054:	f04f 0800 	mov.w	r8, #0
 800b058:	4631      	mov	r1, r6
 800b05a:	4620      	mov	r0, r4
 800b05c:	f000 fa7e 	bl	800b55c <_Bfree>
 800b060:	2f00      	cmp	r7, #0
 800b062:	f43f aeab 	beq.w	800adbc <_dtoa_r+0x6c4>
 800b066:	f1b8 0f00 	cmp.w	r8, #0
 800b06a:	d005      	beq.n	800b078 <_dtoa_r+0x980>
 800b06c:	45b8      	cmp	r8, r7
 800b06e:	d003      	beq.n	800b078 <_dtoa_r+0x980>
 800b070:	4641      	mov	r1, r8
 800b072:	4620      	mov	r0, r4
 800b074:	f000 fa72 	bl	800b55c <_Bfree>
 800b078:	4639      	mov	r1, r7
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 fa6e 	bl	800b55c <_Bfree>
 800b080:	e69c      	b.n	800adbc <_dtoa_r+0x6c4>
 800b082:	2600      	movs	r6, #0
 800b084:	4637      	mov	r7, r6
 800b086:	e7e1      	b.n	800b04c <_dtoa_r+0x954>
 800b088:	46bb      	mov	fp, r7
 800b08a:	4637      	mov	r7, r6
 800b08c:	e599      	b.n	800abc2 <_dtoa_r+0x4ca>
 800b08e:	bf00      	nop
 800b090:	40240000 	.word	0x40240000
 800b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	f000 80c8 	beq.w	800b22c <_dtoa_r+0xb34>
 800b09c:	9b04      	ldr	r3, [sp, #16]
 800b09e:	9301      	str	r3, [sp, #4]
 800b0a0:	2d00      	cmp	r5, #0
 800b0a2:	dd05      	ble.n	800b0b0 <_dtoa_r+0x9b8>
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	462a      	mov	r2, r5
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fc27 	bl	800b8fc <__lshift>
 800b0ae:	4607      	mov	r7, r0
 800b0b0:	f1b8 0f00 	cmp.w	r8, #0
 800b0b4:	d05b      	beq.n	800b16e <_dtoa_r+0xa76>
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	f000 fa0f 	bl	800b4dc <_Balloc>
 800b0be:	4605      	mov	r5, r0
 800b0c0:	b928      	cbnz	r0, 800b0ce <_dtoa_r+0x9d6>
 800b0c2:	4b83      	ldr	r3, [pc, #524]	; (800b2d0 <_dtoa_r+0xbd8>)
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0ca:	f7ff bb2e 	b.w	800a72a <_dtoa_r+0x32>
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	3202      	adds	r2, #2
 800b0d2:	0092      	lsls	r2, r2, #2
 800b0d4:	f107 010c 	add.w	r1, r7, #12
 800b0d8:	300c      	adds	r0, #12
 800b0da:	f001 f801 	bl	800c0e0 <memcpy>
 800b0de:	2201      	movs	r2, #1
 800b0e0:	4629      	mov	r1, r5
 800b0e2:	4620      	mov	r0, r4
 800b0e4:	f000 fc0a 	bl	800b8fc <__lshift>
 800b0e8:	9b00      	ldr	r3, [sp, #0]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	9308      	str	r3, [sp, #32]
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	f003 0301 	and.w	r3, r3, #1
 800b0fc:	46b8      	mov	r8, r7
 800b0fe:	9306      	str	r3, [sp, #24]
 800b100:	4607      	mov	r7, r0
 800b102:	9b04      	ldr	r3, [sp, #16]
 800b104:	4631      	mov	r1, r6
 800b106:	3b01      	subs	r3, #1
 800b108:	4650      	mov	r0, sl
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	f7ff fa69 	bl	800a5e2 <quorem>
 800b110:	4641      	mov	r1, r8
 800b112:	9002      	str	r0, [sp, #8]
 800b114:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b118:	4650      	mov	r0, sl
 800b11a:	f000 fc5b 	bl	800b9d4 <__mcmp>
 800b11e:	463a      	mov	r2, r7
 800b120:	9005      	str	r0, [sp, #20]
 800b122:	4631      	mov	r1, r6
 800b124:	4620      	mov	r0, r4
 800b126:	f000 fc71 	bl	800ba0c <__mdiff>
 800b12a:	68c2      	ldr	r2, [r0, #12]
 800b12c:	4605      	mov	r5, r0
 800b12e:	bb02      	cbnz	r2, 800b172 <_dtoa_r+0xa7a>
 800b130:	4601      	mov	r1, r0
 800b132:	4650      	mov	r0, sl
 800b134:	f000 fc4e 	bl	800b9d4 <__mcmp>
 800b138:	4602      	mov	r2, r0
 800b13a:	4629      	mov	r1, r5
 800b13c:	4620      	mov	r0, r4
 800b13e:	9209      	str	r2, [sp, #36]	; 0x24
 800b140:	f000 fa0c 	bl	800b55c <_Bfree>
 800b144:	9b07      	ldr	r3, [sp, #28]
 800b146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b148:	9d04      	ldr	r5, [sp, #16]
 800b14a:	ea43 0102 	orr.w	r1, r3, r2
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	4319      	orrs	r1, r3
 800b152:	d110      	bne.n	800b176 <_dtoa_r+0xa7e>
 800b154:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b158:	d029      	beq.n	800b1ae <_dtoa_r+0xab6>
 800b15a:	9b05      	ldr	r3, [sp, #20]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	dd02      	ble.n	800b166 <_dtoa_r+0xa6e>
 800b160:	9b02      	ldr	r3, [sp, #8]
 800b162:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	f883 9000 	strb.w	r9, [r3]
 800b16c:	e774      	b.n	800b058 <_dtoa_r+0x960>
 800b16e:	4638      	mov	r0, r7
 800b170:	e7ba      	b.n	800b0e8 <_dtoa_r+0x9f0>
 800b172:	2201      	movs	r2, #1
 800b174:	e7e1      	b.n	800b13a <_dtoa_r+0xa42>
 800b176:	9b05      	ldr	r3, [sp, #20]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	db04      	blt.n	800b186 <_dtoa_r+0xa8e>
 800b17c:	9907      	ldr	r1, [sp, #28]
 800b17e:	430b      	orrs	r3, r1
 800b180:	9906      	ldr	r1, [sp, #24]
 800b182:	430b      	orrs	r3, r1
 800b184:	d120      	bne.n	800b1c8 <_dtoa_r+0xad0>
 800b186:	2a00      	cmp	r2, #0
 800b188:	dded      	ble.n	800b166 <_dtoa_r+0xa6e>
 800b18a:	4651      	mov	r1, sl
 800b18c:	2201      	movs	r2, #1
 800b18e:	4620      	mov	r0, r4
 800b190:	f000 fbb4 	bl	800b8fc <__lshift>
 800b194:	4631      	mov	r1, r6
 800b196:	4682      	mov	sl, r0
 800b198:	f000 fc1c 	bl	800b9d4 <__mcmp>
 800b19c:	2800      	cmp	r0, #0
 800b19e:	dc03      	bgt.n	800b1a8 <_dtoa_r+0xab0>
 800b1a0:	d1e1      	bne.n	800b166 <_dtoa_r+0xa6e>
 800b1a2:	f019 0f01 	tst.w	r9, #1
 800b1a6:	d0de      	beq.n	800b166 <_dtoa_r+0xa6e>
 800b1a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1ac:	d1d8      	bne.n	800b160 <_dtoa_r+0xa68>
 800b1ae:	9a01      	ldr	r2, [sp, #4]
 800b1b0:	2339      	movs	r3, #57	; 0x39
 800b1b2:	7013      	strb	r3, [r2, #0]
 800b1b4:	462b      	mov	r3, r5
 800b1b6:	461d      	mov	r5, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b1be:	2a39      	cmp	r2, #57	; 0x39
 800b1c0:	d06c      	beq.n	800b29c <_dtoa_r+0xba4>
 800b1c2:	3201      	adds	r2, #1
 800b1c4:	701a      	strb	r2, [r3, #0]
 800b1c6:	e747      	b.n	800b058 <_dtoa_r+0x960>
 800b1c8:	2a00      	cmp	r2, #0
 800b1ca:	dd07      	ble.n	800b1dc <_dtoa_r+0xae4>
 800b1cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1d0:	d0ed      	beq.n	800b1ae <_dtoa_r+0xab6>
 800b1d2:	9a01      	ldr	r2, [sp, #4]
 800b1d4:	f109 0301 	add.w	r3, r9, #1
 800b1d8:	7013      	strb	r3, [r2, #0]
 800b1da:	e73d      	b.n	800b058 <_dtoa_r+0x960>
 800b1dc:	9b04      	ldr	r3, [sp, #16]
 800b1de:	9a08      	ldr	r2, [sp, #32]
 800b1e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d043      	beq.n	800b270 <_dtoa_r+0xb78>
 800b1e8:	4651      	mov	r1, sl
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	220a      	movs	r2, #10
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f000 f9d6 	bl	800b5a0 <__multadd>
 800b1f4:	45b8      	cmp	r8, r7
 800b1f6:	4682      	mov	sl, r0
 800b1f8:	f04f 0300 	mov.w	r3, #0
 800b1fc:	f04f 020a 	mov.w	r2, #10
 800b200:	4641      	mov	r1, r8
 800b202:	4620      	mov	r0, r4
 800b204:	d107      	bne.n	800b216 <_dtoa_r+0xb1e>
 800b206:	f000 f9cb 	bl	800b5a0 <__multadd>
 800b20a:	4680      	mov	r8, r0
 800b20c:	4607      	mov	r7, r0
 800b20e:	9b04      	ldr	r3, [sp, #16]
 800b210:	3301      	adds	r3, #1
 800b212:	9304      	str	r3, [sp, #16]
 800b214:	e775      	b.n	800b102 <_dtoa_r+0xa0a>
 800b216:	f000 f9c3 	bl	800b5a0 <__multadd>
 800b21a:	4639      	mov	r1, r7
 800b21c:	4680      	mov	r8, r0
 800b21e:	2300      	movs	r3, #0
 800b220:	220a      	movs	r2, #10
 800b222:	4620      	mov	r0, r4
 800b224:	f000 f9bc 	bl	800b5a0 <__multadd>
 800b228:	4607      	mov	r7, r0
 800b22a:	e7f0      	b.n	800b20e <_dtoa_r+0xb16>
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	9d00      	ldr	r5, [sp, #0]
 800b232:	4631      	mov	r1, r6
 800b234:	4650      	mov	r0, sl
 800b236:	f7ff f9d4 	bl	800a5e2 <quorem>
 800b23a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b23e:	9b00      	ldr	r3, [sp, #0]
 800b240:	f805 9b01 	strb.w	r9, [r5], #1
 800b244:	1aea      	subs	r2, r5, r3
 800b246:	9b01      	ldr	r3, [sp, #4]
 800b248:	4293      	cmp	r3, r2
 800b24a:	dd07      	ble.n	800b25c <_dtoa_r+0xb64>
 800b24c:	4651      	mov	r1, sl
 800b24e:	2300      	movs	r3, #0
 800b250:	220a      	movs	r2, #10
 800b252:	4620      	mov	r0, r4
 800b254:	f000 f9a4 	bl	800b5a0 <__multadd>
 800b258:	4682      	mov	sl, r0
 800b25a:	e7ea      	b.n	800b232 <_dtoa_r+0xb3a>
 800b25c:	9b01      	ldr	r3, [sp, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	bfc8      	it	gt
 800b262:	461d      	movgt	r5, r3
 800b264:	9b00      	ldr	r3, [sp, #0]
 800b266:	bfd8      	it	le
 800b268:	2501      	movle	r5, #1
 800b26a:	441d      	add	r5, r3
 800b26c:	f04f 0800 	mov.w	r8, #0
 800b270:	4651      	mov	r1, sl
 800b272:	2201      	movs	r2, #1
 800b274:	4620      	mov	r0, r4
 800b276:	f000 fb41 	bl	800b8fc <__lshift>
 800b27a:	4631      	mov	r1, r6
 800b27c:	4682      	mov	sl, r0
 800b27e:	f000 fba9 	bl	800b9d4 <__mcmp>
 800b282:	2800      	cmp	r0, #0
 800b284:	dc96      	bgt.n	800b1b4 <_dtoa_r+0xabc>
 800b286:	d102      	bne.n	800b28e <_dtoa_r+0xb96>
 800b288:	f019 0f01 	tst.w	r9, #1
 800b28c:	d192      	bne.n	800b1b4 <_dtoa_r+0xabc>
 800b28e:	462b      	mov	r3, r5
 800b290:	461d      	mov	r5, r3
 800b292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b296:	2a30      	cmp	r2, #48	; 0x30
 800b298:	d0fa      	beq.n	800b290 <_dtoa_r+0xb98>
 800b29a:	e6dd      	b.n	800b058 <_dtoa_r+0x960>
 800b29c:	9a00      	ldr	r2, [sp, #0]
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d189      	bne.n	800b1b6 <_dtoa_r+0xabe>
 800b2a2:	f10b 0b01 	add.w	fp, fp, #1
 800b2a6:	2331      	movs	r3, #49	; 0x31
 800b2a8:	e796      	b.n	800b1d8 <_dtoa_r+0xae0>
 800b2aa:	4b0a      	ldr	r3, [pc, #40]	; (800b2d4 <_dtoa_r+0xbdc>)
 800b2ac:	f7ff ba99 	b.w	800a7e2 <_dtoa_r+0xea>
 800b2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	f47f aa6d 	bne.w	800a792 <_dtoa_r+0x9a>
 800b2b8:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <_dtoa_r+0xbe0>)
 800b2ba:	f7ff ba92 	b.w	800a7e2 <_dtoa_r+0xea>
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	dcb5      	bgt.n	800b230 <_dtoa_r+0xb38>
 800b2c4:	9b07      	ldr	r3, [sp, #28]
 800b2c6:	2b02      	cmp	r3, #2
 800b2c8:	f73f aeb1 	bgt.w	800b02e <_dtoa_r+0x936>
 800b2cc:	e7b0      	b.n	800b230 <_dtoa_r+0xb38>
 800b2ce:	bf00      	nop
 800b2d0:	0800d2ac 	.word	0x0800d2ac
 800b2d4:	0800d20c 	.word	0x0800d20c
 800b2d8:	0800d230 	.word	0x0800d230

0800b2dc <_free_r>:
 800b2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2de:	2900      	cmp	r1, #0
 800b2e0:	d044      	beq.n	800b36c <_free_r+0x90>
 800b2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e6:	9001      	str	r0, [sp, #4]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ee:	bfb8      	it	lt
 800b2f0:	18e4      	addlt	r4, r4, r3
 800b2f2:	f000 f8e7 	bl	800b4c4 <__malloc_lock>
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <_free_r+0x94>)
 800b2f8:	9801      	ldr	r0, [sp, #4]
 800b2fa:	6813      	ldr	r3, [r2, #0]
 800b2fc:	b933      	cbnz	r3, 800b30c <_free_r+0x30>
 800b2fe:	6063      	str	r3, [r4, #4]
 800b300:	6014      	str	r4, [r2, #0]
 800b302:	b003      	add	sp, #12
 800b304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b308:	f000 b8e2 	b.w	800b4d0 <__malloc_unlock>
 800b30c:	42a3      	cmp	r3, r4
 800b30e:	d908      	bls.n	800b322 <_free_r+0x46>
 800b310:	6825      	ldr	r5, [r4, #0]
 800b312:	1961      	adds	r1, r4, r5
 800b314:	428b      	cmp	r3, r1
 800b316:	bf01      	itttt	eq
 800b318:	6819      	ldreq	r1, [r3, #0]
 800b31a:	685b      	ldreq	r3, [r3, #4]
 800b31c:	1949      	addeq	r1, r1, r5
 800b31e:	6021      	streq	r1, [r4, #0]
 800b320:	e7ed      	b.n	800b2fe <_free_r+0x22>
 800b322:	461a      	mov	r2, r3
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	b10b      	cbz	r3, 800b32c <_free_r+0x50>
 800b328:	42a3      	cmp	r3, r4
 800b32a:	d9fa      	bls.n	800b322 <_free_r+0x46>
 800b32c:	6811      	ldr	r1, [r2, #0]
 800b32e:	1855      	adds	r5, r2, r1
 800b330:	42a5      	cmp	r5, r4
 800b332:	d10b      	bne.n	800b34c <_free_r+0x70>
 800b334:	6824      	ldr	r4, [r4, #0]
 800b336:	4421      	add	r1, r4
 800b338:	1854      	adds	r4, r2, r1
 800b33a:	42a3      	cmp	r3, r4
 800b33c:	6011      	str	r1, [r2, #0]
 800b33e:	d1e0      	bne.n	800b302 <_free_r+0x26>
 800b340:	681c      	ldr	r4, [r3, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	6053      	str	r3, [r2, #4]
 800b346:	440c      	add	r4, r1
 800b348:	6014      	str	r4, [r2, #0]
 800b34a:	e7da      	b.n	800b302 <_free_r+0x26>
 800b34c:	d902      	bls.n	800b354 <_free_r+0x78>
 800b34e:	230c      	movs	r3, #12
 800b350:	6003      	str	r3, [r0, #0]
 800b352:	e7d6      	b.n	800b302 <_free_r+0x26>
 800b354:	6825      	ldr	r5, [r4, #0]
 800b356:	1961      	adds	r1, r4, r5
 800b358:	428b      	cmp	r3, r1
 800b35a:	bf04      	itt	eq
 800b35c:	6819      	ldreq	r1, [r3, #0]
 800b35e:	685b      	ldreq	r3, [r3, #4]
 800b360:	6063      	str	r3, [r4, #4]
 800b362:	bf04      	itt	eq
 800b364:	1949      	addeq	r1, r1, r5
 800b366:	6021      	streq	r1, [r4, #0]
 800b368:	6054      	str	r4, [r2, #4]
 800b36a:	e7ca      	b.n	800b302 <_free_r+0x26>
 800b36c:	b003      	add	sp, #12
 800b36e:	bd30      	pop	{r4, r5, pc}
 800b370:	200022b4 	.word	0x200022b4

0800b374 <malloc>:
 800b374:	4b02      	ldr	r3, [pc, #8]	; (800b380 <malloc+0xc>)
 800b376:	4601      	mov	r1, r0
 800b378:	6818      	ldr	r0, [r3, #0]
 800b37a:	f000 b823 	b.w	800b3c4 <_malloc_r>
 800b37e:	bf00      	nop
 800b380:	20000068 	.word	0x20000068

0800b384 <sbrk_aligned>:
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4e0e      	ldr	r6, [pc, #56]	; (800b3c0 <sbrk_aligned+0x3c>)
 800b388:	460c      	mov	r4, r1
 800b38a:	6831      	ldr	r1, [r6, #0]
 800b38c:	4605      	mov	r5, r0
 800b38e:	b911      	cbnz	r1, 800b396 <sbrk_aligned+0x12>
 800b390:	f000 fe96 	bl	800c0c0 <_sbrk_r>
 800b394:	6030      	str	r0, [r6, #0]
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f000 fe91 	bl	800c0c0 <_sbrk_r>
 800b39e:	1c43      	adds	r3, r0, #1
 800b3a0:	d00a      	beq.n	800b3b8 <sbrk_aligned+0x34>
 800b3a2:	1cc4      	adds	r4, r0, #3
 800b3a4:	f024 0403 	bic.w	r4, r4, #3
 800b3a8:	42a0      	cmp	r0, r4
 800b3aa:	d007      	beq.n	800b3bc <sbrk_aligned+0x38>
 800b3ac:	1a21      	subs	r1, r4, r0
 800b3ae:	4628      	mov	r0, r5
 800b3b0:	f000 fe86 	bl	800c0c0 <_sbrk_r>
 800b3b4:	3001      	adds	r0, #1
 800b3b6:	d101      	bne.n	800b3bc <sbrk_aligned+0x38>
 800b3b8:	f04f 34ff 	mov.w	r4, #4294967295
 800b3bc:	4620      	mov	r0, r4
 800b3be:	bd70      	pop	{r4, r5, r6, pc}
 800b3c0:	200022b8 	.word	0x200022b8

0800b3c4 <_malloc_r>:
 800b3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3c8:	1ccd      	adds	r5, r1, #3
 800b3ca:	f025 0503 	bic.w	r5, r5, #3
 800b3ce:	3508      	adds	r5, #8
 800b3d0:	2d0c      	cmp	r5, #12
 800b3d2:	bf38      	it	cc
 800b3d4:	250c      	movcc	r5, #12
 800b3d6:	2d00      	cmp	r5, #0
 800b3d8:	4607      	mov	r7, r0
 800b3da:	db01      	blt.n	800b3e0 <_malloc_r+0x1c>
 800b3dc:	42a9      	cmp	r1, r5
 800b3de:	d905      	bls.n	800b3ec <_malloc_r+0x28>
 800b3e0:	230c      	movs	r3, #12
 800b3e2:	603b      	str	r3, [r7, #0]
 800b3e4:	2600      	movs	r6, #0
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b4c0 <_malloc_r+0xfc>
 800b3f0:	f000 f868 	bl	800b4c4 <__malloc_lock>
 800b3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b3f8:	461c      	mov	r4, r3
 800b3fa:	bb5c      	cbnz	r4, 800b454 <_malloc_r+0x90>
 800b3fc:	4629      	mov	r1, r5
 800b3fe:	4638      	mov	r0, r7
 800b400:	f7ff ffc0 	bl	800b384 <sbrk_aligned>
 800b404:	1c43      	adds	r3, r0, #1
 800b406:	4604      	mov	r4, r0
 800b408:	d155      	bne.n	800b4b6 <_malloc_r+0xf2>
 800b40a:	f8d8 4000 	ldr.w	r4, [r8]
 800b40e:	4626      	mov	r6, r4
 800b410:	2e00      	cmp	r6, #0
 800b412:	d145      	bne.n	800b4a0 <_malloc_r+0xdc>
 800b414:	2c00      	cmp	r4, #0
 800b416:	d048      	beq.n	800b4aa <_malloc_r+0xe6>
 800b418:	6823      	ldr	r3, [r4, #0]
 800b41a:	4631      	mov	r1, r6
 800b41c:	4638      	mov	r0, r7
 800b41e:	eb04 0903 	add.w	r9, r4, r3
 800b422:	f000 fe4d 	bl	800c0c0 <_sbrk_r>
 800b426:	4581      	cmp	r9, r0
 800b428:	d13f      	bne.n	800b4aa <_malloc_r+0xe6>
 800b42a:	6821      	ldr	r1, [r4, #0]
 800b42c:	1a6d      	subs	r5, r5, r1
 800b42e:	4629      	mov	r1, r5
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff ffa7 	bl	800b384 <sbrk_aligned>
 800b436:	3001      	adds	r0, #1
 800b438:	d037      	beq.n	800b4aa <_malloc_r+0xe6>
 800b43a:	6823      	ldr	r3, [r4, #0]
 800b43c:	442b      	add	r3, r5
 800b43e:	6023      	str	r3, [r4, #0]
 800b440:	f8d8 3000 	ldr.w	r3, [r8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d038      	beq.n	800b4ba <_malloc_r+0xf6>
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	42a2      	cmp	r2, r4
 800b44c:	d12b      	bne.n	800b4a6 <_malloc_r+0xe2>
 800b44e:	2200      	movs	r2, #0
 800b450:	605a      	str	r2, [r3, #4]
 800b452:	e00f      	b.n	800b474 <_malloc_r+0xb0>
 800b454:	6822      	ldr	r2, [r4, #0]
 800b456:	1b52      	subs	r2, r2, r5
 800b458:	d41f      	bmi.n	800b49a <_malloc_r+0xd6>
 800b45a:	2a0b      	cmp	r2, #11
 800b45c:	d917      	bls.n	800b48e <_malloc_r+0xca>
 800b45e:	1961      	adds	r1, r4, r5
 800b460:	42a3      	cmp	r3, r4
 800b462:	6025      	str	r5, [r4, #0]
 800b464:	bf18      	it	ne
 800b466:	6059      	strne	r1, [r3, #4]
 800b468:	6863      	ldr	r3, [r4, #4]
 800b46a:	bf08      	it	eq
 800b46c:	f8c8 1000 	streq.w	r1, [r8]
 800b470:	5162      	str	r2, [r4, r5]
 800b472:	604b      	str	r3, [r1, #4]
 800b474:	4638      	mov	r0, r7
 800b476:	f104 060b 	add.w	r6, r4, #11
 800b47a:	f000 f829 	bl	800b4d0 <__malloc_unlock>
 800b47e:	f026 0607 	bic.w	r6, r6, #7
 800b482:	1d23      	adds	r3, r4, #4
 800b484:	1af2      	subs	r2, r6, r3
 800b486:	d0ae      	beq.n	800b3e6 <_malloc_r+0x22>
 800b488:	1b9b      	subs	r3, r3, r6
 800b48a:	50a3      	str	r3, [r4, r2]
 800b48c:	e7ab      	b.n	800b3e6 <_malloc_r+0x22>
 800b48e:	42a3      	cmp	r3, r4
 800b490:	6862      	ldr	r2, [r4, #4]
 800b492:	d1dd      	bne.n	800b450 <_malloc_r+0x8c>
 800b494:	f8c8 2000 	str.w	r2, [r8]
 800b498:	e7ec      	b.n	800b474 <_malloc_r+0xb0>
 800b49a:	4623      	mov	r3, r4
 800b49c:	6864      	ldr	r4, [r4, #4]
 800b49e:	e7ac      	b.n	800b3fa <_malloc_r+0x36>
 800b4a0:	4634      	mov	r4, r6
 800b4a2:	6876      	ldr	r6, [r6, #4]
 800b4a4:	e7b4      	b.n	800b410 <_malloc_r+0x4c>
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	e7cc      	b.n	800b444 <_malloc_r+0x80>
 800b4aa:	230c      	movs	r3, #12
 800b4ac:	603b      	str	r3, [r7, #0]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	f000 f80e 	bl	800b4d0 <__malloc_unlock>
 800b4b4:	e797      	b.n	800b3e6 <_malloc_r+0x22>
 800b4b6:	6025      	str	r5, [r4, #0]
 800b4b8:	e7dc      	b.n	800b474 <_malloc_r+0xb0>
 800b4ba:	605b      	str	r3, [r3, #4]
 800b4bc:	deff      	udf	#255	; 0xff
 800b4be:	bf00      	nop
 800b4c0:	200022b4 	.word	0x200022b4

0800b4c4 <__malloc_lock>:
 800b4c4:	4801      	ldr	r0, [pc, #4]	; (800b4cc <__malloc_lock+0x8>)
 800b4c6:	f7ff b88a 	b.w	800a5de <__retarget_lock_acquire_recursive>
 800b4ca:	bf00      	nop
 800b4cc:	200022b0 	.word	0x200022b0

0800b4d0 <__malloc_unlock>:
 800b4d0:	4801      	ldr	r0, [pc, #4]	; (800b4d8 <__malloc_unlock+0x8>)
 800b4d2:	f7ff b885 	b.w	800a5e0 <__retarget_lock_release_recursive>
 800b4d6:	bf00      	nop
 800b4d8:	200022b0 	.word	0x200022b0

0800b4dc <_Balloc>:
 800b4dc:	b570      	push	{r4, r5, r6, lr}
 800b4de:	69c6      	ldr	r6, [r0, #28]
 800b4e0:	4604      	mov	r4, r0
 800b4e2:	460d      	mov	r5, r1
 800b4e4:	b976      	cbnz	r6, 800b504 <_Balloc+0x28>
 800b4e6:	2010      	movs	r0, #16
 800b4e8:	f7ff ff44 	bl	800b374 <malloc>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	61e0      	str	r0, [r4, #28]
 800b4f0:	b920      	cbnz	r0, 800b4fc <_Balloc+0x20>
 800b4f2:	4b18      	ldr	r3, [pc, #96]	; (800b554 <_Balloc+0x78>)
 800b4f4:	4818      	ldr	r0, [pc, #96]	; (800b558 <_Balloc+0x7c>)
 800b4f6:	216b      	movs	r1, #107	; 0x6b
 800b4f8:	f000 fe00 	bl	800c0fc <__assert_func>
 800b4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b500:	6006      	str	r6, [r0, #0]
 800b502:	60c6      	str	r6, [r0, #12]
 800b504:	69e6      	ldr	r6, [r4, #28]
 800b506:	68f3      	ldr	r3, [r6, #12]
 800b508:	b183      	cbz	r3, 800b52c <_Balloc+0x50>
 800b50a:	69e3      	ldr	r3, [r4, #28]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b512:	b9b8      	cbnz	r0, 800b544 <_Balloc+0x68>
 800b514:	2101      	movs	r1, #1
 800b516:	fa01 f605 	lsl.w	r6, r1, r5
 800b51a:	1d72      	adds	r2, r6, #5
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	4620      	mov	r0, r4
 800b520:	f000 fe0a 	bl	800c138 <_calloc_r>
 800b524:	b160      	cbz	r0, 800b540 <_Balloc+0x64>
 800b526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b52a:	e00e      	b.n	800b54a <_Balloc+0x6e>
 800b52c:	2221      	movs	r2, #33	; 0x21
 800b52e:	2104      	movs	r1, #4
 800b530:	4620      	mov	r0, r4
 800b532:	f000 fe01 	bl	800c138 <_calloc_r>
 800b536:	69e3      	ldr	r3, [r4, #28]
 800b538:	60f0      	str	r0, [r6, #12]
 800b53a:	68db      	ldr	r3, [r3, #12]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d1e4      	bne.n	800b50a <_Balloc+0x2e>
 800b540:	2000      	movs	r0, #0
 800b542:	bd70      	pop	{r4, r5, r6, pc}
 800b544:	6802      	ldr	r2, [r0, #0]
 800b546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b54a:	2300      	movs	r3, #0
 800b54c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b550:	e7f7      	b.n	800b542 <_Balloc+0x66>
 800b552:	bf00      	nop
 800b554:	0800d23d 	.word	0x0800d23d
 800b558:	0800d2bd 	.word	0x0800d2bd

0800b55c <_Bfree>:
 800b55c:	b570      	push	{r4, r5, r6, lr}
 800b55e:	69c6      	ldr	r6, [r0, #28]
 800b560:	4605      	mov	r5, r0
 800b562:	460c      	mov	r4, r1
 800b564:	b976      	cbnz	r6, 800b584 <_Bfree+0x28>
 800b566:	2010      	movs	r0, #16
 800b568:	f7ff ff04 	bl	800b374 <malloc>
 800b56c:	4602      	mov	r2, r0
 800b56e:	61e8      	str	r0, [r5, #28]
 800b570:	b920      	cbnz	r0, 800b57c <_Bfree+0x20>
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <_Bfree+0x3c>)
 800b574:	4809      	ldr	r0, [pc, #36]	; (800b59c <_Bfree+0x40>)
 800b576:	218f      	movs	r1, #143	; 0x8f
 800b578:	f000 fdc0 	bl	800c0fc <__assert_func>
 800b57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b580:	6006      	str	r6, [r0, #0]
 800b582:	60c6      	str	r6, [r0, #12]
 800b584:	b13c      	cbz	r4, 800b596 <_Bfree+0x3a>
 800b586:	69eb      	ldr	r3, [r5, #28]
 800b588:	6862      	ldr	r2, [r4, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b590:	6021      	str	r1, [r4, #0]
 800b592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b596:	bd70      	pop	{r4, r5, r6, pc}
 800b598:	0800d23d 	.word	0x0800d23d
 800b59c:	0800d2bd 	.word	0x0800d2bd

0800b5a0 <__multadd>:
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	690d      	ldr	r5, [r1, #16]
 800b5a6:	4607      	mov	r7, r0
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	f101 0c14 	add.w	ip, r1, #20
 800b5b0:	2000      	movs	r0, #0
 800b5b2:	f8dc 3000 	ldr.w	r3, [ip]
 800b5b6:	b299      	uxth	r1, r3
 800b5b8:	fb02 6101 	mla	r1, r2, r1, r6
 800b5bc:	0c1e      	lsrs	r6, r3, #16
 800b5be:	0c0b      	lsrs	r3, r1, #16
 800b5c0:	fb02 3306 	mla	r3, r2, r6, r3
 800b5c4:	b289      	uxth	r1, r1
 800b5c6:	3001      	adds	r0, #1
 800b5c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b5cc:	4285      	cmp	r5, r0
 800b5ce:	f84c 1b04 	str.w	r1, [ip], #4
 800b5d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b5d6:	dcec      	bgt.n	800b5b2 <__multadd+0x12>
 800b5d8:	b30e      	cbz	r6, 800b61e <__multadd+0x7e>
 800b5da:	68a3      	ldr	r3, [r4, #8]
 800b5dc:	42ab      	cmp	r3, r5
 800b5de:	dc19      	bgt.n	800b614 <__multadd+0x74>
 800b5e0:	6861      	ldr	r1, [r4, #4]
 800b5e2:	4638      	mov	r0, r7
 800b5e4:	3101      	adds	r1, #1
 800b5e6:	f7ff ff79 	bl	800b4dc <_Balloc>
 800b5ea:	4680      	mov	r8, r0
 800b5ec:	b928      	cbnz	r0, 800b5fa <__multadd+0x5a>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	4b0c      	ldr	r3, [pc, #48]	; (800b624 <__multadd+0x84>)
 800b5f2:	480d      	ldr	r0, [pc, #52]	; (800b628 <__multadd+0x88>)
 800b5f4:	21ba      	movs	r1, #186	; 0xba
 800b5f6:	f000 fd81 	bl	800c0fc <__assert_func>
 800b5fa:	6922      	ldr	r2, [r4, #16]
 800b5fc:	3202      	adds	r2, #2
 800b5fe:	f104 010c 	add.w	r1, r4, #12
 800b602:	0092      	lsls	r2, r2, #2
 800b604:	300c      	adds	r0, #12
 800b606:	f000 fd6b 	bl	800c0e0 <memcpy>
 800b60a:	4621      	mov	r1, r4
 800b60c:	4638      	mov	r0, r7
 800b60e:	f7ff ffa5 	bl	800b55c <_Bfree>
 800b612:	4644      	mov	r4, r8
 800b614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b618:	3501      	adds	r5, #1
 800b61a:	615e      	str	r6, [r3, #20]
 800b61c:	6125      	str	r5, [r4, #16]
 800b61e:	4620      	mov	r0, r4
 800b620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b624:	0800d2ac 	.word	0x0800d2ac
 800b628:	0800d2bd 	.word	0x0800d2bd

0800b62c <__hi0bits>:
 800b62c:	0c03      	lsrs	r3, r0, #16
 800b62e:	041b      	lsls	r3, r3, #16
 800b630:	b9d3      	cbnz	r3, 800b668 <__hi0bits+0x3c>
 800b632:	0400      	lsls	r0, r0, #16
 800b634:	2310      	movs	r3, #16
 800b636:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b63a:	bf04      	itt	eq
 800b63c:	0200      	lsleq	r0, r0, #8
 800b63e:	3308      	addeq	r3, #8
 800b640:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b644:	bf04      	itt	eq
 800b646:	0100      	lsleq	r0, r0, #4
 800b648:	3304      	addeq	r3, #4
 800b64a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b64e:	bf04      	itt	eq
 800b650:	0080      	lsleq	r0, r0, #2
 800b652:	3302      	addeq	r3, #2
 800b654:	2800      	cmp	r0, #0
 800b656:	db05      	blt.n	800b664 <__hi0bits+0x38>
 800b658:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b65c:	f103 0301 	add.w	r3, r3, #1
 800b660:	bf08      	it	eq
 800b662:	2320      	moveq	r3, #32
 800b664:	4618      	mov	r0, r3
 800b666:	4770      	bx	lr
 800b668:	2300      	movs	r3, #0
 800b66a:	e7e4      	b.n	800b636 <__hi0bits+0xa>

0800b66c <__lo0bits>:
 800b66c:	6803      	ldr	r3, [r0, #0]
 800b66e:	f013 0207 	ands.w	r2, r3, #7
 800b672:	d00c      	beq.n	800b68e <__lo0bits+0x22>
 800b674:	07d9      	lsls	r1, r3, #31
 800b676:	d422      	bmi.n	800b6be <__lo0bits+0x52>
 800b678:	079a      	lsls	r2, r3, #30
 800b67a:	bf49      	itett	mi
 800b67c:	085b      	lsrmi	r3, r3, #1
 800b67e:	089b      	lsrpl	r3, r3, #2
 800b680:	6003      	strmi	r3, [r0, #0]
 800b682:	2201      	movmi	r2, #1
 800b684:	bf5c      	itt	pl
 800b686:	6003      	strpl	r3, [r0, #0]
 800b688:	2202      	movpl	r2, #2
 800b68a:	4610      	mov	r0, r2
 800b68c:	4770      	bx	lr
 800b68e:	b299      	uxth	r1, r3
 800b690:	b909      	cbnz	r1, 800b696 <__lo0bits+0x2a>
 800b692:	0c1b      	lsrs	r3, r3, #16
 800b694:	2210      	movs	r2, #16
 800b696:	b2d9      	uxtb	r1, r3
 800b698:	b909      	cbnz	r1, 800b69e <__lo0bits+0x32>
 800b69a:	3208      	adds	r2, #8
 800b69c:	0a1b      	lsrs	r3, r3, #8
 800b69e:	0719      	lsls	r1, r3, #28
 800b6a0:	bf04      	itt	eq
 800b6a2:	091b      	lsreq	r3, r3, #4
 800b6a4:	3204      	addeq	r2, #4
 800b6a6:	0799      	lsls	r1, r3, #30
 800b6a8:	bf04      	itt	eq
 800b6aa:	089b      	lsreq	r3, r3, #2
 800b6ac:	3202      	addeq	r2, #2
 800b6ae:	07d9      	lsls	r1, r3, #31
 800b6b0:	d403      	bmi.n	800b6ba <__lo0bits+0x4e>
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	f102 0201 	add.w	r2, r2, #1
 800b6b8:	d003      	beq.n	800b6c2 <__lo0bits+0x56>
 800b6ba:	6003      	str	r3, [r0, #0]
 800b6bc:	e7e5      	b.n	800b68a <__lo0bits+0x1e>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	e7e3      	b.n	800b68a <__lo0bits+0x1e>
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	e7e1      	b.n	800b68a <__lo0bits+0x1e>
	...

0800b6c8 <__i2b>:
 800b6c8:	b510      	push	{r4, lr}
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	f7ff ff05 	bl	800b4dc <_Balloc>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	b928      	cbnz	r0, 800b6e2 <__i2b+0x1a>
 800b6d6:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <__i2b+0x24>)
 800b6d8:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <__i2b+0x28>)
 800b6da:	f240 1145 	movw	r1, #325	; 0x145
 800b6de:	f000 fd0d 	bl	800c0fc <__assert_func>
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	6144      	str	r4, [r0, #20]
 800b6e6:	6103      	str	r3, [r0, #16]
 800b6e8:	bd10      	pop	{r4, pc}
 800b6ea:	bf00      	nop
 800b6ec:	0800d2ac 	.word	0x0800d2ac
 800b6f0:	0800d2bd 	.word	0x0800d2bd

0800b6f4 <__multiply>:
 800b6f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6f8:	4691      	mov	r9, r2
 800b6fa:	690a      	ldr	r2, [r1, #16]
 800b6fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b700:	429a      	cmp	r2, r3
 800b702:	bfb8      	it	lt
 800b704:	460b      	movlt	r3, r1
 800b706:	460c      	mov	r4, r1
 800b708:	bfbc      	itt	lt
 800b70a:	464c      	movlt	r4, r9
 800b70c:	4699      	movlt	r9, r3
 800b70e:	6927      	ldr	r7, [r4, #16]
 800b710:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b714:	68a3      	ldr	r3, [r4, #8]
 800b716:	6861      	ldr	r1, [r4, #4]
 800b718:	eb07 060a 	add.w	r6, r7, sl
 800b71c:	42b3      	cmp	r3, r6
 800b71e:	b085      	sub	sp, #20
 800b720:	bfb8      	it	lt
 800b722:	3101      	addlt	r1, #1
 800b724:	f7ff feda 	bl	800b4dc <_Balloc>
 800b728:	b930      	cbnz	r0, 800b738 <__multiply+0x44>
 800b72a:	4602      	mov	r2, r0
 800b72c:	4b44      	ldr	r3, [pc, #272]	; (800b840 <__multiply+0x14c>)
 800b72e:	4845      	ldr	r0, [pc, #276]	; (800b844 <__multiply+0x150>)
 800b730:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b734:	f000 fce2 	bl	800c0fc <__assert_func>
 800b738:	f100 0514 	add.w	r5, r0, #20
 800b73c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b740:	462b      	mov	r3, r5
 800b742:	2200      	movs	r2, #0
 800b744:	4543      	cmp	r3, r8
 800b746:	d321      	bcc.n	800b78c <__multiply+0x98>
 800b748:	f104 0314 	add.w	r3, r4, #20
 800b74c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b750:	f109 0314 	add.w	r3, r9, #20
 800b754:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b758:	9202      	str	r2, [sp, #8]
 800b75a:	1b3a      	subs	r2, r7, r4
 800b75c:	3a15      	subs	r2, #21
 800b75e:	f022 0203 	bic.w	r2, r2, #3
 800b762:	3204      	adds	r2, #4
 800b764:	f104 0115 	add.w	r1, r4, #21
 800b768:	428f      	cmp	r7, r1
 800b76a:	bf38      	it	cc
 800b76c:	2204      	movcc	r2, #4
 800b76e:	9201      	str	r2, [sp, #4]
 800b770:	9a02      	ldr	r2, [sp, #8]
 800b772:	9303      	str	r3, [sp, #12]
 800b774:	429a      	cmp	r2, r3
 800b776:	d80c      	bhi.n	800b792 <__multiply+0x9e>
 800b778:	2e00      	cmp	r6, #0
 800b77a:	dd03      	ble.n	800b784 <__multiply+0x90>
 800b77c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b780:	2b00      	cmp	r3, #0
 800b782:	d05b      	beq.n	800b83c <__multiply+0x148>
 800b784:	6106      	str	r6, [r0, #16]
 800b786:	b005      	add	sp, #20
 800b788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b78c:	f843 2b04 	str.w	r2, [r3], #4
 800b790:	e7d8      	b.n	800b744 <__multiply+0x50>
 800b792:	f8b3 a000 	ldrh.w	sl, [r3]
 800b796:	f1ba 0f00 	cmp.w	sl, #0
 800b79a:	d024      	beq.n	800b7e6 <__multiply+0xf2>
 800b79c:	f104 0e14 	add.w	lr, r4, #20
 800b7a0:	46a9      	mov	r9, r5
 800b7a2:	f04f 0c00 	mov.w	ip, #0
 800b7a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b7aa:	f8d9 1000 	ldr.w	r1, [r9]
 800b7ae:	fa1f fb82 	uxth.w	fp, r2
 800b7b2:	b289      	uxth	r1, r1
 800b7b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b7b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b7bc:	f8d9 2000 	ldr.w	r2, [r9]
 800b7c0:	4461      	add	r1, ip
 800b7c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b7ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b7ce:	b289      	uxth	r1, r1
 800b7d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b7d4:	4577      	cmp	r7, lr
 800b7d6:	f849 1b04 	str.w	r1, [r9], #4
 800b7da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b7de:	d8e2      	bhi.n	800b7a6 <__multiply+0xb2>
 800b7e0:	9a01      	ldr	r2, [sp, #4]
 800b7e2:	f845 c002 	str.w	ip, [r5, r2]
 800b7e6:	9a03      	ldr	r2, [sp, #12]
 800b7e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b7ec:	3304      	adds	r3, #4
 800b7ee:	f1b9 0f00 	cmp.w	r9, #0
 800b7f2:	d021      	beq.n	800b838 <__multiply+0x144>
 800b7f4:	6829      	ldr	r1, [r5, #0]
 800b7f6:	f104 0c14 	add.w	ip, r4, #20
 800b7fa:	46ae      	mov	lr, r5
 800b7fc:	f04f 0a00 	mov.w	sl, #0
 800b800:	f8bc b000 	ldrh.w	fp, [ip]
 800b804:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b808:	fb09 220b 	mla	r2, r9, fp, r2
 800b80c:	4452      	add	r2, sl
 800b80e:	b289      	uxth	r1, r1
 800b810:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b814:	f84e 1b04 	str.w	r1, [lr], #4
 800b818:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b81c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b820:	f8be 1000 	ldrh.w	r1, [lr]
 800b824:	fb09 110a 	mla	r1, r9, sl, r1
 800b828:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b82c:	4567      	cmp	r7, ip
 800b82e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b832:	d8e5      	bhi.n	800b800 <__multiply+0x10c>
 800b834:	9a01      	ldr	r2, [sp, #4]
 800b836:	50a9      	str	r1, [r5, r2]
 800b838:	3504      	adds	r5, #4
 800b83a:	e799      	b.n	800b770 <__multiply+0x7c>
 800b83c:	3e01      	subs	r6, #1
 800b83e:	e79b      	b.n	800b778 <__multiply+0x84>
 800b840:	0800d2ac 	.word	0x0800d2ac
 800b844:	0800d2bd 	.word	0x0800d2bd

0800b848 <__pow5mult>:
 800b848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b84c:	4615      	mov	r5, r2
 800b84e:	f012 0203 	ands.w	r2, r2, #3
 800b852:	4606      	mov	r6, r0
 800b854:	460f      	mov	r7, r1
 800b856:	d007      	beq.n	800b868 <__pow5mult+0x20>
 800b858:	4c25      	ldr	r4, [pc, #148]	; (800b8f0 <__pow5mult+0xa8>)
 800b85a:	3a01      	subs	r2, #1
 800b85c:	2300      	movs	r3, #0
 800b85e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b862:	f7ff fe9d 	bl	800b5a0 <__multadd>
 800b866:	4607      	mov	r7, r0
 800b868:	10ad      	asrs	r5, r5, #2
 800b86a:	d03d      	beq.n	800b8e8 <__pow5mult+0xa0>
 800b86c:	69f4      	ldr	r4, [r6, #28]
 800b86e:	b97c      	cbnz	r4, 800b890 <__pow5mult+0x48>
 800b870:	2010      	movs	r0, #16
 800b872:	f7ff fd7f 	bl	800b374 <malloc>
 800b876:	4602      	mov	r2, r0
 800b878:	61f0      	str	r0, [r6, #28]
 800b87a:	b928      	cbnz	r0, 800b888 <__pow5mult+0x40>
 800b87c:	4b1d      	ldr	r3, [pc, #116]	; (800b8f4 <__pow5mult+0xac>)
 800b87e:	481e      	ldr	r0, [pc, #120]	; (800b8f8 <__pow5mult+0xb0>)
 800b880:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b884:	f000 fc3a 	bl	800c0fc <__assert_func>
 800b888:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b88c:	6004      	str	r4, [r0, #0]
 800b88e:	60c4      	str	r4, [r0, #12]
 800b890:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b894:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b898:	b94c      	cbnz	r4, 800b8ae <__pow5mult+0x66>
 800b89a:	f240 2171 	movw	r1, #625	; 0x271
 800b89e:	4630      	mov	r0, r6
 800b8a0:	f7ff ff12 	bl	800b6c8 <__i2b>
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	6003      	str	r3, [r0, #0]
 800b8ae:	f04f 0900 	mov.w	r9, #0
 800b8b2:	07eb      	lsls	r3, r5, #31
 800b8b4:	d50a      	bpl.n	800b8cc <__pow5mult+0x84>
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f7ff ff1a 	bl	800b6f4 <__multiply>
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	4680      	mov	r8, r0
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff fe49 	bl	800b55c <_Bfree>
 800b8ca:	4647      	mov	r7, r8
 800b8cc:	106d      	asrs	r5, r5, #1
 800b8ce:	d00b      	beq.n	800b8e8 <__pow5mult+0xa0>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	b938      	cbnz	r0, 800b8e4 <__pow5mult+0x9c>
 800b8d4:	4622      	mov	r2, r4
 800b8d6:	4621      	mov	r1, r4
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f7ff ff0b 	bl	800b6f4 <__multiply>
 800b8de:	6020      	str	r0, [r4, #0]
 800b8e0:	f8c0 9000 	str.w	r9, [r0]
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	e7e4      	b.n	800b8b2 <__pow5mult+0x6a>
 800b8e8:	4638      	mov	r0, r7
 800b8ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ee:	bf00      	nop
 800b8f0:	0800d408 	.word	0x0800d408
 800b8f4:	0800d23d 	.word	0x0800d23d
 800b8f8:	0800d2bd 	.word	0x0800d2bd

0800b8fc <__lshift>:
 800b8fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b900:	460c      	mov	r4, r1
 800b902:	6849      	ldr	r1, [r1, #4]
 800b904:	6923      	ldr	r3, [r4, #16]
 800b906:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b90a:	68a3      	ldr	r3, [r4, #8]
 800b90c:	4607      	mov	r7, r0
 800b90e:	4691      	mov	r9, r2
 800b910:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b914:	f108 0601 	add.w	r6, r8, #1
 800b918:	42b3      	cmp	r3, r6
 800b91a:	db0b      	blt.n	800b934 <__lshift+0x38>
 800b91c:	4638      	mov	r0, r7
 800b91e:	f7ff fddd 	bl	800b4dc <_Balloc>
 800b922:	4605      	mov	r5, r0
 800b924:	b948      	cbnz	r0, 800b93a <__lshift+0x3e>
 800b926:	4602      	mov	r2, r0
 800b928:	4b28      	ldr	r3, [pc, #160]	; (800b9cc <__lshift+0xd0>)
 800b92a:	4829      	ldr	r0, [pc, #164]	; (800b9d0 <__lshift+0xd4>)
 800b92c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b930:	f000 fbe4 	bl	800c0fc <__assert_func>
 800b934:	3101      	adds	r1, #1
 800b936:	005b      	lsls	r3, r3, #1
 800b938:	e7ee      	b.n	800b918 <__lshift+0x1c>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f100 0114 	add.w	r1, r0, #20
 800b940:	f100 0210 	add.w	r2, r0, #16
 800b944:	4618      	mov	r0, r3
 800b946:	4553      	cmp	r3, sl
 800b948:	db33      	blt.n	800b9b2 <__lshift+0xb6>
 800b94a:	6920      	ldr	r0, [r4, #16]
 800b94c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b950:	f104 0314 	add.w	r3, r4, #20
 800b954:	f019 091f 	ands.w	r9, r9, #31
 800b958:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b95c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b960:	d02b      	beq.n	800b9ba <__lshift+0xbe>
 800b962:	f1c9 0e20 	rsb	lr, r9, #32
 800b966:	468a      	mov	sl, r1
 800b968:	2200      	movs	r2, #0
 800b96a:	6818      	ldr	r0, [r3, #0]
 800b96c:	fa00 f009 	lsl.w	r0, r0, r9
 800b970:	4310      	orrs	r0, r2
 800b972:	f84a 0b04 	str.w	r0, [sl], #4
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	459c      	cmp	ip, r3
 800b97c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b980:	d8f3      	bhi.n	800b96a <__lshift+0x6e>
 800b982:	ebac 0304 	sub.w	r3, ip, r4
 800b986:	3b15      	subs	r3, #21
 800b988:	f023 0303 	bic.w	r3, r3, #3
 800b98c:	3304      	adds	r3, #4
 800b98e:	f104 0015 	add.w	r0, r4, #21
 800b992:	4584      	cmp	ip, r0
 800b994:	bf38      	it	cc
 800b996:	2304      	movcc	r3, #4
 800b998:	50ca      	str	r2, [r1, r3]
 800b99a:	b10a      	cbz	r2, 800b9a0 <__lshift+0xa4>
 800b99c:	f108 0602 	add.w	r6, r8, #2
 800b9a0:	3e01      	subs	r6, #1
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	612e      	str	r6, [r5, #16]
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	f7ff fdd8 	bl	800b55c <_Bfree>
 800b9ac:	4628      	mov	r0, r5
 800b9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b2:	f842 0f04 	str.w	r0, [r2, #4]!
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	e7c5      	b.n	800b946 <__lshift+0x4a>
 800b9ba:	3904      	subs	r1, #4
 800b9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9c0:	f841 2f04 	str.w	r2, [r1, #4]!
 800b9c4:	459c      	cmp	ip, r3
 800b9c6:	d8f9      	bhi.n	800b9bc <__lshift+0xc0>
 800b9c8:	e7ea      	b.n	800b9a0 <__lshift+0xa4>
 800b9ca:	bf00      	nop
 800b9cc:	0800d2ac 	.word	0x0800d2ac
 800b9d0:	0800d2bd 	.word	0x0800d2bd

0800b9d4 <__mcmp>:
 800b9d4:	b530      	push	{r4, r5, lr}
 800b9d6:	6902      	ldr	r2, [r0, #16]
 800b9d8:	690c      	ldr	r4, [r1, #16]
 800b9da:	1b12      	subs	r2, r2, r4
 800b9dc:	d10e      	bne.n	800b9fc <__mcmp+0x28>
 800b9de:	f100 0314 	add.w	r3, r0, #20
 800b9e2:	3114      	adds	r1, #20
 800b9e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b9e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b9ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b9f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b9f4:	42a5      	cmp	r5, r4
 800b9f6:	d003      	beq.n	800ba00 <__mcmp+0x2c>
 800b9f8:	d305      	bcc.n	800ba06 <__mcmp+0x32>
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	4610      	mov	r0, r2
 800b9fe:	bd30      	pop	{r4, r5, pc}
 800ba00:	4283      	cmp	r3, r0
 800ba02:	d3f3      	bcc.n	800b9ec <__mcmp+0x18>
 800ba04:	e7fa      	b.n	800b9fc <__mcmp+0x28>
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0a:	e7f7      	b.n	800b9fc <__mcmp+0x28>

0800ba0c <__mdiff>:
 800ba0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba10:	460c      	mov	r4, r1
 800ba12:	4606      	mov	r6, r0
 800ba14:	4611      	mov	r1, r2
 800ba16:	4620      	mov	r0, r4
 800ba18:	4690      	mov	r8, r2
 800ba1a:	f7ff ffdb 	bl	800b9d4 <__mcmp>
 800ba1e:	1e05      	subs	r5, r0, #0
 800ba20:	d110      	bne.n	800ba44 <__mdiff+0x38>
 800ba22:	4629      	mov	r1, r5
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff fd59 	bl	800b4dc <_Balloc>
 800ba2a:	b930      	cbnz	r0, 800ba3a <__mdiff+0x2e>
 800ba2c:	4b3a      	ldr	r3, [pc, #232]	; (800bb18 <__mdiff+0x10c>)
 800ba2e:	4602      	mov	r2, r0
 800ba30:	f240 2137 	movw	r1, #567	; 0x237
 800ba34:	4839      	ldr	r0, [pc, #228]	; (800bb1c <__mdiff+0x110>)
 800ba36:	f000 fb61 	bl	800c0fc <__assert_func>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba44:	bfa4      	itt	ge
 800ba46:	4643      	movge	r3, r8
 800ba48:	46a0      	movge	r8, r4
 800ba4a:	4630      	mov	r0, r6
 800ba4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ba50:	bfa6      	itte	ge
 800ba52:	461c      	movge	r4, r3
 800ba54:	2500      	movge	r5, #0
 800ba56:	2501      	movlt	r5, #1
 800ba58:	f7ff fd40 	bl	800b4dc <_Balloc>
 800ba5c:	b920      	cbnz	r0, 800ba68 <__mdiff+0x5c>
 800ba5e:	4b2e      	ldr	r3, [pc, #184]	; (800bb18 <__mdiff+0x10c>)
 800ba60:	4602      	mov	r2, r0
 800ba62:	f240 2145 	movw	r1, #581	; 0x245
 800ba66:	e7e5      	b.n	800ba34 <__mdiff+0x28>
 800ba68:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ba6c:	6926      	ldr	r6, [r4, #16]
 800ba6e:	60c5      	str	r5, [r0, #12]
 800ba70:	f104 0914 	add.w	r9, r4, #20
 800ba74:	f108 0514 	add.w	r5, r8, #20
 800ba78:	f100 0e14 	add.w	lr, r0, #20
 800ba7c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ba80:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ba84:	f108 0210 	add.w	r2, r8, #16
 800ba88:	46f2      	mov	sl, lr
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ba90:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ba94:	fa11 f88b 	uxtah	r8, r1, fp
 800ba98:	b299      	uxth	r1, r3
 800ba9a:	0c1b      	lsrs	r3, r3, #16
 800ba9c:	eba8 0801 	sub.w	r8, r8, r1
 800baa0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800baa4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800baa8:	fa1f f888 	uxth.w	r8, r8
 800baac:	1419      	asrs	r1, r3, #16
 800baae:	454e      	cmp	r6, r9
 800bab0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bab4:	f84a 3b04 	str.w	r3, [sl], #4
 800bab8:	d8e8      	bhi.n	800ba8c <__mdiff+0x80>
 800baba:	1b33      	subs	r3, r6, r4
 800babc:	3b15      	subs	r3, #21
 800babe:	f023 0303 	bic.w	r3, r3, #3
 800bac2:	3304      	adds	r3, #4
 800bac4:	3415      	adds	r4, #21
 800bac6:	42a6      	cmp	r6, r4
 800bac8:	bf38      	it	cc
 800baca:	2304      	movcc	r3, #4
 800bacc:	441d      	add	r5, r3
 800bace:	4473      	add	r3, lr
 800bad0:	469e      	mov	lr, r3
 800bad2:	462e      	mov	r6, r5
 800bad4:	4566      	cmp	r6, ip
 800bad6:	d30e      	bcc.n	800baf6 <__mdiff+0xea>
 800bad8:	f10c 0203 	add.w	r2, ip, #3
 800badc:	1b52      	subs	r2, r2, r5
 800bade:	f022 0203 	bic.w	r2, r2, #3
 800bae2:	3d03      	subs	r5, #3
 800bae4:	45ac      	cmp	ip, r5
 800bae6:	bf38      	it	cc
 800bae8:	2200      	movcc	r2, #0
 800baea:	4413      	add	r3, r2
 800baec:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800baf0:	b17a      	cbz	r2, 800bb12 <__mdiff+0x106>
 800baf2:	6107      	str	r7, [r0, #16]
 800baf4:	e7a4      	b.n	800ba40 <__mdiff+0x34>
 800baf6:	f856 8b04 	ldr.w	r8, [r6], #4
 800bafa:	fa11 f288 	uxtah	r2, r1, r8
 800bafe:	1414      	asrs	r4, r2, #16
 800bb00:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb04:	b292      	uxth	r2, r2
 800bb06:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb0a:	f84e 2b04 	str.w	r2, [lr], #4
 800bb0e:	1421      	asrs	r1, r4, #16
 800bb10:	e7e0      	b.n	800bad4 <__mdiff+0xc8>
 800bb12:	3f01      	subs	r7, #1
 800bb14:	e7ea      	b.n	800baec <__mdiff+0xe0>
 800bb16:	bf00      	nop
 800bb18:	0800d2ac 	.word	0x0800d2ac
 800bb1c:	0800d2bd 	.word	0x0800d2bd

0800bb20 <__d2b>:
 800bb20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb24:	460f      	mov	r7, r1
 800bb26:	2101      	movs	r1, #1
 800bb28:	ec59 8b10 	vmov	r8, r9, d0
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	f7ff fcd5 	bl	800b4dc <_Balloc>
 800bb32:	4604      	mov	r4, r0
 800bb34:	b930      	cbnz	r0, 800bb44 <__d2b+0x24>
 800bb36:	4602      	mov	r2, r0
 800bb38:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <__d2b+0xac>)
 800bb3a:	4825      	ldr	r0, [pc, #148]	; (800bbd0 <__d2b+0xb0>)
 800bb3c:	f240 310f 	movw	r1, #783	; 0x30f
 800bb40:	f000 fadc 	bl	800c0fc <__assert_func>
 800bb44:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb4c:	bb2d      	cbnz	r5, 800bb9a <__d2b+0x7a>
 800bb4e:	9301      	str	r3, [sp, #4]
 800bb50:	f1b8 0300 	subs.w	r3, r8, #0
 800bb54:	d026      	beq.n	800bba4 <__d2b+0x84>
 800bb56:	4668      	mov	r0, sp
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	f7ff fd87 	bl	800b66c <__lo0bits>
 800bb5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bb62:	b1e8      	cbz	r0, 800bba0 <__d2b+0x80>
 800bb64:	f1c0 0320 	rsb	r3, r0, #32
 800bb68:	fa02 f303 	lsl.w	r3, r2, r3
 800bb6c:	430b      	orrs	r3, r1
 800bb6e:	40c2      	lsrs	r2, r0
 800bb70:	6163      	str	r3, [r4, #20]
 800bb72:	9201      	str	r2, [sp, #4]
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	61a3      	str	r3, [r4, #24]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	bf14      	ite	ne
 800bb7c:	2202      	movne	r2, #2
 800bb7e:	2201      	moveq	r2, #1
 800bb80:	6122      	str	r2, [r4, #16]
 800bb82:	b1bd      	cbz	r5, 800bbb4 <__d2b+0x94>
 800bb84:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb88:	4405      	add	r5, r0
 800bb8a:	603d      	str	r5, [r7, #0]
 800bb8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb90:	6030      	str	r0, [r6, #0]
 800bb92:	4620      	mov	r0, r4
 800bb94:	b003      	add	sp, #12
 800bb96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb9e:	e7d6      	b.n	800bb4e <__d2b+0x2e>
 800bba0:	6161      	str	r1, [r4, #20]
 800bba2:	e7e7      	b.n	800bb74 <__d2b+0x54>
 800bba4:	a801      	add	r0, sp, #4
 800bba6:	f7ff fd61 	bl	800b66c <__lo0bits>
 800bbaa:	9b01      	ldr	r3, [sp, #4]
 800bbac:	6163      	str	r3, [r4, #20]
 800bbae:	3020      	adds	r0, #32
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	e7e5      	b.n	800bb80 <__d2b+0x60>
 800bbb4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbb8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbbc:	6038      	str	r0, [r7, #0]
 800bbbe:	6918      	ldr	r0, [r3, #16]
 800bbc0:	f7ff fd34 	bl	800b62c <__hi0bits>
 800bbc4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bbc8:	e7e2      	b.n	800bb90 <__d2b+0x70>
 800bbca:	bf00      	nop
 800bbcc:	0800d2ac 	.word	0x0800d2ac
 800bbd0:	0800d2bd 	.word	0x0800d2bd

0800bbd4 <__sfputc_r>:
 800bbd4:	6893      	ldr	r3, [r2, #8]
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	b410      	push	{r4}
 800bbdc:	6093      	str	r3, [r2, #8]
 800bbde:	da08      	bge.n	800bbf2 <__sfputc_r+0x1e>
 800bbe0:	6994      	ldr	r4, [r2, #24]
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	db01      	blt.n	800bbea <__sfputc_r+0x16>
 800bbe6:	290a      	cmp	r1, #10
 800bbe8:	d103      	bne.n	800bbf2 <__sfputc_r+0x1e>
 800bbea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bbee:	f7fe bbe4 	b.w	800a3ba <__swbuf_r>
 800bbf2:	6813      	ldr	r3, [r2, #0]
 800bbf4:	1c58      	adds	r0, r3, #1
 800bbf6:	6010      	str	r0, [r2, #0]
 800bbf8:	7019      	strb	r1, [r3, #0]
 800bbfa:	4608      	mov	r0, r1
 800bbfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <__sfputs_r>:
 800bc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc04:	4606      	mov	r6, r0
 800bc06:	460f      	mov	r7, r1
 800bc08:	4614      	mov	r4, r2
 800bc0a:	18d5      	adds	r5, r2, r3
 800bc0c:	42ac      	cmp	r4, r5
 800bc0e:	d101      	bne.n	800bc14 <__sfputs_r+0x12>
 800bc10:	2000      	movs	r0, #0
 800bc12:	e007      	b.n	800bc24 <__sfputs_r+0x22>
 800bc14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc18:	463a      	mov	r2, r7
 800bc1a:	4630      	mov	r0, r6
 800bc1c:	f7ff ffda 	bl	800bbd4 <__sfputc_r>
 800bc20:	1c43      	adds	r3, r0, #1
 800bc22:	d1f3      	bne.n	800bc0c <__sfputs_r+0xa>
 800bc24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bc28 <_vfiprintf_r>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	460d      	mov	r5, r1
 800bc2e:	b09d      	sub	sp, #116	; 0x74
 800bc30:	4614      	mov	r4, r2
 800bc32:	4698      	mov	r8, r3
 800bc34:	4606      	mov	r6, r0
 800bc36:	b118      	cbz	r0, 800bc40 <_vfiprintf_r+0x18>
 800bc38:	6a03      	ldr	r3, [r0, #32]
 800bc3a:	b90b      	cbnz	r3, 800bc40 <_vfiprintf_r+0x18>
 800bc3c:	f7fe fad6 	bl	800a1ec <__sinit>
 800bc40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc42:	07d9      	lsls	r1, r3, #31
 800bc44:	d405      	bmi.n	800bc52 <_vfiprintf_r+0x2a>
 800bc46:	89ab      	ldrh	r3, [r5, #12]
 800bc48:	059a      	lsls	r2, r3, #22
 800bc4a:	d402      	bmi.n	800bc52 <_vfiprintf_r+0x2a>
 800bc4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc4e:	f7fe fcc6 	bl	800a5de <__retarget_lock_acquire_recursive>
 800bc52:	89ab      	ldrh	r3, [r5, #12]
 800bc54:	071b      	lsls	r3, r3, #28
 800bc56:	d501      	bpl.n	800bc5c <_vfiprintf_r+0x34>
 800bc58:	692b      	ldr	r3, [r5, #16]
 800bc5a:	b99b      	cbnz	r3, 800bc84 <_vfiprintf_r+0x5c>
 800bc5c:	4629      	mov	r1, r5
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7fe fbe8 	bl	800a434 <__swsetup_r>
 800bc64:	b170      	cbz	r0, 800bc84 <_vfiprintf_r+0x5c>
 800bc66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc68:	07dc      	lsls	r4, r3, #31
 800bc6a:	d504      	bpl.n	800bc76 <_vfiprintf_r+0x4e>
 800bc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc70:	b01d      	add	sp, #116	; 0x74
 800bc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	0598      	lsls	r0, r3, #22
 800bc7a:	d4f7      	bmi.n	800bc6c <_vfiprintf_r+0x44>
 800bc7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc7e:	f7fe fcaf 	bl	800a5e0 <__retarget_lock_release_recursive>
 800bc82:	e7f3      	b.n	800bc6c <_vfiprintf_r+0x44>
 800bc84:	2300      	movs	r3, #0
 800bc86:	9309      	str	r3, [sp, #36]	; 0x24
 800bc88:	2320      	movs	r3, #32
 800bc8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc8e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc92:	2330      	movs	r3, #48	; 0x30
 800bc94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800be48 <_vfiprintf_r+0x220>
 800bc98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9c:	f04f 0901 	mov.w	r9, #1
 800bca0:	4623      	mov	r3, r4
 800bca2:	469a      	mov	sl, r3
 800bca4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bca8:	b10a      	cbz	r2, 800bcae <_vfiprintf_r+0x86>
 800bcaa:	2a25      	cmp	r2, #37	; 0x25
 800bcac:	d1f9      	bne.n	800bca2 <_vfiprintf_r+0x7a>
 800bcae:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb2:	d00b      	beq.n	800bccc <_vfiprintf_r+0xa4>
 800bcb4:	465b      	mov	r3, fp
 800bcb6:	4622      	mov	r2, r4
 800bcb8:	4629      	mov	r1, r5
 800bcba:	4630      	mov	r0, r6
 800bcbc:	f7ff ffa1 	bl	800bc02 <__sfputs_r>
 800bcc0:	3001      	adds	r0, #1
 800bcc2:	f000 80a9 	beq.w	800be18 <_vfiprintf_r+0x1f0>
 800bcc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcc8:	445a      	add	r2, fp
 800bcca:	9209      	str	r2, [sp, #36]	; 0x24
 800bccc:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 80a1 	beq.w	800be18 <_vfiprintf_r+0x1f0>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bcdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce0:	f10a 0a01 	add.w	sl, sl, #1
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	9307      	str	r3, [sp, #28]
 800bce8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcec:	931a      	str	r3, [sp, #104]	; 0x68
 800bcee:	4654      	mov	r4, sl
 800bcf0:	2205      	movs	r2, #5
 800bcf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf6:	4854      	ldr	r0, [pc, #336]	; (800be48 <_vfiprintf_r+0x220>)
 800bcf8:	f7f4 fa92 	bl	8000220 <memchr>
 800bcfc:	9a04      	ldr	r2, [sp, #16]
 800bcfe:	b9d8      	cbnz	r0, 800bd38 <_vfiprintf_r+0x110>
 800bd00:	06d1      	lsls	r1, r2, #27
 800bd02:	bf44      	itt	mi
 800bd04:	2320      	movmi	r3, #32
 800bd06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0a:	0713      	lsls	r3, r2, #28
 800bd0c:	bf44      	itt	mi
 800bd0e:	232b      	movmi	r3, #43	; 0x2b
 800bd10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd14:	f89a 3000 	ldrb.w	r3, [sl]
 800bd18:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1a:	d015      	beq.n	800bd48 <_vfiprintf_r+0x120>
 800bd1c:	9a07      	ldr	r2, [sp, #28]
 800bd1e:	4654      	mov	r4, sl
 800bd20:	2000      	movs	r0, #0
 800bd22:	f04f 0c0a 	mov.w	ip, #10
 800bd26:	4621      	mov	r1, r4
 800bd28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2c:	3b30      	subs	r3, #48	; 0x30
 800bd2e:	2b09      	cmp	r3, #9
 800bd30:	d94d      	bls.n	800bdce <_vfiprintf_r+0x1a6>
 800bd32:	b1b0      	cbz	r0, 800bd62 <_vfiprintf_r+0x13a>
 800bd34:	9207      	str	r2, [sp, #28]
 800bd36:	e014      	b.n	800bd62 <_vfiprintf_r+0x13a>
 800bd38:	eba0 0308 	sub.w	r3, r0, r8
 800bd3c:	fa09 f303 	lsl.w	r3, r9, r3
 800bd40:	4313      	orrs	r3, r2
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	46a2      	mov	sl, r4
 800bd46:	e7d2      	b.n	800bcee <_vfiprintf_r+0xc6>
 800bd48:	9b03      	ldr	r3, [sp, #12]
 800bd4a:	1d19      	adds	r1, r3, #4
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	9103      	str	r1, [sp, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	bfbb      	ittet	lt
 800bd54:	425b      	neglt	r3, r3
 800bd56:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5a:	9307      	strge	r3, [sp, #28]
 800bd5c:	9307      	strlt	r3, [sp, #28]
 800bd5e:	bfb8      	it	lt
 800bd60:	9204      	strlt	r2, [sp, #16]
 800bd62:	7823      	ldrb	r3, [r4, #0]
 800bd64:	2b2e      	cmp	r3, #46	; 0x2e
 800bd66:	d10c      	bne.n	800bd82 <_vfiprintf_r+0x15a>
 800bd68:	7863      	ldrb	r3, [r4, #1]
 800bd6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6c:	d134      	bne.n	800bdd8 <_vfiprintf_r+0x1b0>
 800bd6e:	9b03      	ldr	r3, [sp, #12]
 800bd70:	1d1a      	adds	r2, r3, #4
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	9203      	str	r2, [sp, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	bfb8      	it	lt
 800bd7a:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd7e:	3402      	adds	r4, #2
 800bd80:	9305      	str	r3, [sp, #20]
 800bd82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800be58 <_vfiprintf_r+0x230>
 800bd86:	7821      	ldrb	r1, [r4, #0]
 800bd88:	2203      	movs	r2, #3
 800bd8a:	4650      	mov	r0, sl
 800bd8c:	f7f4 fa48 	bl	8000220 <memchr>
 800bd90:	b138      	cbz	r0, 800bda2 <_vfiprintf_r+0x17a>
 800bd92:	9b04      	ldr	r3, [sp, #16]
 800bd94:	eba0 000a 	sub.w	r0, r0, sl
 800bd98:	2240      	movs	r2, #64	; 0x40
 800bd9a:	4082      	lsls	r2, r0
 800bd9c:	4313      	orrs	r3, r2
 800bd9e:	3401      	adds	r4, #1
 800bda0:	9304      	str	r3, [sp, #16]
 800bda2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda6:	4829      	ldr	r0, [pc, #164]	; (800be4c <_vfiprintf_r+0x224>)
 800bda8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdac:	2206      	movs	r2, #6
 800bdae:	f7f4 fa37 	bl	8000220 <memchr>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d03f      	beq.n	800be36 <_vfiprintf_r+0x20e>
 800bdb6:	4b26      	ldr	r3, [pc, #152]	; (800be50 <_vfiprintf_r+0x228>)
 800bdb8:	bb1b      	cbnz	r3, 800be02 <_vfiprintf_r+0x1da>
 800bdba:	9b03      	ldr	r3, [sp, #12]
 800bdbc:	3307      	adds	r3, #7
 800bdbe:	f023 0307 	bic.w	r3, r3, #7
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	9303      	str	r3, [sp, #12]
 800bdc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdc8:	443b      	add	r3, r7
 800bdca:	9309      	str	r3, [sp, #36]	; 0x24
 800bdcc:	e768      	b.n	800bca0 <_vfiprintf_r+0x78>
 800bdce:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd2:	460c      	mov	r4, r1
 800bdd4:	2001      	movs	r0, #1
 800bdd6:	e7a6      	b.n	800bd26 <_vfiprintf_r+0xfe>
 800bdd8:	2300      	movs	r3, #0
 800bdda:	3401      	adds	r4, #1
 800bddc:	9305      	str	r3, [sp, #20]
 800bdde:	4619      	mov	r1, r3
 800bde0:	f04f 0c0a 	mov.w	ip, #10
 800bde4:	4620      	mov	r0, r4
 800bde6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdea:	3a30      	subs	r2, #48	; 0x30
 800bdec:	2a09      	cmp	r2, #9
 800bdee:	d903      	bls.n	800bdf8 <_vfiprintf_r+0x1d0>
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d0c6      	beq.n	800bd82 <_vfiprintf_r+0x15a>
 800bdf4:	9105      	str	r1, [sp, #20]
 800bdf6:	e7c4      	b.n	800bd82 <_vfiprintf_r+0x15a>
 800bdf8:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdfc:	4604      	mov	r4, r0
 800bdfe:	2301      	movs	r3, #1
 800be00:	e7f0      	b.n	800bde4 <_vfiprintf_r+0x1bc>
 800be02:	ab03      	add	r3, sp, #12
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	462a      	mov	r2, r5
 800be08:	4b12      	ldr	r3, [pc, #72]	; (800be54 <_vfiprintf_r+0x22c>)
 800be0a:	a904      	add	r1, sp, #16
 800be0c:	4630      	mov	r0, r6
 800be0e:	f7fd fd9b 	bl	8009948 <_printf_float>
 800be12:	4607      	mov	r7, r0
 800be14:	1c78      	adds	r0, r7, #1
 800be16:	d1d6      	bne.n	800bdc6 <_vfiprintf_r+0x19e>
 800be18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be1a:	07d9      	lsls	r1, r3, #31
 800be1c:	d405      	bmi.n	800be2a <_vfiprintf_r+0x202>
 800be1e:	89ab      	ldrh	r3, [r5, #12]
 800be20:	059a      	lsls	r2, r3, #22
 800be22:	d402      	bmi.n	800be2a <_vfiprintf_r+0x202>
 800be24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be26:	f7fe fbdb 	bl	800a5e0 <__retarget_lock_release_recursive>
 800be2a:	89ab      	ldrh	r3, [r5, #12]
 800be2c:	065b      	lsls	r3, r3, #25
 800be2e:	f53f af1d 	bmi.w	800bc6c <_vfiprintf_r+0x44>
 800be32:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be34:	e71c      	b.n	800bc70 <_vfiprintf_r+0x48>
 800be36:	ab03      	add	r3, sp, #12
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	462a      	mov	r2, r5
 800be3c:	4b05      	ldr	r3, [pc, #20]	; (800be54 <_vfiprintf_r+0x22c>)
 800be3e:	a904      	add	r1, sp, #16
 800be40:	4630      	mov	r0, r6
 800be42:	f7fe f825 	bl	8009e90 <_printf_i>
 800be46:	e7e4      	b.n	800be12 <_vfiprintf_r+0x1ea>
 800be48:	0800d414 	.word	0x0800d414
 800be4c:	0800d41e 	.word	0x0800d41e
 800be50:	08009949 	.word	0x08009949
 800be54:	0800bc03 	.word	0x0800bc03
 800be58:	0800d41a 	.word	0x0800d41a

0800be5c <__sflush_r>:
 800be5c:	898a      	ldrh	r2, [r1, #12]
 800be5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be62:	4605      	mov	r5, r0
 800be64:	0710      	lsls	r0, r2, #28
 800be66:	460c      	mov	r4, r1
 800be68:	d458      	bmi.n	800bf1c <__sflush_r+0xc0>
 800be6a:	684b      	ldr	r3, [r1, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dc05      	bgt.n	800be7c <__sflush_r+0x20>
 800be70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be72:	2b00      	cmp	r3, #0
 800be74:	dc02      	bgt.n	800be7c <__sflush_r+0x20>
 800be76:	2000      	movs	r0, #0
 800be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be7e:	2e00      	cmp	r6, #0
 800be80:	d0f9      	beq.n	800be76 <__sflush_r+0x1a>
 800be82:	2300      	movs	r3, #0
 800be84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be88:	682f      	ldr	r7, [r5, #0]
 800be8a:	6a21      	ldr	r1, [r4, #32]
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	d032      	beq.n	800bef6 <__sflush_r+0x9a>
 800be90:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be92:	89a3      	ldrh	r3, [r4, #12]
 800be94:	075a      	lsls	r2, r3, #29
 800be96:	d505      	bpl.n	800bea4 <__sflush_r+0x48>
 800be98:	6863      	ldr	r3, [r4, #4]
 800be9a:	1ac0      	subs	r0, r0, r3
 800be9c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be9e:	b10b      	cbz	r3, 800bea4 <__sflush_r+0x48>
 800bea0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bea2:	1ac0      	subs	r0, r0, r3
 800bea4:	2300      	movs	r3, #0
 800bea6:	4602      	mov	r2, r0
 800bea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beaa:	6a21      	ldr	r1, [r4, #32]
 800beac:	4628      	mov	r0, r5
 800beae:	47b0      	blx	r6
 800beb0:	1c43      	adds	r3, r0, #1
 800beb2:	89a3      	ldrh	r3, [r4, #12]
 800beb4:	d106      	bne.n	800bec4 <__sflush_r+0x68>
 800beb6:	6829      	ldr	r1, [r5, #0]
 800beb8:	291d      	cmp	r1, #29
 800beba:	d82b      	bhi.n	800bf14 <__sflush_r+0xb8>
 800bebc:	4a29      	ldr	r2, [pc, #164]	; (800bf64 <__sflush_r+0x108>)
 800bebe:	410a      	asrs	r2, r1
 800bec0:	07d6      	lsls	r6, r2, #31
 800bec2:	d427      	bmi.n	800bf14 <__sflush_r+0xb8>
 800bec4:	2200      	movs	r2, #0
 800bec6:	6062      	str	r2, [r4, #4]
 800bec8:	04d9      	lsls	r1, r3, #19
 800beca:	6922      	ldr	r2, [r4, #16]
 800becc:	6022      	str	r2, [r4, #0]
 800bece:	d504      	bpl.n	800beda <__sflush_r+0x7e>
 800bed0:	1c42      	adds	r2, r0, #1
 800bed2:	d101      	bne.n	800bed8 <__sflush_r+0x7c>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b903      	cbnz	r3, 800beda <__sflush_r+0x7e>
 800bed8:	6560      	str	r0, [r4, #84]	; 0x54
 800beda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bedc:	602f      	str	r7, [r5, #0]
 800bede:	2900      	cmp	r1, #0
 800bee0:	d0c9      	beq.n	800be76 <__sflush_r+0x1a>
 800bee2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bee6:	4299      	cmp	r1, r3
 800bee8:	d002      	beq.n	800bef0 <__sflush_r+0x94>
 800beea:	4628      	mov	r0, r5
 800beec:	f7ff f9f6 	bl	800b2dc <_free_r>
 800bef0:	2000      	movs	r0, #0
 800bef2:	6360      	str	r0, [r4, #52]	; 0x34
 800bef4:	e7c0      	b.n	800be78 <__sflush_r+0x1c>
 800bef6:	2301      	movs	r3, #1
 800bef8:	4628      	mov	r0, r5
 800befa:	47b0      	blx	r6
 800befc:	1c41      	adds	r1, r0, #1
 800befe:	d1c8      	bne.n	800be92 <__sflush_r+0x36>
 800bf00:	682b      	ldr	r3, [r5, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d0c5      	beq.n	800be92 <__sflush_r+0x36>
 800bf06:	2b1d      	cmp	r3, #29
 800bf08:	d001      	beq.n	800bf0e <__sflush_r+0xb2>
 800bf0a:	2b16      	cmp	r3, #22
 800bf0c:	d101      	bne.n	800bf12 <__sflush_r+0xb6>
 800bf0e:	602f      	str	r7, [r5, #0]
 800bf10:	e7b1      	b.n	800be76 <__sflush_r+0x1a>
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf18:	81a3      	strh	r3, [r4, #12]
 800bf1a:	e7ad      	b.n	800be78 <__sflush_r+0x1c>
 800bf1c:	690f      	ldr	r7, [r1, #16]
 800bf1e:	2f00      	cmp	r7, #0
 800bf20:	d0a9      	beq.n	800be76 <__sflush_r+0x1a>
 800bf22:	0793      	lsls	r3, r2, #30
 800bf24:	680e      	ldr	r6, [r1, #0]
 800bf26:	bf08      	it	eq
 800bf28:	694b      	ldreq	r3, [r1, #20]
 800bf2a:	600f      	str	r7, [r1, #0]
 800bf2c:	bf18      	it	ne
 800bf2e:	2300      	movne	r3, #0
 800bf30:	eba6 0807 	sub.w	r8, r6, r7
 800bf34:	608b      	str	r3, [r1, #8]
 800bf36:	f1b8 0f00 	cmp.w	r8, #0
 800bf3a:	dd9c      	ble.n	800be76 <__sflush_r+0x1a>
 800bf3c:	6a21      	ldr	r1, [r4, #32]
 800bf3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf40:	4643      	mov	r3, r8
 800bf42:	463a      	mov	r2, r7
 800bf44:	4628      	mov	r0, r5
 800bf46:	47b0      	blx	r6
 800bf48:	2800      	cmp	r0, #0
 800bf4a:	dc06      	bgt.n	800bf5a <__sflush_r+0xfe>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295
 800bf58:	e78e      	b.n	800be78 <__sflush_r+0x1c>
 800bf5a:	4407      	add	r7, r0
 800bf5c:	eba8 0800 	sub.w	r8, r8, r0
 800bf60:	e7e9      	b.n	800bf36 <__sflush_r+0xda>
 800bf62:	bf00      	nop
 800bf64:	dfbffffe 	.word	0xdfbffffe

0800bf68 <_fflush_r>:
 800bf68:	b538      	push	{r3, r4, r5, lr}
 800bf6a:	690b      	ldr	r3, [r1, #16]
 800bf6c:	4605      	mov	r5, r0
 800bf6e:	460c      	mov	r4, r1
 800bf70:	b913      	cbnz	r3, 800bf78 <_fflush_r+0x10>
 800bf72:	2500      	movs	r5, #0
 800bf74:	4628      	mov	r0, r5
 800bf76:	bd38      	pop	{r3, r4, r5, pc}
 800bf78:	b118      	cbz	r0, 800bf82 <_fflush_r+0x1a>
 800bf7a:	6a03      	ldr	r3, [r0, #32]
 800bf7c:	b90b      	cbnz	r3, 800bf82 <_fflush_r+0x1a>
 800bf7e:	f7fe f935 	bl	800a1ec <__sinit>
 800bf82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d0f3      	beq.n	800bf72 <_fflush_r+0xa>
 800bf8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf8c:	07d0      	lsls	r0, r2, #31
 800bf8e:	d404      	bmi.n	800bf9a <_fflush_r+0x32>
 800bf90:	0599      	lsls	r1, r3, #22
 800bf92:	d402      	bmi.n	800bf9a <_fflush_r+0x32>
 800bf94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf96:	f7fe fb22 	bl	800a5de <__retarget_lock_acquire_recursive>
 800bf9a:	4628      	mov	r0, r5
 800bf9c:	4621      	mov	r1, r4
 800bf9e:	f7ff ff5d 	bl	800be5c <__sflush_r>
 800bfa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfa4:	07da      	lsls	r2, r3, #31
 800bfa6:	4605      	mov	r5, r0
 800bfa8:	d4e4      	bmi.n	800bf74 <_fflush_r+0xc>
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	059b      	lsls	r3, r3, #22
 800bfae:	d4e1      	bmi.n	800bf74 <_fflush_r+0xc>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfb2:	f7fe fb15 	bl	800a5e0 <__retarget_lock_release_recursive>
 800bfb6:	e7dd      	b.n	800bf74 <_fflush_r+0xc>

0800bfb8 <__swhatbuf_r>:
 800bfb8:	b570      	push	{r4, r5, r6, lr}
 800bfba:	460c      	mov	r4, r1
 800bfbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	b096      	sub	sp, #88	; 0x58
 800bfc4:	4615      	mov	r5, r2
 800bfc6:	461e      	mov	r6, r3
 800bfc8:	da0d      	bge.n	800bfe6 <__swhatbuf_r+0x2e>
 800bfca:	89a3      	ldrh	r3, [r4, #12]
 800bfcc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfd0:	f04f 0100 	mov.w	r1, #0
 800bfd4:	bf0c      	ite	eq
 800bfd6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfda:	2340      	movne	r3, #64	; 0x40
 800bfdc:	2000      	movs	r0, #0
 800bfde:	6031      	str	r1, [r6, #0]
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	b016      	add	sp, #88	; 0x58
 800bfe4:	bd70      	pop	{r4, r5, r6, pc}
 800bfe6:	466a      	mov	r2, sp
 800bfe8:	f000 f848 	bl	800c07c <_fstat_r>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	dbec      	blt.n	800bfca <__swhatbuf_r+0x12>
 800bff0:	9901      	ldr	r1, [sp, #4]
 800bff2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bff6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bffa:	4259      	negs	r1, r3
 800bffc:	4159      	adcs	r1, r3
 800bffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c002:	e7eb      	b.n	800bfdc <__swhatbuf_r+0x24>

0800c004 <__smakebuf_r>:
 800c004:	898b      	ldrh	r3, [r1, #12]
 800c006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c008:	079d      	lsls	r5, r3, #30
 800c00a:	4606      	mov	r6, r0
 800c00c:	460c      	mov	r4, r1
 800c00e:	d507      	bpl.n	800c020 <__smakebuf_r+0x1c>
 800c010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c014:	6023      	str	r3, [r4, #0]
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	2301      	movs	r3, #1
 800c01a:	6163      	str	r3, [r4, #20]
 800c01c:	b002      	add	sp, #8
 800c01e:	bd70      	pop	{r4, r5, r6, pc}
 800c020:	ab01      	add	r3, sp, #4
 800c022:	466a      	mov	r2, sp
 800c024:	f7ff ffc8 	bl	800bfb8 <__swhatbuf_r>
 800c028:	9900      	ldr	r1, [sp, #0]
 800c02a:	4605      	mov	r5, r0
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7ff f9c9 	bl	800b3c4 <_malloc_r>
 800c032:	b948      	cbnz	r0, 800c048 <__smakebuf_r+0x44>
 800c034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d4ef      	bmi.n	800c01c <__smakebuf_r+0x18>
 800c03c:	f023 0303 	bic.w	r3, r3, #3
 800c040:	f043 0302 	orr.w	r3, r3, #2
 800c044:	81a3      	strh	r3, [r4, #12]
 800c046:	e7e3      	b.n	800c010 <__smakebuf_r+0xc>
 800c048:	89a3      	ldrh	r3, [r4, #12]
 800c04a:	6020      	str	r0, [r4, #0]
 800c04c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c050:	81a3      	strh	r3, [r4, #12]
 800c052:	9b00      	ldr	r3, [sp, #0]
 800c054:	6163      	str	r3, [r4, #20]
 800c056:	9b01      	ldr	r3, [sp, #4]
 800c058:	6120      	str	r0, [r4, #16]
 800c05a:	b15b      	cbz	r3, 800c074 <__smakebuf_r+0x70>
 800c05c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c060:	4630      	mov	r0, r6
 800c062:	f000 f81d 	bl	800c0a0 <_isatty_r>
 800c066:	b128      	cbz	r0, 800c074 <__smakebuf_r+0x70>
 800c068:	89a3      	ldrh	r3, [r4, #12]
 800c06a:	f023 0303 	bic.w	r3, r3, #3
 800c06e:	f043 0301 	orr.w	r3, r3, #1
 800c072:	81a3      	strh	r3, [r4, #12]
 800c074:	89a3      	ldrh	r3, [r4, #12]
 800c076:	431d      	orrs	r5, r3
 800c078:	81a5      	strh	r5, [r4, #12]
 800c07a:	e7cf      	b.n	800c01c <__smakebuf_r+0x18>

0800c07c <_fstat_r>:
 800c07c:	b538      	push	{r3, r4, r5, lr}
 800c07e:	4d07      	ldr	r5, [pc, #28]	; (800c09c <_fstat_r+0x20>)
 800c080:	2300      	movs	r3, #0
 800c082:	4604      	mov	r4, r0
 800c084:	4608      	mov	r0, r1
 800c086:	4611      	mov	r1, r2
 800c088:	602b      	str	r3, [r5, #0]
 800c08a:	f7f9 f928 	bl	80052de <_fstat>
 800c08e:	1c43      	adds	r3, r0, #1
 800c090:	d102      	bne.n	800c098 <_fstat_r+0x1c>
 800c092:	682b      	ldr	r3, [r5, #0]
 800c094:	b103      	cbz	r3, 800c098 <_fstat_r+0x1c>
 800c096:	6023      	str	r3, [r4, #0]
 800c098:	bd38      	pop	{r3, r4, r5, pc}
 800c09a:	bf00      	nop
 800c09c:	200022ac 	.word	0x200022ac

0800c0a0 <_isatty_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4d06      	ldr	r5, [pc, #24]	; (800c0bc <_isatty_r+0x1c>)
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	4608      	mov	r0, r1
 800c0aa:	602b      	str	r3, [r5, #0]
 800c0ac:	f7f9 f927 	bl	80052fe <_isatty>
 800c0b0:	1c43      	adds	r3, r0, #1
 800c0b2:	d102      	bne.n	800c0ba <_isatty_r+0x1a>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	b103      	cbz	r3, 800c0ba <_isatty_r+0x1a>
 800c0b8:	6023      	str	r3, [r4, #0]
 800c0ba:	bd38      	pop	{r3, r4, r5, pc}
 800c0bc:	200022ac 	.word	0x200022ac

0800c0c0 <_sbrk_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d06      	ldr	r5, [pc, #24]	; (800c0dc <_sbrk_r+0x1c>)
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	4608      	mov	r0, r1
 800c0ca:	602b      	str	r3, [r5, #0]
 800c0cc:	f7f9 f930 	bl	8005330 <_sbrk>
 800c0d0:	1c43      	adds	r3, r0, #1
 800c0d2:	d102      	bne.n	800c0da <_sbrk_r+0x1a>
 800c0d4:	682b      	ldr	r3, [r5, #0]
 800c0d6:	b103      	cbz	r3, 800c0da <_sbrk_r+0x1a>
 800c0d8:	6023      	str	r3, [r4, #0]
 800c0da:	bd38      	pop	{r3, r4, r5, pc}
 800c0dc:	200022ac 	.word	0x200022ac

0800c0e0 <memcpy>:
 800c0e0:	440a      	add	r2, r1
 800c0e2:	4291      	cmp	r1, r2
 800c0e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0e8:	d100      	bne.n	800c0ec <memcpy+0xc>
 800c0ea:	4770      	bx	lr
 800c0ec:	b510      	push	{r4, lr}
 800c0ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0f6:	4291      	cmp	r1, r2
 800c0f8:	d1f9      	bne.n	800c0ee <memcpy+0xe>
 800c0fa:	bd10      	pop	{r4, pc}

0800c0fc <__assert_func>:
 800c0fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0fe:	4614      	mov	r4, r2
 800c100:	461a      	mov	r2, r3
 800c102:	4b09      	ldr	r3, [pc, #36]	; (800c128 <__assert_func+0x2c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4605      	mov	r5, r0
 800c108:	68d8      	ldr	r0, [r3, #12]
 800c10a:	b14c      	cbz	r4, 800c120 <__assert_func+0x24>
 800c10c:	4b07      	ldr	r3, [pc, #28]	; (800c12c <__assert_func+0x30>)
 800c10e:	9100      	str	r1, [sp, #0]
 800c110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c114:	4906      	ldr	r1, [pc, #24]	; (800c130 <__assert_func+0x34>)
 800c116:	462b      	mov	r3, r5
 800c118:	f000 f844 	bl	800c1a4 <fiprintf>
 800c11c:	f000 f854 	bl	800c1c8 <abort>
 800c120:	4b04      	ldr	r3, [pc, #16]	; (800c134 <__assert_func+0x38>)
 800c122:	461c      	mov	r4, r3
 800c124:	e7f3      	b.n	800c10e <__assert_func+0x12>
 800c126:	bf00      	nop
 800c128:	20000068 	.word	0x20000068
 800c12c:	0800d42f 	.word	0x0800d42f
 800c130:	0800d43c 	.word	0x0800d43c
 800c134:	0800d46a 	.word	0x0800d46a

0800c138 <_calloc_r>:
 800c138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c13a:	fba1 2402 	umull	r2, r4, r1, r2
 800c13e:	b94c      	cbnz	r4, 800c154 <_calloc_r+0x1c>
 800c140:	4611      	mov	r1, r2
 800c142:	9201      	str	r2, [sp, #4]
 800c144:	f7ff f93e 	bl	800b3c4 <_malloc_r>
 800c148:	9a01      	ldr	r2, [sp, #4]
 800c14a:	4605      	mov	r5, r0
 800c14c:	b930      	cbnz	r0, 800c15c <_calloc_r+0x24>
 800c14e:	4628      	mov	r0, r5
 800c150:	b003      	add	sp, #12
 800c152:	bd30      	pop	{r4, r5, pc}
 800c154:	220c      	movs	r2, #12
 800c156:	6002      	str	r2, [r0, #0]
 800c158:	2500      	movs	r5, #0
 800c15a:	e7f8      	b.n	800c14e <_calloc_r+0x16>
 800c15c:	4621      	mov	r1, r4
 800c15e:	f7fe f9c1 	bl	800a4e4 <memset>
 800c162:	e7f4      	b.n	800c14e <_calloc_r+0x16>

0800c164 <__ascii_mbtowc>:
 800c164:	b082      	sub	sp, #8
 800c166:	b901      	cbnz	r1, 800c16a <__ascii_mbtowc+0x6>
 800c168:	a901      	add	r1, sp, #4
 800c16a:	b142      	cbz	r2, 800c17e <__ascii_mbtowc+0x1a>
 800c16c:	b14b      	cbz	r3, 800c182 <__ascii_mbtowc+0x1e>
 800c16e:	7813      	ldrb	r3, [r2, #0]
 800c170:	600b      	str	r3, [r1, #0]
 800c172:	7812      	ldrb	r2, [r2, #0]
 800c174:	1e10      	subs	r0, r2, #0
 800c176:	bf18      	it	ne
 800c178:	2001      	movne	r0, #1
 800c17a:	b002      	add	sp, #8
 800c17c:	4770      	bx	lr
 800c17e:	4610      	mov	r0, r2
 800c180:	e7fb      	b.n	800c17a <__ascii_mbtowc+0x16>
 800c182:	f06f 0001 	mvn.w	r0, #1
 800c186:	e7f8      	b.n	800c17a <__ascii_mbtowc+0x16>

0800c188 <__ascii_wctomb>:
 800c188:	b149      	cbz	r1, 800c19e <__ascii_wctomb+0x16>
 800c18a:	2aff      	cmp	r2, #255	; 0xff
 800c18c:	bf85      	ittet	hi
 800c18e:	238a      	movhi	r3, #138	; 0x8a
 800c190:	6003      	strhi	r3, [r0, #0]
 800c192:	700a      	strbls	r2, [r1, #0]
 800c194:	f04f 30ff 	movhi.w	r0, #4294967295
 800c198:	bf98      	it	ls
 800c19a:	2001      	movls	r0, #1
 800c19c:	4770      	bx	lr
 800c19e:	4608      	mov	r0, r1
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <fiprintf>:
 800c1a4:	b40e      	push	{r1, r2, r3}
 800c1a6:	b503      	push	{r0, r1, lr}
 800c1a8:	4601      	mov	r1, r0
 800c1aa:	ab03      	add	r3, sp, #12
 800c1ac:	4805      	ldr	r0, [pc, #20]	; (800c1c4 <fiprintf+0x20>)
 800c1ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1b2:	6800      	ldr	r0, [r0, #0]
 800c1b4:	9301      	str	r3, [sp, #4]
 800c1b6:	f7ff fd37 	bl	800bc28 <_vfiprintf_r>
 800c1ba:	b002      	add	sp, #8
 800c1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1c0:	b003      	add	sp, #12
 800c1c2:	4770      	bx	lr
 800c1c4:	20000068 	.word	0x20000068

0800c1c8 <abort>:
 800c1c8:	b508      	push	{r3, lr}
 800c1ca:	2006      	movs	r0, #6
 800c1cc:	f000 f82c 	bl	800c228 <raise>
 800c1d0:	2001      	movs	r0, #1
 800c1d2:	f7f9 f835 	bl	8005240 <_exit>

0800c1d6 <_raise_r>:
 800c1d6:	291f      	cmp	r1, #31
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	460d      	mov	r5, r1
 800c1de:	d904      	bls.n	800c1ea <_raise_r+0x14>
 800c1e0:	2316      	movs	r3, #22
 800c1e2:	6003      	str	r3, [r0, #0]
 800c1e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1e8:	bd38      	pop	{r3, r4, r5, pc}
 800c1ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c1ec:	b112      	cbz	r2, 800c1f4 <_raise_r+0x1e>
 800c1ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1f2:	b94b      	cbnz	r3, 800c208 <_raise_r+0x32>
 800c1f4:	4620      	mov	r0, r4
 800c1f6:	f000 f831 	bl	800c25c <_getpid_r>
 800c1fa:	462a      	mov	r2, r5
 800c1fc:	4601      	mov	r1, r0
 800c1fe:	4620      	mov	r0, r4
 800c200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c204:	f000 b818 	b.w	800c238 <_kill_r>
 800c208:	2b01      	cmp	r3, #1
 800c20a:	d00a      	beq.n	800c222 <_raise_r+0x4c>
 800c20c:	1c59      	adds	r1, r3, #1
 800c20e:	d103      	bne.n	800c218 <_raise_r+0x42>
 800c210:	2316      	movs	r3, #22
 800c212:	6003      	str	r3, [r0, #0]
 800c214:	2001      	movs	r0, #1
 800c216:	e7e7      	b.n	800c1e8 <_raise_r+0x12>
 800c218:	2400      	movs	r4, #0
 800c21a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c21e:	4628      	mov	r0, r5
 800c220:	4798      	blx	r3
 800c222:	2000      	movs	r0, #0
 800c224:	e7e0      	b.n	800c1e8 <_raise_r+0x12>
	...

0800c228 <raise>:
 800c228:	4b02      	ldr	r3, [pc, #8]	; (800c234 <raise+0xc>)
 800c22a:	4601      	mov	r1, r0
 800c22c:	6818      	ldr	r0, [r3, #0]
 800c22e:	f7ff bfd2 	b.w	800c1d6 <_raise_r>
 800c232:	bf00      	nop
 800c234:	20000068 	.word	0x20000068

0800c238 <_kill_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d07      	ldr	r5, [pc, #28]	; (800c258 <_kill_r+0x20>)
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	4608      	mov	r0, r1
 800c242:	4611      	mov	r1, r2
 800c244:	602b      	str	r3, [r5, #0]
 800c246:	f7f8 ffeb 	bl	8005220 <_kill>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	d102      	bne.n	800c254 <_kill_r+0x1c>
 800c24e:	682b      	ldr	r3, [r5, #0]
 800c250:	b103      	cbz	r3, 800c254 <_kill_r+0x1c>
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	bf00      	nop
 800c258:	200022ac 	.word	0x200022ac

0800c25c <_getpid_r>:
 800c25c:	f7f8 bfd8 	b.w	8005210 <_getpid>

0800c260 <pow>:
 800c260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c262:	ed2d 8b02 	vpush	{d8}
 800c266:	eeb0 8a40 	vmov.f32	s16, s0
 800c26a:	eef0 8a60 	vmov.f32	s17, s1
 800c26e:	ec55 4b11 	vmov	r4, r5, d1
 800c272:	f000 f979 	bl	800c568 <__ieee754_pow>
 800c276:	4622      	mov	r2, r4
 800c278:	462b      	mov	r3, r5
 800c27a:	4620      	mov	r0, r4
 800c27c:	4629      	mov	r1, r5
 800c27e:	ec57 6b10 	vmov	r6, r7, d0
 800c282:	f7f4 fc7b 	bl	8000b7c <__aeabi_dcmpun>
 800c286:	2800      	cmp	r0, #0
 800c288:	d13b      	bne.n	800c302 <pow+0xa2>
 800c28a:	ec51 0b18 	vmov	r0, r1, d8
 800c28e:	2200      	movs	r2, #0
 800c290:	2300      	movs	r3, #0
 800c292:	f7f4 fc41 	bl	8000b18 <__aeabi_dcmpeq>
 800c296:	b1b8      	cbz	r0, 800c2c8 <pow+0x68>
 800c298:	2200      	movs	r2, #0
 800c29a:	2300      	movs	r3, #0
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f4 fc3a 	bl	8000b18 <__aeabi_dcmpeq>
 800c2a4:	2800      	cmp	r0, #0
 800c2a6:	d146      	bne.n	800c336 <pow+0xd6>
 800c2a8:	ec45 4b10 	vmov	d0, r4, r5
 800c2ac:	f000 f874 	bl	800c398 <finite>
 800c2b0:	b338      	cbz	r0, 800c302 <pow+0xa2>
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	4629      	mov	r1, r5
 800c2ba:	f7f4 fc37 	bl	8000b2c <__aeabi_dcmplt>
 800c2be:	b300      	cbz	r0, 800c302 <pow+0xa2>
 800c2c0:	f7fe f962 	bl	800a588 <__errno>
 800c2c4:	2322      	movs	r3, #34	; 0x22
 800c2c6:	e01b      	b.n	800c300 <pow+0xa0>
 800c2c8:	ec47 6b10 	vmov	d0, r6, r7
 800c2cc:	f000 f864 	bl	800c398 <finite>
 800c2d0:	b9e0      	cbnz	r0, 800c30c <pow+0xac>
 800c2d2:	eeb0 0a48 	vmov.f32	s0, s16
 800c2d6:	eef0 0a68 	vmov.f32	s1, s17
 800c2da:	f000 f85d 	bl	800c398 <finite>
 800c2de:	b1a8      	cbz	r0, 800c30c <pow+0xac>
 800c2e0:	ec45 4b10 	vmov	d0, r4, r5
 800c2e4:	f000 f858 	bl	800c398 <finite>
 800c2e8:	b180      	cbz	r0, 800c30c <pow+0xac>
 800c2ea:	4632      	mov	r2, r6
 800c2ec:	463b      	mov	r3, r7
 800c2ee:	4630      	mov	r0, r6
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	f7f4 fc43 	bl	8000b7c <__aeabi_dcmpun>
 800c2f6:	2800      	cmp	r0, #0
 800c2f8:	d0e2      	beq.n	800c2c0 <pow+0x60>
 800c2fa:	f7fe f945 	bl	800a588 <__errno>
 800c2fe:	2321      	movs	r3, #33	; 0x21
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	ecbd 8b02 	vpop	{d8}
 800c306:	ec47 6b10 	vmov	d0, r6, r7
 800c30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c30c:	2200      	movs	r2, #0
 800c30e:	2300      	movs	r3, #0
 800c310:	4630      	mov	r0, r6
 800c312:	4639      	mov	r1, r7
 800c314:	f7f4 fc00 	bl	8000b18 <__aeabi_dcmpeq>
 800c318:	2800      	cmp	r0, #0
 800c31a:	d0f2      	beq.n	800c302 <pow+0xa2>
 800c31c:	eeb0 0a48 	vmov.f32	s0, s16
 800c320:	eef0 0a68 	vmov.f32	s1, s17
 800c324:	f000 f838 	bl	800c398 <finite>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d0ea      	beq.n	800c302 <pow+0xa2>
 800c32c:	ec45 4b10 	vmov	d0, r4, r5
 800c330:	f000 f832 	bl	800c398 <finite>
 800c334:	e7c3      	b.n	800c2be <pow+0x5e>
 800c336:	4f01      	ldr	r7, [pc, #4]	; (800c33c <pow+0xdc>)
 800c338:	2600      	movs	r6, #0
 800c33a:	e7e2      	b.n	800c302 <pow+0xa2>
 800c33c:	3ff00000 	.word	0x3ff00000

0800c340 <sqrt>:
 800c340:	b538      	push	{r3, r4, r5, lr}
 800c342:	ed2d 8b02 	vpush	{d8}
 800c346:	ec55 4b10 	vmov	r4, r5, d0
 800c34a:	f000 f831 	bl	800c3b0 <__ieee754_sqrt>
 800c34e:	4622      	mov	r2, r4
 800c350:	462b      	mov	r3, r5
 800c352:	4620      	mov	r0, r4
 800c354:	4629      	mov	r1, r5
 800c356:	eeb0 8a40 	vmov.f32	s16, s0
 800c35a:	eef0 8a60 	vmov.f32	s17, s1
 800c35e:	f7f4 fc0d 	bl	8000b7c <__aeabi_dcmpun>
 800c362:	b990      	cbnz	r0, 800c38a <sqrt+0x4a>
 800c364:	2200      	movs	r2, #0
 800c366:	2300      	movs	r3, #0
 800c368:	4620      	mov	r0, r4
 800c36a:	4629      	mov	r1, r5
 800c36c:	f7f4 fbde 	bl	8000b2c <__aeabi_dcmplt>
 800c370:	b158      	cbz	r0, 800c38a <sqrt+0x4a>
 800c372:	f7fe f909 	bl	800a588 <__errno>
 800c376:	2321      	movs	r3, #33	; 0x21
 800c378:	6003      	str	r3, [r0, #0]
 800c37a:	2200      	movs	r2, #0
 800c37c:	2300      	movs	r3, #0
 800c37e:	4610      	mov	r0, r2
 800c380:	4619      	mov	r1, r3
 800c382:	f7f4 fa8b 	bl	800089c <__aeabi_ddiv>
 800c386:	ec41 0b18 	vmov	d8, r0, r1
 800c38a:	eeb0 0a48 	vmov.f32	s0, s16
 800c38e:	eef0 0a68 	vmov.f32	s1, s17
 800c392:	ecbd 8b02 	vpop	{d8}
 800c396:	bd38      	pop	{r3, r4, r5, pc}

0800c398 <finite>:
 800c398:	b082      	sub	sp, #8
 800c39a:	ed8d 0b00 	vstr	d0, [sp]
 800c39e:	9801      	ldr	r0, [sp, #4]
 800c3a0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c3a4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3a8:	0fc0      	lsrs	r0, r0, #31
 800c3aa:	b002      	add	sp, #8
 800c3ac:	4770      	bx	lr
	...

0800c3b0 <__ieee754_sqrt>:
 800c3b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	ec55 4b10 	vmov	r4, r5, d0
 800c3b8:	4e67      	ldr	r6, [pc, #412]	; (800c558 <__ieee754_sqrt+0x1a8>)
 800c3ba:	43ae      	bics	r6, r5
 800c3bc:	ee10 0a10 	vmov	r0, s0
 800c3c0:	ee10 2a10 	vmov	r2, s0
 800c3c4:	4629      	mov	r1, r5
 800c3c6:	462b      	mov	r3, r5
 800c3c8:	d10d      	bne.n	800c3e6 <__ieee754_sqrt+0x36>
 800c3ca:	f7f4 f93d 	bl	8000648 <__aeabi_dmul>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	4629      	mov	r1, r5
 800c3d6:	f7f3 ff81 	bl	80002dc <__adddf3>
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
 800c3de:	ec45 4b10 	vmov	d0, r4, r5
 800c3e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	2d00      	cmp	r5, #0
 800c3e8:	dc0b      	bgt.n	800c402 <__ieee754_sqrt+0x52>
 800c3ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3ee:	4326      	orrs	r6, r4
 800c3f0:	d0f5      	beq.n	800c3de <__ieee754_sqrt+0x2e>
 800c3f2:	b135      	cbz	r5, 800c402 <__ieee754_sqrt+0x52>
 800c3f4:	f7f3 ff70 	bl	80002d8 <__aeabi_dsub>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	f7f4 fa4e 	bl	800089c <__aeabi_ddiv>
 800c400:	e7eb      	b.n	800c3da <__ieee754_sqrt+0x2a>
 800c402:	1509      	asrs	r1, r1, #20
 800c404:	f000 808d 	beq.w	800c522 <__ieee754_sqrt+0x172>
 800c408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c40c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800c410:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c414:	07c9      	lsls	r1, r1, #31
 800c416:	bf5c      	itt	pl
 800c418:	005b      	lslpl	r3, r3, #1
 800c41a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800c41e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c422:	bf58      	it	pl
 800c424:	0052      	lslpl	r2, r2, #1
 800c426:	2500      	movs	r5, #0
 800c428:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c42c:	1076      	asrs	r6, r6, #1
 800c42e:	0052      	lsls	r2, r2, #1
 800c430:	f04f 0e16 	mov.w	lr, #22
 800c434:	46ac      	mov	ip, r5
 800c436:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c43a:	eb0c 0001 	add.w	r0, ip, r1
 800c43e:	4298      	cmp	r0, r3
 800c440:	bfde      	ittt	le
 800c442:	1a1b      	suble	r3, r3, r0
 800c444:	eb00 0c01 	addle.w	ip, r0, r1
 800c448:	186d      	addle	r5, r5, r1
 800c44a:	005b      	lsls	r3, r3, #1
 800c44c:	f1be 0e01 	subs.w	lr, lr, #1
 800c450:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c454:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c458:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c45c:	d1ed      	bne.n	800c43a <__ieee754_sqrt+0x8a>
 800c45e:	4674      	mov	r4, lr
 800c460:	2720      	movs	r7, #32
 800c462:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c466:	4563      	cmp	r3, ip
 800c468:	eb01 000e 	add.w	r0, r1, lr
 800c46c:	dc02      	bgt.n	800c474 <__ieee754_sqrt+0xc4>
 800c46e:	d113      	bne.n	800c498 <__ieee754_sqrt+0xe8>
 800c470:	4290      	cmp	r0, r2
 800c472:	d811      	bhi.n	800c498 <__ieee754_sqrt+0xe8>
 800c474:	2800      	cmp	r0, #0
 800c476:	eb00 0e01 	add.w	lr, r0, r1
 800c47a:	da57      	bge.n	800c52c <__ieee754_sqrt+0x17c>
 800c47c:	f1be 0f00 	cmp.w	lr, #0
 800c480:	db54      	blt.n	800c52c <__ieee754_sqrt+0x17c>
 800c482:	f10c 0801 	add.w	r8, ip, #1
 800c486:	eba3 030c 	sub.w	r3, r3, ip
 800c48a:	4290      	cmp	r0, r2
 800c48c:	bf88      	it	hi
 800c48e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c492:	1a12      	subs	r2, r2, r0
 800c494:	440c      	add	r4, r1
 800c496:	46c4      	mov	ip, r8
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	3f01      	subs	r7, #1
 800c49c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800c4a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800c4a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800c4a8:	d1dd      	bne.n	800c466 <__ieee754_sqrt+0xb6>
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	d01b      	beq.n	800c4e6 <__ieee754_sqrt+0x136>
 800c4ae:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800c55c <__ieee754_sqrt+0x1ac>
 800c4b2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800c560 <__ieee754_sqrt+0x1b0>
 800c4b6:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4ba:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4be:	f7f3 ff0b 	bl	80002d8 <__aeabi_dsub>
 800c4c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4c6:	4602      	mov	r2, r0
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	4640      	mov	r0, r8
 800c4cc:	4649      	mov	r1, r9
 800c4ce:	f7f4 fb37 	bl	8000b40 <__aeabi_dcmple>
 800c4d2:	b140      	cbz	r0, 800c4e6 <__ieee754_sqrt+0x136>
 800c4d4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c4d8:	e9da 0100 	ldrd	r0, r1, [sl]
 800c4dc:	e9db 2300 	ldrd	r2, r3, [fp]
 800c4e0:	d126      	bne.n	800c530 <__ieee754_sqrt+0x180>
 800c4e2:	3501      	adds	r5, #1
 800c4e4:	463c      	mov	r4, r7
 800c4e6:	106a      	asrs	r2, r5, #1
 800c4e8:	0863      	lsrs	r3, r4, #1
 800c4ea:	07e9      	lsls	r1, r5, #31
 800c4ec:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c4f0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c4f4:	bf48      	it	mi
 800c4f6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c4fa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800c4fe:	461c      	mov	r4, r3
 800c500:	e76d      	b.n	800c3de <__ieee754_sqrt+0x2e>
 800c502:	0ad3      	lsrs	r3, r2, #11
 800c504:	3815      	subs	r0, #21
 800c506:	0552      	lsls	r2, r2, #21
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d0fa      	beq.n	800c502 <__ieee754_sqrt+0x152>
 800c50c:	02dc      	lsls	r4, r3, #11
 800c50e:	d50a      	bpl.n	800c526 <__ieee754_sqrt+0x176>
 800c510:	f1c1 0420 	rsb	r4, r1, #32
 800c514:	fa22 f404 	lsr.w	r4, r2, r4
 800c518:	1e4d      	subs	r5, r1, #1
 800c51a:	408a      	lsls	r2, r1
 800c51c:	4323      	orrs	r3, r4
 800c51e:	1b41      	subs	r1, r0, r5
 800c520:	e772      	b.n	800c408 <__ieee754_sqrt+0x58>
 800c522:	4608      	mov	r0, r1
 800c524:	e7f0      	b.n	800c508 <__ieee754_sqrt+0x158>
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	3101      	adds	r1, #1
 800c52a:	e7ef      	b.n	800c50c <__ieee754_sqrt+0x15c>
 800c52c:	46e0      	mov	r8, ip
 800c52e:	e7aa      	b.n	800c486 <__ieee754_sqrt+0xd6>
 800c530:	f7f3 fed4 	bl	80002dc <__adddf3>
 800c534:	e9da 8900 	ldrd	r8, r9, [sl]
 800c538:	4602      	mov	r2, r0
 800c53a:	460b      	mov	r3, r1
 800c53c:	4640      	mov	r0, r8
 800c53e:	4649      	mov	r1, r9
 800c540:	f7f4 faf4 	bl	8000b2c <__aeabi_dcmplt>
 800c544:	b120      	cbz	r0, 800c550 <__ieee754_sqrt+0x1a0>
 800c546:	1ca0      	adds	r0, r4, #2
 800c548:	bf08      	it	eq
 800c54a:	3501      	addeq	r5, #1
 800c54c:	3402      	adds	r4, #2
 800c54e:	e7ca      	b.n	800c4e6 <__ieee754_sqrt+0x136>
 800c550:	3401      	adds	r4, #1
 800c552:	f024 0401 	bic.w	r4, r4, #1
 800c556:	e7c6      	b.n	800c4e6 <__ieee754_sqrt+0x136>
 800c558:	7ff00000 	.word	0x7ff00000
 800c55c:	200001d8 	.word	0x200001d8
 800c560:	200001e0 	.word	0x200001e0
 800c564:	00000000 	.word	0x00000000

0800c568 <__ieee754_pow>:
 800c568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c56c:	ed2d 8b06 	vpush	{d8-d10}
 800c570:	b089      	sub	sp, #36	; 0x24
 800c572:	ed8d 1b00 	vstr	d1, [sp]
 800c576:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c57a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c57e:	ea58 0102 	orrs.w	r1, r8, r2
 800c582:	ec57 6b10 	vmov	r6, r7, d0
 800c586:	d115      	bne.n	800c5b4 <__ieee754_pow+0x4c>
 800c588:	19b3      	adds	r3, r6, r6
 800c58a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c58e:	4152      	adcs	r2, r2
 800c590:	4299      	cmp	r1, r3
 800c592:	4b89      	ldr	r3, [pc, #548]	; (800c7b8 <__ieee754_pow+0x250>)
 800c594:	4193      	sbcs	r3, r2
 800c596:	f080 84d1 	bcs.w	800cf3c <__ieee754_pow+0x9d4>
 800c59a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c59e:	4630      	mov	r0, r6
 800c5a0:	4639      	mov	r1, r7
 800c5a2:	f7f3 fe9b 	bl	80002dc <__adddf3>
 800c5a6:	ec41 0b10 	vmov	d0, r0, r1
 800c5aa:	b009      	add	sp, #36	; 0x24
 800c5ac:	ecbd 8b06 	vpop	{d8-d10}
 800c5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b4:	4b81      	ldr	r3, [pc, #516]	; (800c7bc <__ieee754_pow+0x254>)
 800c5b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c5ba:	429c      	cmp	r4, r3
 800c5bc:	ee10 aa10 	vmov	sl, s0
 800c5c0:	463d      	mov	r5, r7
 800c5c2:	dc06      	bgt.n	800c5d2 <__ieee754_pow+0x6a>
 800c5c4:	d101      	bne.n	800c5ca <__ieee754_pow+0x62>
 800c5c6:	2e00      	cmp	r6, #0
 800c5c8:	d1e7      	bne.n	800c59a <__ieee754_pow+0x32>
 800c5ca:	4598      	cmp	r8, r3
 800c5cc:	dc01      	bgt.n	800c5d2 <__ieee754_pow+0x6a>
 800c5ce:	d10f      	bne.n	800c5f0 <__ieee754_pow+0x88>
 800c5d0:	b172      	cbz	r2, 800c5f0 <__ieee754_pow+0x88>
 800c5d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c5d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c5da:	ea55 050a 	orrs.w	r5, r5, sl
 800c5de:	d1dc      	bne.n	800c59a <__ieee754_pow+0x32>
 800c5e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c5e4:	18db      	adds	r3, r3, r3
 800c5e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c5ea:	4152      	adcs	r2, r2
 800c5ec:	429d      	cmp	r5, r3
 800c5ee:	e7d0      	b.n	800c592 <__ieee754_pow+0x2a>
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	da3b      	bge.n	800c66c <__ieee754_pow+0x104>
 800c5f4:	4b72      	ldr	r3, [pc, #456]	; (800c7c0 <__ieee754_pow+0x258>)
 800c5f6:	4598      	cmp	r8, r3
 800c5f8:	dc51      	bgt.n	800c69e <__ieee754_pow+0x136>
 800c5fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c5fe:	4598      	cmp	r8, r3
 800c600:	f340 84ab 	ble.w	800cf5a <__ieee754_pow+0x9f2>
 800c604:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c608:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c60c:	2b14      	cmp	r3, #20
 800c60e:	dd0f      	ble.n	800c630 <__ieee754_pow+0xc8>
 800c610:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c614:	fa22 f103 	lsr.w	r1, r2, r3
 800c618:	fa01 f303 	lsl.w	r3, r1, r3
 800c61c:	4293      	cmp	r3, r2
 800c61e:	f040 849c 	bne.w	800cf5a <__ieee754_pow+0x9f2>
 800c622:	f001 0101 	and.w	r1, r1, #1
 800c626:	f1c1 0302 	rsb	r3, r1, #2
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	b182      	cbz	r2, 800c650 <__ieee754_pow+0xe8>
 800c62e:	e05f      	b.n	800c6f0 <__ieee754_pow+0x188>
 800c630:	2a00      	cmp	r2, #0
 800c632:	d15b      	bne.n	800c6ec <__ieee754_pow+0x184>
 800c634:	f1c3 0314 	rsb	r3, r3, #20
 800c638:	fa48 f103 	asr.w	r1, r8, r3
 800c63c:	fa01 f303 	lsl.w	r3, r1, r3
 800c640:	4543      	cmp	r3, r8
 800c642:	f040 8487 	bne.w	800cf54 <__ieee754_pow+0x9ec>
 800c646:	f001 0101 	and.w	r1, r1, #1
 800c64a:	f1c1 0302 	rsb	r3, r1, #2
 800c64e:	9304      	str	r3, [sp, #16]
 800c650:	4b5c      	ldr	r3, [pc, #368]	; (800c7c4 <__ieee754_pow+0x25c>)
 800c652:	4598      	cmp	r8, r3
 800c654:	d132      	bne.n	800c6bc <__ieee754_pow+0x154>
 800c656:	f1b9 0f00 	cmp.w	r9, #0
 800c65a:	f280 8477 	bge.w	800cf4c <__ieee754_pow+0x9e4>
 800c65e:	4959      	ldr	r1, [pc, #356]	; (800c7c4 <__ieee754_pow+0x25c>)
 800c660:	4632      	mov	r2, r6
 800c662:	463b      	mov	r3, r7
 800c664:	2000      	movs	r0, #0
 800c666:	f7f4 f919 	bl	800089c <__aeabi_ddiv>
 800c66a:	e79c      	b.n	800c5a6 <__ieee754_pow+0x3e>
 800c66c:	2300      	movs	r3, #0
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	2a00      	cmp	r2, #0
 800c672:	d13d      	bne.n	800c6f0 <__ieee754_pow+0x188>
 800c674:	4b51      	ldr	r3, [pc, #324]	; (800c7bc <__ieee754_pow+0x254>)
 800c676:	4598      	cmp	r8, r3
 800c678:	d1ea      	bne.n	800c650 <__ieee754_pow+0xe8>
 800c67a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c67e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c682:	ea53 030a 	orrs.w	r3, r3, sl
 800c686:	f000 8459 	beq.w	800cf3c <__ieee754_pow+0x9d4>
 800c68a:	4b4f      	ldr	r3, [pc, #316]	; (800c7c8 <__ieee754_pow+0x260>)
 800c68c:	429c      	cmp	r4, r3
 800c68e:	dd08      	ble.n	800c6a2 <__ieee754_pow+0x13a>
 800c690:	f1b9 0f00 	cmp.w	r9, #0
 800c694:	f2c0 8456 	blt.w	800cf44 <__ieee754_pow+0x9dc>
 800c698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c69c:	e783      	b.n	800c5a6 <__ieee754_pow+0x3e>
 800c69e:	2302      	movs	r3, #2
 800c6a0:	e7e5      	b.n	800c66e <__ieee754_pow+0x106>
 800c6a2:	f1b9 0f00 	cmp.w	r9, #0
 800c6a6:	f04f 0000 	mov.w	r0, #0
 800c6aa:	f04f 0100 	mov.w	r1, #0
 800c6ae:	f6bf af7a 	bge.w	800c5a6 <__ieee754_pow+0x3e>
 800c6b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c6b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c6ba:	e774      	b.n	800c5a6 <__ieee754_pow+0x3e>
 800c6bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c6c0:	d106      	bne.n	800c6d0 <__ieee754_pow+0x168>
 800c6c2:	4632      	mov	r2, r6
 800c6c4:	463b      	mov	r3, r7
 800c6c6:	4630      	mov	r0, r6
 800c6c8:	4639      	mov	r1, r7
 800c6ca:	f7f3 ffbd 	bl	8000648 <__aeabi_dmul>
 800c6ce:	e76a      	b.n	800c5a6 <__ieee754_pow+0x3e>
 800c6d0:	4b3e      	ldr	r3, [pc, #248]	; (800c7cc <__ieee754_pow+0x264>)
 800c6d2:	4599      	cmp	r9, r3
 800c6d4:	d10c      	bne.n	800c6f0 <__ieee754_pow+0x188>
 800c6d6:	2d00      	cmp	r5, #0
 800c6d8:	db0a      	blt.n	800c6f0 <__ieee754_pow+0x188>
 800c6da:	ec47 6b10 	vmov	d0, r6, r7
 800c6de:	b009      	add	sp, #36	; 0x24
 800c6e0:	ecbd 8b06 	vpop	{d8-d10}
 800c6e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6e8:	f7ff be62 	b.w	800c3b0 <__ieee754_sqrt>
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9304      	str	r3, [sp, #16]
 800c6f0:	ec47 6b10 	vmov	d0, r6, r7
 800c6f4:	f000 fc62 	bl	800cfbc <fabs>
 800c6f8:	ec51 0b10 	vmov	r0, r1, d0
 800c6fc:	f1ba 0f00 	cmp.w	sl, #0
 800c700:	d129      	bne.n	800c756 <__ieee754_pow+0x1ee>
 800c702:	b124      	cbz	r4, 800c70e <__ieee754_pow+0x1a6>
 800c704:	4b2f      	ldr	r3, [pc, #188]	; (800c7c4 <__ieee754_pow+0x25c>)
 800c706:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d123      	bne.n	800c756 <__ieee754_pow+0x1ee>
 800c70e:	f1b9 0f00 	cmp.w	r9, #0
 800c712:	da05      	bge.n	800c720 <__ieee754_pow+0x1b8>
 800c714:	4602      	mov	r2, r0
 800c716:	460b      	mov	r3, r1
 800c718:	2000      	movs	r0, #0
 800c71a:	492a      	ldr	r1, [pc, #168]	; (800c7c4 <__ieee754_pow+0x25c>)
 800c71c:	f7f4 f8be 	bl	800089c <__aeabi_ddiv>
 800c720:	2d00      	cmp	r5, #0
 800c722:	f6bf af40 	bge.w	800c5a6 <__ieee754_pow+0x3e>
 800c726:	9b04      	ldr	r3, [sp, #16]
 800c728:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c72c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c730:	431c      	orrs	r4, r3
 800c732:	d108      	bne.n	800c746 <__ieee754_pow+0x1de>
 800c734:	4602      	mov	r2, r0
 800c736:	460b      	mov	r3, r1
 800c738:	4610      	mov	r0, r2
 800c73a:	4619      	mov	r1, r3
 800c73c:	f7f3 fdcc 	bl	80002d8 <__aeabi_dsub>
 800c740:	4602      	mov	r2, r0
 800c742:	460b      	mov	r3, r1
 800c744:	e78f      	b.n	800c666 <__ieee754_pow+0xfe>
 800c746:	9b04      	ldr	r3, [sp, #16]
 800c748:	2b01      	cmp	r3, #1
 800c74a:	f47f af2c 	bne.w	800c5a6 <__ieee754_pow+0x3e>
 800c74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c752:	4619      	mov	r1, r3
 800c754:	e727      	b.n	800c5a6 <__ieee754_pow+0x3e>
 800c756:	0feb      	lsrs	r3, r5, #31
 800c758:	3b01      	subs	r3, #1
 800c75a:	9306      	str	r3, [sp, #24]
 800c75c:	9a06      	ldr	r2, [sp, #24]
 800c75e:	9b04      	ldr	r3, [sp, #16]
 800c760:	4313      	orrs	r3, r2
 800c762:	d102      	bne.n	800c76a <__ieee754_pow+0x202>
 800c764:	4632      	mov	r2, r6
 800c766:	463b      	mov	r3, r7
 800c768:	e7e6      	b.n	800c738 <__ieee754_pow+0x1d0>
 800c76a:	4b19      	ldr	r3, [pc, #100]	; (800c7d0 <__ieee754_pow+0x268>)
 800c76c:	4598      	cmp	r8, r3
 800c76e:	f340 80fb 	ble.w	800c968 <__ieee754_pow+0x400>
 800c772:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c776:	4598      	cmp	r8, r3
 800c778:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <__ieee754_pow+0x260>)
 800c77a:	dd0c      	ble.n	800c796 <__ieee754_pow+0x22e>
 800c77c:	429c      	cmp	r4, r3
 800c77e:	dc0f      	bgt.n	800c7a0 <__ieee754_pow+0x238>
 800c780:	f1b9 0f00 	cmp.w	r9, #0
 800c784:	da0f      	bge.n	800c7a6 <__ieee754_pow+0x23e>
 800c786:	2000      	movs	r0, #0
 800c788:	b009      	add	sp, #36	; 0x24
 800c78a:	ecbd 8b06 	vpop	{d8-d10}
 800c78e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c792:	f000 bcc2 	b.w	800d11a <__math_oflow>
 800c796:	429c      	cmp	r4, r3
 800c798:	dbf2      	blt.n	800c780 <__ieee754_pow+0x218>
 800c79a:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <__ieee754_pow+0x25c>)
 800c79c:	429c      	cmp	r4, r3
 800c79e:	dd19      	ble.n	800c7d4 <__ieee754_pow+0x26c>
 800c7a0:	f1b9 0f00 	cmp.w	r9, #0
 800c7a4:	dcef      	bgt.n	800c786 <__ieee754_pow+0x21e>
 800c7a6:	2000      	movs	r0, #0
 800c7a8:	b009      	add	sp, #36	; 0x24
 800c7aa:	ecbd 8b06 	vpop	{d8-d10}
 800c7ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b2:	f000 bca9 	b.w	800d108 <__math_uflow>
 800c7b6:	bf00      	nop
 800c7b8:	fff00000 	.word	0xfff00000
 800c7bc:	7ff00000 	.word	0x7ff00000
 800c7c0:	433fffff 	.word	0x433fffff
 800c7c4:	3ff00000 	.word	0x3ff00000
 800c7c8:	3fefffff 	.word	0x3fefffff
 800c7cc:	3fe00000 	.word	0x3fe00000
 800c7d0:	41e00000 	.word	0x41e00000
 800c7d4:	4b60      	ldr	r3, [pc, #384]	; (800c958 <__ieee754_pow+0x3f0>)
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f7f3 fd7e 	bl	80002d8 <__aeabi_dsub>
 800c7dc:	a354      	add	r3, pc, #336	; (adr r3, 800c930 <__ieee754_pow+0x3c8>)
 800c7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	460d      	mov	r5, r1
 800c7e6:	f7f3 ff2f 	bl	8000648 <__aeabi_dmul>
 800c7ea:	a353      	add	r3, pc, #332	; (adr r3, 800c938 <__ieee754_pow+0x3d0>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	4606      	mov	r6, r0
 800c7f2:	460f      	mov	r7, r1
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	4629      	mov	r1, r5
 800c7f8:	f7f3 ff26 	bl	8000648 <__aeabi_dmul>
 800c7fc:	4b57      	ldr	r3, [pc, #348]	; (800c95c <__ieee754_pow+0x3f4>)
 800c7fe:	4682      	mov	sl, r0
 800c800:	468b      	mov	fp, r1
 800c802:	2200      	movs	r2, #0
 800c804:	4620      	mov	r0, r4
 800c806:	4629      	mov	r1, r5
 800c808:	f7f3 ff1e 	bl	8000648 <__aeabi_dmul>
 800c80c:	4602      	mov	r2, r0
 800c80e:	460b      	mov	r3, r1
 800c810:	a14b      	add	r1, pc, #300	; (adr r1, 800c940 <__ieee754_pow+0x3d8>)
 800c812:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c816:	f7f3 fd5f 	bl	80002d8 <__aeabi_dsub>
 800c81a:	4622      	mov	r2, r4
 800c81c:	462b      	mov	r3, r5
 800c81e:	f7f3 ff13 	bl	8000648 <__aeabi_dmul>
 800c822:	4602      	mov	r2, r0
 800c824:	460b      	mov	r3, r1
 800c826:	2000      	movs	r0, #0
 800c828:	494d      	ldr	r1, [pc, #308]	; (800c960 <__ieee754_pow+0x3f8>)
 800c82a:	f7f3 fd55 	bl	80002d8 <__aeabi_dsub>
 800c82e:	4622      	mov	r2, r4
 800c830:	4680      	mov	r8, r0
 800c832:	4689      	mov	r9, r1
 800c834:	462b      	mov	r3, r5
 800c836:	4620      	mov	r0, r4
 800c838:	4629      	mov	r1, r5
 800c83a:	f7f3 ff05 	bl	8000648 <__aeabi_dmul>
 800c83e:	4602      	mov	r2, r0
 800c840:	460b      	mov	r3, r1
 800c842:	4640      	mov	r0, r8
 800c844:	4649      	mov	r1, r9
 800c846:	f7f3 feff 	bl	8000648 <__aeabi_dmul>
 800c84a:	a33f      	add	r3, pc, #252	; (adr r3, 800c948 <__ieee754_pow+0x3e0>)
 800c84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c850:	f7f3 fefa 	bl	8000648 <__aeabi_dmul>
 800c854:	4602      	mov	r2, r0
 800c856:	460b      	mov	r3, r1
 800c858:	4650      	mov	r0, sl
 800c85a:	4659      	mov	r1, fp
 800c85c:	f7f3 fd3c 	bl	80002d8 <__aeabi_dsub>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4680      	mov	r8, r0
 800c866:	4689      	mov	r9, r1
 800c868:	4630      	mov	r0, r6
 800c86a:	4639      	mov	r1, r7
 800c86c:	f7f3 fd36 	bl	80002dc <__adddf3>
 800c870:	2000      	movs	r0, #0
 800c872:	4632      	mov	r2, r6
 800c874:	463b      	mov	r3, r7
 800c876:	4604      	mov	r4, r0
 800c878:	460d      	mov	r5, r1
 800c87a:	f7f3 fd2d 	bl	80002d8 <__aeabi_dsub>
 800c87e:	4602      	mov	r2, r0
 800c880:	460b      	mov	r3, r1
 800c882:	4640      	mov	r0, r8
 800c884:	4649      	mov	r1, r9
 800c886:	f7f3 fd27 	bl	80002d8 <__aeabi_dsub>
 800c88a:	9b04      	ldr	r3, [sp, #16]
 800c88c:	9a06      	ldr	r2, [sp, #24]
 800c88e:	3b01      	subs	r3, #1
 800c890:	4313      	orrs	r3, r2
 800c892:	4682      	mov	sl, r0
 800c894:	468b      	mov	fp, r1
 800c896:	f040 81e7 	bne.w	800cc68 <__ieee754_pow+0x700>
 800c89a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800c950 <__ieee754_pow+0x3e8>
 800c89e:	eeb0 8a47 	vmov.f32	s16, s14
 800c8a2:	eef0 8a67 	vmov.f32	s17, s15
 800c8a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c8aa:	2600      	movs	r6, #0
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8b4:	f7f3 fd10 	bl	80002d8 <__aeabi_dsub>
 800c8b8:	4622      	mov	r2, r4
 800c8ba:	462b      	mov	r3, r5
 800c8bc:	f7f3 fec4 	bl	8000648 <__aeabi_dmul>
 800c8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c8c4:	4680      	mov	r8, r0
 800c8c6:	4689      	mov	r9, r1
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	4659      	mov	r1, fp
 800c8cc:	f7f3 febc 	bl	8000648 <__aeabi_dmul>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	4640      	mov	r0, r8
 800c8d6:	4649      	mov	r1, r9
 800c8d8:	f7f3 fd00 	bl	80002dc <__adddf3>
 800c8dc:	4632      	mov	r2, r6
 800c8de:	463b      	mov	r3, r7
 800c8e0:	4680      	mov	r8, r0
 800c8e2:	4689      	mov	r9, r1
 800c8e4:	4620      	mov	r0, r4
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	f7f3 feae 	bl	8000648 <__aeabi_dmul>
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4604      	mov	r4, r0
 800c8f0:	460d      	mov	r5, r1
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	4649      	mov	r1, r9
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	f7f3 fcf0 	bl	80002dc <__adddf3>
 800c8fc:	4b19      	ldr	r3, [pc, #100]	; (800c964 <__ieee754_pow+0x3fc>)
 800c8fe:	4299      	cmp	r1, r3
 800c900:	ec45 4b19 	vmov	d9, r4, r5
 800c904:	4606      	mov	r6, r0
 800c906:	460f      	mov	r7, r1
 800c908:	468b      	mov	fp, r1
 800c90a:	f340 82f0 	ble.w	800ceee <__ieee754_pow+0x986>
 800c90e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800c912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800c916:	4303      	orrs	r3, r0
 800c918:	f000 81e4 	beq.w	800cce4 <__ieee754_pow+0x77c>
 800c91c:	ec51 0b18 	vmov	r0, r1, d8
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	f7f4 f902 	bl	8000b2c <__aeabi_dcmplt>
 800c928:	3800      	subs	r0, #0
 800c92a:	bf18      	it	ne
 800c92c:	2001      	movne	r0, #1
 800c92e:	e72b      	b.n	800c788 <__ieee754_pow+0x220>
 800c930:	60000000 	.word	0x60000000
 800c934:	3ff71547 	.word	0x3ff71547
 800c938:	f85ddf44 	.word	0xf85ddf44
 800c93c:	3e54ae0b 	.word	0x3e54ae0b
 800c940:	55555555 	.word	0x55555555
 800c944:	3fd55555 	.word	0x3fd55555
 800c948:	652b82fe 	.word	0x652b82fe
 800c94c:	3ff71547 	.word	0x3ff71547
 800c950:	00000000 	.word	0x00000000
 800c954:	bff00000 	.word	0xbff00000
 800c958:	3ff00000 	.word	0x3ff00000
 800c95c:	3fd00000 	.word	0x3fd00000
 800c960:	3fe00000 	.word	0x3fe00000
 800c964:	408fffff 	.word	0x408fffff
 800c968:	4bd5      	ldr	r3, [pc, #852]	; (800ccc0 <__ieee754_pow+0x758>)
 800c96a:	402b      	ands	r3, r5
 800c96c:	2200      	movs	r2, #0
 800c96e:	b92b      	cbnz	r3, 800c97c <__ieee754_pow+0x414>
 800c970:	4bd4      	ldr	r3, [pc, #848]	; (800ccc4 <__ieee754_pow+0x75c>)
 800c972:	f7f3 fe69 	bl	8000648 <__aeabi_dmul>
 800c976:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800c97a:	460c      	mov	r4, r1
 800c97c:	1523      	asrs	r3, r4, #20
 800c97e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c982:	4413      	add	r3, r2
 800c984:	9305      	str	r3, [sp, #20]
 800c986:	4bd0      	ldr	r3, [pc, #832]	; (800ccc8 <__ieee754_pow+0x760>)
 800c988:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c98c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800c990:	429c      	cmp	r4, r3
 800c992:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c996:	dd08      	ble.n	800c9aa <__ieee754_pow+0x442>
 800c998:	4bcc      	ldr	r3, [pc, #816]	; (800cccc <__ieee754_pow+0x764>)
 800c99a:	429c      	cmp	r4, r3
 800c99c:	f340 8162 	ble.w	800cc64 <__ieee754_pow+0x6fc>
 800c9a0:	9b05      	ldr	r3, [sp, #20]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	9305      	str	r3, [sp, #20]
 800c9a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800c9aa:	2400      	movs	r4, #0
 800c9ac:	00e3      	lsls	r3, r4, #3
 800c9ae:	9307      	str	r3, [sp, #28]
 800c9b0:	4bc7      	ldr	r3, [pc, #796]	; (800ccd0 <__ieee754_pow+0x768>)
 800c9b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c9b6:	ed93 7b00 	vldr	d7, [r3]
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	ec53 2b17 	vmov	r2, r3, d7
 800c9c0:	eeb0 9a47 	vmov.f32	s18, s14
 800c9c4:	eef0 9a67 	vmov.f32	s19, s15
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	f7f3 fc85 	bl	80002d8 <__aeabi_dsub>
 800c9ce:	4652      	mov	r2, sl
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	460f      	mov	r7, r1
 800c9d4:	462b      	mov	r3, r5
 800c9d6:	ec51 0b19 	vmov	r0, r1, d9
 800c9da:	f7f3 fc7f 	bl	80002dc <__adddf3>
 800c9de:	4602      	mov	r2, r0
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	2000      	movs	r0, #0
 800c9e4:	49bb      	ldr	r1, [pc, #748]	; (800ccd4 <__ieee754_pow+0x76c>)
 800c9e6:	f7f3 ff59 	bl	800089c <__aeabi_ddiv>
 800c9ea:	ec41 0b1a 	vmov	d10, r0, r1
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	4639      	mov	r1, r7
 800c9f6:	f7f3 fe27 	bl	8000648 <__aeabi_dmul>
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ca00:	9302      	str	r3, [sp, #8]
 800ca02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ca06:	46ab      	mov	fp, r5
 800ca08:	106d      	asrs	r5, r5, #1
 800ca0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ca0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ca12:	ec41 0b18 	vmov	d8, r0, r1
 800ca16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	4640      	mov	r0, r8
 800ca1e:	4649      	mov	r1, r9
 800ca20:	4614      	mov	r4, r2
 800ca22:	461d      	mov	r5, r3
 800ca24:	f7f3 fe10 	bl	8000648 <__aeabi_dmul>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	460b      	mov	r3, r1
 800ca2c:	4630      	mov	r0, r6
 800ca2e:	4639      	mov	r1, r7
 800ca30:	f7f3 fc52 	bl	80002d8 <__aeabi_dsub>
 800ca34:	ec53 2b19 	vmov	r2, r3, d9
 800ca38:	4606      	mov	r6, r0
 800ca3a:	460f      	mov	r7, r1
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f3 fc4a 	bl	80002d8 <__aeabi_dsub>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	4650      	mov	r0, sl
 800ca4a:	4659      	mov	r1, fp
 800ca4c:	f7f3 fc44 	bl	80002d8 <__aeabi_dsub>
 800ca50:	4642      	mov	r2, r8
 800ca52:	464b      	mov	r3, r9
 800ca54:	f7f3 fdf8 	bl	8000648 <__aeabi_dmul>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4639      	mov	r1, r7
 800ca60:	f7f3 fc3a 	bl	80002d8 <__aeabi_dsub>
 800ca64:	ec53 2b1a 	vmov	r2, r3, d10
 800ca68:	f7f3 fdee 	bl	8000648 <__aeabi_dmul>
 800ca6c:	ec53 2b18 	vmov	r2, r3, d8
 800ca70:	ec41 0b19 	vmov	d9, r0, r1
 800ca74:	ec51 0b18 	vmov	r0, r1, d8
 800ca78:	f7f3 fde6 	bl	8000648 <__aeabi_dmul>
 800ca7c:	a37c      	add	r3, pc, #496	; (adr r3, 800cc70 <__ieee754_pow+0x708>)
 800ca7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca82:	4604      	mov	r4, r0
 800ca84:	460d      	mov	r5, r1
 800ca86:	f7f3 fddf 	bl	8000648 <__aeabi_dmul>
 800ca8a:	a37b      	add	r3, pc, #492	; (adr r3, 800cc78 <__ieee754_pow+0x710>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fc24 	bl	80002dc <__adddf3>
 800ca94:	4622      	mov	r2, r4
 800ca96:	462b      	mov	r3, r5
 800ca98:	f7f3 fdd6 	bl	8000648 <__aeabi_dmul>
 800ca9c:	a378      	add	r3, pc, #480	; (adr r3, 800cc80 <__ieee754_pow+0x718>)
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f7f3 fc1b 	bl	80002dc <__adddf3>
 800caa6:	4622      	mov	r2, r4
 800caa8:	462b      	mov	r3, r5
 800caaa:	f7f3 fdcd 	bl	8000648 <__aeabi_dmul>
 800caae:	a376      	add	r3, pc, #472	; (adr r3, 800cc88 <__ieee754_pow+0x720>)
 800cab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab4:	f7f3 fc12 	bl	80002dc <__adddf3>
 800cab8:	4622      	mov	r2, r4
 800caba:	462b      	mov	r3, r5
 800cabc:	f7f3 fdc4 	bl	8000648 <__aeabi_dmul>
 800cac0:	a373      	add	r3, pc, #460	; (adr r3, 800cc90 <__ieee754_pow+0x728>)
 800cac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac6:	f7f3 fc09 	bl	80002dc <__adddf3>
 800caca:	4622      	mov	r2, r4
 800cacc:	462b      	mov	r3, r5
 800cace:	f7f3 fdbb 	bl	8000648 <__aeabi_dmul>
 800cad2:	a371      	add	r3, pc, #452	; (adr r3, 800cc98 <__ieee754_pow+0x730>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fc00 	bl	80002dc <__adddf3>
 800cadc:	4622      	mov	r2, r4
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	462b      	mov	r3, r5
 800cae4:	4620      	mov	r0, r4
 800cae6:	4629      	mov	r1, r5
 800cae8:	f7f3 fdae 	bl	8000648 <__aeabi_dmul>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4630      	mov	r0, r6
 800caf2:	4639      	mov	r1, r7
 800caf4:	f7f3 fda8 	bl	8000648 <__aeabi_dmul>
 800caf8:	4642      	mov	r2, r8
 800cafa:	4604      	mov	r4, r0
 800cafc:	460d      	mov	r5, r1
 800cafe:	464b      	mov	r3, r9
 800cb00:	ec51 0b18 	vmov	r0, r1, d8
 800cb04:	f7f3 fbea 	bl	80002dc <__adddf3>
 800cb08:	ec53 2b19 	vmov	r2, r3, d9
 800cb0c:	f7f3 fd9c 	bl	8000648 <__aeabi_dmul>
 800cb10:	4622      	mov	r2, r4
 800cb12:	462b      	mov	r3, r5
 800cb14:	f7f3 fbe2 	bl	80002dc <__adddf3>
 800cb18:	4642      	mov	r2, r8
 800cb1a:	4682      	mov	sl, r0
 800cb1c:	468b      	mov	fp, r1
 800cb1e:	464b      	mov	r3, r9
 800cb20:	4640      	mov	r0, r8
 800cb22:	4649      	mov	r1, r9
 800cb24:	f7f3 fd90 	bl	8000648 <__aeabi_dmul>
 800cb28:	4b6b      	ldr	r3, [pc, #428]	; (800ccd8 <__ieee754_pow+0x770>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	460f      	mov	r7, r1
 800cb30:	f7f3 fbd4 	bl	80002dc <__adddf3>
 800cb34:	4652      	mov	r2, sl
 800cb36:	465b      	mov	r3, fp
 800cb38:	f7f3 fbd0 	bl	80002dc <__adddf3>
 800cb3c:	2000      	movs	r0, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	460d      	mov	r5, r1
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4640      	mov	r0, r8
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f7f3 fd7d 	bl	8000648 <__aeabi_dmul>
 800cb4e:	4b62      	ldr	r3, [pc, #392]	; (800ccd8 <__ieee754_pow+0x770>)
 800cb50:	4680      	mov	r8, r0
 800cb52:	4689      	mov	r9, r1
 800cb54:	2200      	movs	r2, #0
 800cb56:	4620      	mov	r0, r4
 800cb58:	4629      	mov	r1, r5
 800cb5a:	f7f3 fbbd 	bl	80002d8 <__aeabi_dsub>
 800cb5e:	4632      	mov	r2, r6
 800cb60:	463b      	mov	r3, r7
 800cb62:	f7f3 fbb9 	bl	80002d8 <__aeabi_dsub>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	4650      	mov	r0, sl
 800cb6c:	4659      	mov	r1, fp
 800cb6e:	f7f3 fbb3 	bl	80002d8 <__aeabi_dsub>
 800cb72:	ec53 2b18 	vmov	r2, r3, d8
 800cb76:	f7f3 fd67 	bl	8000648 <__aeabi_dmul>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	4606      	mov	r6, r0
 800cb7e:	460f      	mov	r7, r1
 800cb80:	462b      	mov	r3, r5
 800cb82:	ec51 0b19 	vmov	r0, r1, d9
 800cb86:	f7f3 fd5f 	bl	8000648 <__aeabi_dmul>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4630      	mov	r0, r6
 800cb90:	4639      	mov	r1, r7
 800cb92:	f7f3 fba3 	bl	80002dc <__adddf3>
 800cb96:	4606      	mov	r6, r0
 800cb98:	460f      	mov	r7, r1
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4640      	mov	r0, r8
 800cba0:	4649      	mov	r1, r9
 800cba2:	f7f3 fb9b 	bl	80002dc <__adddf3>
 800cba6:	a33e      	add	r3, pc, #248	; (adr r3, 800cca0 <__ieee754_pow+0x738>)
 800cba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbac:	2000      	movs	r0, #0
 800cbae:	4604      	mov	r4, r0
 800cbb0:	460d      	mov	r5, r1
 800cbb2:	f7f3 fd49 	bl	8000648 <__aeabi_dmul>
 800cbb6:	4642      	mov	r2, r8
 800cbb8:	ec41 0b18 	vmov	d8, r0, r1
 800cbbc:	464b      	mov	r3, r9
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f7f3 fb89 	bl	80002d8 <__aeabi_dsub>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4630      	mov	r0, r6
 800cbcc:	4639      	mov	r1, r7
 800cbce:	f7f3 fb83 	bl	80002d8 <__aeabi_dsub>
 800cbd2:	a335      	add	r3, pc, #212	; (adr r3, 800cca8 <__ieee754_pow+0x740>)
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	f7f3 fd36 	bl	8000648 <__aeabi_dmul>
 800cbdc:	a334      	add	r3, pc, #208	; (adr r3, 800ccb0 <__ieee754_pow+0x748>)
 800cbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe2:	4606      	mov	r6, r0
 800cbe4:	460f      	mov	r7, r1
 800cbe6:	4620      	mov	r0, r4
 800cbe8:	4629      	mov	r1, r5
 800cbea:	f7f3 fd2d 	bl	8000648 <__aeabi_dmul>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	4630      	mov	r0, r6
 800cbf4:	4639      	mov	r1, r7
 800cbf6:	f7f3 fb71 	bl	80002dc <__adddf3>
 800cbfa:	9a07      	ldr	r2, [sp, #28]
 800cbfc:	4b37      	ldr	r3, [pc, #220]	; (800ccdc <__ieee754_pow+0x774>)
 800cbfe:	4413      	add	r3, r2
 800cc00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc04:	f7f3 fb6a 	bl	80002dc <__adddf3>
 800cc08:	4682      	mov	sl, r0
 800cc0a:	9805      	ldr	r0, [sp, #20]
 800cc0c:	468b      	mov	fp, r1
 800cc0e:	f7f3 fcb1 	bl	8000574 <__aeabi_i2d>
 800cc12:	9a07      	ldr	r2, [sp, #28]
 800cc14:	4b32      	ldr	r3, [pc, #200]	; (800cce0 <__ieee754_pow+0x778>)
 800cc16:	4413      	add	r3, r2
 800cc18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc1c:	4606      	mov	r6, r0
 800cc1e:	460f      	mov	r7, r1
 800cc20:	4652      	mov	r2, sl
 800cc22:	465b      	mov	r3, fp
 800cc24:	ec51 0b18 	vmov	r0, r1, d8
 800cc28:	f7f3 fb58 	bl	80002dc <__adddf3>
 800cc2c:	4642      	mov	r2, r8
 800cc2e:	464b      	mov	r3, r9
 800cc30:	f7f3 fb54 	bl	80002dc <__adddf3>
 800cc34:	4632      	mov	r2, r6
 800cc36:	463b      	mov	r3, r7
 800cc38:	f7f3 fb50 	bl	80002dc <__adddf3>
 800cc3c:	2000      	movs	r0, #0
 800cc3e:	4632      	mov	r2, r6
 800cc40:	463b      	mov	r3, r7
 800cc42:	4604      	mov	r4, r0
 800cc44:	460d      	mov	r5, r1
 800cc46:	f7f3 fb47 	bl	80002d8 <__aeabi_dsub>
 800cc4a:	4642      	mov	r2, r8
 800cc4c:	464b      	mov	r3, r9
 800cc4e:	f7f3 fb43 	bl	80002d8 <__aeabi_dsub>
 800cc52:	ec53 2b18 	vmov	r2, r3, d8
 800cc56:	f7f3 fb3f 	bl	80002d8 <__aeabi_dsub>
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	460b      	mov	r3, r1
 800cc5e:	4650      	mov	r0, sl
 800cc60:	4659      	mov	r1, fp
 800cc62:	e610      	b.n	800c886 <__ieee754_pow+0x31e>
 800cc64:	2401      	movs	r4, #1
 800cc66:	e6a1      	b.n	800c9ac <__ieee754_pow+0x444>
 800cc68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ccb8 <__ieee754_pow+0x750>
 800cc6c:	e617      	b.n	800c89e <__ieee754_pow+0x336>
 800cc6e:	bf00      	nop
 800cc70:	4a454eef 	.word	0x4a454eef
 800cc74:	3fca7e28 	.word	0x3fca7e28
 800cc78:	93c9db65 	.word	0x93c9db65
 800cc7c:	3fcd864a 	.word	0x3fcd864a
 800cc80:	a91d4101 	.word	0xa91d4101
 800cc84:	3fd17460 	.word	0x3fd17460
 800cc88:	518f264d 	.word	0x518f264d
 800cc8c:	3fd55555 	.word	0x3fd55555
 800cc90:	db6fabff 	.word	0xdb6fabff
 800cc94:	3fdb6db6 	.word	0x3fdb6db6
 800cc98:	33333303 	.word	0x33333303
 800cc9c:	3fe33333 	.word	0x3fe33333
 800cca0:	e0000000 	.word	0xe0000000
 800cca4:	3feec709 	.word	0x3feec709
 800cca8:	dc3a03fd 	.word	0xdc3a03fd
 800ccac:	3feec709 	.word	0x3feec709
 800ccb0:	145b01f5 	.word	0x145b01f5
 800ccb4:	be3e2fe0 	.word	0xbe3e2fe0
 800ccb8:	00000000 	.word	0x00000000
 800ccbc:	3ff00000 	.word	0x3ff00000
 800ccc0:	7ff00000 	.word	0x7ff00000
 800ccc4:	43400000 	.word	0x43400000
 800ccc8:	0003988e 	.word	0x0003988e
 800cccc:	000bb679 	.word	0x000bb679
 800ccd0:	0800d570 	.word	0x0800d570
 800ccd4:	3ff00000 	.word	0x3ff00000
 800ccd8:	40080000 	.word	0x40080000
 800ccdc:	0800d590 	.word	0x0800d590
 800cce0:	0800d580 	.word	0x0800d580
 800cce4:	a3b3      	add	r3, pc, #716	; (adr r3, 800cfb4 <__ieee754_pow+0xa4c>)
 800cce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccea:	4640      	mov	r0, r8
 800ccec:	4649      	mov	r1, r9
 800ccee:	f7f3 faf5 	bl	80002dc <__adddf3>
 800ccf2:	4622      	mov	r2, r4
 800ccf4:	ec41 0b1a 	vmov	d10, r0, r1
 800ccf8:	462b      	mov	r3, r5
 800ccfa:	4630      	mov	r0, r6
 800ccfc:	4639      	mov	r1, r7
 800ccfe:	f7f3 faeb 	bl	80002d8 <__aeabi_dsub>
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	ec51 0b1a 	vmov	r0, r1, d10
 800cd0a:	f7f3 ff2d 	bl	8000b68 <__aeabi_dcmpgt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	f47f ae04 	bne.w	800c91c <__ieee754_pow+0x3b4>
 800cd14:	4aa2      	ldr	r2, [pc, #648]	; (800cfa0 <__ieee754_pow+0xa38>)
 800cd16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	f340 8107 	ble.w	800cf2e <__ieee754_pow+0x9c6>
 800cd20:	151b      	asrs	r3, r3, #20
 800cd22:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cd26:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cd2a:	fa4a fa03 	asr.w	sl, sl, r3
 800cd2e:	44da      	add	sl, fp
 800cd30:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800cd34:	489b      	ldr	r0, [pc, #620]	; (800cfa4 <__ieee754_pow+0xa3c>)
 800cd36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cd3a:	4108      	asrs	r0, r1
 800cd3c:	ea00 030a 	and.w	r3, r0, sl
 800cd40:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800cd44:	f1c1 0114 	rsb	r1, r1, #20
 800cd48:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cd4c:	fa4a fa01 	asr.w	sl, sl, r1
 800cd50:	f1bb 0f00 	cmp.w	fp, #0
 800cd54:	f04f 0200 	mov.w	r2, #0
 800cd58:	4620      	mov	r0, r4
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	bfb8      	it	lt
 800cd5e:	f1ca 0a00 	rsblt	sl, sl, #0
 800cd62:	f7f3 fab9 	bl	80002d8 <__aeabi_dsub>
 800cd66:	ec41 0b19 	vmov	d9, r0, r1
 800cd6a:	4642      	mov	r2, r8
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	ec51 0b19 	vmov	r0, r1, d9
 800cd72:	f7f3 fab3 	bl	80002dc <__adddf3>
 800cd76:	a37a      	add	r3, pc, #488	; (adr r3, 800cf60 <__ieee754_pow+0x9f8>)
 800cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd7c:	2000      	movs	r0, #0
 800cd7e:	4604      	mov	r4, r0
 800cd80:	460d      	mov	r5, r1
 800cd82:	f7f3 fc61 	bl	8000648 <__aeabi_dmul>
 800cd86:	ec53 2b19 	vmov	r2, r3, d9
 800cd8a:	4606      	mov	r6, r0
 800cd8c:	460f      	mov	r7, r1
 800cd8e:	4620      	mov	r0, r4
 800cd90:	4629      	mov	r1, r5
 800cd92:	f7f3 faa1 	bl	80002d8 <__aeabi_dsub>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	4640      	mov	r0, r8
 800cd9c:	4649      	mov	r1, r9
 800cd9e:	f7f3 fa9b 	bl	80002d8 <__aeabi_dsub>
 800cda2:	a371      	add	r3, pc, #452	; (adr r3, 800cf68 <__ieee754_pow+0xa00>)
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	f7f3 fc4e 	bl	8000648 <__aeabi_dmul>
 800cdac:	a370      	add	r3, pc, #448	; (adr r3, 800cf70 <__ieee754_pow+0xa08>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	4680      	mov	r8, r0
 800cdb4:	4689      	mov	r9, r1
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	4629      	mov	r1, r5
 800cdba:	f7f3 fc45 	bl	8000648 <__aeabi_dmul>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	4640      	mov	r0, r8
 800cdc4:	4649      	mov	r1, r9
 800cdc6:	f7f3 fa89 	bl	80002dc <__adddf3>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	460d      	mov	r5, r1
 800cdce:	4602      	mov	r2, r0
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	4630      	mov	r0, r6
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	f7f3 fa81 	bl	80002dc <__adddf3>
 800cdda:	4632      	mov	r2, r6
 800cddc:	463b      	mov	r3, r7
 800cdde:	4680      	mov	r8, r0
 800cde0:	4689      	mov	r9, r1
 800cde2:	f7f3 fa79 	bl	80002d8 <__aeabi_dsub>
 800cde6:	4602      	mov	r2, r0
 800cde8:	460b      	mov	r3, r1
 800cdea:	4620      	mov	r0, r4
 800cdec:	4629      	mov	r1, r5
 800cdee:	f7f3 fa73 	bl	80002d8 <__aeabi_dsub>
 800cdf2:	4642      	mov	r2, r8
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	460f      	mov	r7, r1
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	4640      	mov	r0, r8
 800cdfc:	4649      	mov	r1, r9
 800cdfe:	f7f3 fc23 	bl	8000648 <__aeabi_dmul>
 800ce02:	a35d      	add	r3, pc, #372	; (adr r3, 800cf78 <__ieee754_pow+0xa10>)
 800ce04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce08:	4604      	mov	r4, r0
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	f7f3 fc1c 	bl	8000648 <__aeabi_dmul>
 800ce10:	a35b      	add	r3, pc, #364	; (adr r3, 800cf80 <__ieee754_pow+0xa18>)
 800ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce16:	f7f3 fa5f 	bl	80002d8 <__aeabi_dsub>
 800ce1a:	4622      	mov	r2, r4
 800ce1c:	462b      	mov	r3, r5
 800ce1e:	f7f3 fc13 	bl	8000648 <__aeabi_dmul>
 800ce22:	a359      	add	r3, pc, #356	; (adr r3, 800cf88 <__ieee754_pow+0xa20>)
 800ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce28:	f7f3 fa58 	bl	80002dc <__adddf3>
 800ce2c:	4622      	mov	r2, r4
 800ce2e:	462b      	mov	r3, r5
 800ce30:	f7f3 fc0a 	bl	8000648 <__aeabi_dmul>
 800ce34:	a356      	add	r3, pc, #344	; (adr r3, 800cf90 <__ieee754_pow+0xa28>)
 800ce36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3a:	f7f3 fa4d 	bl	80002d8 <__aeabi_dsub>
 800ce3e:	4622      	mov	r2, r4
 800ce40:	462b      	mov	r3, r5
 800ce42:	f7f3 fc01 	bl	8000648 <__aeabi_dmul>
 800ce46:	a354      	add	r3, pc, #336	; (adr r3, 800cf98 <__ieee754_pow+0xa30>)
 800ce48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4c:	f7f3 fa46 	bl	80002dc <__adddf3>
 800ce50:	4622      	mov	r2, r4
 800ce52:	462b      	mov	r3, r5
 800ce54:	f7f3 fbf8 	bl	8000648 <__aeabi_dmul>
 800ce58:	4602      	mov	r2, r0
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	4640      	mov	r0, r8
 800ce5e:	4649      	mov	r1, r9
 800ce60:	f7f3 fa3a 	bl	80002d8 <__aeabi_dsub>
 800ce64:	4604      	mov	r4, r0
 800ce66:	460d      	mov	r5, r1
 800ce68:	4602      	mov	r2, r0
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	4640      	mov	r0, r8
 800ce6e:	4649      	mov	r1, r9
 800ce70:	f7f3 fbea 	bl	8000648 <__aeabi_dmul>
 800ce74:	2200      	movs	r2, #0
 800ce76:	ec41 0b19 	vmov	d9, r0, r1
 800ce7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fa29 	bl	80002d8 <__aeabi_dsub>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	ec51 0b19 	vmov	r0, r1, d9
 800ce8e:	f7f3 fd05 	bl	800089c <__aeabi_ddiv>
 800ce92:	4632      	mov	r2, r6
 800ce94:	4604      	mov	r4, r0
 800ce96:	460d      	mov	r5, r1
 800ce98:	463b      	mov	r3, r7
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	f7f3 fbd3 	bl	8000648 <__aeabi_dmul>
 800cea2:	4632      	mov	r2, r6
 800cea4:	463b      	mov	r3, r7
 800cea6:	f7f3 fa19 	bl	80002dc <__adddf3>
 800ceaa:	4602      	mov	r2, r0
 800ceac:	460b      	mov	r3, r1
 800ceae:	4620      	mov	r0, r4
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	f7f3 fa11 	bl	80002d8 <__aeabi_dsub>
 800ceb6:	4642      	mov	r2, r8
 800ceb8:	464b      	mov	r3, r9
 800ceba:	f7f3 fa0d 	bl	80002d8 <__aeabi_dsub>
 800cebe:	460b      	mov	r3, r1
 800cec0:	4602      	mov	r2, r0
 800cec2:	4939      	ldr	r1, [pc, #228]	; (800cfa8 <__ieee754_pow+0xa40>)
 800cec4:	2000      	movs	r0, #0
 800cec6:	f7f3 fa07 	bl	80002d8 <__aeabi_dsub>
 800ceca:	ec41 0b10 	vmov	d0, r0, r1
 800cece:	ee10 3a90 	vmov	r3, s1
 800ced2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ced6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ceda:	da2b      	bge.n	800cf34 <__ieee754_pow+0x9cc>
 800cedc:	4650      	mov	r0, sl
 800cede:	f000 f877 	bl	800cfd0 <scalbn>
 800cee2:	ec51 0b10 	vmov	r0, r1, d0
 800cee6:	ec53 2b18 	vmov	r2, r3, d8
 800ceea:	f7ff bbee 	b.w	800c6ca <__ieee754_pow+0x162>
 800ceee:	4b2f      	ldr	r3, [pc, #188]	; (800cfac <__ieee754_pow+0xa44>)
 800cef0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800cef4:	429e      	cmp	r6, r3
 800cef6:	f77f af0d 	ble.w	800cd14 <__ieee754_pow+0x7ac>
 800cefa:	4b2d      	ldr	r3, [pc, #180]	; (800cfb0 <__ieee754_pow+0xa48>)
 800cefc:	440b      	add	r3, r1
 800cefe:	4303      	orrs	r3, r0
 800cf00:	d009      	beq.n	800cf16 <__ieee754_pow+0x9ae>
 800cf02:	ec51 0b18 	vmov	r0, r1, d8
 800cf06:	2200      	movs	r2, #0
 800cf08:	2300      	movs	r3, #0
 800cf0a:	f7f3 fe0f 	bl	8000b2c <__aeabi_dcmplt>
 800cf0e:	3800      	subs	r0, #0
 800cf10:	bf18      	it	ne
 800cf12:	2001      	movne	r0, #1
 800cf14:	e448      	b.n	800c7a8 <__ieee754_pow+0x240>
 800cf16:	4622      	mov	r2, r4
 800cf18:	462b      	mov	r3, r5
 800cf1a:	f7f3 f9dd 	bl	80002d8 <__aeabi_dsub>
 800cf1e:	4642      	mov	r2, r8
 800cf20:	464b      	mov	r3, r9
 800cf22:	f7f3 fe17 	bl	8000b54 <__aeabi_dcmpge>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f43f aef4 	beq.w	800cd14 <__ieee754_pow+0x7ac>
 800cf2c:	e7e9      	b.n	800cf02 <__ieee754_pow+0x99a>
 800cf2e:	f04f 0a00 	mov.w	sl, #0
 800cf32:	e71a      	b.n	800cd6a <__ieee754_pow+0x802>
 800cf34:	ec51 0b10 	vmov	r0, r1, d0
 800cf38:	4619      	mov	r1, r3
 800cf3a:	e7d4      	b.n	800cee6 <__ieee754_pow+0x97e>
 800cf3c:	491a      	ldr	r1, [pc, #104]	; (800cfa8 <__ieee754_pow+0xa40>)
 800cf3e:	2000      	movs	r0, #0
 800cf40:	f7ff bb31 	b.w	800c5a6 <__ieee754_pow+0x3e>
 800cf44:	2000      	movs	r0, #0
 800cf46:	2100      	movs	r1, #0
 800cf48:	f7ff bb2d 	b.w	800c5a6 <__ieee754_pow+0x3e>
 800cf4c:	4630      	mov	r0, r6
 800cf4e:	4639      	mov	r1, r7
 800cf50:	f7ff bb29 	b.w	800c5a6 <__ieee754_pow+0x3e>
 800cf54:	9204      	str	r2, [sp, #16]
 800cf56:	f7ff bb7b 	b.w	800c650 <__ieee754_pow+0xe8>
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f7ff bb65 	b.w	800c62a <__ieee754_pow+0xc2>
 800cf60:	00000000 	.word	0x00000000
 800cf64:	3fe62e43 	.word	0x3fe62e43
 800cf68:	fefa39ef 	.word	0xfefa39ef
 800cf6c:	3fe62e42 	.word	0x3fe62e42
 800cf70:	0ca86c39 	.word	0x0ca86c39
 800cf74:	be205c61 	.word	0xbe205c61
 800cf78:	72bea4d0 	.word	0x72bea4d0
 800cf7c:	3e663769 	.word	0x3e663769
 800cf80:	c5d26bf1 	.word	0xc5d26bf1
 800cf84:	3ebbbd41 	.word	0x3ebbbd41
 800cf88:	af25de2c 	.word	0xaf25de2c
 800cf8c:	3f11566a 	.word	0x3f11566a
 800cf90:	16bebd93 	.word	0x16bebd93
 800cf94:	3f66c16c 	.word	0x3f66c16c
 800cf98:	5555553e 	.word	0x5555553e
 800cf9c:	3fc55555 	.word	0x3fc55555
 800cfa0:	3fe00000 	.word	0x3fe00000
 800cfa4:	fff00000 	.word	0xfff00000
 800cfa8:	3ff00000 	.word	0x3ff00000
 800cfac:	4090cbff 	.word	0x4090cbff
 800cfb0:	3f6f3400 	.word	0x3f6f3400
 800cfb4:	652b82fe 	.word	0x652b82fe
 800cfb8:	3c971547 	.word	0x3c971547

0800cfbc <fabs>:
 800cfbc:	ec51 0b10 	vmov	r0, r1, d0
 800cfc0:	ee10 2a10 	vmov	r2, s0
 800cfc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cfc8:	ec43 2b10 	vmov	d0, r2, r3
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <scalbn>:
 800cfd0:	b570      	push	{r4, r5, r6, lr}
 800cfd2:	ec55 4b10 	vmov	r4, r5, d0
 800cfd6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cfda:	4606      	mov	r6, r0
 800cfdc:	462b      	mov	r3, r5
 800cfde:	b999      	cbnz	r1, 800d008 <scalbn+0x38>
 800cfe0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cfe4:	4323      	orrs	r3, r4
 800cfe6:	d03f      	beq.n	800d068 <scalbn+0x98>
 800cfe8:	4b35      	ldr	r3, [pc, #212]	; (800d0c0 <scalbn+0xf0>)
 800cfea:	4629      	mov	r1, r5
 800cfec:	ee10 0a10 	vmov	r0, s0
 800cff0:	2200      	movs	r2, #0
 800cff2:	f7f3 fb29 	bl	8000648 <__aeabi_dmul>
 800cff6:	4b33      	ldr	r3, [pc, #204]	; (800d0c4 <scalbn+0xf4>)
 800cff8:	429e      	cmp	r6, r3
 800cffa:	4604      	mov	r4, r0
 800cffc:	460d      	mov	r5, r1
 800cffe:	da10      	bge.n	800d022 <scalbn+0x52>
 800d000:	a327      	add	r3, pc, #156	; (adr r3, 800d0a0 <scalbn+0xd0>)
 800d002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d006:	e01f      	b.n	800d048 <scalbn+0x78>
 800d008:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800d00c:	4291      	cmp	r1, r2
 800d00e:	d10c      	bne.n	800d02a <scalbn+0x5a>
 800d010:	ee10 2a10 	vmov	r2, s0
 800d014:	4620      	mov	r0, r4
 800d016:	4629      	mov	r1, r5
 800d018:	f7f3 f960 	bl	80002dc <__adddf3>
 800d01c:	4604      	mov	r4, r0
 800d01e:	460d      	mov	r5, r1
 800d020:	e022      	b.n	800d068 <scalbn+0x98>
 800d022:	460b      	mov	r3, r1
 800d024:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d028:	3936      	subs	r1, #54	; 0x36
 800d02a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800d02e:	4296      	cmp	r6, r2
 800d030:	dd0d      	ble.n	800d04e <scalbn+0x7e>
 800d032:	2d00      	cmp	r5, #0
 800d034:	a11c      	add	r1, pc, #112	; (adr r1, 800d0a8 <scalbn+0xd8>)
 800d036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d03a:	da02      	bge.n	800d042 <scalbn+0x72>
 800d03c:	a11c      	add	r1, pc, #112	; (adr r1, 800d0b0 <scalbn+0xe0>)
 800d03e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d042:	a319      	add	r3, pc, #100	; (adr r3, 800d0a8 <scalbn+0xd8>)
 800d044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d048:	f7f3 fafe 	bl	8000648 <__aeabi_dmul>
 800d04c:	e7e6      	b.n	800d01c <scalbn+0x4c>
 800d04e:	1872      	adds	r2, r6, r1
 800d050:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d054:	428a      	cmp	r2, r1
 800d056:	dcec      	bgt.n	800d032 <scalbn+0x62>
 800d058:	2a00      	cmp	r2, #0
 800d05a:	dd08      	ble.n	800d06e <scalbn+0x9e>
 800d05c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d068:	ec45 4b10 	vmov	d0, r4, r5
 800d06c:	bd70      	pop	{r4, r5, r6, pc}
 800d06e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d072:	da08      	bge.n	800d086 <scalbn+0xb6>
 800d074:	2d00      	cmp	r5, #0
 800d076:	a10a      	add	r1, pc, #40	; (adr r1, 800d0a0 <scalbn+0xd0>)
 800d078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d07c:	dac0      	bge.n	800d000 <scalbn+0x30>
 800d07e:	a10e      	add	r1, pc, #56	; (adr r1, 800d0b8 <scalbn+0xe8>)
 800d080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d084:	e7bc      	b.n	800d000 <scalbn+0x30>
 800d086:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d08a:	3236      	adds	r2, #54	; 0x36
 800d08c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d090:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d094:	4620      	mov	r0, r4
 800d096:	4b0c      	ldr	r3, [pc, #48]	; (800d0c8 <scalbn+0xf8>)
 800d098:	2200      	movs	r2, #0
 800d09a:	e7d5      	b.n	800d048 <scalbn+0x78>
 800d09c:	f3af 8000 	nop.w
 800d0a0:	c2f8f359 	.word	0xc2f8f359
 800d0a4:	01a56e1f 	.word	0x01a56e1f
 800d0a8:	8800759c 	.word	0x8800759c
 800d0ac:	7e37e43c 	.word	0x7e37e43c
 800d0b0:	8800759c 	.word	0x8800759c
 800d0b4:	fe37e43c 	.word	0xfe37e43c
 800d0b8:	c2f8f359 	.word	0xc2f8f359
 800d0bc:	81a56e1f 	.word	0x81a56e1f
 800d0c0:	43500000 	.word	0x43500000
 800d0c4:	ffff3cb0 	.word	0xffff3cb0
 800d0c8:	3c900000 	.word	0x3c900000

0800d0cc <with_errno>:
 800d0cc:	b570      	push	{r4, r5, r6, lr}
 800d0ce:	4604      	mov	r4, r0
 800d0d0:	460d      	mov	r5, r1
 800d0d2:	4616      	mov	r6, r2
 800d0d4:	f7fd fa58 	bl	800a588 <__errno>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	6006      	str	r6, [r0, #0]
 800d0dc:	4620      	mov	r0, r4
 800d0de:	bd70      	pop	{r4, r5, r6, pc}

0800d0e0 <xflow>:
 800d0e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0e2:	4614      	mov	r4, r2
 800d0e4:	461d      	mov	r5, r3
 800d0e6:	b108      	cbz	r0, 800d0ec <xflow+0xc>
 800d0e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d0ec:	e9cd 2300 	strd	r2, r3, [sp]
 800d0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	f7f3 faa6 	bl	8000648 <__aeabi_dmul>
 800d0fc:	2222      	movs	r2, #34	; 0x22
 800d0fe:	b003      	add	sp, #12
 800d100:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d104:	f7ff bfe2 	b.w	800d0cc <with_errno>

0800d108 <__math_uflow>:
 800d108:	b508      	push	{r3, lr}
 800d10a:	2200      	movs	r2, #0
 800d10c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d110:	f7ff ffe6 	bl	800d0e0 <xflow>
 800d114:	ec41 0b10 	vmov	d0, r0, r1
 800d118:	bd08      	pop	{r3, pc}

0800d11a <__math_oflow>:
 800d11a:	b508      	push	{r3, lr}
 800d11c:	2200      	movs	r2, #0
 800d11e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d122:	f7ff ffdd 	bl	800d0e0 <xflow>
 800d126:	ec41 0b10 	vmov	d0, r0, r1
 800d12a:	bd08      	pop	{r3, pc}

0800d12c <_init>:
 800d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12e:	bf00      	nop
 800d130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d132:	bc08      	pop	{r3}
 800d134:	469e      	mov	lr, r3
 800d136:	4770      	bx	lr

0800d138 <_fini>:
 800d138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d13a:	bf00      	nop
 800d13c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d13e:	bc08      	pop	{r3}
 800d140:	469e      	mov	lr, r3
 800d142:	4770      	bx	lr
